-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lsvaqr.*) AS annotation
  from master_join master_join_iippmq
  join notes.note_view notes_note_view_lsvaqr on master_join_iippmq.target_id = notes_note_view_lsvaqr.id
  where master_join_iippmq.source_id = shared.aircraftcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_ztyuzg.id) as lat_criticalridge
  from master_join master_join_rarpmo
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_ztyuzg on master_join_rarpmo.target_id = airport_heliport_ridge_pt_ztyuzg.id
  where master_join_rarpmo.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_cvynjc.id) as lat_layer
  from master_join master_join_ldnbhj
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_cvynjc on master_join_ldnbhj.target_id = airport_heliport_surfacecontaminationlayer_pt_cvynjc.id
  where master_join_ldnbhj.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_flykrc.*) AS annotation
  from master_join master_join_jezjrq
  join notes.note_view notes_note_view_flykrc on master_join_jezjrq.target_id = notes_note_view_flykrc.id
  where master_join_jezjrq.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_qmmbzi.id) as lat_criticalridge
  from master_join master_join_loggwu
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_qmmbzi on master_join_loggwu.target_id = airport_heliport_ridge_pt_qmmbzi.id
  where master_join_loggwu.source_id = airport_heliport.airportheliportcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_rpiljg.id) as lat_layer
  from master_join master_join_rlifsf
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_rpiljg on master_join_rlifsf.target_id = airport_heliport_surfacecontaminationlayer_pt_rpiljg.id
  where master_join_rlifsf.source_id = airport_heliport.airportheliportcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kodjpz.*) AS annotation
  from master_join master_join_ynbqvz
  join notes.note_view notes_note_view_kodjpz on master_join_ynbqvz.target_id = notes_note_view_kodjpz.id
  where master_join_ynbqvz.source_id = airport_heliport.airportheliportcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_cftokh.id) AS theairspacevolume,
    lat_annotation.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_cftokh on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_cftokh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wnnmpl.*) AS annotation
  from master_join master_join_awhtfj
  join notes.note_view notes_note_view_wnnmpl on master_join_awhtfj.target_id = notes_note_view_wnnmpl.id
  where master_join_awhtfj.source_id = airspace.airspacegeometrycomponent.id
) as lat_annotation on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_adfawo.title as varchar), '(' || shared_standardlevelcolumn_pt_adfawo.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_adfawo.href AS discretelevelseries_href,
    lat_annotation.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_adfawo on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_adfawo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wwquzb.*) AS annotation
  from master_join master_join_nonwvq
  join notes.note_view notes_note_view_wwquzb on master_join_nonwvq.target_id = notes_note_view_wwquzb.id
  where master_join_nonwvq.source_id = shared.airspacelayer.id
) as lat_annotation on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_hfnqas.title as varchar), '(' || airspace_airspace_pt_hfnqas.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_hfnqas.href AS theairspace_href,
    lat_annotation.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_hfnqas on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_hfnqas.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ddbdab.*) AS annotation
  from master_join master_join_tyfunw
  join notes.note_view notes_note_view_ddbdab on master_join_tyfunw.target_id = notes_note_view_ddbdab.id
  where master_join_tyfunw.source_id = airspace.airspacevolumedependency.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    lat_annotation.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gghqxk.*) AS annotation
  from master_join master_join_vlqviw
  join notes.note_view notes_note_view_gghqxk on master_join_vlqviw.target_id = notes_note_view_gghqxk.id
  where master_join_vlqviw.source_id = shared.altitudeadjustment.id
) as lat_annotation on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_bjklcv.title as varchar), '(' || navaids_points_angleindication_pt_bjklcv.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_bjklcv.href AS theangleindication_href,
    lat_annotation.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_bjklcv on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_bjklcv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ovnpyi.*) AS annotation
  from master_join master_join_vnsyea
  join notes.note_view notes_note_view_ovnpyi on master_join_vnsyea.target_id = notes_note_view_ovnpyi.id
  where master_join_vnsyea.source_id = navaids_points.angleuse.id
) as lat_annotation on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    lat_annotation.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ftkcjk.*) AS annotation
  from master_join master_join_ehlrak
  join notes.note_view notes_note_view_ftkcjk on master_join_ehlrak.target_id = notes_note_view_ftkcjk.id
  where master_join_ehlrak.source_id = procedure.approachaltitudetable.id
) as lat_annotation on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    to_jsonb(procedure_minima_pt_wunbwk.id) AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_vhcfnm.title as varchar), '(' || airport_heliport_altimetersource_pt_vhcfnm.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_vhcfnm.href AS altimeter_href,
    lat_circlingrestriction.lat_circlingrestriction as circlingrestriction,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_landingarea.lat_landingarea as landingarea,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_wunbwk on procedure.approachcondition.minimumset_id = procedure_minima_pt_wunbwk.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_vhcfnm on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_vhcfnm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_pt_ieevwr.id) as lat_circlingrestriction
  from master_join master_join_wnockv
  join procedure.circlingrestriction_pt procedure_circlingrestriction_pt_ieevwr on master_join_wnockv.target_id = procedure_circlingrestriction_pt_ieevwr.id
  where master_join_wnockv.source_id = procedure.approachcondition.id
) as lat_circlingrestriction on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_kqpbke.id) as lat_aircraftcategory
  from master_join master_join_elskst
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_kqpbke on master_join_elskst.target_id = shared_aircraftcharacteristic_pt_kqpbke.id
  where master_join_elskst.source_id = procedure.approachcondition.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_pt_osatts.id) as lat_landingarea
  from master_join master_join_sgwlqq
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_osatts on master_join_sgwlqq.target_id = procedure_landingtakeoffareacollection_pt_osatts.id
  where master_join_sgwlqq.source_id = procedure.approachcondition.id
) as lat_landingarea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_pt_pbueyv.id) as lat_designsurface
  from master_join master_join_pwupah
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_pt_pbueyv on master_join_pwupah.target_id = shared_obstacleassessmentarea_pt_pbueyv.id
  where master_join_pwupah.source_id = procedure.approachcondition.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pqzdbm.*) AS annotation
  from master_join master_join_hnqjkc
  join notes.note_view notes_note_view_pqzdbm on master_join_hnqjkc.target_id = notes_note_view_pqzdbm.id
  where master_join_hnqjkc.source_id = procedure.approachcondition.id
) as lat_annotation on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    lat_annotation.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_artjyj.*) AS annotation
  from master_join master_join_fgpnkq
  join notes.note_view notes_note_view_artjyj on master_join_fgpnkq.target_id = notes_note_view_artjyj.id
  where master_join_fgpnkq.source_id = procedure.approachdistancetable.id
) as lat_annotation on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zbmtdz.*) AS annotation
  from master_join master_join_rpenjr
  join notes.note_view notes_note_view_zbmtdz on master_join_rpenjr.target_id = notes_note_view_zbmtdz.id
  where master_join_rpenjr.source_id = procedure.approachtimingtable.id
) as lat_annotation on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_xrinze.id) as lat_criticalridge
  from master_join master_join_xfhosj
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_xrinze on master_join_xfhosj.target_id = airport_heliport_ridge_pt_xrinze.id
  where master_join_xfhosj.source_id = airport_heliport.aproncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_zjzsxk.id) as lat_layer
  from master_join master_join_dydbtb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_zjzsxk on master_join_dydbtb.target_id = airport_heliport_surfacecontaminationlayer_pt_zjzsxk.id
  where master_join_dydbtb.source_id = airport_heliport.aproncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ryoeyz.*) AS annotation
  from master_join master_join_yctvat
  join notes.note_view notes_note_view_ryoeyz on master_join_yctvat.target_id = notes_note_view_ryoeyz.id
  where master_join_yctvat.source_id = airport_heliport.aproncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_mhshsn.title as varchar), '(' || organisation_organisationauthority_pt_mhshsn.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_mhshsn.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mhshsn on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_mhshsn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qalvac.*) AS annotation
  from master_join master_join_dakqlu
  join notes.note_view notes_note_view_qalvac on master_join_dakqlu.target_id = notes_note_view_qalvac.id
  where master_join_dakqlu.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_nskaxx.title as varchar), '(' || organisation_organisationauthority_pt_nskaxx.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_nskaxx.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_nskaxx on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_nskaxx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_npxtxo.*) AS annotation
  from master_join master_join_roadzr
  join notes.note_view notes_note_view_npxtxo on master_join_roadzr.target_id = notes_note_view_npxtxo.id
  where master_join_roadzr.source_id = navaids_points.authorityfornavaidequipment.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_pwvvsp.title as varchar), '(' || organisation_organisationauthority_pt_pwvvsp.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_pwvvsp.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pwvvsp on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_pwvvsp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bnzswq.*) AS annotation
  from master_join master_join_wgoozt
  join notes.note_view notes_note_view_bnzswq on master_join_wgoozt.target_id = notes_note_view_bnzswq.id
  where master_join_wgoozt.source_id = navaids_points.authorityforspecialnavigationstation.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_noazqy.title as varchar), '(' || organisation_organisationauthority_pt_noazqy.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_noazqy.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_noazqy on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_noazqy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jtagwb.*) AS annotation
  from master_join master_join_wlcfvx
  join notes.note_view notes_note_view_jtagwb on master_join_wlcfvx.target_id = notes_note_view_jtagwb.id
  where master_join_wlcfvx.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    lat_annotation.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bffmwj.*) AS annotation
  from master_join master_join_ezfmon
  join notes.note_view notes_note_view_bffmwj on master_join_ezfmon.target_id = notes_note_view_bffmwj.id
  where master_join_ezfmon.source_id = service.callsigndetail.id
) as lat_annotation on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    lat_annotation.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gkrocc.*) AS annotation
  from master_join master_join_vgdjpa
  join notes.note_view notes_note_view_gkrocc on master_join_vgdjpa.target_id = notes_note_view_gkrocc.id
  where master_join_vgdjpa.source_id = shared.circlesector.id
) as lat_annotation on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    lat_annotation.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_umczhi.*) AS annotation
  from master_join master_join_fgydkx
  join notes.note_view notes_note_view_umczhi on master_join_fgydkx.target_id = notes_note_view_umczhi.id
  where master_join_fgydkx.source_id = airport_heliport.city.id
) as lat_annotation on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_nbfqmm.id) AS enginetype,
    lat_annotation.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_nbfqmm on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_nbfqmm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kbunyj.*) AS annotation
  from master_join master_join_acuohu
  join notes.note_view notes_note_view_kbunyj on master_join_acuohu.target_id = notes_note_view_kbunyj.id
  where master_join_acuohu.source_id = procedure.departurearrivalcondition.id
) as lat_annotation on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    lat_annotation.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xdsnmm.*) AS annotation
  from master_join master_join_nhpmds
  join notes.note_view notes_note_view_xdsnmm on master_join_nhpmds.target_id = notes_note_view_xdsnmm.id
  where master_join_nhpmds.source_id = routes.directflightclass.id
) as lat_annotation on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aowwnh.*) AS annotation
  from master_join master_join_qhcham
  join notes.note_view notes_note_view_aowwnh on master_join_qhcham.target_id = notes_note_view_aowwnh.id
  where master_join_qhcham.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    lat_adjustmentinopcol.lat_adjustmentinopcol as adjustmentinopcol,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_pt_hguslx.id) as lat_adjustmentinopcol
  from master_join master_join_sycuxe
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_pt_hguslx on master_join_sycuxe.target_id = procedure_equipmentunavailableadjustmentcolumn_pt_hguslx.id
  where master_join_sycuxe.source_id = procedure.equipmentunavailableadjustment.id
) as lat_adjustmentinopcol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qqdpve.*) AS annotation
  from master_join master_join_mbojvv
  join notes.note_view notes_note_view_qqdpve on master_join_mbojvv.target_id = notes_note_view_qqdpve.id
  where master_join_mbojvv.source_id = procedure.equipmentunavailableadjustment.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    lat_annotation.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sjqszy.*) AS annotation
  from master_join master_join_bxphva
  join notes.note_view notes_note_view_sjqszy on master_join_bxphva.target_id = notes_note_view_sjqszy.id
  where master_join_bxphva.source_id = public.fasdatablock.id
) as lat_annotation on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    lat_altitude.lat_altitude as altitude,
    lat_distance.lat_distance as distance,
    lat_timing.lat_timing as timing,
    lat_annotation.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_pt_zsnclz.id) as lat_altitude
  from master_join master_join_duimcv
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_pt_zsnclz on master_join_duimcv.target_id = procedure_approachaltitudetable_pt_zsnclz.id
  where master_join_duimcv.source_id = procedure.finalprofile.id
) as lat_altitude on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_pt_hkxsmy.id) as lat_distance
  from master_join master_join_cldimm
  join procedure.approachdistancetable_pt procedure_approachdistancetable_pt_hkxsmy on master_join_cldimm.target_id = procedure_approachdistancetable_pt_hkxsmy.id
  where master_join_cldimm.source_id = procedure.finalprofile.id
) as lat_distance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_pt_rsoyfa.id) as lat_timing
  from master_join master_join_bqxlxr
  join procedure.approachtimingtable_pt procedure_approachtimingtable_pt_rsoyfa on master_join_bqxlxr.target_id = procedure_approachtimingtable_pt_rsoyfa.id
  where master_join_bqxlxr.source_id = procedure.finalprofile.id
) as lat_timing on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hdjvfp.*) AS annotation
  from master_join master_join_fneqia
  join notes.note_view notes_note_view_hdjvfp on master_join_fneqia.target_id = notes_note_view_hdjvfp.id
  where master_join_fneqia.source_id = procedure.finalprofile.id
) as lat_annotation on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    lat_annotation.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eztjof.*) AS annotation
  from master_join master_join_tqhsnz
  join notes.note_view notes_note_view_eztjof on master_join_tqhsnz.target_id = notes_note_view_eztjof.id
  where master_join_tqhsnz.source_id = shared.flightcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    lat_annotation.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fcipwe.*) AS annotation
  from master_join master_join_frbrhb
  join notes.note_view notes_note_view_fcipwe on master_join_frbrhb.target_id = notes_note_view_fcipwe.id
  where master_join_frbrhb.source_id = routes.flightconditioncircumstance.id
) as lat_annotation on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    lat_annotation.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gxbkgd.*) AS annotation
  from master_join master_join_uppegp
  join notes.note_view notes_note_view_gxbkgd on master_join_uppegp.target_id = notes_note_view_gxbkgd.id
  where master_join_uppegp.source_id = routes.flightrestrictionlevel.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_alvtrk.*) AS annotation
  from master_join master_join_yexwlx
  join notes.note_view notes_note_view_alvtrk on master_join_yexwlx.target_id = notes_note_view_alvtrk.id
  where master_join_yexwlx.source_id = service.fuel.id
) as lat_annotation on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    lat_annotation.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sjnxmu.*) AS annotation
  from master_join master_join_ejzpzm
  join notes.note_view notes_note_view_sjnxmu on master_join_ejzpzm.target_id = notes_note_view_sjnxmu.id
  where master_join_ejzpzm.source_id = holding.holdingpatterndistance.id
) as lat_annotation on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    lat_annotation.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kqsvok.*) AS annotation
  from master_join master_join_xmzfhv
  join notes.note_view notes_note_view_kqsvok on master_join_xmzfhv.target_id = notes_note_view_kqsvok.id
  where master_join_xmzfhv.source_id = holding.holdingpatternduration.id
) as lat_annotation on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_teqfty.title as varchar), '(' || holding_holdingpattern_pt_teqfty.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_teqfty.href AS theholdingpattern_href,
    lat_annotation.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_teqfty on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_teqfty.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wjwlut.*) AS annotation
  from master_join master_join_yxotkh
  join notes.note_view notes_note_view_wjwlut on master_join_yxotkh.target_id = notes_note_view_wjwlut.id
  where master_join_yxotkh.source_id = procedure.holdinguse.id
) as lat_annotation on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    lat_runway.lat_runway as runway,
    lat_tlof.lat_tlof as tlof,
    lat_annotation.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_pdksmk.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_pdksmk.title AS varchar), '(' || airport_heliport_runwaydirection_pt_pdksmk.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_pdksmk.href
  )) as lat_runway  from master_join master_join_ldxihy
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_pdksmk on master_join_ldxihy.target_id = airport_heliport_runwaydirection_pt_pdksmk.id
  where master_join_ldxihy.source_id = procedure.landingtakeoffareacollection.id
) as lat_runway on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_luhnob.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_luhnob.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_luhnob.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_luhnob.href
  )) as lat_tlof  from master_join master_join_pzdhke
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_luhnob on master_join_pzdhke.target_id = airport_heliport_touchdownliftoff_pt_luhnob.id
  where master_join_pzdhke.source_id = procedure.landingtakeoffareacollection.id
) as lat_tlof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qryjiv.*) AS annotation
  from master_join master_join_qlavrg
  join notes.note_view notes_note_view_qryjiv on master_join_qlavrg.target_id = notes_note_view_qryjiv.id
  where master_join_qlavrg.source_id = procedure.landingtakeoffareacollection.id
) as lat_annotation on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    lat_annotation.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_krmnqg.*) AS annotation
  from master_join master_join_bdohmj
  join notes.note_view notes_note_view_krmnqg on master_join_bdohmj.target_id = notes_note_view_krmnqg.id
  where master_join_bdohmj.source_id = airport_heliport.lightactivation.id
) as lat_annotation on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    lat_annotation.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hxwliz.*) AS annotation
  from master_join master_join_grdocu
  join notes.note_view notes_note_view_hxwliz on master_join_grdocu.target_id = notes_note_view_hxwliz.id
  where master_join_grdocu.source_id = shared.meteorology.id
) as lat_annotation on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    lat_adjustmentinop.lat_adjustmentinop as adjustmentinop,
    lat_annotation.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_pt_jdvjhb.id) as lat_adjustmentinop
  from master_join master_join_xebrkd
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_pt_jdvjhb on master_join_xebrkd.target_id = procedure_equipmentunavailableadjustment_pt_jdvjhb.id
  where master_join_xebrkd.source_id = procedure.minima.id
) as lat_adjustmentinop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yibuwn.*) AS annotation
  from master_join master_join_ktunbh
  join notes.note_view notes_note_view_yibuwn on master_join_ktunbh.target_id = notes_note_view_yibuwn.id
  where master_join_ktunbh.source_id = procedure.minima.id
) as lat_annotation on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    lat_altimeter.lat_altimeter as altimeter,
    lat_annotation.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_nyrsai.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_nyrsai.title AS varchar), '(' || airport_heliport_altimetersource_pt_nyrsai.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_nyrsai.href
  )) as lat_altimeter  from master_join master_join_hvqovh
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_nyrsai on master_join_hvqovh.target_id = airport_heliport_altimetersource_pt_nyrsai.id
  where master_join_hvqovh.source_id = procedure.missedapproachgroup.id
) as lat_altimeter on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rvyyqo.*) AS annotation
  from master_join master_join_mnvlmq
  join notes.note_view notes_note_view_rvyyqo on master_join_mnvlmq.target_id = notes_note_view_rvyyqo.id
  where master_join_mnvlmq.source_id = procedure.missedapproachgroup.id
) as lat_annotation on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    lat_annotation.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uuxzjh.*) AS annotation
  from master_join master_join_scdlwr
  join notes.note_view notes_note_view_uuxzjh on master_join_scdlwr.target_id = notes_note_view_uuxzjh.id
  where master_join_scdlwr.source_id = navaids_points.navaidcomponent.id
) as lat_annotation on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bakaic.*) AS annotation
  from master_join master_join_wdugwr
  join notes.note_view notes_note_view_bakaic on master_join_wdugwr.target_id = notes_note_view_bakaic.id
  where master_join_wdugwr.source_id = airport_heliport.navaidequipmentdistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gfygqd.*) AS annotation
  from master_join master_join_djqwvv
  join notes.note_view notes_note_view_gfygqd on master_join_djqwvv.target_id = notes_note_view_gfygqd.id
  where master_join_djqwvv.source_id = service.nitrogen.id
) as lat_annotation on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    lat_annotation.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fgsfey.*) AS annotation
  from master_join master_join_tkgerr
  join notes.note_view notes_note_view_fgsfey on master_join_tkgerr.target_id = notes_note_view_fgsfey.id
  where master_join_tkgerr.source_id = shared.obstacleplacement.id
) as lat_annotation on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_azxyqc.title as varchar), '(' || obstacles_verticalstructure_pt_azxyqc.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_azxyqc.href AS theverticalstructure_href,
    lat_adjustment.lat_adjustment as adjustment,
    lat_obstacleplacement.lat_obstacleplacement as obstacleplacement,
    lat_annotation.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_azxyqc on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_azxyqc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_pt_eghaqz.id) as lat_adjustment
  from master_join master_join_mkisgz
  join shared.altitudeadjustment_pt shared_altitudeadjustment_pt_eghaqz on master_join_mkisgz.target_id = shared_altitudeadjustment_pt_eghaqz.id
  where master_join_mkisgz.source_id = shared.obstruction.id
) as lat_adjustment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_pt_ixctam.id) as lat_obstacleplacement
  from master_join master_join_jcwvpq
  join shared.obstacleplacement_pt shared_obstacleplacement_pt_ixctam on master_join_jcwvpq.target_id = shared_obstacleplacement_pt_ixctam.id
  where master_join_jcwvpq.source_id = shared.obstruction.id
) as lat_obstacleplacement on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aifkma.*) AS annotation
  from master_join master_join_tqufre
  join notes.note_view notes_note_view_aifkma on master_join_tqufre.target_id = notes_note_view_aifkma.id
  where master_join_tqufre.source_id = shared.obstruction.id
) as lat_annotation on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_isgbil.*) AS annotation
  from master_join master_join_kanoma
  join notes.note_view notes_note_view_isgbil on master_join_kanoma.target_id = notes_note_view_isgbil.id
  where master_join_kanoma.source_id = service.oil.id
) as lat_annotation on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_otpwjb.title as varchar), '(' || organisation_organisationauthority_pt_otpwjb.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_otpwjb.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_otpwjb on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_otpwjb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mikdad.*) AS annotation
  from master_join master_join_menjua
  join notes.note_view notes_note_view_mikdad on master_join_menjua.target_id = notes_note_view_mikdad.id
  where master_join_menjua.source_id = organisation.organisationauthorityassociation.id
) as lat_annotation on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_txfqux.*) AS annotation
  from master_join master_join_gzqufa
  join notes.note_view notes_note_view_txfqux on master_join_gzqufa.target_id = notes_note_view_txfqux.id
  where master_join_gzqufa.source_id = service.oxygen.id
) as lat_annotation on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    lat_annotation.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dweftl.*) AS annotation
  from master_join master_join_ngzjhb
  join notes.note_view notes_note_view_dweftl on master_join_ngzjhb.target_id = notes_note_view_dweftl.id
  where master_join_ngzjhb.source_id = procedure.proceduretransitionleg.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    lat_annotation.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_phoxtz.*) AS annotation
  from master_join master_join_ulxspm
  join notes.note_view notes_note_view_phoxtz on master_join_ulxspm.target_id = notes_note_view_phoxtz.id
  where master_join_ulxspm.source_id = surveillance.radarcomponent.id
) as lat_annotation on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    lat_annotation.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fjzdmm.*) AS annotation
  from master_join master_join_jmhrsb
  join notes.note_view notes_note_view_fjzdmm on master_join_jmhrsb.target_id = notes_note_view_fjzdmm.id
  where master_join_jmhrsb.source_id = airport_heliport.ridge.id
) as lat_annotation on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_qjcmct.id) as lat_criticalridge
  from master_join master_join_nwrzdx
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_qjcmct on master_join_nwrzdx.target_id = airport_heliport_ridge_pt_qjcmct.id
  where master_join_nwrzdx.source_id = airport_heliport.runwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_exncop.id) as lat_layer
  from master_join master_join_qsbsqg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_exncop on master_join_qsbsqg.target_id = airport_heliport_surfacecontaminationlayer_pt_exncop.id
  where master_join_qsbsqg.source_id = airport_heliport.runwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bqaftf.*) AS annotation
  from master_join master_join_mdanwi
  join notes.note_view notes_note_view_bqaftf on master_join_mdanwi.target_id = notes_note_view_bqaftf.id
  where master_join_mdanwi.source_id = airport_heliport.runwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    lat_declaredvalue.lat_declaredvalue as declaredvalue,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_pt_zvhrrl.id) as lat_declaredvalue
  from master_join master_join_xuiefs
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_pt_zvhrrl on master_join_xuiefs.target_id = airport_heliport_runwaydeclareddistancevalue_pt_zvhrrl.id
  where master_join_xuiefs.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_declaredvalue on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ninpqb.*) AS annotation
  from master_join master_join_dimdbk
  join notes.note_view notes_note_view_ninpqb on master_join_dimdbk.target_id = notes_note_view_ninpqb.id
  where master_join_dimdbk.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_tqqfwk.id) as lat_criticalridge
  from master_join master_join_lvcmpl
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_tqqfwk on master_join_lvcmpl.target_id = airport_heliport_ridge_pt_tqqfwk.id
  where master_join_lvcmpl.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_bpbkfz.id) as lat_layer
  from master_join master_join_vzvnsi
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_bpbkfz on master_join_vzvnsi.target_id = airport_heliport_surfacecontaminationlayer_pt_bpbkfz.id
  where master_join_vzvnsi.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vfceak.*) AS annotation
  from master_join master_join_ovvaam
  join notes.note_view notes_note_view_vfceak on master_join_ovvaam.target_id = notes_note_view_vfceak.id
  where master_join_ovvaam.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    lat_annotation.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uuadqx.*) AS annotation
  from master_join master_join_joqimm
  join notes.note_view notes_note_view_uuadqx on master_join_joqimm.target_id = notes_note_view_uuadqx.id
  where master_join_joqimm.source_id = procedure.sectordesign.id
) as lat_annotation on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    lat_annotation.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_djriyt.*) AS annotation
  from master_join master_join_nmvaxc
  join notes.note_view notes_note_view_djriyt on master_join_nmvaxc.target_id = notes_note_view_djriyt.id
  where master_join_nmvaxc.source_id = shared.standardlevel.id
) as lat_annotation on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wuuvkd.*) AS annotation
  from master_join master_join_xrgspd
  join notes.note_view notes_note_view_wuuvkd on master_join_xrgspd.target_id = notes_note_view_wuuvkd.id
  where master_join_xrgspd.source_id = airport_heliport.surfacecharacteristics.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_itizzr.title as varchar), '(' || organisation_unit_pt_itizzr.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_itizzr.href AS theunit_href,
    lat_annotation.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_itizzr on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_itizzr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ibsmvb.*) AS annotation
  from master_join master_join_komybw
  join notes.note_view notes_note_view_ibsmvb on master_join_komybw.target_id = notes_note_view_ibsmvb.id
  where master_join_komybw.source_id = surveillance.surveillancegroundstation.id
) as lat_annotation on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_jgzohd.id) as lat_criticalridge
  from master_join master_join_heehof
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_jgzohd on master_join_heehof.target_id = airport_heliport_ridge_pt_jgzohd.id
  where master_join_heehof.source_id = airport_heliport.taxiwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_msylbt.id) as lat_layer
  from master_join master_join_alafpz
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_msylbt on master_join_alafpz.target_id = airport_heliport_surfacecontaminationlayer_pt_msylbt.id
  where master_join_alafpz.source_id = airport_heliport.taxiwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yqevdl.*) AS annotation
  from master_join master_join_aceray
  join notes.note_view notes_note_view_yqevdl on master_join_aceray.target_id = notes_note_view_yqevdl.id
  where master_join_aceray.source_id = airport_heliport.taxiwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_ggqika.id) as lat_criticalridge
  from master_join master_join_ncfzdm
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_ggqika on master_join_ncfzdm.target_id = airport_heliport_ridge_pt_ggqika.id
  where master_join_ncfzdm.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_ikfmka.id) as lat_layer
  from master_join master_join_rtiunh
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_ikfmka on master_join_rtiunh.target_id = airport_heliport_surfacecontaminationlayer_pt_ikfmka.id
  where master_join_rtiunh.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qdpdwo.*) AS annotation
  from master_join master_join_bfjvfa
  join notes.note_view notes_note_view_qdpdwo on master_join_bfjvfa.target_id = notes_note_view_qdpdwo.id
  where master_join_bfjvfa.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_vyzugw.title as varchar), '(' || organisation_unit_pt_vyzugw.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_vyzugw.href AS theunit_href,
    lat_annotation.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_vyzugw on organisation.unitdependency.theunit_id = organisation_unit_pt_vyzugw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_poahhe.*) AS annotation
  from master_join master_join_hvcjza
  join notes.note_view notes_note_view_poahhe on master_join_hvcjza.target_id = notes_note_view_poahhe.id
  where master_join_hvcjza.source_id = organisation.unitdependency.id
) as lat_annotation on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_luuism.geom AS extent_geom,
    geometry_curve_view_luuism.horizontalAccuracy as extent_horizontalaccuracy,
    lat_point.lat_point as point,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_luuism on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_luuism.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_xzjkqa.id) as lat_point
  from master_join master_join_hxfada
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_xzjkqa on master_join_hxfada.target_id = aerial_refuelling_aerialrefuellingpoint_pt_xzjkqa.id
  where master_join_hxfada.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_point on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_arvmwl.id) as lat_verticalextent
  from master_join master_join_hihign
  join shared.airspacelayer_pt shared_airspacelayer_pt_arvmwl on master_join_hihign.target_id = shared_airspacelayer_pt_arvmwl.id
  where master_join_hihign.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_verticalextent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vniyhy.*) AS annotation
  from master_join master_join_uwkdtg
  join notes.note_view notes_note_view_vniyhy on master_join_uwkdtg.target_id = notes_note_view_vniyhy.id
  where master_join_uwkdtg.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_yghteh.id) AS departurerunwaytransition,
    geometry_curve_view_ceowiw.geom AS trajectory_geom,
    geometry_curve_view_ceowiw.horizontalAccuracy as trajectory_horizontalaccuracy,
    lat_transitionleg.lat_transitionleg as transitionleg,
    lat_annotation.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_yghteh on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_yghteh.id
left join geometry.curve_view geometry_curve_view_ceowiw on procedure.proceduretransition.trajectory_id = geometry_curve_view_ceowiw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_pt_bewzqr.id) as lat_transitionleg
  from master_join master_join_tyhegc
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_pt_bewzqr on master_join_tyhegc.target_id = procedure_proceduretransitionleg_pt_bewzqr.id
  where master_join_tyhegc.source_id = procedure.proceduretransition.id
) as lat_transitionleg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rnahxh.*) AS annotation
  from master_join master_join_vrbrqb
  join notes.note_view notes_note_view_rnahxh on master_join_vrbrqb.target_id = notes_note_view_rnahxh.id
  where master_join_vrbrqb.source_id = procedure.proceduretransition.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    geometry_elevatedpoint_view_cecyki.geom AS location_geom,
    geometry_elevatedpoint_view_cecyki.longitude AS location_longitude,
    geometry_elevatedpoint_view_cecyki.latitude AS location_latitude,
    geometry_elevatedpoint_view_cecyki.elevation AS location_elevation,
    geometry_elevatedpoint_view_cecyki.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cecyki.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cecyki.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cecyki.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cecyki on shared.lightelement.location_id = geometry_elevatedpoint_view_cecyki.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tlsntz.*) AS annotation
  from master_join master_join_rkcxql
  join notes.note_view notes_note_view_tlsntz on master_join_rkcxql.target_id = notes_note_view_tlsntz.id
  where master_join_rkcxql.source_id = shared.lightelement.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_pt_kysich.id) as lat_availability
  from master_join master_join_yzmkop
  join shared.lightelementstatus_pt shared_lightelementstatus_pt_kysich on master_join_yzmkop.target_id = shared_lightelementstatus_pt_kysich.id
  where master_join_yzmkop.source_id = shared.lightelement.id
) as lat_availability on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_qpwuwc.geom AS touchdownreflector_geom,
    geometry_elevatedpoint_view_qpwuwc.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_qpwuwc.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_qpwuwc.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_qpwuwc.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_qpwuwc.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_qpwuwc.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_qpwuwc.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    lat_annotation.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qpwuwc on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_qpwuwc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pqikwq.*) AS annotation
  from master_join master_join_obfmwt
  join notes.note_view notes_note_view_pqikwq on master_join_obfmwt.target_id = notes_note_view_pqikwq.id
  where master_join_obfmwt.source_id = surveillance.reflector.id
) as lat_annotation on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    geometry_elevatedsurface_view_bzckvl.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_bzckvl.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_bzckvl.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_bzckvl.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_bzckvl.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_bzckvl.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_lwgxov.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_lwgxov.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_lwgxov.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_lwgxov.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_lwgxov.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_lwgxov.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_xaecfi.geom AS extentlocation_geom,
    geometry_elevatedpoint_view_xaecfi.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_xaecfi.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_xaecfi.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_xaecfi.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_xaecfi.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_xaecfi.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_xaecfi.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bzckvl on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_bzckvl.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_lwgxov on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_lwgxov.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xaecfi on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_xaecfi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ocjauf.*) AS annotation
  from master_join master_join_iqcfkv
  join notes.note_view notes_note_view_ocjauf on master_join_iqcfkv.target_id = notes_note_view_ocjauf.id
  where master_join_iqcfkv.source_id = airport_heliport.markingelement.id
) as lat_annotation on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    lat_extent.geom as extent_geom,
    lat_extent.attr as extent,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_view_dbufvv.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_view_dbufvv.id,
      'elevation', geometry_elevatedsurface_view_dbufvv.elevation,
      'geoidUndulation', geometry_elevatedsurface_view_dbufvv.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_view_dbufvv.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_view_dbufvv.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_view_dbufvv.horizontalAccuracy
    )) AS attr
  from master_join master_join_jusvrq
  join geometry.elevatedsurface_view geometry_elevatedsurface_view_dbufvv on master_join_jusvrq.target_id = geometry_elevatedsurface_view_dbufvv.id
  where master_join_jusvrq.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sgtwey.*) AS annotation
  from master_join master_join_izeeip
  join notes.note_view notes_note_view_sgtwey on master_join_izeeip.target_id = notes_note_view_sgtwey.id
  where master_join_izeeip.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_ibrkcg.title as varchar), '(' || navaids_points_designatedpoint_pt_ibrkcg.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ibrkcg.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pbnibf.title as varchar), '(' || navaids_points_navaid_pt_pbnibf.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_pbnibf.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mzqaoj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mzqaoj.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_mzqaoj.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_jousfu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_jousfu.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_jousfu.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yyzqnf.title as varchar), '(' || airport_heliport_airportheliport_pt_yyzqnf.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_yyzqnf.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_buaona.geom AS pointchoiceposition_geom,
    geometry_point_view_buaona.longitude AS pointchoiceposition_longitude,
    geometry_point_view_buaona.latitude AS pointchoiceposition_latitude,
    geometry_point_view_buaona.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_wijdkn.title as varchar), '(' || shared_radiofrequencyarea_pt_wijdkn.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_wijdkn.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ibrkcg on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ibrkcg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pbnibf on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_pbnibf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mzqaoj on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mzqaoj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_jousfu on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_jousfu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yyzqnf on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_yyzqnf.id
left join geometry.point_view geometry_point_view_buaona on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_buaona.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_wijdkn on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_wijdkn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_lbmlty.id) as lat_facilitymakeup
  from master_join master_join_sifxxr
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_lbmlty on master_join_sifxxr.target_id = navaids_points_pointreference_pt_lbmlty.id
  where master_join_sifxxr.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fuimop.*) AS annotation
  from master_join master_join_ngoayq
  join notes.note_view notes_note_view_fuimop on master_join_ngoayq.target_id = notes_note_view_fuimop.id
  where master_join_ngoayq.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_uvmgjh.title as varchar), '(' || navaids_points_designatedpoint_pt_uvmgjh.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_uvmgjh.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vstnpi.title as varchar), '(' || navaids_points_designatedpoint_pt_vstnpi.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vstnpi.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_chtphh.title as varchar), '(' || navaids_points_navaid_pt_chtphh.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_chtphh.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_rwxfqt.title as varchar), '(' || navaids_points_navaid_pt_rwxfqt.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_rwxfqt.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ziqyzn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ziqyzn.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_ziqyzn.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jbraig.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jbraig.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_jbraig.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vxbewf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vxbewf.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vxbewf.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mwnzux.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mwnzux.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mwnzux.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lvbdjh.title as varchar), '(' || airport_heliport_airportheliport_pt_lvbdjh.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_lvbdjh.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mhbkbg.title as varchar), '(' || airport_heliport_airportheliport_pt_mhbkbg.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_mhbkbg.href AS startairportreferencepoint_href,
    geometry_point_view_vmhczy.geom AS endposition_geom,
    geometry_point_view_vmhczy.longitude AS endposition_longitude,
    geometry_point_view_vmhczy.latitude AS endposition_latitude,
    geometry_point_view_vmhczy.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_peiwnj.geom AS startposition_geom,
    geometry_point_view_peiwnj.longitude AS startposition_longitude,
    geometry_point_view_peiwnj.latitude AS startposition_latitude,
    geometry_point_view_peiwnj.horizontalAccuracy AS startposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uvmgjh on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uvmgjh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_chtphh on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_chtphh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ziqyzn on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ziqyzn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vxbewf on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vxbewf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lvbdjh on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_lvbdjh.id
left join geometry.point_view geometry_point_view_vmhczy on routes.directflightsegment.end_position_id = geometry_point_view_vmhczy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vstnpi on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vstnpi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_rwxfqt on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_rwxfqt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jbraig on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jbraig.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mwnzux on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mwnzux.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mhbkbg on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_mhbkbg.id
left join geometry.point_view geometry_point_view_peiwnj on routes.directflightsegment.start_position_id = geometry_point_view_peiwnj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rcaari.*) AS annotation
  from master_join master_join_bginoy
  join notes.note_view notes_note_view_rcaari on master_join_bginoy.target_id = notes_note_view_rcaari.id
  where master_join_bginoy.source_id = routes.directflightsegment.id
) as lat_annotation on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_rlwhno.title as varchar), '(' || navaids_points_designatedpoint_pt_rlwhno.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_rlwhno.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_yzkkal.title as varchar), '(' || navaids_points_navaid_pt_yzkkal.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_yzkkal.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_okukod.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_okukod.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_okukod.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_apoqnx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_apoqnx.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_apoqnx.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yzxjkk.title as varchar), '(' || airport_heliport_airportheliport_pt_yzxjkk.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_yzxjkk.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_obtsyi.geom AS pointchoiceposition_geom,
    geometry_point_view_obtsyi.longitude AS pointchoiceposition_longitude,
    geometry_point_view_obtsyi.latitude AS pointchoiceposition_latitude,
    geometry_point_view_obtsyi.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_kszofv.title as varchar), '(' || shared_radiofrequencyarea_pt_kszofv.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_kszofv.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rlwhno on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rlwhno.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yzkkal on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_yzkkal.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_okukod on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_okukod.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_apoqnx on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_apoqnx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yzxjkk on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_yzxjkk.id
left join geometry.point_view geometry_point_view_obtsyi on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_obtsyi.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_kszofv on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_kszofv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_nhykoq.id) as lat_facilitymakeup
  from master_join master_join_vxbvpf
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_nhykoq on master_join_vxbvpf.target_id = navaids_points_pointreference_pt_nhykoq.id
  where master_join_vxbvpf.source_id = navaids_points.enroutesegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iatiql.*) AS annotation
  from master_join master_join_ggzloe
  join notes.note_view notes_note_view_iatiql on master_join_ggzloe.target_id = notes_note_view_iatiql.id
  where master_join_ggzloe.source_id = navaids_points.enroutesegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_ghsvqx.title as varchar), '(' || airport_heliport_airportheliport_pt_ghsvqx.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_ghsvqx.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jvkdlk.title as varchar), '(' || airport_heliport_airportheliport_pt_jvkdlk.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_jvkdlk.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_uibbmk.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_uibbmk.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_uibbmk.href AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_hpbktn.id) AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_szrjai.title as varchar), '(' || organisation_organisationauthority_pt_szrjai.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_szrjai.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_uenslw.title as varchar), '(' || navaids_points_designatedpoint_pt_uenslw.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_uenslw.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ultefd.title as varchar), '(' || navaids_points_navaid_pt_ultefd.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_ultefd.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kuyhyl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kuyhyl.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_kuyhyl.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vuyrfh.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vuyrfh.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vuyrfh.href AS significantpointconditionrunwaypoint_href,
    geometry_point_view_khgitq.geom AS significantpointconditionposition_geom,
    geometry_point_view_khgitq.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_khgitq.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_khgitq.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_szditc.id) AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_hyiuxy.title as varchar), '(' || routes_airspacebordercrossing_pt_hyiuxy.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_hyiuxy.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_umgrzh.title as varchar), '(' || airspace_airspace_pt_umgrzh.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_umgrzh.href AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_hmipyb.id) AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_lrahxh.title as varchar), '(' || procedure_standardinstrumentarrival_pt_lrahxh.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_lrahxh.href AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_otuzvt.id) AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_datscw.id) AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_lwmmme.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_lwmmme.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_lwmmme.href AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_meqbxq.id) AS operationalcondition,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ghsvqx on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_ghsvqx.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_uibbmk on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_uibbmk.id
left join routes.routeportion_pt routes_routeportion_pt_hpbktn on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_hpbktn.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_szrjai on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_szrjai.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uenslw on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uenslw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ultefd on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_ultefd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kuyhyl on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kuyhyl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vuyrfh on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vuyrfh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jvkdlk on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_jvkdlk.id
left join geometry.point_view geometry_point_view_khgitq on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_khgitq.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_szditc on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_szditc.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_hyiuxy on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_hyiuxy.id
left join airspace.airspace_pt airspace_airspace_pt_umgrzh on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_umgrzh.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_hmipyb on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_hmipyb.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_lrahxh on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_lrahxh.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_otuzvt on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_otuzvt.id
left join shared.meteorology_pt shared_meteorology_pt_datscw on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_datscw.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_lwmmme on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_lwmmme.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_meqbxq on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_meqbxq.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_amngpw.id) as lat_flightlevel
  from master_join master_join_puhpxl
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_amngpw on master_join_puhpxl.target_id = routes_flightrestrictionlevel_pt_amngpw.id
  where master_join_puhpxl.source_id = routes.flightconditionelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wubyhb.*) AS annotation
  from master_join master_join_lrtxjn
  join notes.note_view notes_note_view_wubyhb on master_join_lrtxjn.target_id = notes_note_view_wubyhb.id
  where master_join_lrtxjn.source_id = routes.flightconditionelement.id
) as lat_annotation on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_igwrrv.title as varchar), '(' || procedure_standardinstrumentarrival_pt_igwrrv.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_igwrrv.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_exuxht.title as varchar), '(' || airspace_airspace_pt_exuxht.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_exuxht.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_hfptzw.title as varchar), '(' || navaids_points_designatedpoint_pt_hfptzw.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_hfptzw.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wepcii.title as varchar), '(' || navaids_points_navaid_pt_wepcii.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_wepcii.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yszlse.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yszlse.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_yszlse.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xaqhsv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xaqhsv.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xaqhsv.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fuxgsh.title as varchar), '(' || airport_heliport_airportheliport_pt_fuxgsh.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_fuxgsh.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hmqzlx.title as varchar), '(' || airport_heliport_airportheliport_pt_hmqzlx.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_hmqzlx.href AS elementairportheliportelement_href,
    geometry_point_view_wwbotj.geom AS pointelementposition_geom,
    geometry_point_view_wwbotj.longitude AS pointelementposition_longitude,
    geometry_point_view_wwbotj.latitude AS pointelementposition_latitude,
    geometry_point_view_wwbotj.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_dufgad.id) AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_gqomnp.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_gqomnp.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_gqomnp.href AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_excldl.id) AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_ebfoei.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_ebfoei.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_ebfoei.href AS elementaerialrefuellingelement_href,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_igwrrv on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_igwrrv.id
left join airspace.airspace_pt airspace_airspace_pt_exuxht on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_exuxht.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hfptzw on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hfptzw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wepcii on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_wepcii.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yszlse on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_yszlse.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xaqhsv on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xaqhsv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fuxgsh on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_fuxgsh.id
left join geometry.point_view geometry_point_view_wwbotj on routes.flightroutingelement.pointelement_position_id = geometry_point_view_wwbotj.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_dufgad on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_dufgad.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_gqomnp on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_gqomnp.id
left join routes.routeportion_pt routes_routeportion_pt_excldl on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_excldl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hmqzlx on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_hmqzlx.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_ebfoei on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_ebfoei.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_ratrmh.id) as lat_flightlevel
  from master_join master_join_pracgo
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_ratrmh on master_join_pracgo.target_id = routes_flightrestrictionlevel_pt_ratrmh.id
  where master_join_pracgo.source_id = routes.flightroutingelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tlqyvi.*) AS annotation
  from master_join master_join_jaaevi
  join notes.note_view notes_note_view_tlqyvi on master_join_jaaevi.target_id = notes_note_view_tlqyvi.id
  where master_join_jaaevi.source_id = routes.flightroutingelement.id
) as lat_annotation on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_qayrwv.title as varchar), '(' || navaids_points_designatedpoint_pt_qayrwv.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_qayrwv.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pjjtfj.title as varchar), '(' || navaids_points_designatedpoint_pt_pjjtfj.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pjjtfj.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_dtkotn.title as varchar), '(' || navaids_points_designatedpoint_pt_dtkotn.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dtkotn.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xsmiiz.title as varchar), '(' || navaids_points_navaid_pt_xsmiiz.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_xsmiiz.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_fmvnqi.title as varchar), '(' || navaids_points_navaid_pt_fmvnqi.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_fmvnqi.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_laxtcc.title as varchar), '(' || navaids_points_navaid_pt_laxtcc.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_laxtcc.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_earvyz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_earvyz.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_earvyz.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jbvuja.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jbvuja.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jbvuja.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_shzacg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_shzacg.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_shzacg.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_neilxr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_neilxr.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_neilxr.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cdegkk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cdegkk.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cdegkk.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tdgyxg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tdgyxg.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tdgyxg.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sspngj.title as varchar), '(' || airport_heliport_airportheliport_pt_sspngj.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_sspngj.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bvouyh.title as varchar), '(' || airport_heliport_airportheliport_pt_bvouyh.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_bvouyh.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mwqsvn.title as varchar), '(' || airport_heliport_airportheliport_pt_mwqsvn.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_mwqsvn.href AS endairportreferencepoint_href,
    geometry_point_view_vykjvy.geom AS startposition_geom,
    geometry_point_view_vykjvy.longitude AS startposition_longitude,
    geometry_point_view_vykjvy.latitude AS startposition_latitude,
    geometry_point_view_vykjvy.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_ppjlrf.geom AS intermediatepointposition_geom,
    geometry_point_view_ppjlrf.longitude AS intermediatepointposition_longitude,
    geometry_point_view_ppjlrf.latitude AS intermediatepointposition_latitude,
    geometry_point_view_ppjlrf.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_enhqlf.geom AS endposition_geom,
    geometry_point_view_enhqlf.longitude AS endposition_longitude,
    geometry_point_view_enhqlf.latitude AS endposition_latitude,
    geometry_point_view_enhqlf.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_ltuzgd.title as varchar), '(' || routes_route_pt_ltuzgd.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_ltuzgd.href AS referencedroute_href,
    lat_annotation.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qayrwv on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qayrwv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xsmiiz on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_xsmiiz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_earvyz on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_earvyz.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_neilxr on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_neilxr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sspngj on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_sspngj.id
left join geometry.point_view geometry_point_view_vykjvy on routes.routeportion.start_position_id = geometry_point_view_vykjvy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pjjtfj on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pjjtfj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fmvnqi on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_fmvnqi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jbvuja on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jbvuja.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cdegkk on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cdegkk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bvouyh on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_bvouyh.id
left join geometry.point_view geometry_point_view_ppjlrf on routes.routeportion.intermediatepoint_position_id = geometry_point_view_ppjlrf.id
left join routes.route_pt routes_route_pt_ltuzgd on routes.routeportion.referencedroute_id = routes_route_pt_ltuzgd.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dtkotn on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dtkotn.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_laxtcc on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_laxtcc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_shzacg on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_shzacg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tdgyxg on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tdgyxg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mwqsvn on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_mwqsvn.id
left join geometry.point_view geometry_point_view_enhqlf on routes.routeportion.end_position_id = geometry_point_view_enhqlf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zyywic.*) AS annotation
  from master_join master_join_citcsm
  join notes.note_view notes_note_view_zyywic on master_join_citcsm.target_id = notes_note_view_zyywic.id
  where master_join_citcsm.source_id = routes.routeportion.id
) as lat_annotation on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_qmnzdp.title as varchar), '(' || navaids_points_designatedpoint_pt_qmnzdp.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_qmnzdp.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ayiops.title as varchar), '(' || navaids_points_navaid_pt_ayiops.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ayiops.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_cyangw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_cyangw.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_cyangw.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ajjgvr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ajjgvr.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ajjgvr.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zoakuq.title as varchar), '(' || airport_heliport_airportheliport_pt_zoakuq.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zoakuq.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_psuhzl.geom AS pointchoiceposition_geom,
    geometry_point_view_psuhzl.longitude AS pointchoiceposition_longitude,
    geometry_point_view_psuhzl.latitude AS pointchoiceposition_latitude,
    geometry_point_view_psuhzl.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_xpapcb.title as varchar), '(' || shared_radiofrequencyarea_pt_xpapcb.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_xpapcb.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qmnzdp on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qmnzdp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ayiops on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ayiops.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_cyangw on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_cyangw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ajjgvr on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ajjgvr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zoakuq on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zoakuq.id
left join geometry.point_view geometry_point_view_psuhzl on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_psuhzl.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_xpapcb on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_xpapcb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_bmeawp.id) as lat_facilitymakeup
  from master_join master_join_zahcxj
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_bmeawp on master_join_zahcxj.target_id = navaids_points_pointreference_pt_bmeawp.id
  where master_join_zahcxj.source_id = navaids_points.terminalsegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qthean.*) AS annotation
  from master_join master_join_gcgbls
  join notes.note_view notes_note_view_qthean on master_join_gcgbls.target_id = notes_note_view_qthean.id
  where master_join_gcgbls.source_id = navaids_points.terminalsegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    geometry_surface_view_becapr.geom AS extent_geom,
    geometry_surface_view_becapr.horizontalAccuracy as extent_horizontalaccuracy,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_point.lat_point as point,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_becapr on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_becapr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_ezoqwv.id) as lat_verticalextent
  from master_join master_join_ihazjg
  join shared.airspacelayer_pt shared_airspacelayer_pt_ezoqwv on master_join_ihazjg.target_id = shared_airspacelayer_pt_ezoqwv.id
  where master_join_ihazjg.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_verticalextent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_mffhoy.id) as lat_point
  from master_join master_join_zcpfjj
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_mffhoy on master_join_zcpfjj.target_id = aerial_refuelling_aerialrefuellingpoint_pt_mffhoy.id
  where master_join_zcpfjj.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_point on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xxvvqs.*) AS annotation
  from master_join master_join_aotpqy
  join notes.note_view notes_note_view_xxvvqs on master_join_aotpqy.target_id = notes_note_view_xxvvqs.id
  where master_join_aotpqy.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    geometry_surface_view_fysngv.geom AS horizontalprojection_geom,
    geometry_surface_view_fysngv.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_vdywgg.geom AS centreline_geom,
    geometry_curve_view_vdywgg.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_xcpget.id) AS contributorairspace,
    lat_annotation.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_fysngv on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_fysngv.id
left join geometry.curve_view geometry_curve_view_vdywgg on airspace.airspacevolume.centreline_id = geometry_curve_view_vdywgg.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_xcpget on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_xcpget.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_noheyc.*) AS annotation
  from master_join master_join_wbcypp
  join notes.note_view notes_note_view_noheyc on master_join_wbcypp.target_id = notes_note_view_noheyc.id
  where master_join_wbcypp.source_id = airspace.airspacevolume.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_cxpaqs.id) AS sectordefinition,
    geometry_surface_view_vfirkn.geom AS extent_geom,
    geometry_surface_view_vfirkn.horizontalAccuracy as extent_horizontalaccuracy,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_sectorcriteria.lat_sectorcriteria as sectorcriteria,
    lat_annotation.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_cxpaqs on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_cxpaqs.id
left join geometry.surface_view geometry_surface_view_vfirkn on procedure.navigationareasector.extent_id = geometry_surface_view_vfirkn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_cghzrd.id) as lat_significantobstacle
  from master_join master_join_eayrve
  join shared.obstruction_pt shared_obstruction_pt_cghzrd on master_join_eayrve.target_id = shared_obstruction_pt_cghzrd.id
  where master_join_eayrve.source_id = procedure.navigationareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_pt_ncglob.id) as lat_sectorcriteria
  from master_join master_join_sutgop
  join procedure.sectordesign_pt procedure_sectordesign_pt_ncglob on master_join_sutgop.target_id = procedure_sectordesign_pt_ncglob.id
  where master_join_sutgop.source_id = procedure.navigationareasector.id
) as lat_sectorcriteria on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wodwsa.*) AS annotation
  from master_join master_join_bqmumv
  join notes.note_view notes_note_view_wodwsa on master_join_bqmumv.target_id = notes_note_view_wodwsa.id
  where master_join_bqmumv.source_id = procedure.navigationareasector.id
) as lat_annotation on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    geometry_surface_view_haxemq.geom AS surface_geom,
    geometry_surface_view_haxemq.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_cxdroe.geom AS startingcurve_geom,
    geometry_curve_view_cxdroe.horizontalAccuracy as startingcurve_horizontalaccuracy,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_haxemq on shared.obstacleassessmentarea.surface_id = geometry_surface_view_haxemq.id
left join geometry.curve_view geometry_curve_view_cxdroe on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_cxdroe.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_ehpnks.id) as lat_aircraftcategory
  from master_join master_join_ywpixa
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ehpnks on master_join_ywpixa.target_id = shared_aircraftcharacteristic_pt_ehpnks.id
  where master_join_ywpixa.source_id = shared.obstacleassessmentarea.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_udgsjx.id) as lat_significantobstacle
  from master_join master_join_urrank
  join shared.obstruction_pt shared_obstruction_pt_udgsjx on master_join_urrank.target_id = shared_obstruction_pt_udgsjx.id
  where master_join_urrank.source_id = shared.obstacleassessmentarea.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bdgxcu.*) AS annotation
  from master_join master_join_bvodig
  join notes.note_view notes_note_view_bdgxcu on master_join_bvodig.target_id = notes_note_view_bdgxcu.id
  where master_join_bvodig.source_id = shared.obstacleassessmentarea.id
) as lat_annotation on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_acrjjq.title as varchar), '(' || navaids_points_designatedpoint_pt_acrjjq.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_acrjjq.href AS point_href,
    geometry_surface_view_efdlge.geom AS fixtolerancearea_geom,
    geometry_surface_view_efdlge.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    lat_facilityangle.lat_facilityangle as facilityangle,
    lat_facilitydistance.lat_facilitydistance as facilitydistance,
    lat_annotation.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_acrjjq on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_acrjjq.id
left join geometry.surface_view geometry_surface_view_efdlge on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_efdlge.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_pt_zlmcnz.id) as lat_facilityangle
  from master_join master_join_apwslx
  join navaids_points.angleuse_pt navaids_points_angleuse_pt_zlmcnz on master_join_apwslx.target_id = navaids_points_angleuse_pt_zlmcnz.id
  where master_join_apwslx.source_id = navaids_points.pointreference.id
) as lat_facilityangle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_pt_kaogsb.id,
      'title', coalesce(cast(navaids_points_distanceindication_pt_kaogsb.title AS varchar), '(' || navaids_points_distanceindication_pt_kaogsb.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_pt_kaogsb.href
  )) as lat_facilitydistance  from master_join master_join_trbbvp
  join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_kaogsb on master_join_trbbvp.target_id = navaids_points_distanceindication_pt_kaogsb.id
  where master_join_trbbvp.source_id = navaids_points.pointreference.id
) as lat_facilitydistance on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_txeyle.*) AS annotation
  from master_join master_join_isgfnt
  join notes.note_view notes_note_view_txeyle on master_join_isgfnt.target_id = notes_note_view_txeyle.id
  where master_join_isgfnt.source_id = navaids_points.pointreference.id
) as lat_annotation on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    geometry_surface_view_fvnqxk.geom AS extent_geom,
    geometry_surface_view_fvnqxk.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_bcjnpa.id) AS sectordefinition,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_fvnqxk on procedure.safealtitudeareasector.extent_id = geometry_surface_view_fvnqxk.id
left join shared.circlesector_pt shared_circlesector_pt_bcjnpa on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_bcjnpa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_dwtbyd.id) as lat_significantobstacle
  from master_join master_join_qechme
  join shared.obstruction_pt shared_obstruction_pt_dwtbyd on master_join_qechme.target_id = shared_obstruction_pt_dwtbyd.id
  where master_join_qechme.source_id = procedure.safealtitudeareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ctbxjn.*) AS annotation
  from master_join master_join_qsxdpg
  join notes.note_view notes_note_view_ctbxjn on master_join_qsxdpg.target_id = notes_note_view_ctbxjn.id
  where master_join_qsxdpg.source_id = procedure.safealtitudeareasector.id
) as lat_annotation on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    to_jsonb(shared_circlesector_pt_egnvdv.id) AS sectordefinition,
    geometry_surface_view_opdcni.geom AS extent_geom,
    geometry_surface_view_opdcni.horizontalAccuracy as extent_horizontalaccuracy,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_egnvdv on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_egnvdv.id
left join geometry.surface_view geometry_surface_view_opdcni on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_opdcni.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_mexfkd.id) as lat_significantobstacle
  from master_join master_join_nlmlmx
  join shared.obstruction_pt shared_obstruction_pt_mexfkd on master_join_nlmlmx.target_id = shared_obstruction_pt_mexfkd.id
  where master_join_nlmlmx.source_id = procedure.terminalarrivalareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qlyntf.*) AS annotation
  from master_join master_join_gauamr
  join notes.note_view notes_note_view_qlyntf on master_join_gauamr.target_id = notes_note_view_qlyntf.id
  where master_join_gauamr.source_id = procedure.terminalarrivalareasector.id
) as lat_annotation on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_iwvxir.*) AS timeinterval
  from master_join master_join_jshxvr
  join shared.timesheet_view shared_timesheet_view_iwvxir on master_join_jshxvr.target_id = shared_timesheet_view_iwvxir.id
  where master_join_jshxvr.source_id = airport_heliport.airportheliportavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_smqinu.*) AS annotation
  from master_join master_join_bhptth
  join notes.note_view notes_note_view_smqinu on master_join_bhptth.target_id = notes_note_view_smqinu.id
  where master_join_bhptth.source_id = airport_heliport.airportheliportavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_jhblcl.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_jhblcl.title AS varchar), '(' || organisation_organisationauthority_pt_jhblcl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_jhblcl.href
  )) as lat_specialdateauthority  from master_join master_join_mhpljw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_jhblcl on master_join_mhpljw.target_id = organisation_organisationauthority_pt_jhblcl.id
  where master_join_mhpljw.source_id = airport_heliport.airportheliportavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_pt_xwhsfe.id) as lat_usage
  from master_join master_join_dfojkv
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_pt_xwhsfe on master_join_dfojkv.target_id = airport_heliport_airportheliportusage_pt_xwhsfe.id
  where master_join_dfojkv.source_id = airport_heliport.airportheliportavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_vuupty.title as varchar), '(' || organisation_organisationauthority_pt_vuupty.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_vuupty.href AS theorganisationauthority_href,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vuupty on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_vuupty.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_iogudg.*) AS timeinterval
  from master_join master_join_qefckl
  join shared.timesheet_view shared_timesheet_view_iogudg on master_join_qefckl.target_id = shared_timesheet_view_iogudg.id
  where master_join_qefckl.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eqwtdb.*) AS annotation
  from master_join master_join_xbgyxo
  join notes.note_view notes_note_view_eqwtdb on master_join_xbgyxo.target_id = notes_note_view_eqwtdb.id
  where master_join_xbgyxo.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_hzmrtn.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_hzmrtn.title AS varchar), '(' || organisation_organisationauthority_pt_hzmrtn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_hzmrtn.href
  )) as lat_specialdateauthority  from master_join master_join_cwawlw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_hzmrtn on master_join_cwawlw.target_id = organisation_organisationauthority_pt_hzmrtn.id
  where master_join_cwawlw.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_user.lat_user as user,
    lat_levels.lat_levels as levels,
    lat_aircraft.lat_aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_mlqwsz.*) AS timeinterval
  from master_join master_join_aasegg
  join shared.timesheet_view shared_timesheet_view_mlqwsz on master_join_aasegg.target_id = shared_timesheet_view_mlqwsz.id
  where master_join_aasegg.source_id = airspace.airspaceactivation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xgzhjp.*) AS annotation
  from master_join master_join_cdxpnj
  join notes.note_view notes_note_view_xgzhjp on master_join_cdxpnj.target_id = notes_note_view_xgzhjp.id
  where master_join_cdxpnj.source_id = airspace.airspaceactivation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_pxmpgz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_pxmpgz.title AS varchar), '(' || organisation_organisationauthority_pt_pxmpgz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_pxmpgz.href
  )) as lat_specialdateauthority  from master_join master_join_obdmhy
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_pxmpgz on master_join_obdmhy.target_id = organisation_organisationauthority_pt_pxmpgz.id
  where master_join_obdmhy.source_id = airspace.airspaceactivation.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_llcnrx.id) as lat_levels
  from master_join master_join_xaypqw
  join shared.airspacelayer_pt shared_airspacelayer_pt_llcnrx on master_join_xaypqw.target_id = shared_airspacelayer_pt_llcnrx.id
  where master_join_xaypqw.source_id = airspace.airspaceactivation.id
) as lat_levels on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_hhaumv.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_hhaumv.title AS varchar), '(' || organisation_organisationauthority_pt_hhaumv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_hhaumv.href
  )) as lat_user  from master_join master_join_hgifsw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_hhaumv on master_join_hgifsw.target_id = organisation_organisationauthority_pt_hhaumv.id
  where master_join_hgifsw.source_id = airspace.airspaceactivation.id
) as lat_user on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_qnbxzc.id) as lat_aircraft
  from master_join master_join_lnvzuj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_qnbxzc on master_join_lnvzuj.target_id = shared_aircraftcharacteristic_pt_qnbxzc.id
  where master_join_lnvzuj.source_id = airspace.airspaceactivation.id
) as lat_aircraft on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_associatedlevels.lat_associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_zehmis.*) AS timeinterval
  from master_join master_join_miiwmz
  join shared.timesheet_view shared_timesheet_view_zehmis on master_join_miiwmz.target_id = shared_timesheet_view_zehmis.id
  where master_join_miiwmz.source_id = airspace.airspacelayerclass.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qsghwu.*) AS annotation
  from master_join master_join_ikwtss
  join notes.note_view notes_note_view_qsghwu on master_join_ikwtss.target_id = notes_note_view_qsghwu.id
  where master_join_ikwtss.source_id = airspace.airspacelayerclass.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_htpaio.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_htpaio.title AS varchar), '(' || organisation_organisationauthority_pt_htpaio.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_htpaio.href
  )) as lat_specialdateauthority  from master_join master_join_rdleyr
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_htpaio on master_join_rdleyr.target_id = organisation_organisationauthority_pt_htpaio.id
  where master_join_rdleyr.source_id = airspace.airspacelayerclass.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_vwtnhs.id) as lat_associatedlevels
  from master_join master_join_tqbjxw
  join shared.airspacelayer_pt shared_airspacelayer_pt_vwtnhs on master_join_tqbjxw.target_id = shared_airspacelayer_pt_vwtnhs.id
  where master_join_tqbjxw.source_id = airspace.airspacelayerclass.id
) as lat_associatedlevels on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_bfdxnw.*) AS timeinterval
  from master_join master_join_uwfuad
  join shared.timesheet_view shared_timesheet_view_bfdxnw on master_join_uwfuad.target_id = shared_timesheet_view_bfdxnw.id
  where master_join_uwfuad.source_id = airport_heliport.altimetersourcestatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_trsdjp.*) AS annotation
  from master_join master_join_bshrpd
  join notes.note_view notes_note_view_trsdjp on master_join_bshrpd.target_id = notes_note_view_trsdjp.id
  where master_join_bshrpd.source_id = airport_heliport.altimetersourcestatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_xbimrf.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_xbimrf.title AS varchar), '(' || organisation_organisationauthority_pt_xbimrf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_xbimrf.href
  )) as lat_specialdateauthority  from master_join master_join_xjcjtq
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_xbimrf on master_join_xjcjtq.target_id = organisation_organisationauthority_pt_xbimrf.id
  where master_join_xjcjtq.source_id = airport_heliport.altimetersourcestatus.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_tyztbl.*) AS timeinterval
  from master_join master_join_wajhpz
  join shared.timesheet_view shared_timesheet_view_tyztbl on master_join_wajhpz.target_id = shared_timesheet_view_tyztbl.id
  where master_join_wajhpz.source_id = airport_heliport.apronareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xqewsh.*) AS annotation
  from master_join master_join_jbwmjp
  join notes.note_view notes_note_view_xqewsh on master_join_jbwmjp.target_id = notes_note_view_xqewsh.id
  where master_join_jbwmjp.source_id = airport_heliport.apronareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_htrcfz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_htrcfz.title AS varchar), '(' || organisation_organisationauthority_pt_htrcfz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_htrcfz.href
  )) as lat_specialdateauthority  from master_join master_join_fylhys
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_htrcfz on master_join_fylhys.target_id = organisation_organisationauthority_pt_htrcfz.id
  where master_join_fylhys.source_id = airport_heliport.apronareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_pt_qwriei.id) as lat_usage
  from master_join master_join_qcroxr
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_pt_qwriei on master_join_qcroxr.target_id = airport_heliport_apronareausage_pt_qwriei.id
  where master_join_qcroxr.source_id = airport_heliport.apronareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_odysrh.id) AS sectordescription,
    geometry_surface_view_upzebh.geom AS restrictionarea_geom,
    geometry_surface_view_upzebh.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_odysrh on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_odysrh.id
left join geometry.surface_view geometry_surface_view_upzebh on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_upzebh.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xhknbp.*) AS timeinterval
  from master_join master_join_rzuaha
  join shared.timesheet_view shared_timesheet_view_xhknbp on master_join_rzuaha.target_id = shared_timesheet_view_xhknbp.id
  where master_join_rzuaha.source_id = procedure.circlingrestriction.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xzghur.*) AS annotation
  from master_join master_join_bldcpx
  join notes.note_view notes_note_view_xzghur on master_join_bldcpx.target_id = notes_note_view_xzghur.id
  where master_join_bldcpx.source_id = procedure.circlingrestriction.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_cilztn.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_cilztn.title AS varchar), '(' || organisation_organisationauthority_pt_cilztn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_cilztn.href
  )) as lat_specialdateauthority  from master_join master_join_rduzqk
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_cilztn on master_join_rduzqk.target_id = organisation_organisationauthority_pt_cilztn.id
  where master_join_rduzqk.source_id = procedure.circlingrestriction.id
) as lat_specialdateauthority on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_weather.lat_weather as weather,
    lat_aircraft.lat_aircraft as aircraft,
    lat_flight.lat_flight as flight,
    lat_subcondition.lat_subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_aeoyma.*) AS timeinterval
  from master_join master_join_wbopzn
  join shared.timesheet_view shared_timesheet_view_aeoyma on master_join_wbopzn.target_id = shared_timesheet_view_aeoyma.id
  where master_join_wbopzn.source_id = airport_heliport.conditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hqhgpv.*) AS annotation
  from master_join master_join_ztwlab
  join notes.note_view notes_note_view_hqhgpv on master_join_ztwlab.target_id = notes_note_view_hqhgpv.id
  where master_join_ztwlab.source_id = airport_heliport.conditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_weoqxx.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_weoqxx.title AS varchar), '(' || organisation_organisationauthority_pt_weoqxx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_weoqxx.href
  )) as lat_specialdateauthority  from master_join master_join_hzpuor
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_weoqxx on master_join_hzpuor.target_id = organisation_organisationauthority_pt_weoqxx.id
  where master_join_hzpuor.source_id = airport_heliport.conditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_pt_pxdgcd.id) as lat_weather
  from master_join master_join_fmsmbm
  join shared.meteorology_pt shared_meteorology_pt_pxdgcd on master_join_fmsmbm.target_id = shared_meteorology_pt_pxdgcd.id
  where master_join_fmsmbm.source_id = airport_heliport.conditioncombination.id
) as lat_weather on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_julqta.id) as lat_aircraft
  from master_join master_join_vntnpo
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_julqta on master_join_vntnpo.target_id = shared_aircraftcharacteristic_pt_julqta.id
  where master_join_vntnpo.source_id = airport_heliport.conditioncombination.id
) as lat_aircraft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_pt_fuhgjo.id) as lat_flight
  from master_join master_join_eaggsk
  join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_fuhgjo on master_join_eaggsk.target_id = shared_flightcharacteristic_pt_fuhgjo.id
  where master_join_eaggsk.source_id = airport_heliport.conditioncombination.id
) as lat_flight on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_pt_fsfiku.id) as lat_subcondition
  from master_join master_join_arkwdo
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_fsfiku on master_join_arkwdo.target_id = airport_heliport_conditioncombination_pt_fsfiku.id
  where master_join_arkwdo.source_id = airport_heliport.conditioncombination.id
) as lat_subcondition on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_element.lat_element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_bihlny.*) AS timeinterval
  from master_join master_join_nimbzw
  join shared.timesheet_view shared_timesheet_view_bihlny on master_join_nimbzw.target_id = shared_timesheet_view_bihlny.id
  where master_join_nimbzw.source_id = routes.flightconditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zcsmtr.*) AS annotation
  from master_join master_join_tdalne
  join notes.note_view notes_note_view_zcsmtr on master_join_tdalne.target_id = notes_note_view_zcsmtr.id
  where master_join_tdalne.source_id = routes.flightconditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_pywkxv.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_pywkxv.title AS varchar), '(' || organisation_organisationauthority_pt_pywkxv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_pywkxv.href
  )) as lat_specialdateauthority  from master_join master_join_ryehrx
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_pywkxv on master_join_ryehrx.target_id = organisation_organisationauthority_pt_pywkxv.id
  where master_join_ryehrx.source_id = routes.flightconditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_pt_eqrggq.id) as lat_element
  from master_join master_join_ejftmp
  join routes.flightconditionelement_pt routes_flightconditionelement_pt_eqrggq on master_join_ejftmp.target_id = routes_flightconditionelement_pt_eqrggq.id
  where master_join_ejftmp.source_id = routes.flightconditioncombination.id
) as lat_element on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_fauwmf.*) AS timeinterval
  from master_join master_join_ltdmgl
  join shared.timesheet_view shared_timesheet_view_fauwmf on master_join_ltdmgl.target_id = shared_timesheet_view_fauwmf.id
  where master_join_ltdmgl.source_id = airport_heliport.groundlightingavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_egdhrd.*) AS annotation
  from master_join master_join_bsmvxs
  join notes.note_view notes_note_view_egdhrd on master_join_bsmvxs.target_id = notes_note_view_egdhrd.id
  where master_join_bsmvxs.source_id = airport_heliport.groundlightingavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nrapcw.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nrapcw.title AS varchar), '(' || organisation_organisationauthority_pt_nrapcw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nrapcw.href
  )) as lat_specialdateauthority  from master_join master_join_xxifmv
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nrapcw on master_join_xxifmv.target_id = organisation_organisationauthority_pt_nrapcw.id
  where master_join_xxifmv.source_id = airport_heliport.groundlightingavailability.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_czmbrl.*) AS timeinterval
  from master_join master_join_meprmh
  join shared.timesheet_view shared_timesheet_view_czmbrl on master_join_meprmh.target_id = shared_timesheet_view_czmbrl.id
  where master_join_meprmh.source_id = shared.lightelementstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eegoch.*) AS annotation
  from master_join master_join_nvzqni
  join notes.note_view notes_note_view_eegoch on master_join_nvzqni.target_id = notes_note_view_eegoch.id
  where master_join_nvzqni.source_id = shared.lightelementstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ftfbrj.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ftfbrj.title AS varchar), '(' || organisation_organisationauthority_pt_ftfbrj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ftfbrj.href
  )) as lat_specialdateauthority  from master_join master_join_zfppja
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ftfbrj on master_join_zfppja.target_id = organisation_organisationauthority_pt_ftfbrj.id
  where master_join_zfppja.source_id = shared.lightelementstatus.id
) as lat_specialdateauthority on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_dymgds.*) AS timeinterval
  from master_join master_join_vhhkus
  join shared.timesheet_view shared_timesheet_view_dymgds on master_join_vhhkus.target_id = shared_timesheet_view_dymgds.id
  where master_join_vhhkus.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vkggnh.*) AS annotation
  from master_join master_join_rflmst
  join notes.note_view notes_note_view_vkggnh on master_join_rflmst.target_id = notes_note_view_vkggnh.id
  where master_join_rflmst.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ymukkw.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ymukkw.title AS varchar), '(' || organisation_organisationauthority_pt_ymukkw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ymukkw.href
  )) as lat_specialdateauthority  from master_join master_join_bcguwp
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ymukkw on master_join_bcguwp.target_id = organisation_organisationauthority_pt_ymukkw.id
  where master_join_bcguwp.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_pt_vivjcg.id) as lat_usage
  from master_join master_join_imwzbg
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_pt_vivjcg on master_join_imwzbg.target_id = airport_heliport_manoeuvringareausage_pt_vivjcg.id
  where master_join_imwzbg.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_iioipk.*) AS timeinterval
  from master_join master_join_tmqpci
  join shared.timesheet_view shared_timesheet_view_iioipk on master_join_tmqpci.target_id = shared_timesheet_view_iioipk.id
  where master_join_tmqpci.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uyjids.*) AS annotation
  from master_join master_join_qqoplz
  join notes.note_view notes_note_view_uyjids on master_join_qqoplz.target_id = notes_note_view_uyjids.id
  where master_join_qqoplz.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_gdsips.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_gdsips.title AS varchar), '(' || organisation_organisationauthority_pt_gdsips.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_gdsips.href
  )) as lat_specialdateauthority  from master_join master_join_ebikge
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_gdsips on master_join_ebikge.target_id = organisation_organisationauthority_pt_gdsips.id
  where master_join_ebikge.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_unnpkz.*) AS timeinterval
  from master_join master_join_dbabsu
  join shared.timesheet_view shared_timesheet_view_unnpkz on master_join_dbabsu.target_id = shared_timesheet_view_unnpkz.id
  where master_join_dbabsu.source_id = navaids_points.navaidoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_trdhlb.*) AS annotation
  from master_join master_join_uzgess
  join notes.note_view notes_note_view_trdhlb on master_join_uzgess.target_id = notes_note_view_trdhlb.id
  where master_join_uzgess.source_id = navaids_points.navaidoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ndcxuh.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ndcxuh.title AS varchar), '(' || organisation_organisationauthority_pt_ndcxuh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ndcxuh.href
  )) as lat_specialdateauthority  from master_join master_join_kgpzgc
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ndcxuh on master_join_kgpzgc.target_id = organisation_organisationauthority_pt_ndcxuh.id
  where master_join_kgpzgc.source_id = navaids_points.navaidoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_twhgjc.*) AS timeinterval
  from master_join master_join_lieebc
  join shared.timesheet_view shared_timesheet_view_twhgjc on master_join_lieebc.target_id = shared_timesheet_view_twhgjc.id
  where master_join_lieebc.source_id = shared.onlinecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cqfogd.*) AS annotation
  from master_join master_join_fnwtqy
  join notes.note_view notes_note_view_cqfogd on master_join_fnwtqy.target_id = notes_note_view_cqfogd.id
  where master_join_fnwtqy.source_id = shared.onlinecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ujyoie.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ujyoie.title AS varchar), '(' || organisation_organisationauthority_pt_ujyoie.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ujyoie.href
  )) as lat_specialdateauthority  from master_join master_join_mrkbbc
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ujyoie on master_join_mrkbbc.target_id = organisation_organisationauthority_pt_ujyoie.id
  where master_join_mrkbbc.source_id = shared.onlinecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_jpkwyh.*) AS timeinterval
  from master_join master_join_zoktws
  join shared.timesheet_view shared_timesheet_view_jpkwyh on master_join_zoktws.target_id = shared_timesheet_view_jpkwyh.id
  where master_join_zoktws.source_id = shared.postaladdress.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hhbqao.*) AS annotation
  from master_join master_join_bepwic
  join notes.note_view notes_note_view_hhbqao on master_join_bepwic.target_id = notes_note_view_hhbqao.id
  where master_join_bepwic.source_id = shared.postaladdress.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ghpaqu.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ghpaqu.title AS varchar), '(' || organisation_organisationauthority_pt_ghpaqu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ghpaqu.href
  )) as lat_specialdateauthority  from master_join master_join_gsrkan
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ghpaqu on master_join_gsrkan.target_id = organisation_organisationauthority_pt_ghpaqu.id
  where master_join_gsrkan.source_id = shared.postaladdress.id
) as lat_specialdateauthority on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ynkfwb.*) AS timeinterval
  from master_join master_join_ydnbha
  join shared.timesheet_view shared_timesheet_view_ynkfwb on master_join_ydnbha.target_id = shared_timesheet_view_ynkfwb.id
  where master_join_ydnbha.source_id = procedure.procedureavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oygvnh.*) AS annotation
  from master_join master_join_nfzkpm
  join notes.note_view notes_note_view_oygvnh on master_join_nfzkpm.target_id = notes_note_view_oygvnh.id
  where master_join_nfzkpm.source_id = procedure.procedureavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vesfgz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vesfgz.title AS varchar), '(' || organisation_organisationauthority_pt_vesfgz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vesfgz.href
  )) as lat_specialdateauthority  from master_join master_join_pnrtuu
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vesfgz on master_join_pnrtuu.target_id = organisation_organisationauthority_pt_vesfgz.id
  where master_join_pnrtuu.source_id = procedure.procedureavailability.id
) as lat_specialdateauthority on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_afeoch.*) AS timeinterval
  from master_join master_join_navrnc
  join shared.timesheet_view shared_timesheet_view_afeoch on master_join_navrnc.target_id = shared_timesheet_view_afeoch.id
  where master_join_navrnc.source_id = service.radiocommunicationoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tjunbg.*) AS annotation
  from master_join master_join_gsqdeq
  join notes.note_view notes_note_view_tjunbg on master_join_gsqdeq.target_id = notes_note_view_tjunbg.id
  where master_join_gsqdeq.source_id = service.radiocommunicationoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_qoujds.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_qoujds.title AS varchar), '(' || organisation_organisationauthority_pt_qoujds.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_qoujds.href
  )) as lat_specialdateauthority  from master_join master_join_eymvsh
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_qoujds on master_join_eymvsh.target_id = organisation_organisationauthority_pt_qoujds.id
  where master_join_eymvsh.source_id = service.radiocommunicationoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_levels.lat_levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_syxyhf.*) AS timeinterval
  from master_join master_join_bkbppi
  join shared.timesheet_view shared_timesheet_view_syxyhf on master_join_bkbppi.target_id = shared_timesheet_view_syxyhf.id
  where master_join_bkbppi.source_id = routes.routeavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tvluzr.*) AS annotation
  from master_join master_join_aojwui
  join notes.note_view notes_note_view_tvluzr on master_join_aojwui.target_id = notes_note_view_tvluzr.id
  where master_join_aojwui.source_id = routes.routeavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_jflffu.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_jflffu.title AS varchar), '(' || organisation_organisationauthority_pt_jflffu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_jflffu.href
  )) as lat_specialdateauthority  from master_join master_join_tnueyv
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_jflffu on master_join_tnueyv.target_id = organisation_organisationauthority_pt_jflffu.id
  where master_join_tnueyv.source_id = routes.routeavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_hqjjrc.id) as lat_levels
  from master_join master_join_wosvfz
  join shared.airspacelayer_pt shared_airspacelayer_pt_hqjjrc on master_join_wosvfz.target_id = shared_airspacelayer_pt_hqjjrc.id
  where master_join_wosvfz.source_id = routes.routeavailability.id
) as lat_levels on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ujsedh.*) AS timeinterval
  from master_join master_join_tlgwql
  join shared.timesheet_view shared_timesheet_view_ujsedh on master_join_tlgwql.target_id = shared_timesheet_view_ujsedh.id
  where master_join_tlgwql.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zjoiia.*) AS annotation
  from master_join master_join_utvqsb
  join notes.note_view notes_note_view_zjoiia on master_join_utvqsb.target_id = notes_note_view_zjoiia.id
  where master_join_utvqsb.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_iqwetw.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_iqwetw.title AS varchar), '(' || organisation_organisationauthority_pt_iqwetw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_iqwetw.href
  )) as lat_specialdateauthority  from master_join master_join_rbmbhq
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_iqwetw on master_join_rbmbhq.target_id = organisation_organisationauthority_pt_iqwetw.id
  where master_join_rbmbhq.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_pbhmog.*) AS timeinterval
  from master_join master_join_vssljq
  join shared.timesheet_view shared_timesheet_view_pbhmog on master_join_vssljq.target_id = shared_timesheet_view_pbhmog.id
  where master_join_vssljq.source_id = service.serviceoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_npjwev.*) AS annotation
  from master_join master_join_idipgg
  join notes.note_view notes_note_view_npjwev on master_join_idipgg.target_id = notes_note_view_npjwev.id
  where master_join_idipgg.source_id = service.serviceoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_idvfzl.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_idvfzl.title AS varchar), '(' || organisation_organisationauthority_pt_idvfzl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_idvfzl.href
  )) as lat_specialdateauthority  from master_join master_join_qbsodc
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_idvfzl on master_join_qbsodc.target_id = organisation_organisationauthority_pt_idvfzl.id
  where master_join_qbsodc.source_id = service.serviceoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_txzfxk.*) AS timeinterval
  from master_join master_join_zbgwyx
  join shared.timesheet_view shared_timesheet_view_txzfxk on master_join_zbgwyx.target_id = shared_timesheet_view_txzfxk.id
  where master_join_zbgwyx.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uzkznm.*) AS annotation
  from master_join master_join_ejbqfj
  join notes.note_view notes_note_view_uzkznm on master_join_ejbqfj.target_id = notes_note_view_uzkznm.id
  where master_join_ejbqfj.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_gmnpth.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_gmnpth.title AS varchar), '(' || organisation_organisationauthority_pt_gmnpth.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_gmnpth.href
  )) as lat_specialdateauthority  from master_join master_join_jesyxm
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_gmnpth on master_join_jesyxm.target_id = organisation_organisationauthority_pt_gmnpth.id
  where master_join_jesyxm.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_nyofak.*) AS timeinterval
  from master_join master_join_alnnru
  join shared.timesheet_view shared_timesheet_view_nyofak on master_join_alnnru.target_id = shared_timesheet_view_nyofak.id
  where master_join_alnnru.source_id = shared.telephonecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_boxmdr.*) AS annotation
  from master_join master_join_yawesk
  join notes.note_view notes_note_view_boxmdr on master_join_yawesk.target_id = notes_note_view_boxmdr.id
  where master_join_yawesk.source_id = shared.telephonecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_lgsctb.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_lgsctb.title AS varchar), '(' || organisation_organisationauthority_pt_lgsctb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_lgsctb.href
  )) as lat_specialdateauthority  from master_join master_join_kqdrfk
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_lgsctb on master_join_kqdrfk.target_id = organisation_organisationauthority_pt_lgsctb.id
  where master_join_kqdrfk.source_id = shared.telephonecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_aonker.*) AS timeinterval
  from master_join master_join_wqdqzj
  join shared.timesheet_view shared_timesheet_view_aonker on master_join_wqdqzj.target_id = shared_timesheet_view_aonker.id
  where master_join_wqdqzj.source_id = organisation.unitavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qbnhcx.*) AS annotation
  from master_join master_join_xjmkgj
  join notes.note_view notes_note_view_qbnhcx on master_join_xjmkgj.target_id = notes_note_view_qbnhcx.id
  where master_join_xjmkgj.source_id = organisation.unitavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_hwiyjx.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_hwiyjx.title AS varchar), '(' || organisation_organisationauthority_pt_hwiyjx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_hwiyjx.href
  )) as lat_specialdateauthority  from master_join master_join_khkgya
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_hwiyjx on master_join_khkgya.target_id = organisation_organisationauthority_pt_hwiyjx.id
  where master_join_khkgya.source_id = organisation.unitavailability.id
) as lat_specialdateauthority on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_jvwzlm.*) AS timeinterval
  from master_join master_join_fexvgh
  join shared.timesheet_view shared_timesheet_view_jvwzlm on master_join_fexvgh.target_id = shared_timesheet_view_jvwzlm.id
  where master_join_fexvgh.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_icmxsi.*) AS annotation
  from master_join master_join_itubgu
  join notes.note_view notes_note_view_icmxsi on master_join_itubgu.target_id = notes_note_view_icmxsi.id
  where master_join_itubgu.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_jqycwu.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_jqycwu.title AS varchar), '(' || organisation_organisationauthority_pt_jqycwu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_jqycwu.href
  )) as lat_specialdateauthority  from master_join master_join_tgotfp
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_jqycwu on master_join_tgotfp.target_id = organisation_organisationauthority_pt_jqycwu.id
  where master_join_tgotfp.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_specialdateauthority on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    geometry_elevatedpoint_view_vubdnm.geom AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_vubdnm.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_vubdnm.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_vubdnm.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_vubdnm.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_vubdnm.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_vubdnm.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_vubdnm.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_lucyco.geom AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_lucyco.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_lucyco.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_lucyco.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_lucyco.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_lucyco.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_wuyomm.geom AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_wuyomm.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_wuyomm.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_wuyomm.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_wuyomm.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_wuyomm.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_lighting.lat_lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vubdnm on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_vubdnm.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_lucyco on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_lucyco.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wuyomm on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_wuyomm.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_cvfrpi.*) AS timeinterval
  from master_join master_join_gylnrz
  join shared.timesheet_view shared_timesheet_view_cvfrpi on master_join_gylnrz.target_id = shared_timesheet_view_cvfrpi.id
  where master_join_gylnrz.source_id = obstacles.verticalstructurepart.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_voszip.*) AS annotation
  from master_join master_join_gyqotg
  join notes.note_view notes_note_view_voszip on master_join_gyqotg.target_id = notes_note_view_voszip.id
  where master_join_gyqotg.source_id = obstacles.verticalstructurepart.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_chvxmf.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_chvxmf.title AS varchar), '(' || organisation_organisationauthority_pt_chvxmf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_chvxmf.href
  )) as lat_specialdateauthority  from master_join master_join_crfxie
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_chvxmf on master_join_crfxie.target_id = organisation_organisationauthority_pt_chvxmf.id
  where master_join_crfxie.source_id = obstacles.verticalstructurepart.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_pt_pkrkdc.id) as lat_lighting
  from master_join master_join_gsgblj
  join shared.lightelement_pt shared_lightelement_pt_pkrkdc on master_join_gsgblj.target_id = shared_lightelement_pt_pkrkdc.id
  where master_join_gsgblj.source_id = obstacles.verticalstructurepart.id
) as lat_lighting on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_cimhrk.*) AS timeinterval
  from master_join master_join_ontwzl
  join shared.timesheet_view shared_timesheet_view_cimhrk on master_join_ontwzl.target_id = shared_timesheet_view_cimhrk.id
  where master_join_ontwzl.source_id = airport_heliport.workareaactivity.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dmcong.*) AS annotation
  from master_join master_join_kibbpp
  join notes.note_view notes_note_view_dmcong on master_join_kibbpp.target_id = notes_note_view_dmcong.id
  where master_join_kibbpp.source_id = airport_heliport.workareaactivity.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_qxedcl.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_qxedcl.title AS varchar), '(' || organisation_organisationauthority_pt_qxedcl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_qxedcl.href
  )) as lat_specialdateauthority  from master_join master_join_dklpgc
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_qxedcl on master_join_dklpgc.target_id = organisation_organisationauthority_pt_qxedcl.id
  where master_join_dklpgc.source_id = airport_heliport.workareaactivity.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.onlinecontact_view', 'shared.postaladdress_view', 'shared.telephonecontact_view', 'notes.note_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_qjxxwz.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_qjxxwz on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_qjxxwz.id
left join lateral(
  select
  from master_join master_join_nqwwak
  join shared.contactinformation_view shared_contactinformation_view_undzjl on master_join_nqwwak.target_id = shared_contactinformation_view_undzjl.id
  where master_join_nqwwak.source_id = airport_heliport.airportheliportusage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_giomrp.*) AS annotation
  from master_join master_join_hrlofu
  join notes.note_view notes_note_view_giomrp on master_join_hrlofu.target_id = notes_note_view_giomrp.id
  where master_join_hrlofu.source_id = airport_heliport.airportheliportusage.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_puczun.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_puczun on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_puczun.id
left join lateral(
  select
  from master_join master_join_wozxfn
  join shared.contactinformation_view shared_contactinformation_view_lltqsw on master_join_wozxfn.target_id = shared_contactinformation_view_lltqsw.id
  where master_join_wozxfn.source_id = airport_heliport.apronareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ogpwya.*) AS annotation
  from master_join master_join_ejxkct
  join notes.note_view notes_note_view_ogpwya on master_join_ejxkct.target_id = notes_note_view_ogpwya.id
  where master_join_ejxkct.source_id = airport_heliport.apronareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    lat_routeelement.lat_routeelement as routeelement,
    lat_annotation.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_pt_nxzhyo.id) as lat_routeelement
  from master_join master_join_ouuwgq
  join routes.flightroutingelement_pt routes_flightroutingelement_pt_nxzhyo on master_join_ouuwgq.target_id = routes_flightroutingelement_pt_nxzhyo.id
  where master_join_ouuwgq.source_id = routes.flightrestrictionroute.id
) as lat_routeelement on TRUE
left join lateral(
  select
  from master_join master_join_rlydxz
  join shared.contactinformation_view shared_contactinformation_view_vtrngu on master_join_rlydxz.target_id = shared_contactinformation_view_vtrngu.id
  where master_join_rlydxz.source_id = routes.flightrestrictionroute.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yoexeo.*) AS annotation
  from master_join master_join_nrxnct
  join notes.note_view notes_note_view_yoexeo on master_join_nrxnct.target_id = notes_note_view_yoexeo.id
  where master_join_nrxnct.source_id = routes.flightrestrictionroute.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_wzjdtw.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_wzjdtw on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_wzjdtw.id
left join lateral(
  select
  from master_join master_join_yroqum
  join shared.contactinformation_view shared_contactinformation_view_wazjls on master_join_yroqum.target_id = shared_contactinformation_view_wazjls.id
  where master_join_yroqum.source_id = airport_heliport.manoeuvringareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_egufkl.*) AS annotation
  from master_join master_join_knoxfo
  join notes.note_view notes_note_view_egufkl on master_join_knoxfo.target_id = notes_note_view_egufkl.id
  where master_join_knoxfo.source_id = airport_heliport.manoeuvringareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_txmnwd.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_txmnwd.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_txmnwd.href AS oppositetrack_href,
    lat_availability.lat_availability as availability,
    lat_protectingairspace.lat_protectingairspace as protectingairspace,
    lat_track.lat_track as track,
    lat_anchor.lat_anchor as anchor,
    lat_managingorganisation.lat_managingorganisation as managingorganisation,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_txmnwd on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_txmnwd.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_qdnidd.*) as lat_availability
  from master_join master_join_psedfi
  join routes.routeavailability_view routes_routeavailability_view_qdnidd on master_join_psedfi.target_id = routes_routeavailability_view_qdnidd.id
  where master_join_psedfi.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_mkdwhr.id,
      'title', coalesce(cast(airspace_airspace_pt_mkdwhr.title AS varchar), '(' || airspace_airspace_pt_mkdwhr.nilreason[1] || ')'),
      'href', airspace_airspace_pt_mkdwhr.href
  )) as lat_protectingairspace  from master_join master_join_ukvjyk
  join airspace.airspace_pt airspace_airspace_pt_mkdwhr on master_join_ukvjyk.target_id = airspace_airspace_pt_mkdwhr.id
  where master_join_ukvjyk.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_protectingairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_view_qjfmpc.*) as lat_track
  from master_join master_join_snsagm
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_view_qjfmpc on master_join_snsagm.target_id = aerial_refuelling_aerialrefuellingtrack_view_qjfmpc.id
  where master_join_snsagm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_track on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_view_sjhifo.*) as lat_anchor
  from master_join master_join_wldmeh
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_view_sjhifo on master_join_wldmeh.target_id = aerial_refuelling_aerialrefuellinganchor_view_sjhifo.id
  where master_join_wldmeh.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_anchor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_view_bdajul.*) as lat_managingorganisation
  from master_join master_join_ewicpj
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_view_bdajul on master_join_ewicpj.target_id = aerial_refuelling_authorityforaerialrefuelling_view_bdajul.id
  where master_join_ewicpj.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_managingorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mbfycd.*) AS annotation
  from master_join master_join_herwmm
  join notes.note_view notes_note_view_mbfycd on master_join_herwmm.target_id = notes_note_view_mbfycd.id
  where master_join_herwmm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_annotation on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_zfsftv.title as varchar), '(' || obstacles_verticalstructure_pt_zfsftv.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_zfsftv.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uyromk.title as varchar), '(' || airport_heliport_airportheliport_pt_uyromk.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_uyromk.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_gzxtvn.geom AS location_geom,
    geometry_elevatedpoint_view_gzxtvn.longitude AS location_longitude,
    geometry_elevatedpoint_view_gzxtvn.latitude AS location_latitude,
    geometry_elevatedpoint_view_gzxtvn.elevation AS location_elevation,
    geometry_elevatedpoint_view_gzxtvn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gzxtvn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gzxtvn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gzxtvn.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_zfsftv on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_zfsftv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uyromk on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_uyromk.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gzxtvn on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_gzxtvn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zyncwk.*) AS annotation
  from master_join master_join_upgmwu
  join notes.note_view notes_note_view_zyncwk on master_join_upgmwu.target_id = notes_note_view_zyncwk.id
  where master_join_upgmwu.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as lat_annotation on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_aispbz.geom AS location_geom,
    geometry_elevatedpoint_view_aispbz.longitude AS location_longitude,
    geometry_elevatedpoint_view_aispbz.latitude AS location_latitude,
    geometry_elevatedpoint_view_aispbz.elevation AS location_elevation,
    geometry_elevatedpoint_view_aispbz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aispbz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aispbz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aispbz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_cexkuc.title as varchar), '(' || organisation_unit_pt_cexkuc.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_cexkuc.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aispbz on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_aispbz.id
left join organisation.unit_pt organisation_unit_pt_cexkuc on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_cexkuc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_wbvstn.*) as lat_callsign
  from master_join master_join_qoziyh
  join service.callsigndetail_view service_callsigndetail_view_wbvstn on master_join_qoziyh.target_id = service_callsigndetail_view_wbvstn.id
  where master_join_qoziyh.source_id = service.aircraftgroundservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_ojfkml.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_ojfkml.title AS varchar), '(' || service_radiocommunicationchannel_pt_ojfkml.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_ojfkml.href
  )) as lat_radiocommunication  from master_join master_join_lyblmu
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_ojfkml on master_join_lyblmu.target_id = service_radiocommunicationchannel_pt_ojfkml.id
  where master_join_lyblmu.source_id = service.aircraftgroundservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_fstris
  join shared.contactinformation_view shared_contactinformation_view_sxmnvp on master_join_fstris.target_id = shared_contactinformation_view_sxmnvp.id
  where master_join_fstris.source_id = service.aircraftgroundservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_hpsydd.*) as lat_availability
  from master_join master_join_ahrwpe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_hpsydd on master_join_ahrwpe.target_id = service_serviceoperationalstatus_view_hpsydd.id
  where master_join_ahrwpe.source_id = service.aircraftgroundservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_veapbg.*) AS annotation
  from master_join master_join_gldvdy
  join notes.note_view notes_note_view_veapbg on master_join_gldvdy.target_id = notes_note_view_veapbg.id
  where master_join_gldvdy.source_id = service.aircraftgroundservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_dugxan.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_dugxan.title AS varchar), '(' || airport_heliport_airportheliport_pt_dugxan.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_dugxan.href
  )) as lat_airportheliport  from master_join master_join_nzxmdm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dugxan on master_join_nzxmdm.target_id = airport_heliport_airportheliport_pt_dugxan.id
  where master_join_nzxmdm.source_id = service.aircraftgroundservice_ts.id
) as lat_airportheliport on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aircraftstandcontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rgileb.*) AS surfaceproperties,
    geometry_elevatedpoint_view_qpbutk.geom AS location_geom,
    geometry_elevatedpoint_view_qpbutk.longitude AS location_longitude,
    geometry_elevatedpoint_view_qpbutk.latitude AS location_latitude,
    geometry_elevatedpoint_view_qpbutk.elevation AS location_elevation,
    geometry_elevatedpoint_view_qpbutk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qpbutk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qpbutk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qpbutk.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_forimi.title as varchar), '(' || airport_heliport_apronelement_pt_forimi.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_forimi.href AS apronlocation_href,
    geometry_elevatedsurface_view_lubnpv.geom AS extent_geom,
    geometry_elevatedsurface_view_lubnpv.elevation AS extent_elevation,
    geometry_elevatedsurface_view_lubnpv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_lubnpv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_lubnpv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_lubnpv.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rgileb on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rgileb.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qpbutk on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_qpbutk.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_forimi on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_forimi.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lubnpv on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_lubnpv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_view_jayylb.*) as lat_contaminant
  from master_join master_join_lgwrjf
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_view_jayylb on master_join_lgwrjf.target_id = airport_heliport_aircraftstandcontamination_view_jayylb.id
  where master_join_lgwrjf.source_id = airport_heliport.aircraftstand_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uyjsnf.*) AS annotation
  from master_join master_join_pievzm
  join notes.note_view notes_note_view_uyjsnf on master_join_pievzm.target_id = notes_note_view_uyjsnf.id
  where master_join_pievzm.source_id = airport_heliport.aircraftstand_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_honqbf.*) as lat_availability
  from master_join master_join_ykfafr
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_honqbf on master_join_ykfafr.target_id = airport_heliport_apronareaavailability_view_honqbf.id
  where master_join_ykfafr.source_id = airport_heliport.aircraftstand_ts.id
) as lat_availability on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_rhkycw.geom AS location_geom,
    geometry_elevatedpoint_view_rhkycw.longitude AS location_longitude,
    geometry_elevatedpoint_view_rhkycw.latitude AS location_latitude,
    geometry_elevatedpoint_view_rhkycw.elevation AS location_elevation,
    geometry_elevatedpoint_view_rhkycw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rhkycw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rhkycw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rhkycw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ukfmpe.title as varchar), '(' || organisation_unit_pt_ukfmpe.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_ukfmpe.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rhkycw on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_rhkycw.id
left join organisation.unit_pt organisation_unit_pt_ukfmpe on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_ukfmpe.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_abmnqu.*) as lat_callsign
  from master_join master_join_uccawi
  join service.callsigndetail_view service_callsigndetail_view_abmnqu on master_join_uccawi.target_id = service_callsigndetail_view_abmnqu.id
  where master_join_uccawi.source_id = service.airportclearanceservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_rrujla.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_rrujla.title AS varchar), '(' || service_radiocommunicationchannel_pt_rrujla.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_rrujla.href
  )) as lat_radiocommunication  from master_join master_join_bzetcq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_rrujla on master_join_bzetcq.target_id = service_radiocommunicationchannel_pt_rrujla.id
  where master_join_bzetcq.source_id = service.airportclearanceservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_qkxtyi
  join shared.contactinformation_view shared_contactinformation_view_xiojoo on master_join_qkxtyi.target_id = shared_contactinformation_view_xiojoo.id
  where master_join_qkxtyi.source_id = service.airportclearanceservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_iimyxa.*) as lat_availability
  from master_join master_join_mdwexp
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_iimyxa on master_join_mdwexp.target_id = service_serviceoperationalstatus_view_iimyxa.id
  where master_join_mdwexp.source_id = service.airportclearanceservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ornqfk.*) AS annotation
  from master_join master_join_jgzjux
  join notes.note_view notes_note_view_ornqfk on master_join_jgzjux.target_id = notes_note_view_ornqfk.id
  where master_join_jgzjux.source_id = service.airportclearanceservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_pfprir.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_pfprir.title AS varchar), '(' || airport_heliport_airportheliport_pt_pfprir.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_pfprir.href
  )) as lat_airportheliport  from master_join master_join_ygbvyq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pfprir on master_join_ygbvyq.target_id = airport_heliport_airportheliport_pt_pfprir.id
  where master_join_ygbvyq.source_id = service.airportclearanceservice_ts.id
) as lat_airportheliport on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_sbarxv.title as varchar), '(' || airport_heliport_airportheliport_pt_sbarxv.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_sbarxv.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jbktdp.title as varchar), '(' || airport_heliport_airportheliport_pt_jbktdp.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_jbktdp.href AS dependentairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sbarxv on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_sbarxv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jbktdp on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_jbktdp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_updnap.*) AS annotation
  from master_join master_join_loxqnw
  join notes.note_view notes_note_view_updnap on master_join_loxqnw.target_id = notes_note_view_updnap.id
  where master_join_loxqnw.source_id = airport_heliport.airportheliportcollocation_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['airport_heliport.airportheliportresponsibilityorganisation_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.city_view', 'shared.contactinformation_view', 'airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_uswagy.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_wdtgss.geom AS arp_geom,
    geometry_elevatedpoint_view_wdtgss.longitude AS arp_longitude,
    geometry_elevatedpoint_view_wdtgss.latitude AS arp_latitude,
    geometry_elevatedpoint_view_wdtgss.elevation AS arp_elevation,
    geometry_elevatedpoint_view_wdtgss.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_wdtgss.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_wdtgss.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_wdtgss.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_kfxsfy.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_kfxsfy.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_kfxsfy.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_kfxsfy.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_kfxsfy.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_kfxsfy.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_servedcity.lat_servedcity as servedcity,
    lat_altimetersource.lat_altimetersource as altimetersource,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_uswagy on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_uswagy.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wdtgss on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_wdtgss.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kfxsfy on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_kfxsfy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_view_vfzwfi.*) as lat_contaminant
  from master_join master_join_wslybt
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_view_vfzwfi on master_join_wslybt.target_id = airport_heliport_airportheliportcontamination_view_vfzwfi.id
  where master_join_wslybt.source_id = airport_heliport.airportheliport_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_view_pqicef.*) as lat_servedcity
  from master_join master_join_gbtazu
  join airport_heliport.city_view airport_heliport_city_view_pqicef on master_join_gbtazu.target_id = airport_heliport_city_view_pqicef.id
  where master_join_gbtazu.source_id = airport_heliport.airportheliport_ts.id
) as lat_servedcity on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_tcjbrc.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_tcjbrc.title AS varchar), '(' || airport_heliport_altimetersource_pt_tcjbrc.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_tcjbrc.href
  )) as lat_altimetersource  from master_join master_join_jaaxeh
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_tcjbrc on master_join_jaaxeh.target_id = airport_heliport_altimetersource_pt_tcjbrc.id
  where master_join_jaaxeh.source_id = airport_heliport.airportheliport_ts.id
) as lat_altimetersource on TRUE
left join lateral(
  select
  from master_join master_join_jhebsg
  join shared.contactinformation_view shared_contactinformation_view_nawmak on master_join_jhebsg.target_id = shared_contactinformation_view_nawmak.id
  where master_join_jhebsg.source_id = airport_heliport.airportheliport_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_view_ujhxtc.*) as lat_availability
  from master_join master_join_pxkwza
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_view_ujhxtc on master_join_pxkwza.target_id = airport_heliport_airportheliportavailability_view_ujhxtc.id
  where master_join_pxkwza.source_id = airport_heliport.airportheliport_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zxtbxk.*) AS annotation
  from master_join master_join_uvaefz
  join notes.note_view notes_note_view_zxtbxk on master_join_uvaefz.target_id = notes_note_view_zxtbxk.id
  where master_join_uvaefz.source_id = airport_heliport.airportheliport_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_qhqtgm.geom AS area_geom,
    geometry_elevatedsurface_view_qhqtgm.elevation AS area_elevation,
    geometry_elevatedsurface_view_qhqtgm.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_qhqtgm.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_qhqtgm.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_qhqtgm.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_kdyysv.title as varchar), '(' || airport_heliport_airportheliport_pt_kdyysv.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_kdyysv.href AS affectedairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qhqtgm on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_qhqtgm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kdyysv on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_kdyysv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bhbbwu.*) AS annotation
  from master_join master_join_unjded
  join notes.note_view notes_note_view_bhbbwu on master_join_unjded.target_id = notes_note_view_bhbbwu.id
  where master_join_unjded.source_id = airport_heliport.airporthotspot_ts.id
) as lat_annotation on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_yvgzlj.*) as lat_element
  from master_join master_join_mualfj
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_yvgzlj on master_join_mualfj.target_id = airport_heliport_markingelement_view_yvgzlj.id
  where master_join_mualfj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sdrqyr.*) AS annotation
  from master_join master_join_zhzwho
  join notes.note_view notes_note_view_sdrqyr on master_join_zhzwho.target_id = notes_note_view_sdrqyr.id
  where master_join_zhzwho.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['service.oil_view', 'geometry.elevatedpoint_view', 'service.nitrogen_view', 'service.oxygen_view', 'service.callsigndetail_view', 'service.fuel_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_dmuint.geom AS location_geom,
    geometry_elevatedpoint_view_dmuint.longitude AS location_longitude,
    geometry_elevatedpoint_view_dmuint.latitude AS location_latitude,
    geometry_elevatedpoint_view_dmuint.elevation AS location_elevation,
    geometry_elevatedpoint_view_dmuint.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dmuint.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dmuint.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dmuint.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_cgmmhn.title as varchar), '(' || organisation_unit_pt_cgmmhn.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_cgmmhn.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_fuelsupply.lat_fuelsupply as fuelsupply,
    lat_oilsupply.lat_oilsupply as oilsupply,
    lat_nitrogensupply.lat_nitrogensupply as nitrogensupply,
    lat_oxygensupply.lat_oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dmuint on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_dmuint.id
left join organisation.unit_pt organisation_unit_pt_cgmmhn on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_cgmmhn.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_qkckca.*) as lat_callsign
  from master_join master_join_pudnpj
  join service.callsigndetail_view service_callsigndetail_view_qkckca on master_join_pudnpj.target_id = service_callsigndetail_view_qkckca.id
  where master_join_pudnpj.source_id = service.airportsuppliesservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_vpmymo.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_vpmymo.title AS varchar), '(' || service_radiocommunicationchannel_pt_vpmymo.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_vpmymo.href
  )) as lat_radiocommunication  from master_join master_join_exklxt
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_vpmymo on master_join_exklxt.target_id = service_radiocommunicationchannel_pt_vpmymo.id
  where master_join_exklxt.source_id = service.airportsuppliesservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_wyfzbi
  join shared.contactinformation_view shared_contactinformation_view_xdnhzv on master_join_wyfzbi.target_id = shared_contactinformation_view_xdnhzv.id
  where master_join_wyfzbi.source_id = service.airportsuppliesservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_cqfbie.*) as lat_availability
  from master_join master_join_vmehou
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_cqfbie on master_join_vmehou.target_id = service_serviceoperationalstatus_view_cqfbie.id
  where master_join_vmehou.source_id = service.airportsuppliesservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dayyjw.*) AS annotation
  from master_join master_join_gwfbsr
  join notes.note_view notes_note_view_dayyjw on master_join_gwfbsr.target_id = notes_note_view_dayyjw.id
  where master_join_gwfbsr.source_id = service.airportsuppliesservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_kfpglj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_kfpglj.title AS varchar), '(' || airport_heliport_airportheliport_pt_kfpglj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_kfpglj.href
  )) as lat_airportheliport  from master_join master_join_hsihlj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kfpglj on master_join_hsihlj.target_id = airport_heliport_airportheliport_pt_kfpglj.id
  where master_join_hsihlj.source_id = service.airportsuppliesservice_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_view_rftiot.*) as lat_fuelsupply
  from master_join master_join_plklen
  join service.fuel_view service_fuel_view_rftiot on master_join_plklen.target_id = service_fuel_view_rftiot.id
  where master_join_plklen.source_id = service.airportsuppliesservice_ts.id
) as lat_fuelsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_view_curjau.*) as lat_oilsupply
  from master_join master_join_zgrmyz
  join service.oil_view service_oil_view_curjau on master_join_zgrmyz.target_id = service_oil_view_curjau.id
  where master_join_zgrmyz.source_id = service.airportsuppliesservice_ts.id
) as lat_oilsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_view_nrgzbd.*) as lat_nitrogensupply
  from master_join master_join_iuwsjo
  join service.nitrogen_view service_nitrogen_view_nrgzbd on master_join_iuwsjo.target_id = service_nitrogen_view_nrgzbd.id
  where master_join_iuwsjo.source_id = service.airportsuppliesservice_ts.id
) as lat_nitrogensupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_view_wvaxtb.*) as lat_oxygensupply
  from master_join master_join_jlnwuw
  join service.oxygen_view service_oxygen_view_wvaxtb on master_join_jlnwuw.target_id = service_oxygen_view_wvaxtb.id
  where master_join_jlnwuw.source_id = service.airportsuppliesservice_ts.id
) as lat_oxygensupply on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_ydfchl.title as varchar), '(' || airspace_airspace_pt_ydfchl.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_ydfchl.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_cczeuv.title as varchar), '(' || airspace_airspace_pt_cczeuv.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_cczeuv.href AS enteredairspace_href,
    lat_annotation.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_ydfchl on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_ydfchl.id
left join airspace.airspace_pt airspace_airspace_pt_cczeuv on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_cczeuv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lrufys.*) AS annotation
  from master_join master_join_zvzxvq
  join notes.note_view notes_note_view_lrufys on master_join_zvzxvq.target_id = notes_note_view_lrufys.id
  where master_join_zvzxvq.source_id = routes.airspacebordercrossing_ts.id
) as lat_annotation on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacegeometrycomponent_view', 'airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view', 'notes.note_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_rteogf.title as varchar), '(' || routes_route_pt_rteogf.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_rteogf.href AS protectedroute_href,
    lat_clazz.lat_clazz as clazz,
    lat_geometrycomponent.lat_geometrycomponent as geometrycomponent,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_rteogf on airspace.airspace_ts.protectedroute_id = routes_route_pt_rteogf.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_view_wxqjnd.*) as lat_clazz
  from master_join master_join_eqvraw
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_view_wxqjnd on master_join_eqvraw.target_id = airspace_airspacelayerclass_view_wxqjnd.id
  where master_join_eqvraw.source_id = airspace.airspace_ts.id
) as lat_clazz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_view_yhanor.*) as lat_geometrycomponent
  from master_join master_join_ddvlcy
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_view_yhanor on master_join_ddvlcy.target_id = airspace_airspacegeometrycomponent_view_yhanor.id
  where master_join_ddvlcy.source_id = airspace.airspace_ts.id
) as lat_geometrycomponent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_view_epzbmx.*) as lat_activation
  from master_join master_join_ocqnug
  join airspace.airspaceactivation_view airspace_airspaceactivation_view_epzbmx on master_join_ocqnug.target_id = airspace_airspaceactivation_view_epzbmx.id
  where master_join_ocqnug.source_id = airspace.airspace_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ufzziv.*) AS annotation
  from master_join master_join_grnjcb
  join notes.note_view notes_note_view_ufzziv on master_join_grnjcb.target_id = notes_note_view_ufzziv.id
  where master_join_grnjcb.source_id = airspace.airspace_ts.id
) as lat_annotation on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_ihdacx.geom AS location_geom,
    geometry_elevatedpoint_view_ihdacx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ihdacx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ihdacx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ihdacx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ihdacx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ihdacx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ihdacx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ozmdvk.title as varchar), '(' || organisation_unit_pt_ozmdvk.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_ozmdvk.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_jgcntt.title as varchar), '(' || navaids_points_directionfinder_pt_jgcntt.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_jgcntt.href AS aircraftlocator_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ihdacx on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ihdacx.id
left join organisation.unit_pt organisation_unit_pt_ozmdvk on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ozmdvk.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_jgcntt on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_jgcntt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_cikbbf.*) as lat_callsign
  from master_join master_join_qmxoqh
  join service.callsigndetail_view service_callsigndetail_view_cikbbf on master_join_qmxoqh.target_id = service_callsigndetail_view_cikbbf.id
  where master_join_qmxoqh.source_id = service.airtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_nbuhlh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_nbuhlh.title AS varchar), '(' || service_radiocommunicationchannel_pt_nbuhlh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_nbuhlh.href
  )) as lat_radiocommunication  from master_join master_join_refloq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_nbuhlh on master_join_refloq.target_id = service_radiocommunicationchannel_pt_nbuhlh.id
  where master_join_refloq.source_id = service.airtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_vnsapr
  join shared.contactinformation_view shared_contactinformation_view_qmcxdm on master_join_vnsapr.target_id = shared_contactinformation_view_qmcxdm.id
  where master_join_vnsapr.source_id = service.airtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_fmbhtm.*) as lat_availability
  from master_join master_join_yqhwsx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_fmbhtm on master_join_yqhwsx.target_id = service_serviceoperationalstatus_view_fmbhtm.id
  where master_join_yqhwsx.source_id = service.airtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cxejip.*) AS annotation
  from master_join master_join_eqbrep
  join notes.note_view notes_note_view_cxejip on master_join_eqbrep.target_id = notes_note_view_cxejip.id
  where master_join_eqbrep.source_id = service.airtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_owqnnj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_owqnnj.title AS varchar), '(' || airport_heliport_airportheliport_pt_owqnnj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_owqnnj.href
  )) as lat_clientairport  from master_join master_join_icggzd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_owqnnj on master_join_icggzd.target_id = airport_heliport_airportheliport_pt_owqnnj.id
  where master_join_icggzd.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_kjdjke.id,
      'title', coalesce(cast(airspace_airspace_pt_kjdjke.title AS varchar), '(' || airspace_airspace_pt_kjdjke.nilreason[1] || ')'),
      'href', airspace_airspace_pt_kjdjke.href
  )) as lat_clientairspace  from master_join master_join_bdplqq
  join airspace.airspace_pt airspace_airspace_pt_kjdjke on master_join_bdplqq.target_id = airspace_airspace_pt_kjdjke.id
  where master_join_bdplqq.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_bwgslr.*) as lat_clientroute
  from master_join master_join_vgclal
  join routes.routeportion_view routes_routeportion_view_bwgslr on master_join_vgclal.target_id = routes_routeportion_view_bwgslr.id
  where master_join_vgclal.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_uxkxeu.id,
      'title', coalesce(cast(holding_holdingpattern_pt_uxkxeu.title AS varchar), '(' || holding_holdingpattern_pt_uxkxeu.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_uxkxeu.href
  )) as lat_clientholding  from master_join master_join_jkpxta
  join holding.holdingpattern_pt holding_holdingpattern_pt_uxkxeu on master_join_jkpxta.target_id = holding_holdingpattern_pt_uxkxeu.id
  where master_join_jkpxta.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_psxmun.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_psxmun.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_psxmun.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_psxmun.href
  )) as lat_clientaerialrefuelling  from master_join master_join_sxjnfm
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_psxmun on master_join_sxjnfm.target_id = aerial_refuelling_aerialrefuelling_pt_psxmun.id
  where master_join_sxjnfm.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_sbtshy.geom AS location_geom,
    geometry_elevatedpoint_view_sbtshy.longitude AS location_longitude,
    geometry_elevatedpoint_view_sbtshy.latitude AS location_latitude,
    geometry_elevatedpoint_view_sbtshy.elevation AS location_elevation,
    geometry_elevatedpoint_view_sbtshy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sbtshy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sbtshy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sbtshy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jdjwpz.title as varchar), '(' || organisation_unit_pt_jdjwpz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_jdjwpz.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling,
    lat_clientroute.lat_clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sbtshy on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_sbtshy.id
left join organisation.unit_pt organisation_unit_pt_jdjwpz on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_jdjwpz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_uifunu.*) as lat_callsign
  from master_join master_join_enqddn
  join service.callsigndetail_view service_callsigndetail_view_uifunu on master_join_enqddn.target_id = service_callsigndetail_view_uifunu.id
  where master_join_enqddn.source_id = service.airtrafficmanagementservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_jsecxz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_jsecxz.title AS varchar), '(' || service_radiocommunicationchannel_pt_jsecxz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_jsecxz.href
  )) as lat_radiocommunication  from master_join master_join_wdmevp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jsecxz on master_join_wdmevp.target_id = service_radiocommunicationchannel_pt_jsecxz.id
  where master_join_wdmevp.source_id = service.airtrafficmanagementservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_iqavfd
  join shared.contactinformation_view shared_contactinformation_view_llkfmy on master_join_iqavfd.target_id = shared_contactinformation_view_llkfmy.id
  where master_join_iqavfd.source_id = service.airtrafficmanagementservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_xbyxpu.*) as lat_availability
  from master_join master_join_uookht
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_xbyxpu on master_join_uookht.target_id = service_serviceoperationalstatus_view_xbyxpu.id
  where master_join_uookht.source_id = service.airtrafficmanagementservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_twctpj.*) AS annotation
  from master_join master_join_ougsxr
  join notes.note_view notes_note_view_twctpj on master_join_ougsxr.target_id = notes_note_view_twctpj.id
  where master_join_ougsxr.source_id = service.airtrafficmanagementservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_pphjgr.id,
      'title', coalesce(cast(airspace_airspace_pt_pphjgr.title AS varchar), '(' || airspace_airspace_pt_pphjgr.nilreason[1] || ')'),
      'href', airspace_airspace_pt_pphjgr.href
  )) as lat_clientairspace  from master_join master_join_gxfqjh
  join airspace.airspace_pt airspace_airspace_pt_pphjgr on master_join_gxfqjh.target_id = airspace_airspace_pt_pphjgr.id
  where master_join_gxfqjh.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_sqtfmn.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_sqtfmn.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_sqtfmn.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_sqtfmn.href
  )) as lat_clientaerialrefuelling  from master_join master_join_dvaecf
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_sqtfmn on master_join_dvaecf.target_id = aerial_refuelling_aerialrefuelling_pt_sqtfmn.id
  where master_join_dvaecf.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientaerialrefuelling on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_tvogbl.*) as lat_clientroute
  from master_join master_join_hsrajw
  join routes.routeportion_view routes_routeportion_view_tvogbl on master_join_hsrajw.target_id = routes_routeportion_view_tvogbl.id
  where master_join_hsrajw.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientroute on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_view_ebwcvf.*) as lat_availability
  from master_join master_join_stvvaw
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_view_ebwcvf on master_join_stvvaw.target_id = airport_heliport_altimetersourcestatus_view_ebwcvf.id
  where master_join_stvvaw.source_id = airport_heliport.altimetersource_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wzkzwb.*) AS annotation
  from master_join master_join_sbgvmr
  join notes.note_view notes_note_view_wzkzwb on master_join_sbgvmr.target_id = notes_note_view_wzkzwb.id
  where master_join_sbgvmr.source_id = airport_heliport.altimetersource_ts.id
) as lat_annotation on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_vhcvsu.title as varchar), '(' || navaids_points_designatedpoint_pt_vhcvsu.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_vhcvsu.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_aoqewk.title as varchar), '(' || navaids_points_designatedpoint_pt_aoqewk.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_aoqewk.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_mobsts.title as varchar), '(' || navaids_points_navaid_pt_mobsts.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_mobsts.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wwvvek.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wwvvek.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_wwvvek.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oclzzx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oclzzx.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oclzzx.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_umprkl.title as varchar), '(' || airport_heliport_airportheliport_pt_umprkl.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_umprkl.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ufcmdy.geom AS pointchoiceposition_geom,
    geometry_point_view_ufcmdy.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ufcmdy.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ufcmdy.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vhcvsu on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_vhcvsu.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_aoqewk on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_aoqewk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mobsts on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_mobsts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wwvvek on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wwvvek.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oclzzx on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oclzzx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_umprkl on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_umprkl.id
left join geometry.point_view geometry_point_view_ufcmdy on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_ufcmdy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ipmgeb.*) AS annotation
  from master_join master_join_mhfusq
  join notes.note_view notes_note_view_ipmgeb on master_join_mhfusq.target_id = notes_note_view_ipmgeb.id
  where master_join_mhfusq.source_id = navaids_points.angleindication_ts.id
) as lat_annotation on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_lvyzet.title as varchar), '(' || airport_heliport_runwaydirection_pt_lvyzet.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_lvyzet.href AS servedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_lvyzet on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_lvyzet.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_qdthpc.*) as lat_element
  from master_join master_join_lkhjjh
  join shared.lightelement_view shared_lightelement_view_qdthpc on master_join_lkhjjh.target_id = shared_lightelement_view_qdthpc.id
  where master_join_lkhjjh.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_hhxkgn.*) as lat_availability
  from master_join master_join_ucythk
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_hhxkgn on master_join_ucythk.target_id = airport_heliport_groundlightingavailability_view_hhxkgn.id
  where master_join_ucythk.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ulhlpc.*) AS annotation
  from master_join master_join_kttjgy
  join notes.note_view notes_note_view_ulhlpc on master_join_kttjgy.target_id = notes_note_view_ulhlpc.id
  where master_join_kttjgy.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_rrafbf.title as varchar), '(' || airport_heliport_apron_pt_rrafbf.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_rrafbf.href AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zkhdyd.*) AS surfaceproperties,
    geometry_elevatedsurface_view_mjfqmd.geom AS extent_geom,
    geometry_elevatedsurface_view_mjfqmd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mjfqmd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mjfqmd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mjfqmd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mjfqmd.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_supplyservice.lat_supplyservice as supplyservice,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_rrafbf on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_rrafbf.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zkhdyd on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zkhdyd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mjfqmd on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_mjfqmd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_pt_kiomxf.id,
      'title', coalesce(cast(service_airportsuppliesservice_pt_kiomxf.title AS varchar), '(' || service_airportsuppliesservice_pt_kiomxf.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_pt_kiomxf.href
  )) as lat_supplyservice  from master_join master_join_jnrpcm
  join service.airportsuppliesservice_pt service_airportsuppliesservice_pt_kiomxf on master_join_jnrpcm.target_id = service_airportsuppliesservice_pt_kiomxf.id
  where master_join_jnrpcm.source_id = airport_heliport.apronelement_ts.id
) as lat_supplyservice on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nznrru.*) AS annotation
  from master_join master_join_sfsayi
  join notes.note_view notes_note_view_nznrru on master_join_sfsayi.target_id = notes_note_view_nznrru.id
  where master_join_sfsayi.source_id = airport_heliport.apronelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_ygxaoz.*) as lat_availability
  from master_join master_join_uhmdmk
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_ygxaoz on master_join_uhmdmk.target_id = airport_heliport_apronareaavailability_view_ygxaoz.id
  where master_join_uhmdmk.source_id = airport_heliport.apronelement_ts.id
) as lat_availability on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_ulckxg.title as varchar), '(' || airport_heliport_apron_pt_ulckxg.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_ulckxg.href AS lightedapron_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ulckxg on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_ulckxg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_fgzfdy.*) as lat_element
  from master_join master_join_wtxixd
  join shared.lightelement_view shared_lightelement_view_fgzfdy on master_join_wtxixd.target_id = shared_lightelement_view_fgzfdy.id
  where master_join_wtxixd.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_mqbbkq.*) as lat_availability
  from master_join master_join_ukicfz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_mqbbkq on master_join_ukicfz.target_id = airport_heliport_groundlightingavailability_view_mqbbkq.id
  where master_join_ukicfz.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vknfaf.*) AS annotation
  from master_join master_join_rbuumg
  join notes.note_view notes_note_view_vknfaf on master_join_rbuumg.target_id = notes_note_view_vknfaf.id
  where master_join_rbuumg.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_gnnwde.title as varchar), '(' || airport_heliport_apron_pt_gnnwde.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_gnnwde.href AS markedapron_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_gnnwde on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_gnnwde.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_syvupn.*) as lat_element
  from master_join master_join_imsyjc
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_syvupn on master_join_imsyjc.target_id = airport_heliport_markingelement_view_syvupn.id
  where master_join_imsyjc.source_id = airport_heliport.apronmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_frmezp.*) AS annotation
  from master_join master_join_orpqow
  join notes.note_view notes_note_view_frmezp on master_join_orpqow.target_id = notes_note_view_frmezp.id
  where master_join_orpqow.source_id = airport_heliport.apronmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ubpzxf.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_damxhz.title as varchar), '(' || airport_heliport_airportheliport_pt_damxhz.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_damxhz.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ubpzxf on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ubpzxf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_damxhz on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_damxhz.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_view_pnujpm.*) as lat_contaminant
  from master_join master_join_beakhb
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_view_pnujpm on master_join_beakhb.target_id = airport_heliport_aproncontamination_view_pnujpm.id
  where master_join_beakhb.source_id = airport_heliport.apron_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cfseka.*) AS annotation
  from master_join master_join_bniznx
  join notes.note_view notes_note_view_cfseka on master_join_bniznx.target_id = notes_note_view_cfseka.id
  where master_join_bniznx.source_id = airport_heliport.apron_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_xtjpni.*) as lat_availability
  from master_join master_join_lknpbe
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_xtjpni on master_join_lknpbe.target_id = airport_heliport_apronareaavailability_view_xtjpni.id
  where master_join_lknpbe.source_id = airport_heliport.apron_ts.id
) as lat_availability on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kollat.*) AS surfaceproperties,
    geometry_elevatedcurve_view_sapxdh.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_sapxdh.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_sapxdh.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_sapxdh.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_sapxdh.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_sapxdh.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_toqave.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_toqave.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_toqave.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_toqave.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_toqave.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_toqave.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_nmqcku.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_nmqcku.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_nmqcku.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_nmqcku.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_nmqcku.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_nmqcku.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_nmqcku.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_nmqcku.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kollat on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kollat.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_sapxdh on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_sapxdh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_toqave on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_toqave.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nmqcku on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_nmqcku.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_kjdzpw.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_kjdzpw.title AS varchar), '(' || airport_heliport_runwaydirection_pt_kjdzpw.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_kjdzpw.href
  )) as lat_runwaydirection  from master_join master_join_ogmifk
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_kjdzpw on master_join_ogmifk.target_id = airport_heliport_runwaydirection_pt_kjdzpw.id
  where master_join_ogmifk.source_id = airport_heliport.arrestinggear_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fhjdrn.*) AS annotation
  from master_join master_join_rmncbc
  join notes.note_view notes_note_view_fhjdrn on master_join_rmncbc.target_id = notes_note_view_fhjdrn.id
  where master_join_rmncbc.source_id = airport_heliport.arrestinggear_ts.id
) as lat_annotation on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wxopfd.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fasrvk.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dndtbl.*) AS arccentre,
    geometry_curve_view_gmjggw.geom AS trajectory_geom,
    geometry_curve_view_gmjggw.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_rfklzy.title as varchar), '(' || navaids_points_angleindication_pt_rfklzy.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_rfklzy.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_byiaai.title as varchar), '(' || navaids_points_distanceindication_pt_byiaai.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_byiaai.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_tigryj.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_htucgf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_htucgf.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_htucgf.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wxopfd on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_wxopfd.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fasrvk on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_fasrvk.id
left join geometry.curve_view geometry_curve_view_gmjggw on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_gmjggw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dndtbl on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_dndtbl.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_rfklzy on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_rfklzy.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_byiaai on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_byiaai.id
left join procedure.holdinguse_view procedure_holdinguse_view_tigryj on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_tigryj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_htucgf on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_htucgf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_asvzqz.*) as lat_aircraftcategory
  from master_join master_join_cmzvux
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_asvzqz on master_join_cmzvux.target_id = shared_aircraftcharacteristic_view_asvzqz.id
  where master_join_cmzvux.source_id = procedure.arrivalfeederleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_hvudrv.*) as lat_designsurface
  from master_join master_join_brtplh
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_hvudrv on master_join_brtplh.target_id = shared_obstacleassessmentarea_view_hvudrv.id
  where master_join_brtplh.source_id = procedure.arrivalfeederleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wypjqs.*) AS annotation
  from master_join master_join_fylqph
  join notes.note_view notes_note_view_wypjqs on master_join_fylqph.target_id = notes_note_view_wypjqs.id
  where master_join_fylqph.source_id = procedure.arrivalfeederleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eghhlj.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ocmdgi.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hhtsbc.*) AS arccentre,
    geometry_curve_view_qfjrxe.geom AS trajectory_geom,
    geometry_curve_view_qfjrxe.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_aqizxz.title as varchar), '(' || navaids_points_angleindication_pt_aqizxz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_aqizxz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ffmiyy.title as varchar), '(' || navaids_points_distanceindication_pt_ffmiyy.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_ffmiyy.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_cdxczf.*) AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_yxobke.title as varchar), '(' || procedure_standardinstrumentarrival_pt_yxobke.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_yxobke.href AS arrival_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eghhlj on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_eghhlj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ocmdgi on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ocmdgi.id
left join geometry.curve_view geometry_curve_view_qfjrxe on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_qfjrxe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hhtsbc on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_hhtsbc.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_aqizxz on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_aqizxz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ffmiyy on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_ffmiyy.id
left join procedure.holdinguse_view procedure_holdinguse_view_cdxczf on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_cdxczf.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_yxobke on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_yxobke.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_whiyqn.*) as lat_aircraftcategory
  from master_join master_join_adjroa
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_whiyqn on master_join_adjroa.target_id = shared_aircraftcharacteristic_view_whiyqn.id
  where master_join_adjroa.source_id = procedure.arrivalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_ewrxyd.*) as lat_designsurface
  from master_join master_join_npzlib
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ewrxyd on master_join_npzlib.target_id = shared_obstacleassessmentarea_view_ewrxyd.id
  where master_join_npzlib.source_id = procedure.arrivalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_taublv.*) AS annotation
  from master_join master_join_zepesm
  join notes.note_view notes_note_view_taublv on master_join_zepesm.target_id = notes_note_view_taublv.id
  where master_join_zepesm.source_id = procedure.arrivalleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_zjeise.title as varchar), '(' || organisation_organisationauthority_pt_zjeise.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_zjeise.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_cbfhzb.title as varchar), '(' || airspace_airspace_pt_cbfhzb.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_cbfhzb.href AS assignedairspace_href,
    lat_annotation.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zjeise on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_zjeise.id
left join airspace.airspace_pt airspace_airspace_pt_cbfhzb on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_cbfhzb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_skgwri.*) AS annotation
  from master_join master_join_kwialp
  join notes.note_view notes_note_view_skgwri on master_join_kwialp.target_id = notes_note_view_skgwri.id
  where master_join_kwialp.source_id = airspace.authorityforairspace_ts.id
) as lat_annotation on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_hiusop.geom AS location_geom,
    geometry_elevatedpoint_view_hiusop.longitude AS location_longitude,
    geometry_elevatedpoint_view_hiusop.latitude AS location_latitude,
    geometry_elevatedpoint_view_hiusop.elevation AS location_elevation,
    geometry_elevatedpoint_view_hiusop.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hiusop.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hiusop.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hiusop.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hiusop on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_hiusop.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_zydjli.*) as lat_authority
  from master_join master_join_mpysuh
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_zydjli on master_join_mpysuh.target_id = navaids_points_authorityfornavaidequipment_view_zydjli.id
  where master_join_mpysuh.source_id = navaids_points.azimuth_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_fcjsrm.*) as lat_monitoring
  from master_join master_join_kpxnzx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_fcjsrm on master_join_kpxnzx.target_id = navaids_points_navaidequipmentmonitoring_view_fcjsrm.id
  where master_join_kpxnzx.source_id = navaids_points.azimuth_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_qausdf.*) as lat_availability
  from master_join master_join_aywoll
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_qausdf on master_join_aywoll.target_id = navaids_points_navaidoperationalstatus_view_qausdf.id
  where master_join_aywoll.source_id = navaids_points.azimuth_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_istwsx.*) AS annotation
  from master_join master_join_ndpkof
  join notes.note_view notes_note_view_istwsx on master_join_ndpkof.target_id = notes_note_view_istwsx.id
  where master_join_ndpkof.source_id = navaids_points.azimuth_ts.id
) as lat_annotation on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['geometry.point_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_snpsrw.title as varchar), '(' || navaids_points_designatedpoint_pt_snpsrw.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_snpsrw.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jelyfp.title as varchar), '(' || navaids_points_navaid_pt_jelyfp.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_jelyfp.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zxfndy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zxfndy.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_zxfndy.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ezjpzt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ezjpzt.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ezjpzt.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_azghzx.title as varchar), '(' || airport_heliport_airportheliport_pt_azghzx.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_azghzx.href AS locationairportreferencepoint_href,
    geometry_point_view_rqvbcr.geom AS locationposition_geom,
    geometry_point_view_rqvbcr.longitude AS locationposition_longitude,
    geometry_point_view_rqvbcr.latitude AS locationposition_latitude,
    geometry_point_view_rqvbcr.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_ghppyn.*) AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_snpsrw on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_snpsrw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jelyfp on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_jelyfp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zxfndy on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zxfndy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ezjpzt on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ezjpzt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_azghzx on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_azghzx.id
left join geometry.point_view geometry_point_view_rqvbcr on routes.changeoverpoint_ts.location_position_id = geometry_point_view_rqvbcr.id
left join routes.routeportion_view routes_routeportion_view_ghppyn on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_ghppyn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kxxgmx.*) AS annotation
  from master_join master_join_guzyai
  join notes.note_view notes_note_view_kxxgmx on master_join_guzyai.target_id = notes_note_view_kxxgmx.id
  where master_join_guzyai.source_id = routes.changeoverpoint_ts.id
) as lat_annotation on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_nlbehz.geom AS position_geom,
    geometry_elevatedpoint_view_nlbehz.longitude AS position_longitude,
    geometry_elevatedpoint_view_nlbehz.latitude AS position_latitude,
    geometry_elevatedpoint_view_nlbehz.elevation AS position_elevation,
    geometry_elevatedpoint_view_nlbehz.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_nlbehz.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_nlbehz.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_nlbehz.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_euevom.title as varchar), '(' || airport_heliport_airportheliport_pt_euevom.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_euevom.href AS airportheliport_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nlbehz on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_nlbehz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_euevom on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_euevom.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kxkeyj.*) AS annotation
  from master_join master_join_drenmv
  join notes.note_view notes_note_view_kxkeyj on master_join_drenmv.target_id = notes_note_view_kxkeyj.id
  where master_join_drenmv.source_id = navaids_points.checkpointins_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_nrtngm.geom AS position_geom,
    geometry_elevatedpoint_view_nrtngm.longitude AS position_longitude,
    geometry_elevatedpoint_view_nrtngm.latitude AS position_latitude,
    geometry_elevatedpoint_view_nrtngm.elevation AS position_elevation,
    geometry_elevatedpoint_view_nrtngm.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_nrtngm.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_nrtngm.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_nrtngm.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_dqaucd.title as varchar), '(' || airport_heliport_airportheliport_pt_dqaucd.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_dqaucd.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_pzgzmv.title as varchar), '(' || navaids_points_vor_pt_pzgzmv.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_pzgzmv.href AS checkpointfacility_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nrtngm on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_nrtngm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dqaucd on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_dqaucd.id
left join navaids_points.vor_pt navaids_points_vor_pt_pzgzmv on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_pzgzmv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kjmfff.*) AS annotation
  from master_join master_join_cirqsg
  join notes.note_view notes_note_view_kjmfff on master_join_cirqsg.target_id = notes_note_view_kjmfff.id
  where master_join_cirqsg.source_id = navaids_points.checkpointvor_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'geometry.surface_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_nyovxv.geom AS extent_geom,
    geometry_surface_view_nyovxv.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kpnbtz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kpnbtz.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_kpnbtz.href AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_mustjr.*) AS aircraftcategory,
    lat_condition.lat_condition as condition,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_nyovxv on public.circlingarea_ts.extent_id = geometry_surface_view_nyovxv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kpnbtz on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_kpnbtz.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_mustjr on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_mustjr.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_xeeavn.*) as lat_condition
  from master_join master_join_qzcywi
  join procedure.approachcondition_view procedure_approachcondition_view_xeeavn on master_join_qzcywi.target_id = procedure_approachcondition_view_xeeavn.id
  where master_join_qzcywi.source_id = public.circlingarea_ts.id
) as lat_condition on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_ybdbtp.*) as lat_designsurface
  from master_join master_join_ffujmt
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ybdbtp on master_join_ffujmt.target_id = shared_obstacleassessmentarea_view_ybdbtp.id
  where master_join_ffujmt.source_id = public.circlingarea_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gvhblc.*) AS annotation
  from master_join master_join_gobsdv
  join notes.note_view notes_note_view_gvhblc on master_join_gobsdv.target_id = notes_note_view_gvhblc.id
  where master_join_gobsdv.source_id = public.circlingarea_ts.id
) as lat_annotation on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_ubdyct.title as varchar), '(' || airport_heliport_deicingarea_pt_ubdyct.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_ubdyct.href AS markeddeicingarea_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_ubdyct on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_ubdyct.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_qxzdie.*) as lat_element
  from master_join master_join_wkltjs
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_qxzdie on master_join_wkltjs.target_id = airport_heliport_markingelement_view_qxzdie.id
  where master_join_wkltjs.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vqqmps.*) AS annotation
  from master_join master_join_ahkyjy
  join notes.note_view notes_note_view_vqqmps on master_join_ahkyjy.target_id = notes_note_view_vqqmps.id
  where master_join_ahkyjy.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_afgigq.title as varchar), '(' || airport_heliport_apron_pt_afgigq.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_afgigq.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_flsvss.title as varchar), '(' || airport_heliport_taxiway_pt_flsvss.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_flsvss.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_bgdttz.title as varchar), '(' || airport_heliport_aircraftstand_pt_bgdttz.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_bgdttz.href AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mtswqh.*) AS surfaceproperties,
    geometry_elevatedsurface_view_mqsmez.geom AS extent_geom,
    geometry_elevatedsurface_view_mqsmez.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mqsmez.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mqsmez.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mqsmez.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mqsmez.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_afgigq on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_afgigq.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_flsvss on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_flsvss.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_bgdttz on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_bgdttz.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mtswqh on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mtswqh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mqsmez on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_mqsmez.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bqlttb.*) AS annotation
  from master_join master_join_pwkoxd
  join notes.note_view notes_note_view_bqlttb on master_join_pwkoxd.target_id = notes_note_view_bqlttb.id
  where master_join_pwkoxd.source_id = airport_heliport.deicingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_mfgxbo.*) as lat_availability
  from master_join master_join_xgejpw
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_mfgxbo on master_join_xgejpw.target_id = airport_heliport_apronareaavailability_view_mfgxbo.id
  where master_join_xgejpw.source_id = airport_heliport.deicingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'procedure.departurearrivalcondition_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ugdeyp.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jqbupj.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nafgqu.*) AS arccentre,
    geometry_curve_view_olanjx.geom AS trajectory_geom,
    geometry_curve_view_olanjx.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_wuqumq.title as varchar), '(' || navaids_points_angleindication_pt_wuqumq.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_wuqumq.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_uzwydc.title as varchar), '(' || navaids_points_distanceindication_pt_uzwydc.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_uzwydc.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_skkhhc.*) AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_elkvsa.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_elkvsa.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_elkvsa.href AS departure_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ugdeyp on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ugdeyp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jqbupj on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_jqbupj.id
left join geometry.curve_view geometry_curve_view_olanjx on procedure.departureleg_ts.trajectory_id = geometry_curve_view_olanjx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nafgqu on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_nafgqu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_wuqumq on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_wuqumq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_uzwydc on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_uzwydc.id
left join procedure.holdinguse_view procedure_holdinguse_view_skkhhc on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_skkhhc.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_elkvsa on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_elkvsa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_qpnsqy.*) as lat_aircraftcategory
  from master_join master_join_eotqrw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_qpnsqy on master_join_eotqrw.target_id = shared_aircraftcharacteristic_view_qpnsqy.id
  where master_join_eotqrw.source_id = procedure.departureleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_gxejxf.*) as lat_designsurface
  from master_join master_join_lsznsf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_gxejxf on master_join_lsznsf.target_id = shared_obstacleassessmentarea_view_gxejxf.id
  where master_join_lsznsf.source_id = procedure.departureleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gbvgzh.*) AS annotation
  from master_join master_join_tglokv
  join notes.note_view notes_note_view_gbvgzh on master_join_tglokv.target_id = notes_note_view_gbvgzh.id
  where master_join_tglokv.source_id = procedure.departureleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_view_wcmugj.*) as lat_condition
  from master_join master_join_qxrixp
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_view_wcmugj on master_join_qxrixp.target_id = procedure_departurearrivalcondition_view_wcmugj.id
  where master_join_qxrixp.source_id = procedure.departureleg_ts.id
) as lat_condition on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_sutcuj.geom AS location_geom,
    geometry_point_view_sutcuj.longitude AS location_longitude,
    geometry_point_view_sutcuj.latitude AS location_latitude,
    geometry_point_view_sutcuj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_usxqke.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_usxqke.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_usxqke.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tgwwdx.title as varchar), '(' || airport_heliport_airportheliport_pt_tgwwdx.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_tgwwdx.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rcobnj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rcobnj.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rcobnj.href AS runwaypoint_href,
    lat_annotation.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_sutcuj on navaids_points.designatedpoint_ts.location_id = geometry_point_view_sutcuj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_usxqke on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_usxqke.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tgwwdx on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_tgwwdx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rcobnj on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rcobnj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bvienw.*) AS annotation
  from master_join master_join_nfwcvv
  join notes.note_view notes_note_view_bvienw on master_join_nfwcvv.target_id = notes_note_view_bvienw.id
  where master_join_nfwcvv.source_id = navaids_points.designatedpoint_ts.id
) as lat_annotation on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_jzadsq.geom AS location_geom,
    geometry_elevatedpoint_view_jzadsq.longitude AS location_longitude,
    geometry_elevatedpoint_view_jzadsq.latitude AS location_latitude,
    geometry_elevatedpoint_view_jzadsq.elevation AS location_elevation,
    geometry_elevatedpoint_view_jzadsq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jzadsq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jzadsq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jzadsq.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_informationprovision.lat_informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jzadsq on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_jzadsq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_vkvvvn.*) as lat_authority
  from master_join master_join_qxvlfi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_vkvvvn on master_join_qxvlfi.target_id = navaids_points_authorityfornavaidequipment_view_vkvvvn.id
  where master_join_qxvlfi.source_id = navaids_points.directionfinder_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_qowluk.*) as lat_monitoring
  from master_join master_join_ddngwx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_qowluk on master_join_ddngwx.target_id = navaids_points_navaidequipmentmonitoring_view_qowluk.id
  where master_join_ddngwx.source_id = navaids_points.directionfinder_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_jyjniv.*) as lat_availability
  from master_join master_join_evczlb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_jyjniv on master_join_evczlb.target_id = navaids_points_navaidoperationalstatus_view_jyjniv.id
  where master_join_evczlb.source_id = navaids_points.directionfinder_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_poosjk.*) AS annotation
  from master_join master_join_voxksf
  join notes.note_view notes_note_view_poosjk on master_join_voxksf.target_id = notes_note_view_poosjk.id
  where master_join_voxksf.source_id = navaids_points.directionfinder_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_pt_vqmsth.id,
      'title', coalesce(cast(service_informationservice_pt_vqmsth.title AS varchar), '(' || service_informationservice_pt_vqmsth.nilreason[1] || ')'),
      'href', service_informationservice_pt_vqmsth.href
  )) as lat_informationprovision  from master_join master_join_bhhxcx
  join service.informationservice_pt service_informationservice_pt_vqmsth on master_join_bhhxcx.target_id = service_informationservice_pt_vqmsth.id
  where master_join_bhhxcx.source_id = navaids_points.directionfinder_ts.id
) as lat_informationprovision on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_uvmopz.title as varchar), '(' || navaids_points_designatedpoint_pt_uvmopz.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_uvmopz.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_rcfoxo.title as varchar), '(' || navaids_points_designatedpoint_pt_rcfoxo.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_rcfoxo.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_eycdir.title as varchar), '(' || navaids_points_navaid_pt_eycdir.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_eycdir.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kffxie.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kffxie.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_kffxie.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fptenk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fptenk.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fptenk.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_frutyq.title as varchar), '(' || airport_heliport_airportheliport_pt_frutyq.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_frutyq.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_cakfio.geom AS pointchoiceposition_geom,
    geometry_point_view_cakfio.longitude AS pointchoiceposition_longitude,
    geometry_point_view_cakfio.latitude AS pointchoiceposition_latitude,
    geometry_point_view_cakfio.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uvmopz on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_uvmopz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rcfoxo on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rcfoxo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eycdir on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_eycdir.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kffxie on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kffxie.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fptenk on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fptenk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_frutyq on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_frutyq.id
left join geometry.point_view geometry_point_view_cakfio on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_cakfio.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rhdzcr.*) AS annotation
  from master_join master_join_klaozk
  join notes.note_view notes_note_view_rhdzcr on master_join_klaozk.target_id = notes_note_view_rhdzcr.id
  where master_join_klaozk.source_id = navaids_points.distanceindication_ts.id
) as lat_annotation on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_pjeqqn.geom AS location_geom,
    geometry_elevatedpoint_view_pjeqqn.longitude AS location_longitude,
    geometry_elevatedpoint_view_pjeqqn.latitude AS location_latitude,
    geometry_elevatedpoint_view_pjeqqn.elevation AS location_elevation,
    geometry_elevatedpoint_view_pjeqqn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pjeqqn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pjeqqn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pjeqqn.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pjeqqn on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_pjeqqn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_lllsoj.*) as lat_authority
  from master_join master_join_lnfvir
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_lllsoj on master_join_lnfvir.target_id = navaids_points_authorityfornavaidequipment_view_lllsoj.id
  where master_join_lnfvir.source_id = navaids_points.dme_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_ycoywc.*) as lat_monitoring
  from master_join master_join_irojaf
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_ycoywc on master_join_irojaf.target_id = navaids_points_navaidequipmentmonitoring_view_ycoywc.id
  where master_join_irojaf.source_id = navaids_points.dme_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_trjukc.*) as lat_availability
  from master_join master_join_waptvg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_trjukc on master_join_waptvg.target_id = navaids_points_navaidoperationalstatus_view_trjukc.id
  where master_join_waptvg.source_id = navaids_points.dme_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uqznwf.*) AS annotation
  from master_join master_join_tfmfho
  join notes.note_view notes_note_view_uqznwf on master_join_tfmfho.target_id = notes_note_view_uqznwf.id
  where master_join_tfmfho.source_id = navaids_points.dme_ts.id
) as lat_annotation on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_cmmkdq.geom AS location_geom,
    geometry_elevatedpoint_view_cmmkdq.longitude AS location_longitude,
    geometry_elevatedpoint_view_cmmkdq.latitude AS location_latitude,
    geometry_elevatedpoint_view_cmmkdq.elevation AS location_elevation,
    geometry_elevatedpoint_view_cmmkdq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cmmkdq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cmmkdq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cmmkdq.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cmmkdq on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_cmmkdq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_qcrkdp.*) as lat_authority
  from master_join master_join_vkwavn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_qcrkdp on master_join_vkwavn.target_id = navaids_points_authorityfornavaidequipment_view_qcrkdp.id
  where master_join_vkwavn.source_id = navaids_points.elevation_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_dikbxa.*) as lat_monitoring
  from master_join master_join_itdkcr
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_dikbxa on master_join_itdkcr.target_id = navaids_points_navaidequipmentmonitoring_view_dikbxa.id
  where master_join_itdkcr.source_id = navaids_points.elevation_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_udkaqa.*) as lat_availability
  from master_join master_join_ipklas
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_udkaqa on master_join_ipklas.target_id = navaids_points_navaidoperationalstatus_view_udkaqa.id
  where master_join_ipklas.source_id = navaids_points.elevation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oqyfaf.*) AS annotation
  from master_join master_join_juxrcz
  join notes.note_view notes_note_view_oqyfaf on master_join_juxrcz.target_id = notes_note_view_oqyfaf.id
  where master_join_juxrcz.source_id = navaids_points.elevation_ts.id
) as lat_annotation on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['geometry.curve_view', 'public.fasdatablock_view', 'navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'geometry.point_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_frcddx.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nblfjs.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_atnfjg.*) AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_inwcxu.*) AS visualdescentpoint,
    geometry_curve_view_fjpvrj.geom AS trajectory_geom,
    geometry_curve_view_fjpvrj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_cqkyee.title as varchar), '(' || navaids_points_angleindication_pt_cqkyee.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_cqkyee.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_hpctow.title as varchar), '(' || navaids_points_distanceindication_pt_hpctow.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_hpctow.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_fneisl.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kexjcg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kexjcg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_kexjcg.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cdrhtx.title as varchar), '(' || navaids_points_designatedpoint_pt_cdrhtx.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_cdrhtx.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_bffjji.title as varchar), '(' || navaids_points_navaid_pt_bffjji.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_bffjji.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vdqnsg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vdqnsg.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_vdqnsg.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lpalhr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lpalhr.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lpalhr.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gdsvdn.title as varchar), '(' || airport_heliport_airportheliport_pt_gdsvdn.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_gdsvdn.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_hhhuft.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_hhhuft.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_hhhuft.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_hhhuft.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_rxzfjy.*) AS fasdata,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_frcddx on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_frcddx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nblfjs on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_nblfjs.id
left join geometry.curve_view geometry_curve_view_fjpvrj on procedure.finalleg_ts.trajectory_id = geometry_curve_view_fjpvrj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_atnfjg on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_atnfjg.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_cqkyee on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_cqkyee.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_hpctow on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_hpctow.id
left join procedure.holdinguse_view procedure_holdinguse_view_fneisl on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_fneisl.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kexjcg on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kexjcg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cdrhtx on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cdrhtx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bffjji on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_bffjji.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vdqnsg on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vdqnsg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lpalhr on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lpalhr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gdsvdn on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_gdsvdn.id
left join geometry.point_view geometry_point_view_hhhuft on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_hhhuft.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_inwcxu on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_inwcxu.id
left join public.fasdatablock_view public_fasdatablock_view_rxzfjy on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_rxzfjy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_kxyqre.*) as lat_aircraftcategory
  from master_join master_join_cqqcwj
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_kxyqre on master_join_cqqcwj.target_id = shared_aircraftcharacteristic_view_kxyqre.id
  where master_join_cqqcwj.source_id = procedure.finalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_jzfupp.*) as lat_designsurface
  from master_join master_join_adusmp
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_jzfupp on master_join_adusmp.target_id = shared_obstacleassessmentarea_view_jzfupp.id
  where master_join_adusmp.source_id = procedure.finalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sassgf.*) AS annotation
  from master_join master_join_yggwts
  join notes.note_view notes_note_view_sassgf on master_join_yggwts.target_id = notes_note_view_sassgf.id
  where master_join_yggwts.source_id = procedure.finalleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_kgvbfl.*) as lat_condition
  from master_join master_join_oqdmni
  join procedure.approachcondition_view procedure_approachcondition_view_kgvbfl on master_join_oqdmni.target_id = procedure_approachcondition_view_kgvbfl.id
  where master_join_oqdmni.source_id = procedure.finalleg_ts.id
) as lat_condition on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_xoymfu.geom AS location_geom,
    geometry_elevatedpoint_view_xoymfu.longitude AS location_longitude,
    geometry_elevatedpoint_view_xoymfu.latitude AS location_latitude,
    geometry_elevatedpoint_view_xoymfu.elevation AS location_elevation,
    geometry_elevatedpoint_view_xoymfu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xoymfu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xoymfu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xoymfu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hriryp.title as varchar), '(' || organisation_unit_pt_hriryp.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_hriryp.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xoymfu on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_xoymfu.id
left join organisation.unit_pt organisation_unit_pt_hriryp on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_hriryp.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_dkhwlf.*) as lat_callsign
  from master_join master_join_nnfvnz
  join service.callsigndetail_view service_callsigndetail_view_dkhwlf on master_join_nnfvnz.target_id = service_callsigndetail_view_dkhwlf.id
  where master_join_nnfvnz.source_id = service.firefightingservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_jowcjf.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_jowcjf.title AS varchar), '(' || service_radiocommunicationchannel_pt_jowcjf.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_jowcjf.href
  )) as lat_radiocommunication  from master_join master_join_tantgp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jowcjf on master_join_tantgp.target_id = service_radiocommunicationchannel_pt_jowcjf.id
  where master_join_tantgp.source_id = service.firefightingservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_ugqwmr
  join shared.contactinformation_view shared_contactinformation_view_ueahwj on master_join_ugqwmr.target_id = shared_contactinformation_view_ueahwj.id
  where master_join_ugqwmr.source_id = service.firefightingservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_hmprfv.*) as lat_availability
  from master_join master_join_jbwfbe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_hmprfv on master_join_jbwfbe.target_id = service_serviceoperationalstatus_view_hmprfv.id
  where master_join_jbwfbe.source_id = service.firefightingservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ikfkke.*) AS annotation
  from master_join master_join_hnbzph
  join notes.note_view notes_note_view_ikfkke on master_join_hnbzph.target_id = notes_note_view_ikfkke.id
  where master_join_hnbzph.source_id = service.firefightingservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_klsozk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_klsozk.title AS varchar), '(' || airport_heliport_airportheliport_pt_klsozk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_klsozk.href
  )) as lat_airportheliport  from master_join master_join_xfjvxu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_klsozk on master_join_xfjvxu.target_id = airport_heliport_airportheliport_pt_klsozk.id
  where master_join_xfjvxu.source_id = service.firefightingservice_ts.id
) as lat_airportheliport on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightconditioncombination_view', 'routes.flightrestrictionroute_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    to_jsonb(routes_flightconditioncombination_view_ubowlb.*) AS flight,
    lat_regulatedroute.lat_regulatedroute as regulatedroute,
    lat_annotation.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_ubowlb on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_ubowlb.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_view_sxqhxn.*) as lat_regulatedroute
  from master_join master_join_kwqzmy
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_view_sxqhxn on master_join_kwqzmy.target_id = routes_flightrestrictionroute_view_sxqhxn.id
  where master_join_kwqzmy.source_id = routes.flightrestriction_ts.id
) as lat_regulatedroute on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oqeemx.*) AS annotation
  from master_join master_join_fonzcj
  join notes.note_view notes_note_view_oqeemx on master_join_fonzcj.target_id = notes_note_view_oqeemx.id
  where master_join_fonzcj.source_id = routes.flightrestriction_ts.id
) as lat_annotation on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_rnzzhj.geom AS extent_geom,
    geometry_elevatedsurface_view_rnzzhj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rnzzhj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rnzzhj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rnzzhj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rnzzhj.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rnzzhj on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_rnzzhj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xiesgr.*) AS annotation
  from master_join master_join_zovqyp
  join notes.note_view notes_note_view_xiesgr on master_join_zovqyp.target_id = notes_note_view_xiesgr.id
  where master_join_zovqyp.source_id = airport_heliport.floatingdocksite_ts.id
) as lat_annotation on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_inizgj.geom AS border_geom,
    geometry_curve_view_inizgj.horizontalAccuracy as border_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_inizgj on airspace.geoborder_ts.border_id = geometry_curve_view_inizgj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jurntq.*) AS annotation
  from master_join master_join_qmtqnj
  join notes.note_view notes_note_view_jurntq on master_join_qmtqnj.target_id = notes_note_view_jurntq.id
  where master_join_qmtqnj.source_id = airspace.geoborder_ts.id
) as lat_annotation on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_aciypb.geom AS location_geom,
    geometry_elevatedpoint_view_aciypb.longitude AS location_longitude,
    geometry_elevatedpoint_view_aciypb.latitude AS location_latitude,
    geometry_elevatedpoint_view_aciypb.elevation AS location_elevation,
    geometry_elevatedpoint_view_aciypb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aciypb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aciypb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aciypb.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aciypb on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_aciypb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_klhlra.*) as lat_authority
  from master_join master_join_vspird
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_klhlra on master_join_vspird.target_id = navaids_points_authorityfornavaidequipment_view_klhlra.id
  where master_join_vspird.source_id = navaids_points.glidepath_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_jvcjug.*) as lat_monitoring
  from master_join master_join_dlczmb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_jvcjug on master_join_dlczmb.target_id = navaids_points_navaidequipmentmonitoring_view_jvcjug.id
  where master_join_dlczmb.source_id = navaids_points.glidepath_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_fijgdg.*) as lat_availability
  from master_join master_join_opxmli
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_fijgdg on master_join_opxmli.target_id = navaids_points_navaidoperationalstatus_view_fijgdg.id
  where master_join_opxmli.source_id = navaids_points.glidepath_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lhsocp.*) AS annotation
  from master_join master_join_gnlcns
  join notes.note_view notes_note_view_lhsocp on master_join_gnlcns.target_id = notes_note_view_lhsocp.id
  where master_join_gnlcns.source_id = navaids_points.glidepath_ts.id
) as lat_annotation on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_fdiqrw.geom AS location_geom,
    geometry_elevatedpoint_view_fdiqrw.longitude AS location_longitude,
    geometry_elevatedpoint_view_fdiqrw.latitude AS location_latitude,
    geometry_elevatedpoint_view_fdiqrw.elevation AS location_elevation,
    geometry_elevatedpoint_view_fdiqrw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fdiqrw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fdiqrw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fdiqrw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ozxgtg.title as varchar), '(' || organisation_unit_pt_ozxgtg.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_ozxgtg.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hwrvou.title as varchar), '(' || airport_heliport_airportheliport_pt_hwrvou.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_hwrvou.href AS clientairport_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fdiqrw on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_fdiqrw.id
left join organisation.unit_pt organisation_unit_pt_ozxgtg on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ozxgtg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hwrvou on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_hwrvou.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_ihoafs.*) as lat_callsign
  from master_join master_join_bhehtb
  join service.callsigndetail_view service_callsigndetail_view_ihoafs on master_join_bhehtb.target_id = service_callsigndetail_view_ihoafs.id
  where master_join_bhehtb.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_mrdkli.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_mrdkli.title AS varchar), '(' || service_radiocommunicationchannel_pt_mrdkli.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_mrdkli.href
  )) as lat_radiocommunication  from master_join master_join_zdvlge
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_mrdkli on master_join_zdvlge.target_id = service_radiocommunicationchannel_pt_mrdkli.id
  where master_join_zdvlge.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_tkxely
  join shared.contactinformation_view shared_contactinformation_view_dgwjrf on master_join_tkxely.target_id = shared_contactinformation_view_dgwjrf.id
  where master_join_tkxely.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_nruaxk.*) as lat_availability
  from master_join master_join_ynoona
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_nruaxk on master_join_ynoona.target_id = service_serviceoperationalstatus_view_nruaxk.id
  where master_join_ynoona.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_szoymn.*) AS annotation
  from master_join master_join_zscvhf
  join notes.note_view notes_note_view_szoymn on master_join_zscvhf.target_id = notes_note_view_szoymn.id
  where master_join_zscvhf.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_zthikl.title as varchar), '(' || airport_heliport_guidanceline_pt_zthikl.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_zthikl.href AS lightedguidanceline_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_zthikl on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_zthikl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_nbpgfv.*) as lat_element
  from master_join master_join_iuidas
  join shared.lightelement_view shared_lightelement_view_nbpgfv on master_join_iuidas.target_id = shared_lightelement_view_nbpgfv.id
  where master_join_iuidas.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_qnzfhv.*) as lat_availability
  from master_join master_join_omkjhc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_qnzfhv on master_join_omkjhc.target_id = airport_heliport_groundlightingavailability_view_qnzfhv.id
  where master_join_omkjhc.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zhguph.*) AS annotation
  from master_join master_join_zlhiby
  join notes.note_view notes_note_view_zhguph on master_join_zlhiby.target_id = notes_note_view_zhguph.id
  where master_join_zlhiby.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_ualxip.title as varchar), '(' || airport_heliport_guidanceline_pt_ualxip.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_ualxip.href AS markedguidanceline_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_ualxip on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_ualxip.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_zedfut.*) as lat_element
  from master_join master_join_qjrdfp
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_zedfut on master_join_qjrdfp.target_id = airport_heliport_markingelement_view_zedfut.id
  where master_join_qjrdfp.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_upnqxa.*) AS annotation
  from master_join master_join_eyxgoc
  join notes.note_view notes_note_view_upnqxa on master_join_eyxgoc.target_id = notes_note_view_upnqxa.id
  where master_join_eyxgoc.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_xpjgao.geom AS extent_geom,
    geometry_elevatedcurve_view_xpjgao.elevation AS extent_elevation,
    geometry_elevatedcurve_view_xpjgao.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_xpjgao.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_xpjgao.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_xpjgao.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_connectedtouchdownliftoff.lat_connectedtouchdownliftoff as connectedtouchdownliftoff,
    lat_connectedrunwaycentrelinepoint.lat_connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    lat_connectedapron.lat_connectedapron as connectedapron,
    lat_connectedstand.lat_connectedstand as connectedstand,
    lat_connectedtaxiway.lat_connectedtaxiway as connectedtaxiway,
    lat_annotation.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_xpjgao on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_xpjgao.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_xdxlgm.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_xdxlgm.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_xdxlgm.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_xdxlgm.href
  )) as lat_connectedtouchdownliftoff  from master_join master_join_darcpc
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xdxlgm on master_join_darcpc.target_id = airport_heliport_touchdownliftoff_pt_xdxlgm.id
  where master_join_darcpc.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtouchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_pt_efwbna.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_efwbna.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_efwbna.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_pt_efwbna.href
  )) as lat_connectedrunwaycentrelinepoint  from master_join master_join_hfuoyp
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_efwbna on master_join_hfuoyp.target_id = airport_heliport_runwaycentrelinepoint_pt_efwbna.id
  where master_join_hfuoyp.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedrunwaycentrelinepoint on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_pt_tbixgj.id,
      'title', coalesce(cast(airport_heliport_apron_pt_tbixgj.title AS varchar), '(' || airport_heliport_apron_pt_tbixgj.nilreason[1] || ')'),
      'href', airport_heliport_apron_pt_tbixgj.href
  )) as lat_connectedapron  from master_join master_join_nbcwlm
  join airport_heliport.apron_pt airport_heliport_apron_pt_tbixgj on master_join_nbcwlm.target_id = airport_heliport_apron_pt_tbixgj.id
  where master_join_nbcwlm.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedapron on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_nvnwbe.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_nvnwbe.title AS varchar), '(' || airport_heliport_aircraftstand_pt_nvnwbe.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_nvnwbe.href
  )) as lat_connectedstand  from master_join master_join_fbbltq
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_nvnwbe on master_join_fbbltq.target_id = airport_heliport_aircraftstand_pt_nvnwbe.id
  where master_join_fbbltq.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedstand on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_pt_ovlfjz.id,
      'title', coalesce(cast(airport_heliport_taxiway_pt_ovlfjz.title AS varchar), '(' || airport_heliport_taxiway_pt_ovlfjz.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_pt_ovlfjz.href
  )) as lat_connectedtaxiway  from master_join master_join_giafde
  join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_ovlfjz on master_join_giafde.target_id = airport_heliport_taxiway_pt_ovlfjz.id
  where master_join_giafde.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtaxiway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nthcpw.*) AS annotation
  from master_join master_join_lmykgz
  join notes.note_view notes_note_view_nthcpw on master_join_lmykgz.target_id = notes_note_view_nthcpw.id
  where master_join_lmykgz.source_id = airport_heliport.guidanceline_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_nzvtqx.title as varchar), '(' || holding_unplannedholding_pt_nzvtqx.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_nzvtqx.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_xynnax.title as varchar), '(' || holding_holdingpattern_pt_xynnax.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_xynnax.href AS assessedholdingpattern_href,
    lat_obstacleassessment.lat_obstacleassessment as obstacleassessment,
    lat_annotation.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_nzvtqx on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_nzvtqx.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_xynnax on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_xynnax.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_lnuwgl.*) as lat_obstacleassessment
  from master_join master_join_cbxxbp
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_lnuwgl on master_join_cbxxbp.target_id = shared_obstacleassessmentarea_view_lnuwgl.id
  where master_join_cbxxbp.source_id = shared.holdingassessment_ts.id
) as lat_obstacleassessment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dozert.*) AS annotation
  from master_join master_join_ksmbqu
  join notes.note_view notes_note_view_dozert on master_join_ksmbqu.target_id = notes_note_view_dozert.id
  where master_join_ksmbqu.source_id = shared.holdingassessment_ts.id
) as lat_annotation on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['geometry.curve_view', 'holding.holdingpatternduration_view', 'holding.holdingpatterndistance_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_pqjzmc.*) AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_wwgeic.*) AS outboundlegspanenddistance,
    geometry_curve_view_zkgmpo.geom AS extent_geom,
    geometry_curve_view_zkgmpo.horizontalAccuracy as extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_pqjzmc on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_pqjzmc.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_wwgeic on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_wwgeic.id
left join geometry.curve_view geometry_curve_view_zkgmpo on holding.holdingpattern_ts.extent_id = geometry_curve_view_zkgmpo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vletsz.*) AS annotation
  from master_join master_join_cgtnth
  join notes.note_view notes_note_view_vletsz on master_join_cgtnth.target_id = notes_note_view_vletsz.id
  where master_join_cgtnth.source_id = holding.holdingpattern_ts.id
) as lat_annotation on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_shjtkr.geom AS location_geom,
    geometry_elevatedpoint_view_shjtkr.longitude AS location_longitude,
    geometry_elevatedpoint_view_shjtkr.latitude AS location_latitude,
    geometry_elevatedpoint_view_shjtkr.elevation AS location_elevation,
    geometry_elevatedpoint_view_shjtkr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_shjtkr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_shjtkr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_shjtkr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_navgea.title as varchar), '(' || organisation_unit_pt_navgea.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_navgea.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_navaidbroadcast.lat_navaidbroadcast as navaidbroadcast,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_shjtkr on service.informationservice_ts.location_id = geometry_elevatedpoint_view_shjtkr.id
left join organisation.unit_pt organisation_unit_pt_navgea on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_navgea.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_awtqky.*) as lat_callsign
  from master_join master_join_btdlov
  join service.callsigndetail_view service_callsigndetail_view_awtqky on master_join_btdlov.target_id = service_callsigndetail_view_awtqky.id
  where master_join_btdlov.source_id = service.informationservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_tkgzwi.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_tkgzwi.title AS varchar), '(' || service_radiocommunicationchannel_pt_tkgzwi.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_tkgzwi.href
  )) as lat_radiocommunication  from master_join master_join_qptqox
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_tkgzwi on master_join_qptqox.target_id = service_radiocommunicationchannel_pt_tkgzwi.id
  where master_join_qptqox.source_id = service.informationservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_iamyaw
  join shared.contactinformation_view shared_contactinformation_view_rprnqy on master_join_iamyaw.target_id = shared_contactinformation_view_rprnqy.id
  where master_join_iamyaw.source_id = service.informationservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_oshcoi.*) as lat_availability
  from master_join master_join_qftzjs
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_oshcoi on master_join_qftzjs.target_id = service_serviceoperationalstatus_view_oshcoi.id
  where master_join_qftzjs.source_id = service.informationservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gnzlti.*) AS annotation
  from master_join master_join_gjpkdm
  join notes.note_view notes_note_view_gnzlti on master_join_gjpkdm.target_id = notes_note_view_gnzlti.id
  where master_join_gjpkdm.source_id = service.informationservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_pt_myqotc.id,
      'title', coalesce(cast(navaids_points_vor_pt_myqotc.title AS varchar), '(' || navaids_points_vor_pt_myqotc.nilreason[1] || ')'),
      'href', navaids_points_vor_pt_myqotc.href
  )) as lat_navaidbroadcast  from master_join master_join_oucads
  join navaids_points.vor_pt navaids_points_vor_pt_myqotc on master_join_oucads.target_id = navaids_points_vor_pt_myqotc.id
  where master_join_oucads.source_id = service.informationservice_ts.id
) as lat_navaidbroadcast on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_bjcsgd.id,
      'title', coalesce(cast(airspace_airspace_pt_bjcsgd.title AS varchar), '(' || airspace_airspace_pt_bjcsgd.nilreason[1] || ')'),
      'href', airspace_airspace_pt_bjcsgd.href
  )) as lat_clientairspace  from master_join master_join_dlwqak
  join airspace.airspace_pt airspace_airspace_pt_bjcsgd on master_join_dlwqak.target_id = airspace_airspace_pt_bjcsgd.id
  where master_join_dlwqak.source_id = service.informationservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_mbovty.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_mbovty.title AS varchar), '(' || airport_heliport_airportheliport_pt_mbovty.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_mbovty.href
  )) as lat_clientairport  from master_join master_join_cviwer
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mbovty on master_join_cviwer.target_id = airport_heliport_airportheliport_pt_mbovty.id
  where master_join_cviwer.source_id = service.informationservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_qnvqtk.*) as lat_clientroute
  from master_join master_join_dexwgg
  join routes.routeportion_view routes_routeportion_view_qnvqtk on master_join_dexwgg.target_id = routes_routeportion_view_qnvqtk.id
  where master_join_dexwgg.source_id = service.informationservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_lavoas.id,
      'title', coalesce(cast(holding_holdingpattern_pt_lavoas.title AS varchar), '(' || holding_holdingpattern_pt_lavoas.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_lavoas.href
  )) as lat_clientholding  from master_join master_join_ynhktd
  join holding.holdingpattern_pt holding_holdingpattern_pt_lavoas on master_join_ynhktd.target_id = holding_holdingpattern_pt_lavoas.id
  where master_join_ynhktd.source_id = service.informationservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_higymp.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_higymp.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_higymp.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_higymp.href
  )) as lat_clientaerialrefuelling  from master_join master_join_ofbghp
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_higymp on master_join_ofbghp.target_id = aerial_refuelling_aerialrefuelling_pt_higymp.id
  where master_join_ofbghp.source_id = service.informationservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_torkpp.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yxgdjg.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_acgwmg.*) AS arccentre,
    geometry_curve_view_abxoxp.geom AS trajectory_geom,
    geometry_curve_view_abxoxp.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ggjerb.title as varchar), '(' || navaids_points_angleindication_pt_ggjerb.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_ggjerb.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zqmpwk.title as varchar), '(' || navaids_points_distanceindication_pt_zqmpwk.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_zqmpwk.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_sxbmvj.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_nnsvfg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_nnsvfg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_nnsvfg.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_torkpp on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_torkpp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yxgdjg on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_yxgdjg.id
left join geometry.curve_view geometry_curve_view_abxoxp on procedure.initialleg_ts.trajectory_id = geometry_curve_view_abxoxp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_acgwmg on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_acgwmg.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ggjerb on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_ggjerb.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zqmpwk on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_zqmpwk.id
left join procedure.holdinguse_view procedure_holdinguse_view_sxbmvj on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_sxbmvj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_nnsvfg on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_nnsvfg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_hdwoqt.*) as lat_aircraftcategory
  from master_join master_join_anaosz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_hdwoqt on master_join_anaosz.target_id = shared_aircraftcharacteristic_view_hdwoqt.id
  where master_join_anaosz.source_id = procedure.initialleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_lxfdcw.*) as lat_designsurface
  from master_join master_join_mwlyjo
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_lxfdcw on master_join_mwlyjo.target_id = shared_obstacleassessmentarea_view_lxfdcw.id
  where master_join_mwlyjo.source_id = procedure.initialleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sxzuvf.*) AS annotation
  from master_join master_join_mtitik
  join notes.note_view notes_note_view_sxzuvf on master_join_mtitik.target_id = notes_note_view_sxzuvf.id
  where master_join_mtitik.source_id = procedure.initialleg_ts.id
) as lat_annotation on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'procedure.missedapproachgroup_view', 'shared.aircraftcharacteristic_view', 'procedure.finalprofile_view', 'notes.note_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_fwydgm.title as varchar), '(' || navaids_points_navaid_pt_fwydgm.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_fwydgm.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_calgiq.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_calgiq.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_calgiq.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ewbxgm.title as varchar), '(' || surveillance_radarsystem_pt_ewbxgm.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_ewbxgm.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_kpiwpz.title as varchar), '(' || procedure_safealtitudearea_pt_kpiwpz.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_kpiwpz.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ircklp.*) AS landing,
    to_jsonb(procedure_finalprofile_view_zwxjaa.*) AS finalprofile,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation,
    lat_missedinstruction.lat_missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fwydgm on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_fwydgm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_calgiq on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_calgiq.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ewbxgm on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ewbxgm.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_kpiwpz on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_kpiwpz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ircklp on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_ircklp.id
left join procedure.finalprofile_view procedure_finalprofile_view_zwxjaa on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_zwxjaa.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_effqbh.*) as lat_availability
  from master_join master_join_qpvpxv
  join procedure.procedureavailability_view procedure_procedureavailability_view_effqbh on master_join_qpvpxv.target_id = procedure_procedureavailability_view_effqbh.id
  where master_join_qpvpxv.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_zqmlil.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_zqmlil.title AS varchar), '(' || airport_heliport_airportheliport_pt_zqmlil.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_zqmlil.href
  )) as lat_airportheliport  from master_join master_join_jffyhl
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqmlil on master_join_jffyhl.target_id = airport_heliport_airportheliport_pt_zqmlil.id
  where master_join_jffyhl.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_qbppgx.*) as lat_aircraftcharacteristic
  from master_join master_join_xvfdnw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_qbppgx on master_join_xvfdnw.target_id = shared_aircraftcharacteristic_view_qbppgx.id
  where master_join_xvfdnw.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_ikrrkd.*) as lat_flighttransition
  from master_join master_join_rawwrb
  join procedure.proceduretransition_view procedure_proceduretransition_view_ikrrkd on master_join_rawwrb.target_id = procedure_proceduretransition_view_ikrrkd.id
  where master_join_rawwrb.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_juticg.*) AS annotation
  from master_join master_join_gqlepa
  join notes.note_view notes_note_view_juticg on master_join_gqlepa.target_id = notes_note_view_juticg.id
  where master_join_gqlepa.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_view_vrqtjv.*) as lat_missedinstruction
  from master_join master_join_lrcznx
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_view_vrqtjv on master_join_lrcznx.target_id = procedure_missedapproachgroup_view_vrqtjv.id
  where master_join_lrcznx.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_missedinstruction on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ffsnqt.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mxtbgu.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kpjtks.*) AS arccentre,
    geometry_curve_view_gglzid.geom AS trajectory_geom,
    geometry_curve_view_gglzid.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_itsucz.title as varchar), '(' || navaids_points_angleindication_pt_itsucz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_itsucz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ckxiwo.title as varchar), '(' || navaids_points_distanceindication_pt_ckxiwo.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_ckxiwo.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_hfnimj.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_febpwy.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_febpwy.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_febpwy.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ffsnqt on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ffsnqt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mxtbgu on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_mxtbgu.id
left join geometry.curve_view geometry_curve_view_gglzid on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_gglzid.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kpjtks on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_kpjtks.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_itsucz on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_itsucz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ckxiwo on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_ckxiwo.id
left join procedure.holdinguse_view procedure_holdinguse_view_hfnimj on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_hfnimj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_febpwy on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_febpwy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_hlqjvh.*) as lat_aircraftcategory
  from master_join master_join_vommqt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_hlqjvh on master_join_vommqt.target_id = shared_aircraftcharacteristic_view_hlqjvh.id
  where master_join_vommqt.source_id = procedure.intermediateleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_skvemd.*) as lat_designsurface
  from master_join master_join_mmzxic
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_skvemd on master_join_mmzxic.target_id = shared_obstacleassessmentarea_view_skvemd.id
  where master_join_mmzxic.source_id = procedure.intermediateleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ycomek.*) AS annotation
  from master_join master_join_vefmht
  join notes.note_view notes_note_view_ycomek on master_join_vefmht.target_id = notes_note_view_ycomek.id
  where master_join_vefmht.source_id = procedure.intermediateleg_ts.id
) as lat_annotation on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_ghpvob.geom AS location_geom,
    geometry_elevatedpoint_view_ghpvob.longitude AS location_longitude,
    geometry_elevatedpoint_view_ghpvob.latitude AS location_latitude,
    geometry_elevatedpoint_view_ghpvob.elevation AS location_elevation,
    geometry_elevatedpoint_view_ghpvob.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ghpvob.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ghpvob.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ghpvob.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ghpvob on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_ghpvob.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_dispfl.*) as lat_authority
  from master_join master_join_ztdjeu
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_dispfl on master_join_ztdjeu.target_id = navaids_points_authorityfornavaidequipment_view_dispfl.id
  where master_join_ztdjeu.source_id = navaids_points.localizer_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_cgfody.*) as lat_monitoring
  from master_join master_join_qoutde
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_cgfody on master_join_qoutde.target_id = navaids_points_navaidequipmentmonitoring_view_cgfody.id
  where master_join_qoutde.source_id = navaids_points.localizer_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ebywto.*) as lat_availability
  from master_join master_join_oysohz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ebywto on master_join_oysohz.target_id = navaids_points_navaidoperationalstatus_view_ebywto.id
  where master_join_oysohz.source_id = navaids_points.localizer_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nlvbvt.*) AS annotation
  from master_join master_join_wwaxut
  join notes.note_view notes_note_view_nlvbvt on master_join_wwaxut.target_id = notes_note_view_nlvbvt.id
  where master_join_wwaxut.source_id = navaids_points.localizer_ts.id
) as lat_annotation on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_lvloho.geom AS location_geom,
    geometry_elevatedpoint_view_lvloho.longitude AS location_longitude,
    geometry_elevatedpoint_view_lvloho.latitude AS location_latitude,
    geometry_elevatedpoint_view_lvloho.elevation AS location_elevation,
    geometry_elevatedpoint_view_lvloho.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lvloho.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lvloho.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lvloho.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lvloho on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_lvloho.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_jvfkxm.*) as lat_authority
  from master_join master_join_hluxmp
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_jvfkxm on master_join_hluxmp.target_id = navaids_points_authorityfornavaidequipment_view_jvfkxm.id
  where master_join_hluxmp.source_id = navaids_points.markerbeacon_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_zaasmh.*) as lat_monitoring
  from master_join master_join_igfweq
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_zaasmh on master_join_igfweq.target_id = navaids_points_navaidequipmentmonitoring_view_zaasmh.id
  where master_join_igfweq.source_id = navaids_points.markerbeacon_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_zgxlqc.*) as lat_availability
  from master_join master_join_nrvidf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_zgxlqc on master_join_nrvidf.target_id = navaids_points_navaidoperationalstatus_view_zgxlqc.id
  where master_join_nrvidf.source_id = navaids_points.markerbeacon_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_onmmno.*) AS annotation
  from master_join master_join_wvqcol
  join notes.note_view notes_note_view_onmmno on master_join_wvqcol.target_id = notes_note_view_onmmno.id
  where master_join_wvqcol.source_id = navaids_points.markerbeacon_ts.id
) as lat_annotation on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_gnfhdw.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_gnfhdw.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_gnfhdw.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_xhtbnh.geom AS location_geom,
    geometry_elevatedpoint_view_xhtbnh.longitude AS location_longitude,
    geometry_elevatedpoint_view_xhtbnh.latitude AS location_latitude,
    geometry_elevatedpoint_view_xhtbnh.elevation AS location_elevation,
    geometry_elevatedpoint_view_xhtbnh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xhtbnh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xhtbnh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xhtbnh.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_gnfhdw on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_gnfhdw.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xhtbnh on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_xhtbnh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jgozhs.*) AS annotation
  from master_join master_join_hozqms
  join notes.note_view notes_note_view_jgozhs on master_join_hozqms.target_id = notes_note_view_jgozhs.id
  where master_join_hozqms.source_id = airport_heliport.markingbuoy_ts.id
) as lat_annotation on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['geometry.curve_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xkctdt.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jfirox.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vzcnql.*) AS arccentre,
    geometry_curve_view_gkvdna.geom AS trajectory_geom,
    geometry_curve_view_gkvdna.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nkyssu.title as varchar), '(' || navaids_points_angleindication_pt_nkyssu.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_nkyssu.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zoysli.title as varchar), '(' || navaids_points_distanceindication_pt_zoysli.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_zoysli.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_vgldfk.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_xzfaus.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_xzfaus.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_xzfaus.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xkctdt on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_xkctdt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jfirox on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_jfirox.id
left join geometry.curve_view geometry_curve_view_gkvdna on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_gkvdna.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vzcnql on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vzcnql.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nkyssu on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_nkyssu.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zoysli on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_zoysli.id
left join procedure.holdinguse_view procedure_holdinguse_view_vgldfk on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_vgldfk.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_xzfaus on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_xzfaus.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_jkaimt.*) as lat_aircraftcategory
  from master_join master_join_yzikez
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_jkaimt on master_join_yzikez.target_id = shared_aircraftcharacteristic_view_jkaimt.id
  where master_join_yzikez.source_id = procedure.missedapproachleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_uapmkd.*) as lat_designsurface
  from master_join master_join_jjjbgd
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_uapmkd on master_join_jjjbgd.target_id = shared_obstacleassessmentarea_view_uapmkd.id
  where master_join_jjjbgd.source_id = procedure.missedapproachleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_javule.*) AS annotation
  from master_join master_join_etrplj
  join notes.note_view notes_note_view_javule on master_join_etrplj.target_id = notes_note_view_javule.id
  where master_join_etrplj.source_id = procedure.missedapproachleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_vlrvoo.*) as lat_condition
  from master_join master_join_elzebn
  join procedure.approachcondition_view procedure_approachcondition_view_vlrvoo on master_join_elzebn.target_id = procedure_approachcondition_view_vlrvoo.id
  where master_join_elzebn.source_id = procedure.missedapproachleg_ts.id
) as lat_condition on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_lozxog.geom AS location_geom,
    geometry_elevatedpoint_view_lozxog.longitude AS location_longitude,
    geometry_elevatedpoint_view_lozxog.latitude AS location_latitude,
    geometry_elevatedpoint_view_lozxog.elevation AS location_elevation,
    geometry_elevatedpoint_view_lozxog.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lozxog.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lozxog.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lozxog.horizontalAccuracy AS location_horizontalaccuracy,
    lat_touchdownliftoff.lat_touchdownliftoff as touchdownliftoff,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_servedairport.lat_servedairport as servedairport,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lozxog on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_lozxog.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_msdbqf.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_msdbqf.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_msdbqf.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_msdbqf.href
  )) as lat_touchdownliftoff  from master_join master_join_aqgtso
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_msdbqf on master_join_aqgtso.target_id = airport_heliport_touchdownliftoff_pt_msdbqf.id
  where master_join_aqgtso.source_id = navaids_points.navaid_ts.id
) as lat_touchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_view_jvpwwv.*) as lat_navaidequipment
  from master_join master_join_zhsavj
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_view_jvpwwv on master_join_zhsavj.target_id = navaids_points_navaidcomponent_view_jvpwwv.id
  where master_join_zhsavj.source_id = navaids_points.navaid_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_ohlsby.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_ohlsby.title AS varchar), '(' || airport_heliport_runwaydirection_pt_ohlsby.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_ohlsby.href
  )) as lat_runwaydirection  from master_join master_join_tejgvb
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ohlsby on master_join_tejgvb.target_id = airport_heliport_runwaydirection_pt_ohlsby.id
  where master_join_tejgvb.source_id = navaids_points.navaid_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_yglyea.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_yglyea.title AS varchar), '(' || airport_heliport_airportheliport_pt_yglyea.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_yglyea.href
  )) as lat_servedairport  from master_join master_join_orxmqd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yglyea on master_join_orxmqd.target_id = airport_heliport_airportheliport_pt_yglyea.id
  where master_join_orxmqd.source_id = navaids_points.navaid_ts.id
) as lat_servedairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_bdesmv.*) as lat_availability
  from master_join master_join_dhrbzc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_bdesmv on master_join_dhrbzc.target_id = navaids_points_navaidoperationalstatus_view_bdesmv.id
  where master_join_dhrbzc.source_id = navaids_points.navaid_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_recomp.*) AS annotation
  from master_join master_join_atzogl
  join notes.note_view notes_note_view_recomp on master_join_atzogl.target_id = notes_note_view_recomp.id
  where master_join_atzogl.source_id = navaids_points.navaid_ts.id
) as lat_annotation on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'shared.circlesector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    to_jsonb(shared_obstacleassessmentarea_view_vunyqw.*) AS designsurface,
    to_jsonb(shared_circlesector_view_mirpcr.*) AS sectordefinition,
    lat_annotation.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_vunyqw on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_vunyqw.id
left join shared.circlesector_view shared_circlesector_view_mirpcr on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_mirpcr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pusyix.*) AS annotation
  from master_join master_join_kanhdr
  join notes.note_view notes_note_view_pusyix on master_join_kanhdr.target_id = notes_note_view_pusyix.id
  where master_join_kanhdr.source_id = procedure.navigationarearestriction_ts.id
) as lat_annotation on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['geometry.point_view', 'procedure.navigationareasector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_wikejo.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_wikejo.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_wikejo.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jucsly.title as varchar), '(' || navaids_points_designatedpoint_pt_jucsly.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jucsly.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_etxbnn.title as varchar), '(' || navaids_points_navaid_pt_etxbnn.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_etxbnn.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wokpvj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wokpvj.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_wokpvj.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dzvpnj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dzvpnj.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dzvpnj.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hbylqr.title as varchar), '(' || airport_heliport_airportheliport_pt_hbylqr.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_hbylqr.href AS centrepointairportreferencepoint_href,
    geometry_point_view_qhgpvm.geom AS centrepointposition_geom,
    geometry_point_view_qhgpvm.longitude AS centrepointposition_longitude,
    geometry_point_view_qhgpvm.latitude AS centrepointposition_latitude,
    geometry_point_view_qhgpvm.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_wikejo on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_wikejo.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jucsly on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jucsly.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_etxbnn on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_etxbnn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wokpvj on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wokpvj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dzvpnj on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dzvpnj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hbylqr on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hbylqr.id
left join geometry.point_view geometry_point_view_qhgpvm on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_qhgpvm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_view_segdbe.*) as lat_sector
  from master_join master_join_amoajp
  join procedure.navigationareasector_view procedure_navigationareasector_view_segdbe on master_join_amoajp.target_id = procedure_navigationareasector_view_segdbe.id
  where master_join_amoajp.source_id = procedure.navigationarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nkqqqb.*) AS annotation
  from master_join master_join_yxhizm
  join notes.note_view notes_note_view_nkqqqb on master_join_yxhizm.target_id = notes_note_view_nkqqqb.id
  where master_join_yxhizm.source_id = procedure.navigationarea_ts.id
) as lat_annotation on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_izaxxb.geom AS location_geom,
    geometry_elevatedpoint_view_izaxxb.longitude AS location_longitude,
    geometry_elevatedpoint_view_izaxxb.latitude AS location_latitude,
    geometry_elevatedpoint_view_izaxxb.elevation AS location_elevation,
    geometry_elevatedpoint_view_izaxxb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_izaxxb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_izaxxb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_izaxxb.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_izaxxb on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_izaxxb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_mbnbsb.*) as lat_authority
  from master_join master_join_notstf
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_mbnbsb on master_join_notstf.target_id = navaids_points_authorityfornavaidequipment_view_mbnbsb.id
  where master_join_notstf.source_id = navaids_points.ndb_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_rmdkqb.*) as lat_monitoring
  from master_join master_join_tijltr
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_rmdkqb on master_join_tijltr.target_id = navaids_points_navaidequipmentmonitoring_view_rmdkqb.id
  where master_join_tijltr.source_id = navaids_points.ndb_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ttfjbw.*) as lat_availability
  from master_join master_join_ztrigp
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ttfjbw on master_join_ztrigp.target_id = navaids_points_navaidoperationalstatus_view_ttfjbw.id
  where master_join_ztrigp.source_id = navaids_points.ndb_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hpjfqa.*) AS annotation
  from master_join master_join_angyuj
  join notes.note_view notes_note_view_hpjfqa on master_join_angyuj.target_id = notes_note_view_hpjfqa.id
  where master_join_angyuj.source_id = navaids_points.ndb_ts.id
) as lat_annotation on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_ckgmbt.title as varchar), '(' || airport_heliport_airportheliport_pt_ckgmbt.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ckgmbt.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_jouazz.geom AS extent_geom,
    geometry_elevatedsurface_view_jouazz.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jouazz.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jouazz.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jouazz.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jouazz.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ckgmbt on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ckgmbt.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jouazz on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_jouazz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sdiuxb.*) AS annotation
  from master_join master_join_lwzrgc
  join notes.note_view notes_note_view_sdiuxb on master_join_lwzrgc.target_id = notes_note_view_sdiuxb.id
  where master_join_lwzrgc.source_id = airport_heliport.nonmovementarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_qaanbp.title as varchar), '(' || airport_heliport_airportheliport_pt_qaanbp.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_qaanbp.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_yomjku.title as varchar), '(' || airport_heliport_runwaydirection_pt_yomjku.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_yomjku.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_ikgaim.title as varchar), '(' || organisation_organisationauthority_pt_ikgaim.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_ikgaim.href AS referenceownerorganisation_href,
    geometry_surface_view_prtzow.geom AS surfaceextent_geom,
    geometry_surface_view_prtzow.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    lat_obstacle.lat_obstacle as obstacle,
    lat_annotation.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qaanbp on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_qaanbp.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_yomjku on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_yomjku.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ikgaim on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_ikgaim.id
left join geometry.surface_view geometry_surface_view_prtzow on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_prtzow.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_pt_avrofe.id,
      'title', coalesce(cast(obstacles_verticalstructure_pt_avrofe.title AS varchar), '(' || obstacles_verticalstructure_pt_avrofe.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_pt_avrofe.href
  )) as lat_obstacle  from master_join master_join_fgwemc
  join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_avrofe on master_join_fgwemc.target_id = obstacles_verticalstructure_pt_avrofe.id
  where master_join_fgwemc.source_id = obstacles.obstaclearea_ts.id
) as lat_obstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gecwbv.*) AS annotation
  from master_join master_join_odmegr
  join notes.note_view notes_note_view_gecwbv on master_join_odmegr.target_id = notes_note_view_gecwbv.id
  where master_join_odmegr.source_id = obstacles.obstaclearea_ts.id
) as lat_annotation on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['shared.contactinformation_view', 'organisation.organisationauthorityassociation_view', 'notes.note_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    lat_relatedorganisationauthority.lat_relatedorganisationauthority as relatedorganisationauthority,
    lat_annotation.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_rpmpif
  join shared.contactinformation_view shared_contactinformation_view_uazngm on master_join_rpmpif.target_id = shared_contactinformation_view_uazngm.id
  where master_join_rpmpif.source_id = organisation.organisationauthority_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_view_jahtth.*) as lat_relatedorganisationauthority
  from master_join master_join_gvnbec
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_view_jahtth on master_join_gvnbec.target_id = organisation_organisationauthorityassociation_view_jahtth.id
  where master_join_gvnbec.source_id = organisation.organisationauthority_ts.id
) as lat_relatedorganisationauthority on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_duvotm.*) AS annotation
  from master_join master_join_nxdjwa
  join notes.note_view notes_note_view_duvotm on master_join_nxdjwa.target_id = notes_note_view_duvotm.id
  where master_join_nxdjwa.source_id = organisation.organisationauthority_ts.id
) as lat_annotation on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_ncoaax.geom AS extent_geom,
    geometry_elevatedsurface_view_ncoaax.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ncoaax.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ncoaax.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ncoaax.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ncoaax.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedstand.lat_associatedstand as associatedstand,
    lat_annotation.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ncoaax on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_ncoaax.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_qvsdtx.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_qvsdtx.title AS varchar), '(' || airport_heliport_aircraftstand_pt_qvsdtx.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_qvsdtx.href
  )) as lat_associatedstand  from master_join master_join_qcwoqi
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_qvsdtx on master_join_qcwoqi.target_id = airport_heliport_aircraftstand_pt_qvsdtx.id
  where master_join_qcwoqi.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_associatedstand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vwlyvy.*) AS annotation
  from master_join master_join_wnvswd
  join notes.note_view notes_note_view_vwlyvy on master_join_wnvswd.target_id = notes_note_view_vwlyvy.id
  where master_join_wnvswd.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_annotation on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_hhojuq.geom AS location_geom,
    geometry_elevatedpoint_view_hhojuq.longitude AS location_longitude,
    geometry_elevatedpoint_view_hhojuq.latitude AS location_latitude,
    geometry_elevatedpoint_view_hhojuq.elevation AS location_elevation,
    geometry_elevatedpoint_view_hhojuq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hhojuq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hhojuq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hhojuq.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_krezqn.title as varchar), '(' || organisation_unit_pt_krezqn.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_krezqn.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hhojuq on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_hhojuq.id
left join organisation.unit_pt organisation_unit_pt_krezqn on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_krezqn.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_eblryq.*) as lat_callsign
  from master_join master_join_zhjdyw
  join service.callsigndetail_view service_callsigndetail_view_eblryq on master_join_zhjdyw.target_id = service_callsigndetail_view_eblryq.id
  where master_join_zhjdyw.source_id = service.passengerservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_bltnzl.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_bltnzl.title AS varchar), '(' || service_radiocommunicationchannel_pt_bltnzl.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_bltnzl.href
  )) as lat_radiocommunication  from master_join master_join_txyuqb
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_bltnzl on master_join_txyuqb.target_id = service_radiocommunicationchannel_pt_bltnzl.id
  where master_join_txyuqb.source_id = service.passengerservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_aetpzz
  join shared.contactinformation_view shared_contactinformation_view_enpgkn on master_join_aetpzz.target_id = shared_contactinformation_view_enpgkn.id
  where master_join_aetpzz.source_id = service.passengerservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_ebubsf.*) as lat_availability
  from master_join master_join_vraqol
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_ebubsf on master_join_vraqol.target_id = service_serviceoperationalstatus_view_ebubsf.id
  where master_join_vraqol.source_id = service.passengerservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ppppdy.*) AS annotation
  from master_join master_join_lhqsgd
  join notes.note_view notes_note_view_ppppdy on master_join_lhqsgd.target_id = notes_note_view_ppppdy.id
  where master_join_lhqsgd.source_id = service.passengerservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_rjptqk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_rjptqk.title AS varchar), '(' || airport_heliport_airportheliport_pt_rjptqk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_rjptqk.href
  )) as lat_airportheliport  from master_join master_join_gqzufk
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rjptqk on master_join_gqzufk.target_id = airport_heliport_airportheliport_pt_rjptqk.id
  where master_join_gqzufk.source_id = service.passengerservice_ts.id
) as lat_airportheliport on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    lat_controlledlightintensity.lat_controlledlightintensity as controlledlightintensity,
    lat_annotation.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_view_cgtbjz.*) as lat_controlledlightintensity
  from master_join master_join_fjiwhe
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_view_cgtbjz on master_join_fjiwhe.target_id = airport_heliport_lightactivation_view_cgtbjz.id
  where master_join_fjiwhe.source_id = service.pilotcontrolledlighting_ts.id
) as lat_controlledlightintensity on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zjdgqr.*) AS annotation
  from master_join master_join_bqxpga
  join notes.note_view notes_note_view_zjdgqr on master_join_bqxpga.target_id = notes_note_view_zjdgqr.id
  where master_join_bqxpga.source_id = service.pilotcontrolledlighting_ts.id
) as lat_annotation on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.reflector_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_syxzmj.geom AS location_geom,
    geometry_elevatedpoint_view_syxzmj.longitude AS location_longitude,
    geometry_elevatedpoint_view_syxzmj.latitude AS location_latitude,
    geometry_elevatedpoint_view_syxzmj.elevation AS location_elevation,
    geometry_elevatedpoint_view_syxzmj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_syxzmj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_syxzmj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_syxzmj.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_reflector.lat_reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_syxzmj on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_syxzmj.id
left join lateral(
  select
  from master_join master_join_yrvonj
  join shared.contactinformation_view shared_contactinformation_view_jomppe on master_join_yrvonj.target_id = shared_contactinformation_view_jomppe.id
  where master_join_yrvonj.source_id = surveillance.precisionapproachradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mhroim.*) AS annotation
  from master_join master_join_eynpxc
  join notes.note_view notes_note_view_mhroim on master_join_eynpxc.target_id = notes_note_view_mhroim.id
  where master_join_eynpxc.source_id = surveillance.precisionapproachradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_view_avykwl.*) as lat_reflector
  from master_join master_join_tcukrn
  join surveillance.reflector_view surveillance_reflector_view_avykwl on master_join_tcukrn.target_id = surveillance_reflector_view_avykwl.id
  where master_join_tcukrn.source_id = surveillance.precisionapproachradar_ts.id
) as lat_reflector on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_uiqplc.geom AS location_geom,
    geometry_elevatedpoint_view_uiqplc.longitude AS location_longitude,
    geometry_elevatedpoint_view_uiqplc.latitude AS location_latitude,
    geometry_elevatedpoint_view_uiqplc.elevation AS location_elevation,
    geometry_elevatedpoint_view_uiqplc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uiqplc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uiqplc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uiqplc.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uiqplc on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_uiqplc.id
left join lateral(
  select
  from master_join master_join_etnwfq
  join shared.contactinformation_view shared_contactinformation_view_injrhy on master_join_etnwfq.target_id = shared_contactinformation_view_injrhy.id
  where master_join_etnwfq.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oktges.*) AS annotation
  from master_join master_join_dlzxmf
  join notes.note_view notes_note_view_oktges on master_join_dlzxmf.target_id = notes_note_view_oktges.id
  where master_join_dlzxmf.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_pzyhzp.*) as lat_groundstation
  from master_join master_join_uixtzi
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_view_pzyhzp on master_join_uixtzi.target_id = surveillance_surveillancegroundstation_view_pzyhzp.id
  where master_join_uixtzi.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_kwkomc.title as varchar), '(' || navaids_points_dme_pt_kwkomc.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_kwkomc.href AS dme_href,
    lat_annotation.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_kwkomc on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_kwkomc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_valsox.*) AS annotation
  from master_join master_join_kowqrd
  join notes.note_view notes_note_view_valsox on master_join_kowqrd.target_id = notes_note_view_valsox.id
  where master_join_kowqrd.source_id = procedure.proceduredme_ts.id
) as lat_annotation on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.radarcomponent_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_jbnrah.title as varchar), '(' || airport_heliport_airportheliport_pt_jbnrah.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_jbnrah.href AS airportheliport_href,
    geometry_elevatedpoint_view_mcjhfh.geom AS location_geom,
    geometry_elevatedpoint_view_mcjhfh.longitude AS location_longitude,
    geometry_elevatedpoint_view_mcjhfh.latitude AS location_latitude,
    geometry_elevatedpoint_view_mcjhfh.elevation AS location_elevation,
    geometry_elevatedpoint_view_mcjhfh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mcjhfh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mcjhfh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mcjhfh.horizontalAccuracy AS location_horizontalaccuracy,
    lat_radarequipment.lat_radarequipment as radarequipment,
    lat_office.lat_office as office,
    lat_parrunway.lat_parrunway as parrunway,
    lat_annotation.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jbnrah on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_jbnrah.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mcjhfh on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_mcjhfh.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_view_hocvgo.*) as lat_radarequipment
  from master_join master_join_urdvdd
  join surveillance.radarcomponent_view surveillance_radarcomponent_view_hocvgo on master_join_urdvdd.target_id = surveillance_radarcomponent_view_hocvgo.id
  where master_join_urdvdd.source_id = surveillance.radarsystem_ts.id
) as lat_radarequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_hmjmdq.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_hmjmdq.title AS varchar), '(' || organisation_organisationauthority_pt_hmjmdq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_hmjmdq.href
  )) as lat_office  from master_join master_join_tnomqo
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_hmjmdq on master_join_tnomqo.target_id = organisation_organisationauthority_pt_hmjmdq.id
  where master_join_tnomqo.source_id = surveillance.radarsystem_ts.id
) as lat_office on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_cdrjrh.id,
      'title', coalesce(cast(airport_heliport_runway_pt_cdrjrh.title AS varchar), '(' || airport_heliport_runway_pt_cdrjrh.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_cdrjrh.href
  )) as lat_parrunway  from master_join master_join_mwgqwq
  join airport_heliport.runway_pt airport_heliport_runway_pt_cdrjrh on master_join_mwgqwq.target_id = airport_heliport_runway_pt_cdrjrh.id
  where master_join_mwgqwq.source_id = surveillance.radarsystem_ts.id
) as lat_parrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_luziik.*) AS annotation
  from master_join master_join_odclss
  join notes.note_view notes_note_view_luziik on master_join_odclss.target_id = notes_note_view_luziik.id
  where master_join_odclss.source_id = surveillance.radarsystem_ts.id
) as lat_annotation on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    lat_location.geom as location_geom,
    lat_location.attr as location,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_view_mlbgud.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_view_mlbgud.id,
      'longitude', geometry_elevatedpoint_view_mlbgud.longitude,
      'latitude', geometry_elevatedpoint_view_mlbgud.latitude,
      'elevation', geometry_elevatedpoint_view_mlbgud.elevation,
      'geoidUndulation', geometry_elevatedpoint_view_mlbgud.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_view_mlbgud.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_view_mlbgud.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_view_mlbgud.horizontalAccuracy
    )) AS attr
  from master_join master_join_mcbvlc
  join geometry.elevatedpoint_view geometry_elevatedpoint_view_mlbgud on master_join_mcbvlc.target_id = geometry_elevatedpoint_view_mlbgud.id
  where master_join_mcbvlc.source_id = service.radiocommunicationchannel_ts.id
) as lat_location on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_view_chbujj.*) as lat_availability
  from master_join master_join_tfsnrc
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_view_chbujj on master_join_tfsnrc.target_id = service_radiocommunicationoperationalstatus_view_chbujj.id
  where master_join_tfsnrc.source_id = service.radiocommunicationchannel_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cobcto.*) AS annotation
  from master_join master_join_ahszdj
  join notes.note_view notes_note_view_cobcto on master_join_ahszdj.target_id = notes_note_view_cobcto.id
  where master_join_ahszdj.source_id = service.radiocommunicationchannel_ts.id
) as lat_annotation on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_dyvvwg.title as varchar), '(' || service_radiocommunicationchannel_pt_dyvvwg.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_dyvvwg.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_mjudwj.title as varchar), '(' || navaids_points_specialnavigationstation_pt_mjudwj.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_mjudwj.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_lrdlaw.title as varchar), '(' || surveillance_precisionapproachradar_pt_lrdlaw.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_lrdlaw.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_luxyzi.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_luxyzi.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_luxyzi.href AS equipmentradar_href,
    lat_sector.lat_sector as sector,
    lat_extent.geom as extent_geom,
    lat_extent.attr as extent,
    lat_annotation.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_dyvvwg on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_dyvvwg.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_mjudwj on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_mjudwj.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_lrdlaw on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_lrdlaw.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_luxyzi on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_luxyzi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_view_sjinsc.*) as lat_sector
  from master_join master_join_woxsxu
  join shared.circlesector_view shared_circlesector_view_sjinsc on master_join_woxsxu.target_id = shared_circlesector_view_sjinsc.id
  where master_join_woxsxu.source_id = shared.radiofrequencyarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_view_xfkapd.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_view_xfkapd.id,
      'horizontalAccuracy', geometry_surface_view_xfkapd.horizontalAccuracy
    )) AS attr
  from master_join master_join_jhbwzj
  join geometry.surface_view geometry_surface_view_xfkapd on master_join_jhbwzj.target_id = geometry_surface_view_xfkapd.id
  where master_join_jhbwzj.source_id = shared.radiofrequencyarea_ts.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rbsihd.*) AS annotation
  from master_join master_join_rupsxy
  join notes.note_view notes_note_view_rbsihd on master_join_rupsxy.target_id = notes_note_view_rbsihd.id
  where master_join_rupsxy.source_id = shared.radiofrequencyarea_ts.id
) as lat_annotation on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_htrkfl.title as varchar), '(' || airport_heliport_airportheliport_pt_htrkfl.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_htrkfl.href AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nxjhib.*) AS surfaceproperties,
    geometry_elevatedsurface_view_paunto.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_paunto.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_paunto.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_paunto.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_paunto.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_paunto.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    lat_accessiblestand.lat_accessiblestand as accessiblestand,
    lat_annotation.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_htrkfl on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_htrkfl.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nxjhib on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nxjhib.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_paunto on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_paunto.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_hlhggy.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_hlhggy.title AS varchar), '(' || airport_heliport_aircraftstand_pt_hlhggy.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_hlhggy.href
  )) as lat_accessiblestand  from master_join master_join_bmhsjs
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_hlhggy on master_join_bmhsjs.target_id = airport_heliport_aircraftstand_pt_hlhggy.id
  where master_join_bmhsjs.source_id = airport_heliport.road_ts.id
) as lat_accessiblestand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sguldc.*) AS annotation
  from master_join master_join_vzukkm
  join notes.note_view notes_note_view_sguldc on master_join_vzukkm.target_id = notes_note_view_sguldc.id
  where master_join_vzukkm.source_id = airport_heliport.road_ts.id
) as lat_annotation on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_ehqieq.title as varchar), '(' || navaids_points_dme_pt_ehqieq.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_ehqieq.href AS referenceddme_href,
    to_jsonb(routes_routeportion_view_cighup.*) AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_ehqieq on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_ehqieq.id
left join routes.routeportion_view routes_routeportion_view_cighup on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_cighup.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hemeig.*) AS annotation
  from master_join master_join_vhgvym
  join notes.note_view notes_note_view_hemeig on master_join_vhgvym.target_id = notes_note_view_hemeig.id
  where master_join_vhgvym.source_id = routes.routedme_ts.id
) as lat_annotation on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['geometry.curve_view', 'routes.routeavailability_view', 'navaids_points.enroutesegmentpoint_view', 'shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_qnmizf.*) AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_tanzmo.*) AS end,
    coalesce(cast(routes_route_pt_envlpp.title as varchar), '(' || routes_route_pt_envlpp.nilreason[1] || ')') AS routeformed,
    routes_route_pt_envlpp.href AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_aimzlg.*) AS evaluationarea,
    geometry_curve_view_rmnxhj.geom AS curveextent_geom,
    geometry_curve_view_rmnxhj.horizontalAccuracy as curveextent_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_qnmizf on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_qnmizf.id
left join routes.route_pt routes_route_pt_envlpp on routes.routesegment_ts.routeformed_id = routes_route_pt_envlpp.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_aimzlg on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_aimzlg.id
left join geometry.curve_view geometry_curve_view_rmnxhj on routes.routesegment_ts.curveextent_id = geometry_curve_view_rmnxhj.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_tanzmo on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_tanzmo.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_glgwbc.*) as lat_availability
  from master_join master_join_gwglsy
  join routes.routeavailability_view routes_routeavailability_view_glgwbc on master_join_gwglsy.target_id = routes_routeavailability_view_glgwbc.id
  where master_join_gwglsy.source_id = routes.routesegment_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iasnrf.*) AS annotation
  from master_join master_join_itklxi
  join notes.note_view notes_note_view_iasnrf on master_join_itklxi.target_id = notes_note_view_iasnrf.id
  where master_join_itklxi.source_id = routes.routesegment_ts.id
) as lat_annotation on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_oxdyos.title as varchar), '(' || organisation_organisationauthority_pt_oxdyos.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_oxdyos.href AS userorganisation_href,
    lat_annotation.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_oxdyos on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_oxdyos.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bjsbou.*) AS annotation
  from master_join master_join_dtistr
  join notes.note_view notes_note_view_bjsbou on master_join_dtistr.target_id = notes_note_view_bjsbou.id
  where master_join_dtistr.source_id = routes.route_ts.id
) as lat_annotation on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    lat_affectedlocation.lat_affectedlocation as affectedlocation,
    lat_affectedarea.lat_affectedarea as affectedarea,
    lat_annotation.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_hhpyts.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_hhpyts.title AS varchar), '(' || airport_heliport_airportheliport_pt_hhpyts.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_hhpyts.href
  )) as lat_affectedlocation  from master_join master_join_rhqxrr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hhpyts on master_join_rhqxrr.target_id = airport_heliport_airportheliport_pt_hhpyts.id
  where master_join_rhqxrr.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedlocation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_kokfhq.id,
      'title', coalesce(cast(airspace_airspace_pt_kokfhq.title AS varchar), '(' || airspace_airspace_pt_kokfhq.nilreason[1] || ')'),
      'href', airspace_airspace_pt_kokfhq.href
  )) as lat_affectedarea  from master_join master_join_yccegp
  join airspace.airspace_pt airspace_airspace_pt_kokfhq on master_join_yccegp.target_id = airspace_airspace_pt_kokfhq.id
  where master_join_yccegp.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedarea on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ibwfia.*) AS annotation
  from master_join master_join_mfemtx
  join notes.note_view notes_note_view_ibwfia on master_join_mfemtx.target_id = notes_note_view_ibwfia.id
  where master_join_mfemtx.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_annotation on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_nsmskz.title as varchar), '(' || airport_heliport_runwaydirection_pt_nsmskz.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_nsmskz.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_kcqeds.geom AS extent_geom,
    geometry_elevatedsurface_view_kcqeds.elevation AS extent_elevation,
    geometry_elevatedsurface_view_kcqeds.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_kcqeds.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_kcqeds.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_kcqeds.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fhyuux.*) AS surfaceproperties,
    lat_annotation.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_nsmskz on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_nsmskz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kcqeds on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_kcqeds.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fhyuux on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fhyuux.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tzrugv.*) AS annotation
  from master_join master_join_mjsein
  join notes.note_view notes_note_view_tzrugv on master_join_mjsein.target_id = notes_note_view_tzrugv.id
  where master_join_mjsein.source_id = airport_heliport.runwayblastpad_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['airport_heliport.navaidequipmentdistance_view', 'geometry.elevatedpoint_view', 'airport_heliport.runwaydeclareddistance_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_ctrupv.geom AS location_geom,
    geometry_elevatedpoint_view_ctrupv.longitude AS location_longitude,
    geometry_elevatedpoint_view_ctrupv.latitude AS location_latitude,
    geometry_elevatedpoint_view_ctrupv.elevation AS location_elevation,
    geometry_elevatedpoint_view_ctrupv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ctrupv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ctrupv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ctrupv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_iuccum.title as varchar), '(' || airport_heliport_runwaydirection_pt_iuccum.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_iuccum.href AS onrunway_href,
    lat_associateddeclareddistance.lat_associateddeclareddistance as associateddeclareddistance,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ctrupv on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_ctrupv.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_iuccum on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_iuccum.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_view_sgxtkm.*) as lat_associateddeclareddistance
  from master_join master_join_sksxtm
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_view_sgxtkm on master_join_sksxtm.target_id = airport_heliport_runwaydeclareddistance_view_sgxtkm.id
  where master_join_sksxtm.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_associateddeclareddistance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_view_dhjuwx.*) as lat_navaidequipment
  from master_join master_join_zwvsuy
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_view_dhjuwx on master_join_zwvsuy.target_id = airport_heliport_navaidequipmentdistance_view_dhjuwx.id
  where master_join_zwvsuy.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_anapwj.*) AS annotation
  from master_join master_join_xplioj
  join notes.note_view notes_note_view_anapwj on master_join_xplioj.target_id = notes_note_view_anapwj.id
  where master_join_xplioj.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_afmboq.title as varchar), '(' || airport_heliport_runwaydirection_pt_afmboq.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_afmboq.href AS associatedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_afmboq on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_afmboq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_idqscd.*) as lat_element
  from master_join master_join_nejjrs
  join shared.lightelement_view shared_lightelement_view_idqscd on master_join_nejjrs.target_id = shared_lightelement_view_idqscd.id
  where master_join_nejjrs.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_qcpyza.*) as lat_availability
  from master_join master_join_ieizgu
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_qcpyza on master_join_ieizgu.target_id = airport_heliport_groundlightingavailability_view_qcpyza.id
  where master_join_ieizgu.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_usigmo.*) AS annotation
  from master_join master_join_rycfrr
  join notes.note_view notes_note_view_usigmo on master_join_rycfrr.target_id = notes_note_view_usigmo.id
  where master_join_rycfrr.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_iedfsw.title as varchar), '(' || airport_heliport_runway_pt_iedfsw.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_iedfsw.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_bkcuho.title as varchar), '(' || airport_heliport_runwayelement_pt_bkcuho.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_bkcuho.href AS startingelement_href,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_iedfsw on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_iedfsw.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_bkcuho on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_bkcuho.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gidiqc.*) AS annotation
  from master_join master_join_kdodll
  join notes.note_view notes_note_view_gidiqc on master_join_kdodll.target_id = notes_note_view_gidiqc.id
  where master_join_kdodll.source_id = airport_heliport.runwaydirection_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_tlounj.*) as lat_availability
  from master_join master_join_lsaavv
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_tlounj on master_join_lsaavv.target_id = airport_heliport_manoeuvringareaavailability_view_tlounj.id
  where master_join_lsaavv.source_id = airport_heliport.runwaydirection_ts.id
) as lat_availability on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zklovh.*) AS surfaceproperties,
    geometry_elevatedsurface_view_bizjzz.geom AS extent_geom,
    geometry_elevatedsurface_view_bizjzz.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bizjzz.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bizjzz.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bizjzz.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bizjzz.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedrunway.lat_associatedrunway as associatedrunway,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zklovh on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zklovh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bizjzz on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_bizjzz.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_mwurhr.id,
      'title', coalesce(cast(airport_heliport_runway_pt_mwurhr.title AS varchar), '(' || airport_heliport_runway_pt_mwurhr.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_mwurhr.href
  )) as lat_associatedrunway  from master_join master_join_izqwya
  join airport_heliport.runway_pt airport_heliport_runway_pt_mwurhr on master_join_izqwya.target_id = airport_heliport_runway_pt_mwurhr.id
  where master_join_izqwya.source_id = airport_heliport.runwayelement_ts.id
) as lat_associatedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gvkvrl.*) AS annotation
  from master_join master_join_rpotxw
  join notes.note_view notes_note_view_gvkvrl on master_join_rpotxw.target_id = notes_note_view_gvkvrl.id
  where master_join_rpotxw.source_id = airport_heliport.runwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_tebavk.*) as lat_availability
  from master_join master_join_wzqcyf
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_tebavk on master_join_wzqcyf.target_id = airport_heliport_manoeuvringareaavailability_view_tebavk.id
  where master_join_wzqcyf.source_id = airport_heliport.runwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_lnjqhk.title as varchar), '(' || airport_heliport_runway_pt_lnjqhk.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_lnjqhk.href AS markedrunway_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_lnjqhk on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_lnjqhk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_nbhiyr.*) as lat_element
  from master_join master_join_osepxz
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_nbhiyr on master_join_osepxz.target_id = airport_heliport_markingelement_view_nbhiyr.id
  where master_join_osepxz.source_id = airport_heliport.runwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmuzap.*) AS annotation
  from master_join master_join_iasjgj
  join notes.note_view notes_note_view_nmuzap on master_join_iasjgj.target_id = notes_note_view_nmuzap.id
  where master_join_iasjgj.source_id = airport_heliport.runwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_mylcpq.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_mylcpq.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_mylcpq.href AS lightedarea_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_mylcpq on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_mylcpq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_aryegi.*) as lat_element
  from master_join master_join_mmotox
  join shared.lightelement_view shared_lightelement_view_aryegi on master_join_mmotox.target_id = shared_lightelement_view_aryegi.id
  where master_join_mmotox.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_fwpqif.*) as lat_availability
  from master_join master_join_fsthqd
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_fwpqif on master_join_fsthqd.target_id = airport_heliport_groundlightingavailability_view_fwpqif.id
  where master_join_fsthqd.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qzkbka.*) AS annotation
  from master_join master_join_fxxmyq
  join notes.note_view notes_note_view_qzkbka on master_join_fxxmyq.target_id = notes_note_view_qzkbka.id
  where master_join_fxxmyq.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_auawfh.*) AS surfaceproperties,
    geometry_elevatedsurface_view_avhcse.geom AS extent_geom,
    geometry_elevatedsurface_view_avhcse.elevation AS extent_elevation,
    geometry_elevatedsurface_view_avhcse.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_avhcse.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_avhcse.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_avhcse.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_wpuyyx.title as varchar), '(' || airport_heliport_runwaydirection_pt_wpuyyx.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_wpuyyx.href AS protectedrunwaydirection_href,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_auawfh on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_auawfh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_avhcse on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_avhcse.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wpuyyx on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_wpuyyx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_esukur.*) AS annotation
  from master_join master_join_uoeulv
  join notes.note_view notes_note_view_esukur on master_join_uoeulv.target_id = notes_note_view_esukur.id
  where master_join_uoeulv.source_id = airport_heliport.runwayprotectarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.runwaycontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_cgrgre.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_nymnrx.title as varchar), '(' || airport_heliport_airportheliport_pt_nymnrx.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_nymnrx.href AS associatedairportheliport_href,
    lat_overallcontaminant.lat_overallcontaminant as overallcontaminant,
    lat_annotation.annotation as annotation,
    lat_areacontaminant.lat_areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_cgrgre on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_cgrgre.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nymnrx on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_nymnrx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_view_rtqfso.*) as lat_overallcontaminant
  from master_join master_join_lhrcyz
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_view_rtqfso on master_join_lhrcyz.target_id = airport_heliport_runwaycontamination_view_rtqfso.id
  where master_join_lhrcyz.source_id = airport_heliport.runway_ts.id
) as lat_overallcontaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ntfxlj.*) AS annotation
  from master_join master_join_ghiuev
  join notes.note_view notes_note_view_ntfxlj on master_join_ghiuev.target_id = notes_note_view_ntfxlj.id
  where master_join_ghiuev.source_id = airport_heliport.runway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_view_iokkth.*) as lat_areacontaminant
  from master_join master_join_vwgnex
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_view_iokkth on master_join_vwgnex.target_id = airport_heliport_runwaysectioncontamination_view_iokkth.id
  where master_join_vwgnex.source_id = airport_heliport.runway_ts.id
) as lat_areacontaminant on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_rqcvfc.geom AS location_geom,
    geometry_elevatedpoint_view_rqcvfc.longitude AS location_longitude,
    geometry_elevatedpoint_view_rqcvfc.latitude AS location_latitude,
    geometry_elevatedpoint_view_rqcvfc.elevation AS location_elevation,
    geometry_elevatedpoint_view_rqcvfc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rqcvfc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rqcvfc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rqcvfc.horizontalAccuracy AS location_horizontalaccuracy,
    lat_associatedrunwaydirection.lat_associatedrunwaydirection as associatedrunwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rqcvfc on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_rqcvfc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_wdjvub.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_wdjvub.title AS varchar), '(' || airport_heliport_runwaydirection_pt_wdjvub.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_wdjvub.href
  )) as lat_associatedrunwaydirection  from master_join master_join_jxteow
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wdjvub on master_join_jxteow.target_id = airport_heliport_runwaydirection_pt_wdjvub.id
  where master_join_jxteow.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_associatedrunwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ymdefa.*) AS annotation
  from master_join master_join_axarpb
  join notes.note_view notes_note_view_ymdefa on master_join_axarpb.target_id = notes_note_view_ymdefa.id
  where master_join_axarpb.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['geometry.point_view', 'procedure.safealtitudeareasector_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_dekvdu.title as varchar), '(' || navaids_points_designatedpoint_pt_dekvdu.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dekvdu.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_kxleky.title as varchar), '(' || navaids_points_navaid_pt_kxleky.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_kxleky.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jalbif.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jalbif.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jalbif.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_aveapb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_aveapb.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_aveapb.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qaworr.title as varchar), '(' || airport_heliport_airportheliport_pt_qaworr.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_qaworr.href AS centrepointairportreferencepoint_href,
    lat_location.lat_location as location,
    geometry_point_view_ueoszd.geom AS centrepointposition_geom,
    geometry_point_view_ueoszd.longitude AS centrepointposition_longitude,
    geometry_point_view_ueoszd.latitude AS centrepointposition_latitude,
    geometry_point_view_ueoszd.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dekvdu on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dekvdu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_kxleky on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_kxleky.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jalbif on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jalbif.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_aveapb on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_aveapb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qaworr on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_qaworr.id
left join geometry.point_view geometry_point_view_ueoszd on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_ueoszd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_view_jryphc.*) as lat_sector
  from master_join master_join_scfczg
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_view_jryphc on master_join_scfczg.target_id = procedure_safealtitudeareasector_view_jryphc.id
  where master_join_scfczg.source_id = procedure.safealtitudearea_ts.id
) as lat_sector on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_juafru.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_juafru.title AS varchar), '(' || airport_heliport_airportheliport_pt_juafru.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_juafru.href
  )) as lat_location  from master_join master_join_puxzxw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_juafru on master_join_puxzxw.target_id = airport_heliport_airportheliport_pt_juafru.id
  where master_join_puxzxw.source_id = procedure.safealtitudearea_ts.id
) as lat_location on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nfydnx.*) AS annotation
  from master_join master_join_xbrpir
  join notes.note_view notes_note_view_nfydnx on master_join_xbrpir.target_id = notes_note_view_nfydnx.id
  where master_join_xbrpir.source_id = procedure.safealtitudearea_ts.id
) as lat_annotation on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_hqipvn.geom AS location_geom,
    geometry_elevatedpoint_view_hqipvn.longitude AS location_longitude,
    geometry_elevatedpoint_view_hqipvn.latitude AS location_latitude,
    geometry_elevatedpoint_view_hqipvn.elevation AS location_elevation,
    geometry_elevatedpoint_view_hqipvn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hqipvn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hqipvn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hqipvn.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hqipvn on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_hqipvn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_qozths.*) as lat_authority
  from master_join master_join_neljaj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_qozths on master_join_neljaj.target_id = navaids_points_authorityfornavaidequipment_view_qozths.id
  where master_join_neljaj.source_id = navaids_points.sdf_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_zztjrr.*) as lat_monitoring
  from master_join master_join_kzzded
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_zztjrr on master_join_kzzded.target_id = navaids_points_navaidequipmentmonitoring_view_zztjrr.id
  where master_join_kzzded.source_id = navaids_points.sdf_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ejcusf.*) as lat_availability
  from master_join master_join_svhicb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ejcusf on master_join_svhicb.target_id = navaids_points_navaidoperationalstatus_view_ejcusf.id
  where master_join_svhicb.source_id = navaids_points.sdf_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rzagzg.*) AS annotation
  from master_join master_join_ehomyv
  join notes.note_view notes_note_view_rzagzg on master_join_ehomyv.target_id = notes_note_view_rzagzg.id
  where master_join_ehomyv.source_id = navaids_points.sdf_ts.id
) as lat_annotation on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_ldlihz.geom AS extent_geom,
    geometry_elevatedsurface_view_ldlihz.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ldlihz.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ldlihz.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ldlihz.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ldlihz.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_rampsite.lat_rampsite as rampsite,
    lat_docksite.lat_docksite as docksite,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ldlihz on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_ldlihz.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_pt_qtzqkv.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_pt_qtzqkv.title AS varchar), '(' || airport_heliport_seaplanerampsite_pt_qtzqkv.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_pt_qtzqkv.href
  )) as lat_rampsite  from master_join master_join_rjcvlv
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_pt_qtzqkv on master_join_rjcvlv.target_id = airport_heliport_seaplanerampsite_pt_qtzqkv.id
  where master_join_rjcvlv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_rampsite on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_pt_pedefh.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_pt_pedefh.title AS varchar), '(' || airport_heliport_floatingdocksite_pt_pedefh.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_pt_pedefh.href
  )) as lat_docksite  from master_join master_join_pvfuij
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_pt_pedefh on master_join_pvfuij.target_id = airport_heliport_floatingdocksite_pt_pedefh.id
  where master_join_pvfuij.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_docksite on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_atgwwj.*) AS annotation
  from master_join master_join_lgkzcf
  join notes.note_view notes_note_view_atgwwj on master_join_lgkzcf.target_id = notes_note_view_atgwwj.id
  where master_join_lgkzcf.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_lancpv.*) as lat_availability
  from master_join master_join_cqamhz
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_lancpv on master_join_cqamhz.target_id = airport_heliport_manoeuvringareaavailability_view_lancpv.id
  where master_join_cqamhz.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_ovuztt.geom AS extent_geom,
    geometry_elevatedsurface_view_ovuztt.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ovuztt.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ovuztt.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ovuztt.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ovuztt.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_zbuprp.geom AS centreline_geom,
    geometry_elevatedcurve_view_zbuprp.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_zbuprp.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_zbuprp.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_zbuprp.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_zbuprp.horizontalAccuracy AS centreline_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ovuztt on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_ovuztt.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_zbuprp on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_zbuprp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mvarij.*) AS annotation
  from master_join master_join_jineyb
  join notes.note_view notes_note_view_mvarij on master_join_jineyb.target_id = notes_note_view_mvarij.id
  where master_join_jineyb.source_id = airport_heliport.seaplanerampsite_ts.id
) as lat_annotation on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_levuqy.geom AS location_geom,
    geometry_elevatedpoint_view_levuqy.longitude AS location_longitude,
    geometry_elevatedpoint_view_levuqy.latitude AS location_latitude,
    geometry_elevatedpoint_view_levuqy.elevation AS location_elevation,
    geometry_elevatedpoint_view_levuqy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_levuqy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_levuqy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_levuqy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_fvnsig.title as varchar), '(' || organisation_unit_pt_fvnsig.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_fvnsig.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_levuqy on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_levuqy.id
left join organisation.unit_pt organisation_unit_pt_fvnsig on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_fvnsig.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_judunk.*) as lat_callsign
  from master_join master_join_ynokls
  join service.callsigndetail_view service_callsigndetail_view_judunk on master_join_ynokls.target_id = service_callsigndetail_view_judunk.id
  where master_join_ynokls.source_id = service.searchrescueservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_bsummc.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_bsummc.title AS varchar), '(' || service_radiocommunicationchannel_pt_bsummc.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_bsummc.href
  )) as lat_radiocommunication  from master_join master_join_xbkqvp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_bsummc on master_join_xbkqvp.target_id = service_radiocommunicationchannel_pt_bsummc.id
  where master_join_xbkqvp.source_id = service.searchrescueservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_koojtk
  join shared.contactinformation_view shared_contactinformation_view_rfqnsh on master_join_koojtk.target_id = shared_contactinformation_view_rfqnsh.id
  where master_join_koojtk.source_id = service.searchrescueservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_oirpgl.*) as lat_availability
  from master_join master_join_cpdnjf
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_oirpgl on master_join_cpdnjf.target_id = service_serviceoperationalstatus_view_oirpgl.id
  where master_join_cpdnjf.source_id = service.searchrescueservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wpdgfr.*) AS annotation
  from master_join master_join_fxqhyv
  join notes.note_view notes_note_view_wpdgfr on master_join_fxqhyv.target_id = notes_note_view_wpdgfr.id
  where master_join_fxqhyv.source_id = service.searchrescueservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_rjmvzm.id,
      'title', coalesce(cast(airspace_airspace_pt_rjmvzm.title AS varchar), '(' || airspace_airspace_pt_rjmvzm.nilreason[1] || ')'),
      'href', airspace_airspace_pt_rjmvzm.href
  )) as lat_clientairspace  from master_join master_join_vzchkj
  join airspace.airspace_pt airspace_airspace_pt_rjmvzm on master_join_vzchkj.target_id = airspace_airspace_pt_rjmvzm.id
  where master_join_vzchkj.source_id = service.searchrescueservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_hsywtb.*) as lat_clientroute
  from master_join master_join_ynagru
  join routes.routeportion_view routes_routeportion_view_hsywtb on master_join_ynagru.target_id = routes_routeportion_view_hsywtb.id
  where master_join_ynagru.source_id = service.searchrescueservice_ts.id
) as lat_clientroute on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_hhstyz.geom AS location_geom,
    geometry_elevatedpoint_view_hhstyz.longitude AS location_longitude,
    geometry_elevatedpoint_view_hhstyz.latitude AS location_latitude,
    geometry_elevatedpoint_view_hhstyz.elevation AS location_elevation,
    geometry_elevatedpoint_view_hhstyz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hhstyz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hhstyz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hhstyz.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hhstyz on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_hhstyz.id
left join lateral(
  select
  from master_join master_join_xpjnxz
  join shared.contactinformation_view shared_contactinformation_view_rhknzp on master_join_xpjnxz.target_id = shared_contactinformation_view_rhknzp.id
  where master_join_xpjnxz.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ftjchd.*) AS annotation
  from master_join master_join_mqodwl
  join notes.note_view notes_note_view_ftjchd on master_join_mqodwl.target_id = notes_note_view_ftjchd.id
  where master_join_mqodwl.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_vbnfrb.*) as lat_groundstation
  from master_join master_join_lhenjj
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_view_vbnfrb on master_join_lhenjj.target_id = surveillance_surveillancegroundstation_view_vbnfrb.id
  where master_join_lhenjj.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_wziayd.title as varchar), '(' || airspace_airspace_pt_wziayd.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_wziayd.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_kiluyq.title as varchar), '(' || navaids_points_designatedpoint_pt_kiluyq.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_kiluyq.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_srgvlu.title as varchar), '(' || navaids_points_navaid_pt_srgvlu.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_srgvlu.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jumcnt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jumcnt.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_jumcnt.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xkpffu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xkpffu.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xkpffu.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_flxldj.title as varchar), '(' || airport_heliport_airportheliport_pt_flxldj.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_flxldj.href AS locationairportreferencepoint_href,
    geometry_point_view_ebbifg.geom AS locationposition_geom,
    geometry_point_view_ebbifg.longitude AS locationposition_longitude,
    geometry_point_view_ebbifg.latitude AS locationposition_latitude,
    geometry_point_view_ebbifg.horizontalAccuracy AS locationposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_wziayd on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_wziayd.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_kiluyq on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_kiluyq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_srgvlu on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_srgvlu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jumcnt on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jumcnt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xkpffu on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xkpffu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_flxldj on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_flxldj.id
left join geometry.point_view geometry_point_view_ebbifg on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_ebbifg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ivwqqu.*) AS annotation
  from master_join master_join_rqoczd
  join notes.note_view notes_note_view_ivwqqu on master_join_rqoczd.target_id = notes_note_view_ivwqqu.id
  where master_join_rqoczd.source_id = navaids_points.significantpointinairspace_ts.id
) as lat_annotation on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_qfbync.title as varchar), '(' || organisation_organisationauthority_pt_qfbync.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_qfbync.href AS authority_href,
    lat_annotation.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qfbync on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_qfbync.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gxxtve.*) AS annotation
  from master_join master_join_vixwth
  join notes.note_view notes_note_view_gxxtve on master_join_vixwth.target_id = notes_note_view_gxxtve.id
  where master_join_vixwth.source_id = shared.specialdate_ts.id
) as lat_annotation on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['navaids_points.specialnavigationstationstatus_view', 'navaids_points.authorityforspecialnavigationstation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_prewdk.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_prewdk.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_prewdk.href AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_dmpgmv.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_hqyxxv.geom AS position_geom,
    geometry_elevatedpoint_view_hqyxxv.longitude AS position_longitude,
    geometry_elevatedpoint_view_hqyxxv.latitude AS position_latitude,
    geometry_elevatedpoint_view_hqyxxv.elevation AS position_elevation,
    geometry_elevatedpoint_view_hqyxxv.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_hqyxxv.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_hqyxxv.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_hqyxxv.horizontalAccuracy AS position_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_prewdk on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_prewdk.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_dmpgmv on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_dmpgmv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hqyxxv on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_hqyxxv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_view_jtvshi.*) as lat_availability
  from master_join master_join_gnlbiy
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_view_jtvshi on master_join_gnlbiy.target_id = navaids_points_specialnavigationstationstatus_view_jtvshi.id
  where master_join_gnlbiy.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_smefhs.*) AS annotation
  from master_join master_join_dfymbj
  join notes.note_view notes_note_view_smefhs on master_join_dfymbj.target_id = notes_note_view_smefhs.id
  where master_join_dfymbj.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_pmekzi.*) AS responsibleorganisation,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_pmekzi on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_pmekzi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uookio.*) AS annotation
  from master_join master_join_yyysgh
  join notes.note_view notes_note_view_uookio on master_join_yyysgh.target_id = notes_note_view_uookio.id
  where master_join_yyysgh.source_id = navaids_points.specialnavigationsystem_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_beunkd.title as varchar), '(' || navaids_points_navaid_pt_beunkd.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_beunkd.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_vwxunu.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_vwxunu.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_vwxunu.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_avesmn.title as varchar), '(' || surveillance_radarsystem_pt_avesmn.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_avesmn.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_vseqkt.title as varchar), '(' || procedure_safealtitudearea_pt_vseqkt.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_vseqkt.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_pegahn.*) AS arrival,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_beunkd on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_beunkd.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_vwxunu on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_vwxunu.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_avesmn on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_avesmn.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_vseqkt on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_vseqkt.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_pegahn on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_pegahn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_tfjhig.*) as lat_availability
  from master_join master_join_pzbgas
  join procedure.procedureavailability_view procedure_procedureavailability_view_tfjhig on master_join_pzbgas.target_id = procedure_procedureavailability_view_tfjhig.id
  where master_join_pzbgas.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_pqrvsp.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_pqrvsp.title AS varchar), '(' || airport_heliport_airportheliport_pt_pqrvsp.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_pqrvsp.href
  )) as lat_airportheliport  from master_join master_join_axhgzg
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pqrvsp on master_join_axhgzg.target_id = airport_heliport_airportheliport_pt_pqrvsp.id
  where master_join_axhgzg.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_kwoxak.*) as lat_aircraftcharacteristic
  from master_join master_join_tazenk
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_kwoxak on master_join_tazenk.target_id = shared_aircraftcharacteristic_view_kwoxak.id
  where master_join_tazenk.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_hnuhbr.*) as lat_flighttransition
  from master_join master_join_oxqbcn
  join procedure.proceduretransition_view procedure_proceduretransition_view_hnuhbr on master_join_oxqbcn.target_id = procedure_proceduretransition_view_hnuhbr.id
  where master_join_oxqbcn.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pjigkb.*) AS annotation
  from master_join master_join_xccjyi
  join notes.note_view notes_note_view_pjigkb on master_join_xccjyi.target_id = notes_note_view_pjigkb.id
  where master_join_xccjyi.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_tpfzxu.title as varchar), '(' || navaids_points_navaid_pt_tpfzxu.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_tpfzxu.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_rzennr.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_rzennr.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_rzennr.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_bssdfq.title as varchar), '(' || surveillance_radarsystem_pt_bssdfq.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_bssdfq.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_uxrcvx.title as varchar), '(' || procedure_safealtitudearea_pt_uxrcvx.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_uxrcvx.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_jypydg.*) AS takeoff,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tpfzxu on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_tpfzxu.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_rzennr on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_rzennr.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_bssdfq on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_bssdfq.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_uxrcvx on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_uxrcvx.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_jypydg on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_jypydg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_dbcugh.*) as lat_availability
  from master_join master_join_gwqako
  join procedure.procedureavailability_view procedure_procedureavailability_view_dbcugh on master_join_gwqako.target_id = procedure_procedureavailability_view_dbcugh.id
  where master_join_gwqako.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_ghfiuy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_ghfiuy.title AS varchar), '(' || airport_heliport_airportheliport_pt_ghfiuy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_ghfiuy.href
  )) as lat_airportheliport  from master_join master_join_uruoqf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ghfiuy on master_join_uruoqf.target_id = airport_heliport_airportheliport_pt_ghfiuy.id
  where master_join_uruoqf.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_ygftvh.*) as lat_aircraftcharacteristic
  from master_join master_join_brllqk
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_ygftvh on master_join_brllqk.target_id = shared_aircraftcharacteristic_view_ygftvh.id
  where master_join_brllqk.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_mnmblo.*) as lat_flighttransition
  from master_join master_join_jntivp
  join procedure.proceduretransition_view procedure_proceduretransition_view_mnmblo on master_join_jntivp.target_id = procedure_proceduretransition_view_mnmblo.id
  where master_join_jntivp.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pcbveu.*) AS annotation
  from master_join master_join_jdtzvi
  join notes.note_view notes_note_view_pcbveu on master_join_jdtzvi.target_id = notes_note_view_pcbveu.id
  where master_join_jdtzvi.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_wgrrql.title as varchar), '(' || shared_standardleveltable_pt_wgrrql.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_wgrrql.href AS leveltable_href,
    lat_level.lat_level as level,
    lat_annotation.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_wgrrql on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_wgrrql.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_view_caojmx.*) as lat_level
  from master_join master_join_wzncfu
  join shared.standardlevel_view shared_standardlevel_view_caojmx on master_join_wzncfu.target_id = shared_standardlevel_view_caojmx.id
  where master_join_wzncfu.source_id = shared.standardlevelcolumn_ts.id
) as lat_level on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_acglaf.*) AS annotation
  from master_join master_join_tsxoig
  join notes.note_view notes_note_view_acglaf on master_join_tsxoig.target_id = notes_note_view_acglaf.id
  where master_join_tsxoig.source_id = shared.standardlevelcolumn_ts.id
) as lat_annotation on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_pliqfa.title as varchar), '(' || shared_standardlevelcolumn_pt_pliqfa.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_pliqfa.href AS applicablelevelcolumn_href,
    lat_applicableairspace.lat_applicableairspace as applicableairspace,
    lat_annotation.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_pliqfa on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_pliqfa.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_fetjmx.id,
      'title', coalesce(cast(airspace_airspace_pt_fetjmx.title AS varchar), '(' || airspace_airspace_pt_fetjmx.nilreason[1] || ')'),
      'href', airspace_airspace_pt_fetjmx.href
  )) as lat_applicableairspace  from master_join master_join_skxbyq
  join airspace.airspace_pt airspace_airspace_pt_fetjmx on master_join_skxbyq.target_id = airspace_airspace_pt_fetjmx.id
  where master_join_skxbyq.source_id = shared.standardlevelsector_ts.id
) as lat_applicableairspace on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kimsis.*) AS annotation
  from master_join master_join_ylaceb
  join notes.note_view notes_note_view_kimsis on master_join_ylaceb.target_id = notes_note_view_kimsis.id
  where master_join_ylaceb.source_id = shared.standardlevelsector_ts.id
) as lat_annotation on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    lat_annotation.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zijvoo.*) AS annotation
  from master_join master_join_vspqyw
  join notes.note_view notes_note_view_zijvoo on master_join_vspqyw.target_id = notes_note_view_zijvoo.id
  where master_join_vspqyw.source_id = shared.standardleveltable_ts.id
) as lat_annotation on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_vkpeae.title as varchar), '(' || airport_heliport_aircraftstand_pt_vkpeae.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_vkpeae.href AS markedstand_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_vkpeae on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_vkpeae.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_bxfawb.*) as lat_element
  from master_join master_join_momtbj
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_bxfawb on master_join_momtbj.target_id = airport_heliport_markingelement_view_bxfawb.id
  where master_join_momtbj.source_id = airport_heliport.standmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qxadzi.*) AS annotation
  from master_join master_join_jryiln
  join notes.note_view notes_note_view_qxadzi on master_join_jryiln.target_id = notes_note_view_qxadzi.id
  where master_join_jryiln.source_id = airport_heliport.standmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_bcmvji.title as varchar), '(' || airport_heliport_airportheliport_pt_bcmvji.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_bcmvji.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_ynuvqm.geom AS location_geom,
    geometry_elevatedpoint_view_ynuvqm.longitude AS location_longitude,
    geometry_elevatedpoint_view_ynuvqm.latitude AS location_latitude,
    geometry_elevatedpoint_view_ynuvqm.elevation AS location_elevation,
    geometry_elevatedpoint_view_ynuvqm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ynuvqm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ynuvqm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ynuvqm.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bcmvji on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_bcmvji.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ynuvqm on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_ynuvqm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jcwneq.*) AS annotation
  from master_join master_join_lcrvve
  join notes.note_view notes_note_view_jcwneq on master_join_lcrvve.target_id = notes_note_view_jcwneq.id
  where master_join_lcrvve.source_id = airport_heliport.surveycontrolpoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_wnwbgv.geom AS location_geom,
    geometry_elevatedpoint_view_wnwbgv.longitude AS location_longitude,
    geometry_elevatedpoint_view_wnwbgv.latitude AS location_latitude,
    geometry_elevatedpoint_view_wnwbgv.elevation AS location_elevation,
    geometry_elevatedpoint_view_wnwbgv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wnwbgv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wnwbgv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wnwbgv.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wnwbgv on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_wnwbgv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_klusyu.*) as lat_authority
  from master_join master_join_myjyxu
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_klusyu on master_join_myjyxu.target_id = navaids_points_authorityfornavaidequipment_view_klusyu.id
  where master_join_myjyxu.source_id = navaids_points.tacan_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_tslfpv.*) as lat_monitoring
  from master_join master_join_blxccy
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_tslfpv on master_join_blxccy.target_id = navaids_points_navaidequipmentmonitoring_view_tslfpv.id
  where master_join_blxccy.source_id = navaids_points.tacan_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ghlyre.*) as lat_availability
  from master_join master_join_ifocfx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ghlyre on master_join_ifocfx.target_id = navaids_points_navaidoperationalstatus_view_ghlyre.id
  where master_join_ifocfx.source_id = navaids_points.tacan_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ncddhf.*) AS annotation
  from master_join master_join_cygqzm
  join notes.note_view notes_note_view_ncddhf on master_join_cygqzm.target_id = notes_note_view_ncddhf.id
  where master_join_cygqzm.source_id = navaids_points.tacan_ts.id
) as lat_annotation on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_xzatja.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_xzatja.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_xzatja.href AS taxiholding_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_xzatja on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_xzatja.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_zvvdbi.*) as lat_element
  from master_join master_join_ujbxjg
  join shared.lightelement_view shared_lightelement_view_zvvdbi on master_join_ujbxjg.target_id = shared_lightelement_view_zvvdbi.id
  where master_join_ujbxjg.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_bwydrf.*) as lat_availability
  from master_join master_join_ytppdj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_bwydrf on master_join_ytppdj.target_id = airport_heliport_groundlightingavailability_view_bwydrf.id
  where master_join_ytppdj.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xgxipa.*) AS annotation
  from master_join master_join_vysdtp
  join notes.note_view notes_note_view_xgxipa on master_join_vysdtp.target_id = notes_note_view_xgxipa.id
  where master_join_vysdtp.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_cebusw.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_cebusw.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_cebusw.href AS markedtaxihold_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_cebusw on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_cebusw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_jteubu.*) as lat_element
  from master_join master_join_kmfoxu
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_jteubu on master_join_kmfoxu.target_id = airport_heliport_markingelement_view_jteubu.id
  where master_join_kmfoxu.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rcvqzd.*) AS annotation
  from master_join master_join_thqvnq
  join notes.note_view notes_note_view_rcvqzd on master_join_thqvnq.target_id = notes_note_view_rcvqzd.id
  where master_join_thqvnq.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_ebsjyd.title as varchar), '(' || airport_heliport_guidanceline_pt_ebsjyd.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_ebsjyd.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_tyhwgy.geom AS location_geom,
    geometry_elevatedpoint_view_tyhwgy.longitude AS location_longitude,
    geometry_elevatedpoint_view_tyhwgy.latitude AS location_latitude,
    geometry_elevatedpoint_view_tyhwgy.elevation AS location_elevation,
    geometry_elevatedpoint_view_tyhwgy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tyhwgy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tyhwgy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tyhwgy.horizontalAccuracy AS location_horizontalaccuracy,
    lat_protectedrunway.lat_protectedrunway as protectedrunway,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_ebsjyd on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_ebsjyd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tyhwgy on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_tyhwgy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_qoagxl.id,
      'title', coalesce(cast(airport_heliport_runway_pt_qoagxl.title AS varchar), '(' || airport_heliport_runway_pt_qoagxl.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_qoagxl.href
  )) as lat_protectedrunway  from master_join master_join_uhffas
  join airport_heliport.runway_pt airport_heliport_runway_pt_qoagxl on master_join_uhffas.target_id = airport_heliport_runway_pt_qoagxl.id
  where master_join_uhffas.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_protectedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bjlajr.*) AS annotation
  from master_join master_join_tloftm
  join notes.note_view notes_note_view_bjlajr on master_join_tloftm.target_id = notes_note_view_bjlajr.id
  where master_join_tloftm.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_aaxzdl.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_kbcraf.title as varchar), '(' || airport_heliport_taxiway_pt_kbcraf.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_kbcraf.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_rhrxzd.geom AS extent_geom,
    geometry_elevatedsurface_view_rhrxzd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rhrxzd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rhrxzd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rhrxzd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rhrxzd.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_aaxzdl on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_aaxzdl.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_kbcraf on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_kbcraf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rhrxzd on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_rhrxzd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ltyqbn.*) AS annotation
  from master_join master_join_jeeqxc
  join notes.note_view notes_note_view_ltyqbn on master_join_jeeqxc.target_id = notes_note_view_ltyqbn.id
  where master_join_jeeqxc.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_jqcwns.*) as lat_availability
  from master_join master_join_dzcpqx
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_jqcwns on master_join_dzcpqx.target_id = airport_heliport_manoeuvringareaavailability_view_jqcwns.id
  where master_join_dzcpqx.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_cowdha.title as varchar), '(' || airport_heliport_taxiway_pt_cowdha.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_cowdha.href AS lightedtaxiway_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_cowdha on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_cowdha.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_llwfae.*) as lat_element
  from master_join master_join_svqgku
  join shared.lightelement_view shared_lightelement_view_llwfae on master_join_svqgku.target_id = shared_lightelement_view_llwfae.id
  where master_join_svqgku.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_bizppv.*) as lat_availability
  from master_join master_join_ffneur
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_bizppv on master_join_ffneur.target_id = airport_heliport_groundlightingavailability_view_bizppv.id
  where master_join_ffneur.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tjhhmq.*) AS annotation
  from master_join master_join_omprub
  join notes.note_view notes_note_view_tjhhmq on master_join_omprub.target_id = notes_note_view_tjhhmq.id
  where master_join_omprub.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_avzhan.title as varchar), '(' || airport_heliport_taxiway_pt_avzhan.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_avzhan.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_afazgs.title as varchar), '(' || airport_heliport_taxiwayelement_pt_afazgs.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_afazgs.href AS markedelement_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_avzhan on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_avzhan.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_afazgs on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_afazgs.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_qjyxcb.*) as lat_element
  from master_join master_join_txxnig
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_qjyxcb on master_join_txxnig.target_id = airport_heliport_markingelement_view_qjyxcb.id
  where master_join_txxnig.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mbgpod.*) AS annotation
  from master_join master_join_pvlhrj
  join notes.note_view notes_note_view_mbgpod on master_join_pvlhrj.target_id = notes_note_view_mbgpod.id
  where master_join_pvlhrj.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.taxiwaycontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_glhqse.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_frsyqi.title as varchar), '(' || airport_heliport_airportheliport_pt_frsyqi.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_frsyqi.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_glhqse on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_glhqse.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_frsyqi on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_frsyqi.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_view_uqmzjq.*) as lat_contaminant
  from master_join master_join_xymovn
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_view_uqmzjq on master_join_xymovn.target_id = airport_heliport_taxiwaycontamination_view_uqmzjq.id
  where master_join_xymovn.source_id = airport_heliport.taxiway_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iikgre.*) AS annotation
  from master_join master_join_jhkgil
  join notes.note_view notes_note_view_iikgre on master_join_jhkgil.target_id = notes_note_view_iikgre.id
  where master_join_jhkgil.source_id = airport_heliport.taxiway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_rgzoll.*) as lat_availability
  from master_join master_join_rqavyl
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_rgzoll on master_join_rqavyl.target_id = airport_heliport_manoeuvringareaavailability_view_rgzoll.id
  where master_join_rqavyl.source_id = airport_heliport.taxiway_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.point_view', 'geometry.surface_view', 'procedure.terminalarrivalareasector_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_egbiwk.title as varchar), '(' || navaids_points_designatedpoint_pt_egbiwk.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_egbiwk.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_lmegaq.title as varchar), '(' || navaids_points_designatedpoint_pt_lmegaq.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_lmegaq.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ssgbji.title as varchar), '(' || navaids_points_navaid_pt_ssgbji.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_ssgbji.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_tpguuu.title as varchar), '(' || navaids_points_navaid_pt_tpguuu.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_tpguuu.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jncced.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jncced.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_jncced.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hjrzyv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hjrzyv.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_hjrzyv.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vplpvo.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vplpvo.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vplpvo.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zeglkr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zeglkr.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zeglkr.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jyqkea.title as varchar), '(' || airport_heliport_airportheliport_pt_jyqkea.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_jyqkea.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dnzesj.title as varchar), '(' || airport_heliport_airportheliport_pt_dnzesj.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_dnzesj.href AS iafairportreferencepoint_href,
    geometry_point_view_xjguul.geom AS ifposition_geom,
    geometry_point_view_xjguul.longitude AS ifposition_longitude,
    geometry_point_view_xjguul.latitude AS ifposition_latitude,
    geometry_point_view_xjguul.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_hjtfsl.geom AS iafposition_geom,
    geometry_point_view_hjtfsl.longitude AS iafposition_longitude,
    geometry_point_view_hjtfsl.latitude AS iafposition_latitude,
    geometry_point_view_hjtfsl.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_qrqryp.geom AS buffer_geom,
    geometry_surface_view_qrqryp.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_dukmav.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_dukmav.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_dukmav.href AS approachrnav_href,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_egbiwk on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_egbiwk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ssgbji on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_ssgbji.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jncced on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jncced.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vplpvo on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vplpvo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jyqkea on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_jyqkea.id
left join geometry.point_view geometry_point_view_xjguul on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_xjguul.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lmegaq on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lmegaq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tpguuu on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_tpguuu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hjrzyv on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hjrzyv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zeglkr on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zeglkr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dnzesj on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_dnzesj.id
left join geometry.point_view geometry_point_view_hjtfsl on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_hjtfsl.id
left join geometry.surface_view geometry_surface_view_qrqryp on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_qrqryp.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_dukmav on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_dukmav.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_view_jsmhzh.*) as lat_sector
  from master_join master_join_bsakdf
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_view_jsmhzh on master_join_bsakdf.target_id = procedure_terminalarrivalareasector_view_jsmhzh.id
  where master_join_bsakdf.source_id = procedure.terminalarrivalarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_utwihu.*) AS annotation
  from master_join master_join_inpzep
  join notes.note_view notes_note_view_utwihu on master_join_inpzep.target_id = notes_note_view_utwihu.id
  where master_join_inpzep.source_id = procedure.terminalarrivalarea_ts.id
) as lat_annotation on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wdbmdk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wdbmdk.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_wdbmdk.href AS lightedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wdbmdk on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_wdbmdk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_rtiqko.*) as lat_element
  from master_join master_join_otjhon
  join shared.lightelement_view shared_lightelement_view_rtiqko on master_join_otjhon.target_id = shared_lightelement_view_rtiqko.id
  where master_join_otjhon.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_iqovhb.*) as lat_availability
  from master_join master_join_jkygnp
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_iqovhb on master_join_jkygnp.target_id = airport_heliport_groundlightingavailability_view_iqovhb.id
  where master_join_jkygnp.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qnymtt.*) AS annotation
  from master_join master_join_oifuiy
  join notes.note_view notes_note_view_qnymtt on master_join_oifuiy.target_id = notes_note_view_qnymtt.id
  where master_join_oifuiy.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xcviqb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xcviqb.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xcviqb.href AS markedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xcviqb on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xcviqb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_sskuql.*) as lat_element
  from master_join master_join_jfgtro
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_sskuql on master_join_jfgtro.target_id = airport_heliport_markingelement_view_sskuql.id
  where master_join_jfgtro.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bniiwz.*) AS annotation
  from master_join master_join_qnoksi
  join notes.note_view notes_note_view_bniiwz on master_join_qnoksi.target_id = notes_note_view_bniiwz.id
  where master_join_qnoksi.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_glpzhh.*) AS surfaceproperties,
    geometry_elevatedsurface_view_jzurvp.geom AS extent_geom,
    geometry_elevatedsurface_view_jzurvp.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jzurvp.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jzurvp.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jzurvp.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jzurvp.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xxewoh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xxewoh.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xxewoh.href AS protectedtouchdownliftoff_href,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_glpzhh on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_glpzhh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jzurvp on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_jzurvp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xxewoh on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xxewoh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vzkpdb.*) AS annotation
  from master_join master_join_qhwnvw
  join notes.note_view notes_note_view_vzkpdb on master_join_qhwnvw.target_id = notes_note_view_vzkpdb.id
  where master_join_qhwnvw.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.touchdownliftoffcontamination_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_pserdm.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_pserdm.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_pserdm.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_pserdm.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_pserdm.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_pserdm.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_pserdm.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_pserdm.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_hneslh.geom AS extent_geom,
    geometry_elevatedsurface_view_hneslh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hneslh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hneslh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hneslh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hneslh.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_uctych.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_plvbcg.title as varchar), '(' || airport_heliport_airportheliport_pt_plvbcg.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_plvbcg.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_drxfiv.title as varchar), '(' || airport_heliport_runway_pt_drxfiv.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_drxfiv.href AS approachtakeoffarea_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pserdm on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_pserdm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hneslh on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_hneslh.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_uctych on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_uctych.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_plvbcg on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_plvbcg.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_drxfiv on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_drxfiv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_view_flynht.*) as lat_contaminant
  from master_join master_join_lhkkvj
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_view_flynht on master_join_lhkkvj.target_id = airport_heliport_touchdownliftoffcontamination_view_flynht.id
  where master_join_lhkkvj.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bzqhtb.*) AS annotation
  from master_join master_join_qifnef
  join notes.note_view notes_note_view_bzqhtb on master_join_qifnef.target_id = notes_note_view_bzqhtb.id
  where master_join_qifnef.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_yhvwbo.*) as lat_availability
  from master_join master_join_xgsfas
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_yhvwbo on master_join_xgsfas.target_id = airport_heliport_manoeuvringareaavailability_view_yhvwbo.id
  where master_join_xgsfas.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_availability on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['geometry.elevatedpoint_view', 'organisation.unitdependency_view', 'shared.contactinformation_view', 'organisation.unitavailability_view', 'notes.note_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_arrfro.geom AS position_geom,
    geometry_elevatedpoint_view_arrfro.longitude AS position_longitude,
    geometry_elevatedpoint_view_arrfro.latitude AS position_latitude,
    geometry_elevatedpoint_view_arrfro.elevation AS position_elevation,
    geometry_elevatedpoint_view_arrfro.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_arrfro.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_arrfro.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_arrfro.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_glssie.title as varchar), '(' || airport_heliport_airportheliport_pt_glssie.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_glssie.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_guqbnp.title as varchar), '(' || organisation_organisationauthority_pt_guqbnp.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_guqbnp.href AS ownerorganisation_href,
    lat_relatedunit.lat_relatedunit as relatedunit,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_arrfro on organisation.unit_ts.position_id = geometry_elevatedpoint_view_arrfro.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_glssie on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_glssie.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_guqbnp on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_guqbnp.id
left join lateral(
  select
  from master_join master_join_kjrsaf
  join shared.contactinformation_view shared_contactinformation_view_wqming on master_join_kjrsaf.target_id = shared_contactinformation_view_wqming.id
  where master_join_kjrsaf.source_id = organisation.unit_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_view_idpoix.*) as lat_relatedunit
  from master_join master_join_lnqwbd
  join organisation.unitdependency_view organisation_unitdependency_view_idpoix on master_join_lnqwbd.target_id = organisation_unitdependency_view_idpoix.id
  where master_join_lnqwbd.source_id = organisation.unit_ts.id
) as lat_relatedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_view_gwrmol.*) as lat_availability
  from master_join master_join_rgduui
  join organisation.unitavailability_view organisation_unitavailability_view_gwrmol on master_join_rgduui.target_id = organisation_unitavailability_view_gwrmol.id
  where master_join_rgduui.source_id = organisation.unit_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rharxq.*) AS annotation
  from master_join master_join_uyszez
  join notes.note_view notes_note_view_rharxq on master_join_uyszez.target_id = notes_note_view_rharxq.id
  where master_join_uyszez.source_id = organisation.unit_ts.id
) as lat_annotation on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    lat_annotation.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hmbbnc.*) AS annotation
  from master_join master_join_eusffa
  join notes.note_view notes_note_view_hmbbnc on master_join_eusffa.target_id = notes_note_view_hmbbnc.id
  where master_join_eusffa.source_id = holding.unplannedholding_ts.id
) as lat_annotation on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_endujv.title as varchar), '(' || navaids_points_markerbeacon_pt_endujv.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_endujv.href AS marker_href,
    lat_part.lat_part as part,
    lat_hostedpassengerservice.lat_hostedpassengerservice as hostedpassengerservice,
    lat_hostedspecialnavstation.lat_hostedspecialnavstation as hostedspecialnavstation,
    lat_hostedunit.lat_hostedunit as hostedunit,
    lat_hostedorganisation.lat_hostedorganisation as hostedorganisation,
    lat_annotation.annotation as annotation,
    lat_lightingavailability.lat_lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_endujv on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_endujv.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_view_fdnpbq.*) as lat_part
  from master_join master_join_pgkgce
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_view_fdnpbq on master_join_pgkgce.target_id = obstacles_verticalstructurepart_view_fdnpbq.id
  where master_join_pgkgce.source_id = obstacles.verticalstructure_ts.id
) as lat_part on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_pt_ofgrxl.id,
      'title', coalesce(cast(service_passengerservice_pt_ofgrxl.title AS varchar), '(' || service_passengerservice_pt_ofgrxl.nilreason[1] || ')'),
      'href', service_passengerservice_pt_ofgrxl.href
  )) as lat_hostedpassengerservice  from master_join master_join_lotznl
  join service.passengerservice_pt service_passengerservice_pt_ofgrxl on master_join_lotznl.target_id = service_passengerservice_pt_ofgrxl.id
  where master_join_lotznl.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedpassengerservice on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_pt_qzgtpz.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_pt_qzgtpz.title AS varchar), '(' || navaids_points_specialnavigationstation_pt_qzgtpz.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_pt_qzgtpz.href
  )) as lat_hostedspecialnavstation  from master_join master_join_qhmxki
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_qzgtpz on master_join_qhmxki.target_id = navaids_points_specialnavigationstation_pt_qzgtpz.id
  where master_join_qhmxki.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedspecialnavstation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_pt_smsvxw.id,
      'title', coalesce(cast(organisation_unit_pt_smsvxw.title AS varchar), '(' || organisation_unit_pt_smsvxw.nilreason[1] || ')'),
      'href', organisation_unit_pt_smsvxw.href
  )) as lat_hostedunit  from master_join master_join_lhnyod
  join organisation.unit_pt organisation_unit_pt_smsvxw on master_join_lhnyod.target_id = organisation_unit_pt_smsvxw.id
  where master_join_lhnyod.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_caouaj.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_caouaj.title AS varchar), '(' || organisation_organisationauthority_pt_caouaj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_caouaj.href
  )) as lat_hostedorganisation  from master_join master_join_ftwllb
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_caouaj on master_join_ftwllb.target_id = organisation_organisationauthority_pt_caouaj.id
  where master_join_ftwllb.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_woumnp.*) AS annotation
  from master_join master_join_xjvqab
  join notes.note_view notes_note_view_woumnp on master_join_xjvqab.target_id = notes_note_view_woumnp.id
  where master_join_xjvqab.source_id = obstacles.verticalstructure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_view_ellgec.*) as lat_lightingavailability
  from master_join master_join_rsjhcv
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_view_ellgec on master_join_rsjhcv.target_id = obstacles_verticalstructurelightingstatus_view_ellgec.id
  where master_join_rsjhcv.source_id = obstacles.verticalstructure_ts.id
) as lat_lightingavailability on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_opfctk.title as varchar), '(' || airport_heliport_runwaydirection_pt_opfctk.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_opfctk.href AS runwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_opfctk on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_opfctk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_auxtkb.*) as lat_element
  from master_join master_join_faazir
  join shared.lightelement_view shared_lightelement_view_auxtkb on master_join_faazir.target_id = shared_lightelement_view_auxtkb.id
  where master_join_faazir.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_xjffrs.*) as lat_availability
  from master_join master_join_lshnix
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_xjffrs on master_join_lshnix.target_id = airport_heliport_groundlightingavailability_view_xjffrs.id
  where master_join_lshnix.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wiacju.*) AS annotation
  from master_join master_join_hpjkau
  join notes.note_view notes_note_view_wiacju on master_join_hpjkau.target_id = notes_note_view_wiacju.id
  where master_join_hpjkau.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_annotation on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_pjipix.geom AS location_geom,
    geometry_elevatedpoint_view_pjipix.longitude AS location_longitude,
    geometry_elevatedpoint_view_pjipix.latitude AS location_latitude,
    geometry_elevatedpoint_view_pjipix.elevation AS location_elevation,
    geometry_elevatedpoint_view_pjipix.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pjipix.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pjipix.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pjipix.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pjipix on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_pjipix.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_qmjuxe.*) as lat_authority
  from master_join master_join_wowbbn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_qmjuxe on master_join_wowbbn.target_id = navaids_points_authorityfornavaidequipment_view_qmjuxe.id
  where master_join_wowbbn.source_id = navaids_points.vor_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_ookhwj.*) as lat_monitoring
  from master_join master_join_khubpd
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_ookhwj on master_join_khubpd.target_id = navaids_points_navaidequipmentmonitoring_view_ookhwj.id
  where master_join_khubpd.source_id = navaids_points.vor_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ezrkou.*) as lat_availability
  from master_join master_join_mtnukd
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ezrkou on master_join_mtnukd.target_id = navaids_points_navaidoperationalstatus_view_ezrkou.id
  where master_join_mtnukd.source_id = navaids_points.vor_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qlcmhi.*) AS annotation
  from master_join master_join_hwtojz
  join notes.note_view notes_note_view_qlcmhi on master_join_hwtojz.target_id = notes_note_view_qlcmhi.id
  where master_join_hwtojz.source_id = navaids_points.vor_ts.id
) as lat_annotation on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_orbvgv.title as varchar), '(' || airport_heliport_airportheliport_pt_orbvgv.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_orbvgv.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_nqbngo.geom AS extent_geom,
    geometry_elevatedsurface_view_nqbngo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_nqbngo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_nqbngo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_nqbngo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_nqbngo.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_orbvgv on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_orbvgv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nqbngo on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_nqbngo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_view_ggkwkh.*) as lat_activation
  from master_join master_join_esnucs
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_view_ggkwkh on master_join_esnucs.target_id = airport_heliport_workareaactivity_view_ggkwkh.id
  where master_join_esnucs.source_id = airport_heliport.workarea_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qjeoqb.*) AS annotation
  from master_join master_join_oubjiz
  join notes.note_view notes_note_view_qjeoqb on master_join_oubjiz.target_id = notes_note_view_qjeoqb.id
  where master_join_oubjiz.source_id = airport_heliport.workarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
