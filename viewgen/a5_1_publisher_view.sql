-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zxwoxo.*) AS annotation
  from master_join master_join_vrytcu
  join notes.note_view notes_note_view_zxwoxo on master_join_vrytcu.target_id = notes_note_view_zxwoxo.id
  where master_join_vrytcu.source_id = shared.aircraftcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_splncg.id) as lat_criticalridge
  from master_join master_join_fqmlue
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_splncg on master_join_fqmlue.target_id = airport_heliport_ridge_pt_splncg.id
  where master_join_fqmlue.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_hyckvo.id) as lat_layer
  from master_join master_join_idaaan
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_hyckvo on master_join_idaaan.target_id = airport_heliport_surfacecontaminationlayer_pt_hyckvo.id
  where master_join_idaaan.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iwfibc.*) AS annotation
  from master_join master_join_slzesb
  join notes.note_view notes_note_view_iwfibc on master_join_slzesb.target_id = notes_note_view_iwfibc.id
  where master_join_slzesb.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_camqyy.id) as lat_criticalridge
  from master_join master_join_qscqnx
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_camqyy on master_join_qscqnx.target_id = airport_heliport_ridge_pt_camqyy.id
  where master_join_qscqnx.source_id = airport_heliport.airportheliportcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_qknmrt.id) as lat_layer
  from master_join master_join_djzkis
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_qknmrt on master_join_djzkis.target_id = airport_heliport_surfacecontaminationlayer_pt_qknmrt.id
  where master_join_djzkis.source_id = airport_heliport.airportheliportcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_irweyg.*) AS annotation
  from master_join master_join_oytfav
  join notes.note_view notes_note_view_irweyg on master_join_oytfav.target_id = notes_note_view_irweyg.id
  where master_join_oytfav.source_id = airport_heliport.airportheliportcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_qcvvgb.id) AS theairspacevolume,
    lat_annotation.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_qcvvgb on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_qcvvgb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ctxbja.*) AS annotation
  from master_join master_join_fvralk
  join notes.note_view notes_note_view_ctxbja on master_join_fvralk.target_id = notes_note_view_ctxbja.id
  where master_join_fvralk.source_id = airspace.airspacegeometrycomponent.id
) as lat_annotation on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_uupulm.title as varchar), '(' || shared_standardlevelcolumn_pt_uupulm.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_uupulm.href AS discretelevelseries_href,
    lat_annotation.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_uupulm on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_uupulm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eebifj.*) AS annotation
  from master_join master_join_gzwmqu
  join notes.note_view notes_note_view_eebifj on master_join_gzwmqu.target_id = notes_note_view_eebifj.id
  where master_join_gzwmqu.source_id = shared.airspacelayer.id
) as lat_annotation on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_crmhps.title as varchar), '(' || airspace_airspace_pt_crmhps.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_crmhps.href AS theairspace_href,
    lat_annotation.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_crmhps on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_crmhps.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zfovgw.*) AS annotation
  from master_join master_join_mklmvs
  join notes.note_view notes_note_view_zfovgw on master_join_mklmvs.target_id = notes_note_view_zfovgw.id
  where master_join_mklmvs.source_id = airspace.airspacevolumedependency.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    lat_annotation.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gvampw.*) AS annotation
  from master_join master_join_awdwrj
  join notes.note_view notes_note_view_gvampw on master_join_awdwrj.target_id = notes_note_view_gvampw.id
  where master_join_awdwrj.source_id = shared.altitudeadjustment.id
) as lat_annotation on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_lrjoxa.title as varchar), '(' || navaids_points_angleindication_pt_lrjoxa.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_lrjoxa.href AS theangleindication_href,
    lat_annotation.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_lrjoxa on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_lrjoxa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmznzd.*) AS annotation
  from master_join master_join_aliyvh
  join notes.note_view notes_note_view_nmznzd on master_join_aliyvh.target_id = notes_note_view_nmznzd.id
  where master_join_aliyvh.source_id = navaids_points.angleuse.id
) as lat_annotation on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    lat_annotation.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xsghic.*) AS annotation
  from master_join master_join_yedyjk
  join notes.note_view notes_note_view_xsghic on master_join_yedyjk.target_id = notes_note_view_xsghic.id
  where master_join_yedyjk.source_id = procedure.approachaltitudetable.id
) as lat_annotation on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    to_jsonb(procedure_minima_pt_qyrzth.id) AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_syxatb.title as varchar), '(' || airport_heliport_altimetersource_pt_syxatb.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_syxatb.href AS altimeter_href,
    lat_circlingrestriction.lat_circlingrestriction as circlingrestriction,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_landingarea.lat_landingarea as landingarea,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_qyrzth on procedure.approachcondition.minimumset_id = procedure_minima_pt_qyrzth.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_syxatb on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_syxatb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_pt_dyyrtj.id) as lat_circlingrestriction
  from master_join master_join_hvtmsl
  join procedure.circlingrestriction_pt procedure_circlingrestriction_pt_dyyrtj on master_join_hvtmsl.target_id = procedure_circlingrestriction_pt_dyyrtj.id
  where master_join_hvtmsl.source_id = procedure.approachcondition.id
) as lat_circlingrestriction on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_hnzdgx.id) as lat_aircraftcategory
  from master_join master_join_bskrrd
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_hnzdgx on master_join_bskrrd.target_id = shared_aircraftcharacteristic_pt_hnzdgx.id
  where master_join_bskrrd.source_id = procedure.approachcondition.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_pt_uuosmm.id) as lat_landingarea
  from master_join master_join_yuorbg
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_uuosmm on master_join_yuorbg.target_id = procedure_landingtakeoffareacollection_pt_uuosmm.id
  where master_join_yuorbg.source_id = procedure.approachcondition.id
) as lat_landingarea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_pt_ieiyts.id) as lat_designsurface
  from master_join master_join_mykwlu
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_pt_ieiyts on master_join_mykwlu.target_id = shared_obstacleassessmentarea_pt_ieiyts.id
  where master_join_mykwlu.source_id = procedure.approachcondition.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mawhpm.*) AS annotation
  from master_join master_join_vowsht
  join notes.note_view notes_note_view_mawhpm on master_join_vowsht.target_id = notes_note_view_mawhpm.id
  where master_join_vowsht.source_id = procedure.approachcondition.id
) as lat_annotation on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    lat_annotation.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wpnpya.*) AS annotation
  from master_join master_join_ztahva
  join notes.note_view notes_note_view_wpnpya on master_join_ztahva.target_id = notes_note_view_wpnpya.id
  where master_join_ztahva.source_id = procedure.approachdistancetable.id
) as lat_annotation on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uythzx.*) AS annotation
  from master_join master_join_sqtags
  join notes.note_view notes_note_view_uythzx on master_join_sqtags.target_id = notes_note_view_uythzx.id
  where master_join_sqtags.source_id = procedure.approachtimingtable.id
) as lat_annotation on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_herlwc.id) as lat_criticalridge
  from master_join master_join_eqrxoa
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_herlwc on master_join_eqrxoa.target_id = airport_heliport_ridge_pt_herlwc.id
  where master_join_eqrxoa.source_id = airport_heliport.aproncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_vqvkre.id) as lat_layer
  from master_join master_join_tqkagv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_vqvkre on master_join_tqkagv.target_id = airport_heliport_surfacecontaminationlayer_pt_vqvkre.id
  where master_join_tqkagv.source_id = airport_heliport.aproncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eskvng.*) AS annotation
  from master_join master_join_jkrnak
  join notes.note_view notes_note_view_eskvng on master_join_jkrnak.target_id = notes_note_view_eskvng.id
  where master_join_jkrnak.source_id = airport_heliport.aproncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_vxcgaz.title as varchar), '(' || organisation_organisationauthority_pt_vxcgaz.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_vxcgaz.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vxcgaz on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_vxcgaz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pxqiwl.*) AS annotation
  from master_join master_join_ciabse
  join notes.note_view notes_note_view_pxqiwl on master_join_ciabse.target_id = notes_note_view_pxqiwl.id
  where master_join_ciabse.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_bgyvul.title as varchar), '(' || organisation_organisationauthority_pt_bgyvul.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_bgyvul.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_bgyvul on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_bgyvul.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pliert.*) AS annotation
  from master_join master_join_cvsvbt
  join notes.note_view notes_note_view_pliert on master_join_cvsvbt.target_id = notes_note_view_pliert.id
  where master_join_cvsvbt.source_id = navaids_points.authorityfornavaidequipment.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_qknftk.title as varchar), '(' || organisation_organisationauthority_pt_qknftk.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_qknftk.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qknftk on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_qknftk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ccsopv.*) AS annotation
  from master_join master_join_dqhvvz
  join notes.note_view notes_note_view_ccsopv on master_join_dqhvvz.target_id = notes_note_view_ccsopv.id
  where master_join_dqhvvz.source_id = navaids_points.authorityforspecialnavigationstation.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_cxzowg.title as varchar), '(' || organisation_organisationauthority_pt_cxzowg.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_cxzowg.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_cxzowg on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_cxzowg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rhnenv.*) AS annotation
  from master_join master_join_vpgmzk
  join notes.note_view notes_note_view_rhnenv on master_join_vpgmzk.target_id = notes_note_view_rhnenv.id
  where master_join_vpgmzk.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    lat_annotation.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_stcofp.*) AS annotation
  from master_join master_join_dspetp
  join notes.note_view notes_note_view_stcofp on master_join_dspetp.target_id = notes_note_view_stcofp.id
  where master_join_dspetp.source_id = service.callsigndetail.id
) as lat_annotation on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    lat_annotation.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uvhjou.*) AS annotation
  from master_join master_join_vcogxl
  join notes.note_view notes_note_view_uvhjou on master_join_vcogxl.target_id = notes_note_view_uvhjou.id
  where master_join_vcogxl.source_id = shared.circlesector.id
) as lat_annotation on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    lat_annotation.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qsngwh.*) AS annotation
  from master_join master_join_udnwnm
  join notes.note_view notes_note_view_qsngwh on master_join_udnwnm.target_id = notes_note_view_qsngwh.id
  where master_join_udnwnm.source_id = airport_heliport.city.id
) as lat_annotation on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_ivdsvn.id) AS enginetype,
    lat_annotation.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ivdsvn on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_ivdsvn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rxrecf.*) AS annotation
  from master_join master_join_hlmddw
  join notes.note_view notes_note_view_rxrecf on master_join_hlmddw.target_id = notes_note_view_rxrecf.id
  where master_join_hlmddw.source_id = procedure.departurearrivalcondition.id
) as lat_annotation on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    lat_annotation.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_odftgf.*) AS annotation
  from master_join master_join_tkgwfs
  join notes.note_view notes_note_view_odftgf on master_join_tkgwfs.target_id = notes_note_view_odftgf.id
  where master_join_tkgwfs.source_id = routes.directflightclass.id
) as lat_annotation on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_phjflz.*) AS annotation
  from master_join master_join_isinzz
  join notes.note_view notes_note_view_phjflz on master_join_isinzz.target_id = notes_note_view_phjflz.id
  where master_join_isinzz.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    lat_adjustmentinopcol.lat_adjustmentinopcol as adjustmentinopcol,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_pt_ifampf.id) as lat_adjustmentinopcol
  from master_join master_join_dsxibe
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_pt_ifampf on master_join_dsxibe.target_id = procedure_equipmentunavailableadjustmentcolumn_pt_ifampf.id
  where master_join_dsxibe.source_id = procedure.equipmentunavailableadjustment.id
) as lat_adjustmentinopcol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ncvrmj.*) AS annotation
  from master_join master_join_sijxpq
  join notes.note_view notes_note_view_ncvrmj on master_join_sijxpq.target_id = notes_note_view_ncvrmj.id
  where master_join_sijxpq.source_id = procedure.equipmentunavailableadjustment.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    lat_annotation.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ztwfyh.*) AS annotation
  from master_join master_join_khuyjr
  join notes.note_view notes_note_view_ztwfyh on master_join_khuyjr.target_id = notes_note_view_ztwfyh.id
  where master_join_khuyjr.source_id = public.fasdatablock.id
) as lat_annotation on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    lat_altitude.lat_altitude as altitude,
    lat_distance.lat_distance as distance,
    lat_timing.lat_timing as timing,
    lat_annotation.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_pt_ezhtga.id) as lat_altitude
  from master_join master_join_nsejpv
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_pt_ezhtga on master_join_nsejpv.target_id = procedure_approachaltitudetable_pt_ezhtga.id
  where master_join_nsejpv.source_id = procedure.finalprofile.id
) as lat_altitude on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_pt_dkxbpe.id) as lat_distance
  from master_join master_join_tvyrfk
  join procedure.approachdistancetable_pt procedure_approachdistancetable_pt_dkxbpe on master_join_tvyrfk.target_id = procedure_approachdistancetable_pt_dkxbpe.id
  where master_join_tvyrfk.source_id = procedure.finalprofile.id
) as lat_distance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_pt_bstlwh.id) as lat_timing
  from master_join master_join_jbpbok
  join procedure.approachtimingtable_pt procedure_approachtimingtable_pt_bstlwh on master_join_jbpbok.target_id = procedure_approachtimingtable_pt_bstlwh.id
  where master_join_jbpbok.source_id = procedure.finalprofile.id
) as lat_timing on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_saavgg.*) AS annotation
  from master_join master_join_luewtr
  join notes.note_view notes_note_view_saavgg on master_join_luewtr.target_id = notes_note_view_saavgg.id
  where master_join_luewtr.source_id = procedure.finalprofile.id
) as lat_annotation on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    lat_annotation.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ghxhyr.*) AS annotation
  from master_join master_join_wocqxg
  join notes.note_view notes_note_view_ghxhyr on master_join_wocqxg.target_id = notes_note_view_ghxhyr.id
  where master_join_wocqxg.source_id = shared.flightcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    lat_annotation.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pvrbfn.*) AS annotation
  from master_join master_join_bnlmss
  join notes.note_view notes_note_view_pvrbfn on master_join_bnlmss.target_id = notes_note_view_pvrbfn.id
  where master_join_bnlmss.source_id = routes.flightconditioncircumstance.id
) as lat_annotation on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    lat_annotation.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yfxkeb.*) AS annotation
  from master_join master_join_hefogx
  join notes.note_view notes_note_view_yfxkeb on master_join_hefogx.target_id = notes_note_view_yfxkeb.id
  where master_join_hefogx.source_id = routes.flightrestrictionlevel.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tnrsmd.*) AS annotation
  from master_join master_join_qtqlls
  join notes.note_view notes_note_view_tnrsmd on master_join_qtqlls.target_id = notes_note_view_tnrsmd.id
  where master_join_qtqlls.source_id = service.fuel.id
) as lat_annotation on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    lat_annotation.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_peixdg.*) AS annotation
  from master_join master_join_ufifkl
  join notes.note_view notes_note_view_peixdg on master_join_ufifkl.target_id = notes_note_view_peixdg.id
  where master_join_ufifkl.source_id = holding.holdingpatterndistance.id
) as lat_annotation on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    lat_annotation.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jdwrpr.*) AS annotation
  from master_join master_join_ukldzr
  join notes.note_view notes_note_view_jdwrpr on master_join_ukldzr.target_id = notes_note_view_jdwrpr.id
  where master_join_ukldzr.source_id = holding.holdingpatternduration.id
) as lat_annotation on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_kifuux.title as varchar), '(' || holding_holdingpattern_pt_kifuux.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_kifuux.href AS theholdingpattern_href,
    lat_annotation.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_kifuux on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_kifuux.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rocasw.*) AS annotation
  from master_join master_join_ozqsbm
  join notes.note_view notes_note_view_rocasw on master_join_ozqsbm.target_id = notes_note_view_rocasw.id
  where master_join_ozqsbm.source_id = procedure.holdinguse.id
) as lat_annotation on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    lat_runway.lat_runway as runway,
    lat_tlof.lat_tlof as tlof,
    lat_annotation.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_zxqwqa.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_zxqwqa.title AS varchar), '(' || airport_heliport_runwaydirection_pt_zxqwqa.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_zxqwqa.href
  )) as lat_runway  from master_join master_join_dlddmv
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_zxqwqa on master_join_dlddmv.target_id = airport_heliport_runwaydirection_pt_zxqwqa.id
  where master_join_dlddmv.source_id = procedure.landingtakeoffareacollection.id
) as lat_runway on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_gwfydg.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_gwfydg.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_gwfydg.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_gwfydg.href
  )) as lat_tlof  from master_join master_join_bxljna
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gwfydg on master_join_bxljna.target_id = airport_heliport_touchdownliftoff_pt_gwfydg.id
  where master_join_bxljna.source_id = procedure.landingtakeoffareacollection.id
) as lat_tlof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hntwpt.*) AS annotation
  from master_join master_join_rohmdt
  join notes.note_view notes_note_view_hntwpt on master_join_rohmdt.target_id = notes_note_view_hntwpt.id
  where master_join_rohmdt.source_id = procedure.landingtakeoffareacollection.id
) as lat_annotation on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    lat_annotation.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ubzkbw.*) AS annotation
  from master_join master_join_yjeukd
  join notes.note_view notes_note_view_ubzkbw on master_join_yjeukd.target_id = notes_note_view_ubzkbw.id
  where master_join_yjeukd.source_id = airport_heliport.lightactivation.id
) as lat_annotation on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    lat_annotation.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mmvecw.*) AS annotation
  from master_join master_join_saumbo
  join notes.note_view notes_note_view_mmvecw on master_join_saumbo.target_id = notes_note_view_mmvecw.id
  where master_join_saumbo.source_id = shared.meteorology.id
) as lat_annotation on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    lat_adjustmentinop.lat_adjustmentinop as adjustmentinop,
    lat_annotation.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_pt_qyhdgm.id) as lat_adjustmentinop
  from master_join master_join_ebzxsr
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_pt_qyhdgm on master_join_ebzxsr.target_id = procedure_equipmentunavailableadjustment_pt_qyhdgm.id
  where master_join_ebzxsr.source_id = procedure.minima.id
) as lat_adjustmentinop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tvyrar.*) AS annotation
  from master_join master_join_hueqaz
  join notes.note_view notes_note_view_tvyrar on master_join_hueqaz.target_id = notes_note_view_tvyrar.id
  where master_join_hueqaz.source_id = procedure.minima.id
) as lat_annotation on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    lat_altimeter.lat_altimeter as altimeter,
    lat_annotation.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_djszxf.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_djszxf.title AS varchar), '(' || airport_heliport_altimetersource_pt_djszxf.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_djszxf.href
  )) as lat_altimeter  from master_join master_join_jaupan
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_djszxf on master_join_jaupan.target_id = airport_heliport_altimetersource_pt_djszxf.id
  where master_join_jaupan.source_id = procedure.missedapproachgroup.id
) as lat_altimeter on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qobdty.*) AS annotation
  from master_join master_join_aisvsv
  join notes.note_view notes_note_view_qobdty on master_join_aisvsv.target_id = notes_note_view_qobdty.id
  where master_join_aisvsv.source_id = procedure.missedapproachgroup.id
) as lat_annotation on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    lat_annotation.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xbmhev.*) AS annotation
  from master_join master_join_knxfcp
  join notes.note_view notes_note_view_xbmhev on master_join_knxfcp.target_id = notes_note_view_xbmhev.id
  where master_join_knxfcp.source_id = navaids_points.navaidcomponent.id
) as lat_annotation on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aretqf.*) AS annotation
  from master_join master_join_tfnwtj
  join notes.note_view notes_note_view_aretqf on master_join_tfnwtj.target_id = notes_note_view_aretqf.id
  where master_join_tfnwtj.source_id = airport_heliport.navaidequipmentdistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hipjec.*) AS annotation
  from master_join master_join_otsids
  join notes.note_view notes_note_view_hipjec on master_join_otsids.target_id = notes_note_view_hipjec.id
  where master_join_otsids.source_id = service.nitrogen.id
) as lat_annotation on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    lat_annotation.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_piqgbp.*) AS annotation
  from master_join master_join_oasqha
  join notes.note_view notes_note_view_piqgbp on master_join_oasqha.target_id = notes_note_view_piqgbp.id
  where master_join_oasqha.source_id = shared.obstacleplacement.id
) as lat_annotation on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_wseuay.title as varchar), '(' || obstacles_verticalstructure_pt_wseuay.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_wseuay.href AS theverticalstructure_href,
    lat_adjustment.lat_adjustment as adjustment,
    lat_obstacleplacement.lat_obstacleplacement as obstacleplacement,
    lat_annotation.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_wseuay on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_wseuay.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_pt_qejkiy.id) as lat_adjustment
  from master_join master_join_tuonra
  join shared.altitudeadjustment_pt shared_altitudeadjustment_pt_qejkiy on master_join_tuonra.target_id = shared_altitudeadjustment_pt_qejkiy.id
  where master_join_tuonra.source_id = shared.obstruction.id
) as lat_adjustment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_pt_gqvwij.id) as lat_obstacleplacement
  from master_join master_join_huhdrx
  join shared.obstacleplacement_pt shared_obstacleplacement_pt_gqvwij on master_join_huhdrx.target_id = shared_obstacleplacement_pt_gqvwij.id
  where master_join_huhdrx.source_id = shared.obstruction.id
) as lat_obstacleplacement on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gaotzz.*) AS annotation
  from master_join master_join_lmrycv
  join notes.note_view notes_note_view_gaotzz on master_join_lmrycv.target_id = notes_note_view_gaotzz.id
  where master_join_lmrycv.source_id = shared.obstruction.id
) as lat_annotation on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zgkwjq.*) AS annotation
  from master_join master_join_vxrqnj
  join notes.note_view notes_note_view_zgkwjq on master_join_vxrqnj.target_id = notes_note_view_zgkwjq.id
  where master_join_vxrqnj.source_id = service.oil.id
) as lat_annotation on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_xstcuw.title as varchar), '(' || organisation_organisationauthority_pt_xstcuw.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_xstcuw.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xstcuw on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_xstcuw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_znlzho.*) AS annotation
  from master_join master_join_rpzelq
  join notes.note_view notes_note_view_znlzho on master_join_rpzelq.target_id = notes_note_view_znlzho.id
  where master_join_rpzelq.source_id = organisation.organisationauthorityassociation.id
) as lat_annotation on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qghyxa.*) AS annotation
  from master_join master_join_zazrze
  join notes.note_view notes_note_view_qghyxa on master_join_zazrze.target_id = notes_note_view_qghyxa.id
  where master_join_zazrze.source_id = service.oxygen.id
) as lat_annotation on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    lat_annotation.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ikjsex.*) AS annotation
  from master_join master_join_kwbcob
  join notes.note_view notes_note_view_ikjsex on master_join_kwbcob.target_id = notes_note_view_ikjsex.id
  where master_join_kwbcob.source_id = procedure.proceduretransitionleg.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    lat_annotation.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jdgdqr.*) AS annotation
  from master_join master_join_wdvypu
  join notes.note_view notes_note_view_jdgdqr on master_join_wdvypu.target_id = notes_note_view_jdgdqr.id
  where master_join_wdvypu.source_id = surveillance.radarcomponent.id
) as lat_annotation on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    lat_annotation.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_esamxt.*) AS annotation
  from master_join master_join_jwljlg
  join notes.note_view notes_note_view_esamxt on master_join_jwljlg.target_id = notes_note_view_esamxt.id
  where master_join_jwljlg.source_id = airport_heliport.ridge.id
) as lat_annotation on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_zmxkvp.id) as lat_criticalridge
  from master_join master_join_jrrlxg
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_zmxkvp on master_join_jrrlxg.target_id = airport_heliport_ridge_pt_zmxkvp.id
  where master_join_jrrlxg.source_id = airport_heliport.runwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_jokzum.id) as lat_layer
  from master_join master_join_mljcmw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_jokzum on master_join_mljcmw.target_id = airport_heliport_surfacecontaminationlayer_pt_jokzum.id
  where master_join_mljcmw.source_id = airport_heliport.runwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fyzsxc.*) AS annotation
  from master_join master_join_mjzobj
  join notes.note_view notes_note_view_fyzsxc on master_join_mjzobj.target_id = notes_note_view_fyzsxc.id
  where master_join_mjzobj.source_id = airport_heliport.runwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    lat_declaredvalue.lat_declaredvalue as declaredvalue,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_pt_uktsmv.id) as lat_declaredvalue
  from master_join master_join_gqhnfw
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_pt_uktsmv on master_join_gqhnfw.target_id = airport_heliport_runwaydeclareddistancevalue_pt_uktsmv.id
  where master_join_gqhnfw.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_declaredvalue on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pmhdot.*) AS annotation
  from master_join master_join_lmtrwo
  join notes.note_view notes_note_view_pmhdot on master_join_lmtrwo.target_id = notes_note_view_pmhdot.id
  where master_join_lmtrwo.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_kukpqz.id) as lat_criticalridge
  from master_join master_join_phprwx
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_kukpqz on master_join_phprwx.target_id = airport_heliport_ridge_pt_kukpqz.id
  where master_join_phprwx.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_wqhmia.id) as lat_layer
  from master_join master_join_seqthn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_wqhmia on master_join_seqthn.target_id = airport_heliport_surfacecontaminationlayer_pt_wqhmia.id
  where master_join_seqthn.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zwbfvm.*) AS annotation
  from master_join master_join_ucjpsr
  join notes.note_view notes_note_view_zwbfvm on master_join_ucjpsr.target_id = notes_note_view_zwbfvm.id
  where master_join_ucjpsr.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    lat_annotation.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gaqkoh.*) AS annotation
  from master_join master_join_lugrlr
  join notes.note_view notes_note_view_gaqkoh on master_join_lugrlr.target_id = notes_note_view_gaqkoh.id
  where master_join_lugrlr.source_id = procedure.sectordesign.id
) as lat_annotation on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    lat_annotation.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bqgqpa.*) AS annotation
  from master_join master_join_nmcxci
  join notes.note_view notes_note_view_bqgqpa on master_join_nmcxci.target_id = notes_note_view_bqgqpa.id
  where master_join_nmcxci.source_id = shared.standardlevel.id
) as lat_annotation on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xqcanp.*) AS annotation
  from master_join master_join_esntty
  join notes.note_view notes_note_view_xqcanp on master_join_esntty.target_id = notes_note_view_xqcanp.id
  where master_join_esntty.source_id = airport_heliport.surfacecharacteristics.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_vacqsz.title as varchar), '(' || organisation_unit_pt_vacqsz.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_vacqsz.href AS theunit_href,
    lat_annotation.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_vacqsz on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_vacqsz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_omxaia.*) AS annotation
  from master_join master_join_eicomv
  join notes.note_view notes_note_view_omxaia on master_join_eicomv.target_id = notes_note_view_omxaia.id
  where master_join_eicomv.source_id = surveillance.surveillancegroundstation.id
) as lat_annotation on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_undzfr.id) as lat_criticalridge
  from master_join master_join_ltkuhy
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_undzfr on master_join_ltkuhy.target_id = airport_heliport_ridge_pt_undzfr.id
  where master_join_ltkuhy.source_id = airport_heliport.taxiwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_becdax.id) as lat_layer
  from master_join master_join_cfzxxw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_becdax on master_join_cfzxxw.target_id = airport_heliport_surfacecontaminationlayer_pt_becdax.id
  where master_join_cfzxxw.source_id = airport_heliport.taxiwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yzzibp.*) AS annotation
  from master_join master_join_dhoeal
  join notes.note_view notes_note_view_yzzibp on master_join_dhoeal.target_id = notes_note_view_yzzibp.id
  where master_join_dhoeal.source_id = airport_heliport.taxiwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_uqfive.id) as lat_criticalridge
  from master_join master_join_cdbetz
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_uqfive on master_join_cdbetz.target_id = airport_heliport_ridge_pt_uqfive.id
  where master_join_cdbetz.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_xwspah.id) as lat_layer
  from master_join master_join_ehzjno
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_xwspah on master_join_ehzjno.target_id = airport_heliport_surfacecontaminationlayer_pt_xwspah.id
  where master_join_ehzjno.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cacevc.*) AS annotation
  from master_join master_join_krytxt
  join notes.note_view notes_note_view_cacevc on master_join_krytxt.target_id = notes_note_view_cacevc.id
  where master_join_krytxt.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_psharb.title as varchar), '(' || organisation_unit_pt_psharb.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_psharb.href AS theunit_href,
    lat_annotation.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_psharb on organisation.unitdependency.theunit_id = organisation_unit_pt_psharb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yzqnqe.*) AS annotation
  from master_join master_join_vlrsvy
  join notes.note_view notes_note_view_yzqnqe on master_join_vlrsvy.target_id = notes_note_view_yzqnqe.id
  where master_join_vlrsvy.source_id = organisation.unitdependency.id
) as lat_annotation on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_dmbslp.geom AS extent_geom,
    geometry_curve_view_dmbslp.horizontalAccuracy as extent_horizontalaccuracy,
    lat_point.lat_point as point,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_dmbslp on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_dmbslp.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_oqabin.id) as lat_point
  from master_join master_join_fknupt
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_oqabin on master_join_fknupt.target_id = aerial_refuelling_aerialrefuellingpoint_pt_oqabin.id
  where master_join_fknupt.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_point on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_cdpkrc.id) as lat_verticalextent
  from master_join master_join_snghzz
  join shared.airspacelayer_pt shared_airspacelayer_pt_cdpkrc on master_join_snghzz.target_id = shared_airspacelayer_pt_cdpkrc.id
  where master_join_snghzz.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_verticalextent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_msbqhk.*) AS annotation
  from master_join master_join_xhxcah
  join notes.note_view notes_note_view_msbqhk on master_join_xhxcah.target_id = notes_note_view_msbqhk.id
  where master_join_xhxcah.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_rdqthd.id) AS departurerunwaytransition,
    geometry_curve_view_qdduil.geom AS trajectory_geom,
    geometry_curve_view_qdduil.horizontalAccuracy as trajectory_horizontalaccuracy,
    lat_transitionleg.lat_transitionleg as transitionleg,
    lat_annotation.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_rdqthd on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_rdqthd.id
left join geometry.curve_view geometry_curve_view_qdduil on procedure.proceduretransition.trajectory_id = geometry_curve_view_qdduil.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_pt_eeeybw.id) as lat_transitionleg
  from master_join master_join_ifnahs
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_pt_eeeybw on master_join_ifnahs.target_id = procedure_proceduretransitionleg_pt_eeeybw.id
  where master_join_ifnahs.source_id = procedure.proceduretransition.id
) as lat_transitionleg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jxmawg.*) AS annotation
  from master_join master_join_qhouju
  join notes.note_view notes_note_view_jxmawg on master_join_qhouju.target_id = notes_note_view_jxmawg.id
  where master_join_qhouju.source_id = procedure.proceduretransition.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    geometry_elevatedpoint_view_lojtbu.geom AS location_geom,
    geometry_elevatedpoint_view_lojtbu.longitude AS location_longitude,
    geometry_elevatedpoint_view_lojtbu.latitude AS location_latitude,
    geometry_elevatedpoint_view_lojtbu.elevation AS location_elevation,
    geometry_elevatedpoint_view_lojtbu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lojtbu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lojtbu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lojtbu.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lojtbu on shared.lightelement.location_id = geometry_elevatedpoint_view_lojtbu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gmbupc.*) AS annotation
  from master_join master_join_qqqypd
  join notes.note_view notes_note_view_gmbupc on master_join_qqqypd.target_id = notes_note_view_gmbupc.id
  where master_join_qqqypd.source_id = shared.lightelement.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_pt_msixaq.id) as lat_availability
  from master_join master_join_iylwns
  join shared.lightelementstatus_pt shared_lightelementstatus_pt_msixaq on master_join_iylwns.target_id = shared_lightelementstatus_pt_msixaq.id
  where master_join_iylwns.source_id = shared.lightelement.id
) as lat_availability on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_udjxgf.geom AS touchdownreflector_geom,
    geometry_elevatedpoint_view_udjxgf.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_udjxgf.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_udjxgf.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_udjxgf.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_udjxgf.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_udjxgf.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_udjxgf.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    lat_annotation.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_udjxgf on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_udjxgf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xfceog.*) AS annotation
  from master_join master_join_opjcrn
  join notes.note_view notes_note_view_xfceog on master_join_opjcrn.target_id = notes_note_view_xfceog.id
  where master_join_opjcrn.source_id = surveillance.reflector.id
) as lat_annotation on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    geometry_elevatedsurface_view_dvfnkh.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_dvfnkh.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_dvfnkh.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_dvfnkh.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_dvfnkh.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_dvfnkh.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_zlcgyd.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_zlcgyd.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_zlcgyd.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_zlcgyd.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_zlcgyd.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_zlcgyd.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_jzowhe.geom AS extentlocation_geom,
    geometry_elevatedpoint_view_jzowhe.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_jzowhe.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_jzowhe.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_jzowhe.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_jzowhe.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_jzowhe.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_jzowhe.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dvfnkh on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_dvfnkh.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_zlcgyd on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_zlcgyd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jzowhe on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_jzowhe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iozerk.*) AS annotation
  from master_join master_join_ocdwyc
  join notes.note_view notes_note_view_iozerk on master_join_ocdwyc.target_id = notes_note_view_iozerk.id
  where master_join_ocdwyc.source_id = airport_heliport.markingelement.id
) as lat_annotation on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    lat_extent.geom as extent_geom,
    lat_extent.attr as extent,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_view_gfwvob.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_view_gfwvob.id,
      'elevation', geometry_elevatedsurface_view_gfwvob.elevation,
      'geoidUndulation', geometry_elevatedsurface_view_gfwvob.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_view_gfwvob.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_view_gfwvob.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_view_gfwvob.horizontalAccuracy
    )) AS attr
  from master_join master_join_jhpnkq
  join geometry.elevatedsurface_view geometry_elevatedsurface_view_gfwvob on master_join_jhpnkq.target_id = geometry_elevatedsurface_view_gfwvob.id
  where master_join_jhpnkq.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xggaur.*) AS annotation
  from master_join master_join_kkopyy
  join notes.note_view notes_note_view_xggaur on master_join_kkopyy.target_id = notes_note_view_xggaur.id
  where master_join_kkopyy.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_kcnhjd.title as varchar), '(' || navaids_points_designatedpoint_pt_kcnhjd.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_kcnhjd.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_arkmka.title as varchar), '(' || navaids_points_navaid_pt_arkmka.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_arkmka.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pntujv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pntujv.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_pntujv.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xacmtx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xacmtx.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xacmtx.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vgpokz.title as varchar), '(' || airport_heliport_airportheliport_pt_vgpokz.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_vgpokz.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_udhlne.geom AS pointchoiceposition_geom,
    geometry_point_view_udhlne.longitude AS pointchoiceposition_longitude,
    geometry_point_view_udhlne.latitude AS pointchoiceposition_latitude,
    geometry_point_view_udhlne.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_ecgzzv.title as varchar), '(' || shared_radiofrequencyarea_pt_ecgzzv.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_ecgzzv.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_kcnhjd on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_kcnhjd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_arkmka on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_arkmka.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pntujv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pntujv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xacmtx on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xacmtx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vgpokz on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_vgpokz.id
left join geometry.point_view geometry_point_view_udhlne on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_udhlne.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_ecgzzv on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_ecgzzv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_hjlwpy.id) as lat_facilitymakeup
  from master_join master_join_aulyup
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_hjlwpy on master_join_aulyup.target_id = navaids_points_pointreference_pt_hjlwpy.id
  where master_join_aulyup.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dcefzx.*) AS annotation
  from master_join master_join_eodkxf
  join notes.note_view notes_note_view_dcefzx on master_join_eodkxf.target_id = notes_note_view_dcefzx.id
  where master_join_eodkxf.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_xkncdi.title as varchar), '(' || navaids_points_designatedpoint_pt_xkncdi.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_xkncdi.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jnbdwl.title as varchar), '(' || navaids_points_designatedpoint_pt_jnbdwl.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jnbdwl.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pxevmb.title as varchar), '(' || navaids_points_navaid_pt_pxevmb.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_pxevmb.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_jtkmdl.title as varchar), '(' || navaids_points_navaid_pt_jtkmdl.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_jtkmdl.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hzyudq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hzyudq.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_hzyudq.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xuokka.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xuokka.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_xuokka.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dnsisb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dnsisb.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dnsisb.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ocxrfj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ocxrfj.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ocxrfj.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ubfjor.title as varchar), '(' || airport_heliport_airportheliport_pt_ubfjor.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_ubfjor.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qiuvqo.title as varchar), '(' || airport_heliport_airportheliport_pt_qiuvqo.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_qiuvqo.href AS startairportreferencepoint_href,
    geometry_point_view_wjpwzx.geom AS endposition_geom,
    geometry_point_view_wjpwzx.longitude AS endposition_longitude,
    geometry_point_view_wjpwzx.latitude AS endposition_latitude,
    geometry_point_view_wjpwzx.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_qpizsj.geom AS startposition_geom,
    geometry_point_view_qpizsj.longitude AS startposition_longitude,
    geometry_point_view_qpizsj.latitude AS startposition_latitude,
    geometry_point_view_qpizsj.horizontalAccuracy AS startposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xkncdi on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xkncdi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pxevmb on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_pxevmb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hzyudq on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hzyudq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dnsisb on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dnsisb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ubfjor on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_ubfjor.id
left join geometry.point_view geometry_point_view_wjpwzx on routes.directflightsegment.end_position_id = geometry_point_view_wjpwzx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jnbdwl on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jnbdwl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jtkmdl on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_jtkmdl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xuokka on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xuokka.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ocxrfj on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ocxrfj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qiuvqo on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_qiuvqo.id
left join geometry.point_view geometry_point_view_qpizsj on routes.directflightsegment.start_position_id = geometry_point_view_qpizsj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zznjqh.*) AS annotation
  from master_join master_join_aelbka
  join notes.note_view notes_note_view_zznjqh on master_join_aelbka.target_id = notes_note_view_zznjqh.id
  where master_join_aelbka.source_id = routes.directflightsegment.id
) as lat_annotation on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_etmrlc.title as varchar), '(' || navaids_points_designatedpoint_pt_etmrlc.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_etmrlc.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_cxqoqn.title as varchar), '(' || navaids_points_navaid_pt_cxqoqn.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_cxqoqn.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_upoueb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_upoueb.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_upoueb.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_doxkko.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_doxkko.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_doxkko.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_arsnip.title as varchar), '(' || airport_heliport_airportheliport_pt_arsnip.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_arsnip.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_mzcbrz.geom AS pointchoiceposition_geom,
    geometry_point_view_mzcbrz.longitude AS pointchoiceposition_longitude,
    geometry_point_view_mzcbrz.latitude AS pointchoiceposition_latitude,
    geometry_point_view_mzcbrz.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_gaqkza.title as varchar), '(' || shared_radiofrequencyarea_pt_gaqkza.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_gaqkza.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_etmrlc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_etmrlc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cxqoqn on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_cxqoqn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_upoueb on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_upoueb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_doxkko on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_doxkko.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_arsnip on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_arsnip.id
left join geometry.point_view geometry_point_view_mzcbrz on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_mzcbrz.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_gaqkza on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_gaqkza.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_brvafs.id) as lat_facilitymakeup
  from master_join master_join_dyiicl
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_brvafs on master_join_dyiicl.target_id = navaids_points_pointreference_pt_brvafs.id
  where master_join_dyiicl.source_id = navaids_points.enroutesegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_enqhov.*) AS annotation
  from master_join master_join_txfgbj
  join notes.note_view notes_note_view_enqhov on master_join_txfgbj.target_id = notes_note_view_enqhov.id
  where master_join_txfgbj.source_id = navaids_points.enroutesegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_nquerq.title as varchar), '(' || airport_heliport_airportheliport_pt_nquerq.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_nquerq.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_snzqaq.title as varchar), '(' || airport_heliport_airportheliport_pt_snzqaq.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_snzqaq.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_fjdkvx.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_fjdkvx.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_fjdkvx.href AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_menkvq.id) AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_jieykl.title as varchar), '(' || organisation_organisationauthority_pt_jieykl.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_jieykl.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pizcca.title as varchar), '(' || navaids_points_designatedpoint_pt_pizcca.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pizcca.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dzysjf.title as varchar), '(' || navaids_points_navaid_pt_dzysjf.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_dzysjf.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ayxllt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ayxllt.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_ayxllt.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_gcdhlr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_gcdhlr.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_gcdhlr.href AS significantpointconditionrunwaypoint_href,
    geometry_point_view_ffwgwt.geom AS significantpointconditionposition_geom,
    geometry_point_view_ffwgwt.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_ffwgwt.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_ffwgwt.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_qsvaxn.id) AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_lkfwpv.title as varchar), '(' || routes_airspacebordercrossing_pt_lkfwpv.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_lkfwpv.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_tgxdob.title as varchar), '(' || airspace_airspace_pt_tgxdob.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_tgxdob.href AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_vxejvq.id) AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ulmoal.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ulmoal.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ulmoal.href AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_klvcox.id) AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_gongzd.id) AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_jkwopb.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_jkwopb.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_jkwopb.href AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_padmzh.id) AS operationalcondition,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nquerq on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_nquerq.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_fjdkvx on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_fjdkvx.id
left join routes.routeportion_pt routes_routeportion_pt_menkvq on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_menkvq.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jieykl on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_jieykl.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pizcca on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pizcca.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dzysjf on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_dzysjf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ayxllt on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ayxllt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_gcdhlr on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_gcdhlr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_snzqaq on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_snzqaq.id
left join geometry.point_view geometry_point_view_ffwgwt on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_ffwgwt.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_qsvaxn on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_qsvaxn.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_lkfwpv on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_lkfwpv.id
left join airspace.airspace_pt airspace_airspace_pt_tgxdob on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_tgxdob.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_vxejvq on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_vxejvq.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ulmoal on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ulmoal.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_klvcox on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_klvcox.id
left join shared.meteorology_pt shared_meteorology_pt_gongzd on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_gongzd.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_jkwopb on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_jkwopb.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_padmzh on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_padmzh.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_ykmhmi.id) as lat_flightlevel
  from master_join master_join_smkqmp
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_ykmhmi on master_join_smkqmp.target_id = routes_flightrestrictionlevel_pt_ykmhmi.id
  where master_join_smkqmp.source_id = routes.flightconditionelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vyxhlw.*) AS annotation
  from master_join master_join_utbgyw
  join notes.note_view notes_note_view_vyxhlw on master_join_utbgyw.target_id = notes_note_view_vyxhlw.id
  where master_join_utbgyw.source_id = routes.flightconditionelement.id
) as lat_annotation on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_gxdylm.title as varchar), '(' || procedure_standardinstrumentarrival_pt_gxdylm.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_gxdylm.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_corggt.title as varchar), '(' || airspace_airspace_pt_corggt.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_corggt.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_dezaux.title as varchar), '(' || navaids_points_designatedpoint_pt_dezaux.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dezaux.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gdqjey.title as varchar), '(' || navaids_points_navaid_pt_gdqjey.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_gdqjey.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wpizjf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wpizjf.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_wpizjf.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uzwvyr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uzwvyr.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uzwvyr.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sokifo.title as varchar), '(' || airport_heliport_airportheliport_pt_sokifo.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_sokifo.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ukrbwp.title as varchar), '(' || airport_heliport_airportheliport_pt_ukrbwp.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_ukrbwp.href AS elementairportheliportelement_href,
    geometry_point_view_hxfibh.geom AS pointelementposition_geom,
    geometry_point_view_hxfibh.longitude AS pointelementposition_longitude,
    geometry_point_view_hxfibh.latitude AS pointelementposition_latitude,
    geometry_point_view_hxfibh.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_wnrqfj.id) AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_jnzaya.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_jnzaya.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_jnzaya.href AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_avnzqz.id) AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_nnwyqc.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_nnwyqc.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_nnwyqc.href AS elementaerialrefuellingelement_href,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_gxdylm on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_gxdylm.id
left join airspace.airspace_pt airspace_airspace_pt_corggt on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_corggt.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dezaux on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dezaux.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gdqjey on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_gdqjey.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wpizjf on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wpizjf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uzwvyr on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uzwvyr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sokifo on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_sokifo.id
left join geometry.point_view geometry_point_view_hxfibh on routes.flightroutingelement.pointelement_position_id = geometry_point_view_hxfibh.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_wnrqfj on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_wnrqfj.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_jnzaya on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_jnzaya.id
left join routes.routeportion_pt routes_routeportion_pt_avnzqz on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_avnzqz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ukrbwp on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_ukrbwp.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_nnwyqc on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_nnwyqc.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_xuonxr.id) as lat_flightlevel
  from master_join master_join_qnqhzo
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_xuonxr on master_join_qnqhzo.target_id = routes_flightrestrictionlevel_pt_xuonxr.id
  where master_join_qnqhzo.source_id = routes.flightroutingelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kqledw.*) AS annotation
  from master_join master_join_chzzex
  join notes.note_view notes_note_view_kqledw on master_join_chzzex.target_id = notes_note_view_kqledw.id
  where master_join_chzzex.source_id = routes.flightroutingelement.id
) as lat_annotation on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_ijpygb.title as varchar), '(' || navaids_points_designatedpoint_pt_ijpygb.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ijpygb.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_buijxw.title as varchar), '(' || navaids_points_designatedpoint_pt_buijxw.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_buijxw.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_hewnjc.title as varchar), '(' || navaids_points_designatedpoint_pt_hewnjc.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_hewnjc.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dqrcen.title as varchar), '(' || navaids_points_navaid_pt_dqrcen.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_dqrcen.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_qqffly.title as varchar), '(' || navaids_points_navaid_pt_qqffly.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_qqffly.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_todosn.title as varchar), '(' || navaids_points_navaid_pt_todosn.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_todosn.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ylbhrn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ylbhrn.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_ylbhrn.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gqmlzo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gqmlzo.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_gqmlzo.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zelscv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zelscv.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_zelscv.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fcwcfw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fcwcfw.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fcwcfw.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qaoyvg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qaoyvg.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qaoyvg.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_itsbag.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_itsbag.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_itsbag.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rgppnj.title as varchar), '(' || airport_heliport_airportheliport_pt_rgppnj.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_rgppnj.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uojhzh.title as varchar), '(' || airport_heliport_airportheliport_pt_uojhzh.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_uojhzh.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kgdjeg.title as varchar), '(' || airport_heliport_airportheliport_pt_kgdjeg.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_kgdjeg.href AS endairportreferencepoint_href,
    geometry_point_view_pghovj.geom AS startposition_geom,
    geometry_point_view_pghovj.longitude AS startposition_longitude,
    geometry_point_view_pghovj.latitude AS startposition_latitude,
    geometry_point_view_pghovj.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_jlcjym.geom AS intermediatepointposition_geom,
    geometry_point_view_jlcjym.longitude AS intermediatepointposition_longitude,
    geometry_point_view_jlcjym.latitude AS intermediatepointposition_latitude,
    geometry_point_view_jlcjym.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_pvuorm.geom AS endposition_geom,
    geometry_point_view_pvuorm.longitude AS endposition_longitude,
    geometry_point_view_pvuorm.latitude AS endposition_latitude,
    geometry_point_view_pvuorm.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_yffqqw.title as varchar), '(' || routes_route_pt_yffqqw.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_yffqqw.href AS referencedroute_href,
    lat_annotation.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ijpygb on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ijpygb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dqrcen on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_dqrcen.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ylbhrn on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ylbhrn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fcwcfw on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fcwcfw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rgppnj on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_rgppnj.id
left join geometry.point_view geometry_point_view_pghovj on routes.routeportion.start_position_id = geometry_point_view_pghovj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_buijxw on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_buijxw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qqffly on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_qqffly.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gqmlzo on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gqmlzo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qaoyvg on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qaoyvg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uojhzh on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_uojhzh.id
left join geometry.point_view geometry_point_view_jlcjym on routes.routeportion.intermediatepoint_position_id = geometry_point_view_jlcjym.id
left join routes.route_pt routes_route_pt_yffqqw on routes.routeportion.referencedroute_id = routes_route_pt_yffqqw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hewnjc on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hewnjc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_todosn on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_todosn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zelscv on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zelscv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_itsbag on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_itsbag.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kgdjeg on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_kgdjeg.id
left join geometry.point_view geometry_point_view_pvuorm on routes.routeportion.end_position_id = geometry_point_view_pvuorm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uvmgka.*) AS annotation
  from master_join master_join_kilntk
  join notes.note_view notes_note_view_uvmgka on master_join_kilntk.target_id = notes_note_view_uvmgka.id
  where master_join_kilntk.source_id = routes.routeportion.id
) as lat_annotation on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_vdexbp.title as varchar), '(' || navaids_points_designatedpoint_pt_vdexbp.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_vdexbp.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xgbews.title as varchar), '(' || navaids_points_navaid_pt_xgbews.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_xgbews.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nslhbx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nslhbx.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_nslhbx.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bcnkrt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bcnkrt.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bcnkrt.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xgezme.title as varchar), '(' || airport_heliport_airportheliport_pt_xgezme.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_xgezme.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_hyilyt.geom AS pointchoiceposition_geom,
    geometry_point_view_hyilyt.longitude AS pointchoiceposition_longitude,
    geometry_point_view_hyilyt.latitude AS pointchoiceposition_latitude,
    geometry_point_view_hyilyt.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_gcgqap.title as varchar), '(' || shared_radiofrequencyarea_pt_gcgqap.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_gcgqap.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vdexbp on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vdexbp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xgbews on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_xgbews.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nslhbx on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nslhbx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bcnkrt on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bcnkrt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xgezme on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xgezme.id
left join geometry.point_view geometry_point_view_hyilyt on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_hyilyt.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_gcgqap on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_gcgqap.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_vmneos.id) as lat_facilitymakeup
  from master_join master_join_lnxlvb
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_vmneos on master_join_lnxlvb.target_id = navaids_points_pointreference_pt_vmneos.id
  where master_join_lnxlvb.source_id = navaids_points.terminalsegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sgxfcv.*) AS annotation
  from master_join master_join_plzwcv
  join notes.note_view notes_note_view_sgxfcv on master_join_plzwcv.target_id = notes_note_view_sgxfcv.id
  where master_join_plzwcv.source_id = navaids_points.terminalsegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    geometry_surface_view_pqnmhi.geom AS extent_geom,
    geometry_surface_view_pqnmhi.horizontalAccuracy as extent_horizontalaccuracy,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_point.lat_point as point,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_pqnmhi on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_pqnmhi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_hxealv.id) as lat_verticalextent
  from master_join master_join_rtnknd
  join shared.airspacelayer_pt shared_airspacelayer_pt_hxealv on master_join_rtnknd.target_id = shared_airspacelayer_pt_hxealv.id
  where master_join_rtnknd.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_verticalextent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_damdpd.id) as lat_point
  from master_join master_join_fmwagn
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_damdpd on master_join_fmwagn.target_id = aerial_refuelling_aerialrefuellingpoint_pt_damdpd.id
  where master_join_fmwagn.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_point on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gnzbmw.*) AS annotation
  from master_join master_join_ylmsax
  join notes.note_view notes_note_view_gnzbmw on master_join_ylmsax.target_id = notes_note_view_gnzbmw.id
  where master_join_ylmsax.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.surface_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    geometry_surface_view_mqoxqe.geom AS horizontalprojection_geom,
    geometry_surface_view_mqoxqe.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_qyehdd.geom AS centreline_geom,
    geometry_curve_view_qyehdd.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_audddg.id) AS contributorairspace,
    lat_annotation.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_mqoxqe on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_mqoxqe.id
left join geometry.curve_view geometry_curve_view_qyehdd on airspace.airspacevolume.centreline_id = geometry_curve_view_qyehdd.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_audddg on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_audddg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kzzcfu.*) AS annotation
  from master_join master_join_yzhgho
  join notes.note_view notes_note_view_kzzcfu on master_join_yzhgho.target_id = notes_note_view_kzzcfu.id
  where master_join_yzhgho.source_id = airspace.airspacevolume.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_btgbpg.id) AS sectordefinition,
    geometry_surface_view_zjbhds.geom AS extent_geom,
    geometry_surface_view_zjbhds.horizontalAccuracy as extent_horizontalaccuracy,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_sectorcriteria.lat_sectorcriteria as sectorcriteria,
    lat_annotation.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_btgbpg on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_btgbpg.id
left join geometry.surface_view geometry_surface_view_zjbhds on procedure.navigationareasector.extent_id = geometry_surface_view_zjbhds.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_ftkrbi.id) as lat_significantobstacle
  from master_join master_join_iqkobi
  join shared.obstruction_pt shared_obstruction_pt_ftkrbi on master_join_iqkobi.target_id = shared_obstruction_pt_ftkrbi.id
  where master_join_iqkobi.source_id = procedure.navigationareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_pt_zehjqx.id) as lat_sectorcriteria
  from master_join master_join_mmvnjd
  join procedure.sectordesign_pt procedure_sectordesign_pt_zehjqx on master_join_mmvnjd.target_id = procedure_sectordesign_pt_zehjqx.id
  where master_join_mmvnjd.source_id = procedure.navigationareasector.id
) as lat_sectorcriteria on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gymycd.*) AS annotation
  from master_join master_join_vcqrhp
  join notes.note_view notes_note_view_gymycd on master_join_vcqrhp.target_id = notes_note_view_gymycd.id
  where master_join_vcqrhp.source_id = procedure.navigationareasector.id
) as lat_annotation on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.surface_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    geometry_surface_view_dzgjve.geom AS surface_geom,
    geometry_surface_view_dzgjve.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_drbwgq.geom AS startingcurve_geom,
    geometry_curve_view_drbwgq.horizontalAccuracy as startingcurve_horizontalaccuracy,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_dzgjve on shared.obstacleassessmentarea.surface_id = geometry_surface_view_dzgjve.id
left join geometry.curve_view geometry_curve_view_drbwgq on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_drbwgq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_hgrbyl.id) as lat_aircraftcategory
  from master_join master_join_wcxvyb
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_hgrbyl on master_join_wcxvyb.target_id = shared_aircraftcharacteristic_pt_hgrbyl.id
  where master_join_wcxvyb.source_id = shared.obstacleassessmentarea.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_ovogdr.id) as lat_significantobstacle
  from master_join master_join_tryhrv
  join shared.obstruction_pt shared_obstruction_pt_ovogdr on master_join_tryhrv.target_id = shared_obstruction_pt_ovogdr.id
  where master_join_tryhrv.source_id = shared.obstacleassessmentarea.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tfwxxu.*) AS annotation
  from master_join master_join_yomuwv
  join notes.note_view notes_note_view_tfwxxu on master_join_yomuwv.target_id = notes_note_view_tfwxxu.id
  where master_join_yomuwv.source_id = shared.obstacleassessmentarea.id
) as lat_annotation on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_jmxjju.title as varchar), '(' || navaids_points_designatedpoint_pt_jmxjju.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_jmxjju.href AS point_href,
    geometry_surface_view_gzaxey.geom AS fixtolerancearea_geom,
    geometry_surface_view_gzaxey.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    lat_facilityangle.lat_facilityangle as facilityangle,
    lat_facilitydistance.lat_facilitydistance as facilitydistance,
    lat_annotation.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jmxjju on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_jmxjju.id
left join geometry.surface_view geometry_surface_view_gzaxey on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_gzaxey.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_pt_mqwbny.id) as lat_facilityangle
  from master_join master_join_qhpwcz
  join navaids_points.angleuse_pt navaids_points_angleuse_pt_mqwbny on master_join_qhpwcz.target_id = navaids_points_angleuse_pt_mqwbny.id
  where master_join_qhpwcz.source_id = navaids_points.pointreference.id
) as lat_facilityangle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_pt_vhosds.id,
      'title', coalesce(cast(navaids_points_distanceindication_pt_vhosds.title AS varchar), '(' || navaids_points_distanceindication_pt_vhosds.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_pt_vhosds.href
  )) as lat_facilitydistance  from master_join master_join_cgptyn
  join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_vhosds on master_join_cgptyn.target_id = navaids_points_distanceindication_pt_vhosds.id
  where master_join_cgptyn.source_id = navaids_points.pointreference.id
) as lat_facilitydistance on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_daipbr.*) AS annotation
  from master_join master_join_kkvoke
  join notes.note_view notes_note_view_daipbr on master_join_kkvoke.target_id = notes_note_view_daipbr.id
  where master_join_kkvoke.source_id = navaids_points.pointreference.id
) as lat_annotation on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    geometry_surface_view_sjicwq.geom AS extent_geom,
    geometry_surface_view_sjicwq.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_bztalh.id) AS sectordefinition,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_sjicwq on procedure.safealtitudeareasector.extent_id = geometry_surface_view_sjicwq.id
left join shared.circlesector_pt shared_circlesector_pt_bztalh on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_bztalh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_xfwjjo.id) as lat_significantobstacle
  from master_join master_join_fdiimv
  join shared.obstruction_pt shared_obstruction_pt_xfwjjo on master_join_fdiimv.target_id = shared_obstruction_pt_xfwjjo.id
  where master_join_fdiimv.source_id = procedure.safealtitudeareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_orfnmy.*) AS annotation
  from master_join master_join_srsfhz
  join notes.note_view notes_note_view_orfnmy on master_join_srsfhz.target_id = notes_note_view_orfnmy.id
  where master_join_srsfhz.source_id = procedure.safealtitudeareasector.id
) as lat_annotation on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    to_jsonb(shared_circlesector_pt_vxasxi.id) AS sectordefinition,
    geometry_surface_view_xnqxvj.geom AS extent_geom,
    geometry_surface_view_xnqxvj.horizontalAccuracy as extent_horizontalaccuracy,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_vxasxi on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_vxasxi.id
left join geometry.surface_view geometry_surface_view_xnqxvj on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_xnqxvj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_vzieqf.id) as lat_significantobstacle
  from master_join master_join_hczmnl
  join shared.obstruction_pt shared_obstruction_pt_vzieqf on master_join_hczmnl.target_id = shared_obstruction_pt_vzieqf.id
  where master_join_hczmnl.source_id = procedure.terminalarrivalareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vynvgb.*) AS annotation
  from master_join master_join_repwup
  join notes.note_view notes_note_view_vynvgb on master_join_repwup.target_id = notes_note_view_vynvgb.id
  where master_join_repwup.source_id = procedure.terminalarrivalareasector.id
) as lat_annotation on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_pzcmhu.*) AS timeinterval
  from master_join master_join_khgytk
  join shared.timesheet_view shared_timesheet_view_pzcmhu on master_join_khgytk.target_id = shared_timesheet_view_pzcmhu.id
  where master_join_khgytk.source_id = airport_heliport.airportheliportavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_doccjx.*) AS annotation
  from master_join master_join_hjfgig
  join notes.note_view notes_note_view_doccjx on master_join_hjfgig.target_id = notes_note_view_doccjx.id
  where master_join_hjfgig.source_id = airport_heliport.airportheliportavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nfqbny.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nfqbny.title AS varchar), '(' || organisation_organisationauthority_pt_nfqbny.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nfqbny.href
  )) as lat_specialdateauthority  from master_join master_join_efymzx
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nfqbny on master_join_efymzx.target_id = organisation_organisationauthority_pt_nfqbny.id
  where master_join_efymzx.source_id = airport_heliport.airportheliportavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_pt_qkwfga.id) as lat_usage
  from master_join master_join_lluixi
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_pt_qkwfga on master_join_lluixi.target_id = airport_heliport_airportheliportusage_pt_qkwfga.id
  where master_join_lluixi.source_id = airport_heliport.airportheliportavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_bjlisx.title as varchar), '(' || organisation_organisationauthority_pt_bjlisx.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_bjlisx.href AS theorganisationauthority_href,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_bjlisx on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_bjlisx.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_psamtc.*) AS timeinterval
  from master_join master_join_hklqia
  join shared.timesheet_view shared_timesheet_view_psamtc on master_join_hklqia.target_id = shared_timesheet_view_psamtc.id
  where master_join_hklqia.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nyjxjh.*) AS annotation
  from master_join master_join_apyvmu
  join notes.note_view notes_note_view_nyjxjh on master_join_apyvmu.target_id = notes_note_view_nyjxjh.id
  where master_join_apyvmu.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_njrmsm.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_njrmsm.title AS varchar), '(' || organisation_organisationauthority_pt_njrmsm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_njrmsm.href
  )) as lat_specialdateauthority  from master_join master_join_woheqv
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_njrmsm on master_join_woheqv.target_id = organisation_organisationauthority_pt_njrmsm.id
  where master_join_woheqv.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_user.lat_user as user,
    lat_levels.lat_levels as levels,
    lat_aircraft.lat_aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_kwlwtw.*) AS timeinterval
  from master_join master_join_jwrhsl
  join shared.timesheet_view shared_timesheet_view_kwlwtw on master_join_jwrhsl.target_id = shared_timesheet_view_kwlwtw.id
  where master_join_jwrhsl.source_id = airspace.airspaceactivation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zrmjrf.*) AS annotation
  from master_join master_join_cqfcoj
  join notes.note_view notes_note_view_zrmjrf on master_join_cqfcoj.target_id = notes_note_view_zrmjrf.id
  where master_join_cqfcoj.source_id = airspace.airspaceactivation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_tyyzzi.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_tyyzzi.title AS varchar), '(' || organisation_organisationauthority_pt_tyyzzi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_tyyzzi.href
  )) as lat_specialdateauthority  from master_join master_join_vcuuue
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_tyyzzi on master_join_vcuuue.target_id = organisation_organisationauthority_pt_tyyzzi.id
  where master_join_vcuuue.source_id = airspace.airspaceactivation.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_dyaots.id) as lat_levels
  from master_join master_join_fwyvam
  join shared.airspacelayer_pt shared_airspacelayer_pt_dyaots on master_join_fwyvam.target_id = shared_airspacelayer_pt_dyaots.id
  where master_join_fwyvam.source_id = airspace.airspaceactivation.id
) as lat_levels on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ragapf.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ragapf.title AS varchar), '(' || organisation_organisationauthority_pt_ragapf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ragapf.href
  )) as lat_user  from master_join master_join_ahvjls
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ragapf on master_join_ahvjls.target_id = organisation_organisationauthority_pt_ragapf.id
  where master_join_ahvjls.source_id = airspace.airspaceactivation.id
) as lat_user on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_ktacpg.id) as lat_aircraft
  from master_join master_join_ostyrw
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ktacpg on master_join_ostyrw.target_id = shared_aircraftcharacteristic_pt_ktacpg.id
  where master_join_ostyrw.source_id = airspace.airspaceactivation.id
) as lat_aircraft on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_associatedlevels.lat_associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xewtyh.*) AS timeinterval
  from master_join master_join_qlfhlc
  join shared.timesheet_view shared_timesheet_view_xewtyh on master_join_qlfhlc.target_id = shared_timesheet_view_xewtyh.id
  where master_join_qlfhlc.source_id = airspace.airspacelayerclass.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kzngjl.*) AS annotation
  from master_join master_join_mqvcka
  join notes.note_view notes_note_view_kzngjl on master_join_mqvcka.target_id = notes_note_view_kzngjl.id
  where master_join_mqvcka.source_id = airspace.airspacelayerclass.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_wrdquu.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_wrdquu.title AS varchar), '(' || organisation_organisationauthority_pt_wrdquu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_wrdquu.href
  )) as lat_specialdateauthority  from master_join master_join_bxjnsn
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_wrdquu on master_join_bxjnsn.target_id = organisation_organisationauthority_pt_wrdquu.id
  where master_join_bxjnsn.source_id = airspace.airspacelayerclass.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_xnnith.id) as lat_associatedlevels
  from master_join master_join_wyrwkb
  join shared.airspacelayer_pt shared_airspacelayer_pt_xnnith on master_join_wyrwkb.target_id = shared_airspacelayer_pt_xnnith.id
  where master_join_wyrwkb.source_id = airspace.airspacelayerclass.id
) as lat_associatedlevels on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_oivawx.*) AS timeinterval
  from master_join master_join_akvtcl
  join shared.timesheet_view shared_timesheet_view_oivawx on master_join_akvtcl.target_id = shared_timesheet_view_oivawx.id
  where master_join_akvtcl.source_id = airport_heliport.altimetersourcestatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dyhlgv.*) AS annotation
  from master_join master_join_fcqymh
  join notes.note_view notes_note_view_dyhlgv on master_join_fcqymh.target_id = notes_note_view_dyhlgv.id
  where master_join_fcqymh.source_id = airport_heliport.altimetersourcestatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_gvdxpl.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_gvdxpl.title AS varchar), '(' || organisation_organisationauthority_pt_gvdxpl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_gvdxpl.href
  )) as lat_specialdateauthority  from master_join master_join_serpbx
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_gvdxpl on master_join_serpbx.target_id = organisation_organisationauthority_pt_gvdxpl.id
  where master_join_serpbx.source_id = airport_heliport.altimetersourcestatus.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_krzlwn.*) AS timeinterval
  from master_join master_join_gmeqde
  join shared.timesheet_view shared_timesheet_view_krzlwn on master_join_gmeqde.target_id = shared_timesheet_view_krzlwn.id
  where master_join_gmeqde.source_id = airport_heliport.apronareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uparsn.*) AS annotation
  from master_join master_join_isteoe
  join notes.note_view notes_note_view_uparsn on master_join_isteoe.target_id = notes_note_view_uparsn.id
  where master_join_isteoe.source_id = airport_heliport.apronareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nudjky.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nudjky.title AS varchar), '(' || organisation_organisationauthority_pt_nudjky.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nudjky.href
  )) as lat_specialdateauthority  from master_join master_join_gtevdb
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nudjky on master_join_gtevdb.target_id = organisation_organisationauthority_pt_nudjky.id
  where master_join_gtevdb.source_id = airport_heliport.apronareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_pt_xgnmdv.id) as lat_usage
  from master_join master_join_nphmlh
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_pt_xgnmdv on master_join_nphmlh.target_id = airport_heliport_apronareausage_pt_xgnmdv.id
  where master_join_nphmlh.source_id = airport_heliport.apronareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['geometry.surface_view', 'shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_fvftgr.id) AS sectordescription,
    geometry_surface_view_wqtume.geom AS restrictionarea_geom,
    geometry_surface_view_wqtume.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_fvftgr on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_fvftgr.id
left join geometry.surface_view geometry_surface_view_wqtume on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_wqtume.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_flipjp.*) AS timeinterval
  from master_join master_join_nryejq
  join shared.timesheet_view shared_timesheet_view_flipjp on master_join_nryejq.target_id = shared_timesheet_view_flipjp.id
  where master_join_nryejq.source_id = procedure.circlingrestriction.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hlwsxc.*) AS annotation
  from master_join master_join_mkfgqw
  join notes.note_view notes_note_view_hlwsxc on master_join_mkfgqw.target_id = notes_note_view_hlwsxc.id
  where master_join_mkfgqw.source_id = procedure.circlingrestriction.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_rmyqfc.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_rmyqfc.title AS varchar), '(' || organisation_organisationauthority_pt_rmyqfc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_rmyqfc.href
  )) as lat_specialdateauthority  from master_join master_join_mapbzi
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_rmyqfc on master_join_mapbzi.target_id = organisation_organisationauthority_pt_rmyqfc.id
  where master_join_mapbzi.source_id = procedure.circlingrestriction.id
) as lat_specialdateauthority on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_weather.lat_weather as weather,
    lat_aircraft.lat_aircraft as aircraft,
    lat_flight.lat_flight as flight,
    lat_subcondition.lat_subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_wugidu.*) AS timeinterval
  from master_join master_join_ygexzv
  join shared.timesheet_view shared_timesheet_view_wugidu on master_join_ygexzv.target_id = shared_timesheet_view_wugidu.id
  where master_join_ygexzv.source_id = airport_heliport.conditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ugeypo.*) AS annotation
  from master_join master_join_utmbnc
  join notes.note_view notes_note_view_ugeypo on master_join_utmbnc.target_id = notes_note_view_ugeypo.id
  where master_join_utmbnc.source_id = airport_heliport.conditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_sjotgg.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_sjotgg.title AS varchar), '(' || organisation_organisationauthority_pt_sjotgg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_sjotgg.href
  )) as lat_specialdateauthority  from master_join master_join_pmfpdp
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_sjotgg on master_join_pmfpdp.target_id = organisation_organisationauthority_pt_sjotgg.id
  where master_join_pmfpdp.source_id = airport_heliport.conditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_pt_xkepfx.id) as lat_weather
  from master_join master_join_uakflm
  join shared.meteorology_pt shared_meteorology_pt_xkepfx on master_join_uakflm.target_id = shared_meteorology_pt_xkepfx.id
  where master_join_uakflm.source_id = airport_heliport.conditioncombination.id
) as lat_weather on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_jvxgtn.id) as lat_aircraft
  from master_join master_join_krtlww
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_jvxgtn on master_join_krtlww.target_id = shared_aircraftcharacteristic_pt_jvxgtn.id
  where master_join_krtlww.source_id = airport_heliport.conditioncombination.id
) as lat_aircraft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_pt_cfgmzh.id) as lat_flight
  from master_join master_join_kckowc
  join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_cfgmzh on master_join_kckowc.target_id = shared_flightcharacteristic_pt_cfgmzh.id
  where master_join_kckowc.source_id = airport_heliport.conditioncombination.id
) as lat_flight on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_pt_ospqhu.id) as lat_subcondition
  from master_join master_join_jfxjyf
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_ospqhu on master_join_jfxjyf.target_id = airport_heliport_conditioncombination_pt_ospqhu.id
  where master_join_jfxjyf.source_id = airport_heliport.conditioncombination.id
) as lat_subcondition on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_element.lat_element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_dvrwnq.*) AS timeinterval
  from master_join master_join_fmppcr
  join shared.timesheet_view shared_timesheet_view_dvrwnq on master_join_fmppcr.target_id = shared_timesheet_view_dvrwnq.id
  where master_join_fmppcr.source_id = routes.flightconditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jwtlrt.*) AS annotation
  from master_join master_join_paitpf
  join notes.note_view notes_note_view_jwtlrt on master_join_paitpf.target_id = notes_note_view_jwtlrt.id
  where master_join_paitpf.source_id = routes.flightconditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_dytaev.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_dytaev.title AS varchar), '(' || organisation_organisationauthority_pt_dytaev.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_dytaev.href
  )) as lat_specialdateauthority  from master_join master_join_arsyoh
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_dytaev on master_join_arsyoh.target_id = organisation_organisationauthority_pt_dytaev.id
  where master_join_arsyoh.source_id = routes.flightconditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_pt_qmglpd.id) as lat_element
  from master_join master_join_ywneuj
  join routes.flightconditionelement_pt routes_flightconditionelement_pt_qmglpd on master_join_ywneuj.target_id = routes_flightconditionelement_pt_qmglpd.id
  where master_join_ywneuj.source_id = routes.flightconditioncombination.id
) as lat_element on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_oxudqi.*) AS timeinterval
  from master_join master_join_vrrkot
  join shared.timesheet_view shared_timesheet_view_oxudqi on master_join_vrrkot.target_id = shared_timesheet_view_oxudqi.id
  where master_join_vrrkot.source_id = airport_heliport.groundlightingavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fryzam.*) AS annotation
  from master_join master_join_bowvqe
  join notes.note_view notes_note_view_fryzam on master_join_bowvqe.target_id = notes_note_view_fryzam.id
  where master_join_bowvqe.source_id = airport_heliport.groundlightingavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_stdjvf.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_stdjvf.title AS varchar), '(' || organisation_organisationauthority_pt_stdjvf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_stdjvf.href
  )) as lat_specialdateauthority  from master_join master_join_gskzdp
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_stdjvf on master_join_gskzdp.target_id = organisation_organisationauthority_pt_stdjvf.id
  where master_join_gskzdp.source_id = airport_heliport.groundlightingavailability.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_qhtret.*) AS timeinterval
  from master_join master_join_zqoygn
  join shared.timesheet_view shared_timesheet_view_qhtret on master_join_zqoygn.target_id = shared_timesheet_view_qhtret.id
  where master_join_zqoygn.source_id = shared.lightelementstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_srwsng.*) AS annotation
  from master_join master_join_atkhdc
  join notes.note_view notes_note_view_srwsng on master_join_atkhdc.target_id = notes_note_view_srwsng.id
  where master_join_atkhdc.source_id = shared.lightelementstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_inkhrw.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_inkhrw.title AS varchar), '(' || organisation_organisationauthority_pt_inkhrw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_inkhrw.href
  )) as lat_specialdateauthority  from master_join master_join_vnpjxr
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_inkhrw on master_join_vnpjxr.target_id = organisation_organisationauthority_pt_inkhrw.id
  where master_join_vnpjxr.source_id = shared.lightelementstatus.id
) as lat_specialdateauthority on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_jpfdfk.*) AS timeinterval
  from master_join master_join_fgdzas
  join shared.timesheet_view shared_timesheet_view_jpfdfk on master_join_fgdzas.target_id = shared_timesheet_view_jpfdfk.id
  where master_join_fgdzas.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lzmrbo.*) AS annotation
  from master_join master_join_hzlmxt
  join notes.note_view notes_note_view_lzmrbo on master_join_hzlmxt.target_id = notes_note_view_lzmrbo.id
  where master_join_hzlmxt.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ndkbpa.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ndkbpa.title AS varchar), '(' || organisation_organisationauthority_pt_ndkbpa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ndkbpa.href
  )) as lat_specialdateauthority  from master_join master_join_ppiuri
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ndkbpa on master_join_ppiuri.target_id = organisation_organisationauthority_pt_ndkbpa.id
  where master_join_ppiuri.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_pt_dozbbx.id) as lat_usage
  from master_join master_join_jklock
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_pt_dozbbx on master_join_jklock.target_id = airport_heliport_manoeuvringareausage_pt_dozbbx.id
  where master_join_jklock.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_kagzry.*) AS timeinterval
  from master_join master_join_utswoo
  join shared.timesheet_view shared_timesheet_view_kagzry on master_join_utswoo.target_id = shared_timesheet_view_kagzry.id
  where master_join_utswoo.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wmdnwl.*) AS annotation
  from master_join master_join_kstmtz
  join notes.note_view notes_note_view_wmdnwl on master_join_kstmtz.target_id = notes_note_view_wmdnwl.id
  where master_join_kstmtz.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_wftflc.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_wftflc.title AS varchar), '(' || organisation_organisationauthority_pt_wftflc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_wftflc.href
  )) as lat_specialdateauthority  from master_join master_join_wllavx
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_wftflc on master_join_wllavx.target_id = organisation_organisationauthority_pt_wftflc.id
  where master_join_wllavx.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_vaggou.*) AS timeinterval
  from master_join master_join_mzynwt
  join shared.timesheet_view shared_timesheet_view_vaggou on master_join_mzynwt.target_id = shared_timesheet_view_vaggou.id
  where master_join_mzynwt.source_id = navaids_points.navaidoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yeeqxt.*) AS annotation
  from master_join master_join_nbhetx
  join notes.note_view notes_note_view_yeeqxt on master_join_nbhetx.target_id = notes_note_view_yeeqxt.id
  where master_join_nbhetx.source_id = navaids_points.navaidoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_hajggq.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_hajggq.title AS varchar), '(' || organisation_organisationauthority_pt_hajggq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_hajggq.href
  )) as lat_specialdateauthority  from master_join master_join_euiuwq
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_hajggq on master_join_euiuwq.target_id = organisation_organisationauthority_pt_hajggq.id
  where master_join_euiuwq.source_id = navaids_points.navaidoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xtktba.*) AS timeinterval
  from master_join master_join_mzioif
  join shared.timesheet_view shared_timesheet_view_xtktba on master_join_mzioif.target_id = shared_timesheet_view_xtktba.id
  where master_join_mzioif.source_id = shared.onlinecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ssclsw.*) AS annotation
  from master_join master_join_mhxoqu
  join notes.note_view notes_note_view_ssclsw on master_join_mhxoqu.target_id = notes_note_view_ssclsw.id
  where master_join_mhxoqu.source_id = shared.onlinecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_phkkac.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_phkkac.title AS varchar), '(' || organisation_organisationauthority_pt_phkkac.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_phkkac.href
  )) as lat_specialdateauthority  from master_join master_join_shurdi
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_phkkac on master_join_shurdi.target_id = organisation_organisationauthority_pt_phkkac.id
  where master_join_shurdi.source_id = shared.onlinecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rslyif.*) AS timeinterval
  from master_join master_join_mmcbpp
  join shared.timesheet_view shared_timesheet_view_rslyif on master_join_mmcbpp.target_id = shared_timesheet_view_rslyif.id
  where master_join_mmcbpp.source_id = shared.postaladdress.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_obstij.*) AS annotation
  from master_join master_join_eoxqjs
  join notes.note_view notes_note_view_obstij on master_join_eoxqjs.target_id = notes_note_view_obstij.id
  where master_join_eoxqjs.source_id = shared.postaladdress.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_abcbpp.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_abcbpp.title AS varchar), '(' || organisation_organisationauthority_pt_abcbpp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_abcbpp.href
  )) as lat_specialdateauthority  from master_join master_join_dclfqw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_abcbpp on master_join_dclfqw.target_id = organisation_organisationauthority_pt_abcbpp.id
  where master_join_dclfqw.source_id = shared.postaladdress.id
) as lat_specialdateauthority on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_fwbidy.*) AS timeinterval
  from master_join master_join_ajeaxk
  join shared.timesheet_view shared_timesheet_view_fwbidy on master_join_ajeaxk.target_id = shared_timesheet_view_fwbidy.id
  where master_join_ajeaxk.source_id = procedure.procedureavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vyylfq.*) AS annotation
  from master_join master_join_kdxhvy
  join notes.note_view notes_note_view_vyylfq on master_join_kdxhvy.target_id = notes_note_view_vyylfq.id
  where master_join_kdxhvy.source_id = procedure.procedureavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_iuzytj.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_iuzytj.title AS varchar), '(' || organisation_organisationauthority_pt_iuzytj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_iuzytj.href
  )) as lat_specialdateauthority  from master_join master_join_rssvlo
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_iuzytj on master_join_rssvlo.target_id = organisation_organisationauthority_pt_iuzytj.id
  where master_join_rssvlo.source_id = procedure.procedureavailability.id
) as lat_specialdateauthority on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_eevgww.*) AS timeinterval
  from master_join master_join_aaykeu
  join shared.timesheet_view shared_timesheet_view_eevgww on master_join_aaykeu.target_id = shared_timesheet_view_eevgww.id
  where master_join_aaykeu.source_id = service.radiocommunicationoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_byxhva.*) AS annotation
  from master_join master_join_fwdhvd
  join notes.note_view notes_note_view_byxhva on master_join_fwdhvd.target_id = notes_note_view_byxhva.id
  where master_join_fwdhvd.source_id = service.radiocommunicationoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_lzjikd.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_lzjikd.title AS varchar), '(' || organisation_organisationauthority_pt_lzjikd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_lzjikd.href
  )) as lat_specialdateauthority  from master_join master_join_njtuqi
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_lzjikd on master_join_njtuqi.target_id = organisation_organisationauthority_pt_lzjikd.id
  where master_join_njtuqi.source_id = service.radiocommunicationoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_levels.lat_levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_jzomjo.*) AS timeinterval
  from master_join master_join_jlliwt
  join shared.timesheet_view shared_timesheet_view_jzomjo on master_join_jlliwt.target_id = shared_timesheet_view_jzomjo.id
  where master_join_jlliwt.source_id = routes.routeavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hoztxo.*) AS annotation
  from master_join master_join_hknhvn
  join notes.note_view notes_note_view_hoztxo on master_join_hknhvn.target_id = notes_note_view_hoztxo.id
  where master_join_hknhvn.source_id = routes.routeavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_oebkxd.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_oebkxd.title AS varchar), '(' || organisation_organisationauthority_pt_oebkxd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_oebkxd.href
  )) as lat_specialdateauthority  from master_join master_join_ybuqgm
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_oebkxd on master_join_ybuqgm.target_id = organisation_organisationauthority_pt_oebkxd.id
  where master_join_ybuqgm.source_id = routes.routeavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_wvdhzd.id) as lat_levels
  from master_join master_join_ddyzfq
  join shared.airspacelayer_pt shared_airspacelayer_pt_wvdhzd on master_join_ddyzfq.target_id = shared_airspacelayer_pt_wvdhzd.id
  where master_join_ddyzfq.source_id = routes.routeavailability.id
) as lat_levels on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ntpatt.*) AS timeinterval
  from master_join master_join_nhtybc
  join shared.timesheet_view shared_timesheet_view_ntpatt on master_join_nhtybc.target_id = shared_timesheet_view_ntpatt.id
  where master_join_nhtybc.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gkzjzs.*) AS annotation
  from master_join master_join_unudhn
  join notes.note_view notes_note_view_gkzjzs on master_join_unudhn.target_id = notes_note_view_gkzjzs.id
  where master_join_unudhn.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nowttp.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nowttp.title AS varchar), '(' || organisation_organisationauthority_pt_nowttp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nowttp.href
  )) as lat_specialdateauthority  from master_join master_join_yjymmg
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nowttp on master_join_yjymmg.target_id = organisation_organisationauthority_pt_nowttp.id
  where master_join_yjymmg.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_bihuyi.*) AS timeinterval
  from master_join master_join_jxiyfi
  join shared.timesheet_view shared_timesheet_view_bihuyi on master_join_jxiyfi.target_id = shared_timesheet_view_bihuyi.id
  where master_join_jxiyfi.source_id = service.serviceoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nsskcr.*) AS annotation
  from master_join master_join_nggcjh
  join notes.note_view notes_note_view_nsskcr on master_join_nggcjh.target_id = notes_note_view_nsskcr.id
  where master_join_nggcjh.source_id = service.serviceoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_rrggzt.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_rrggzt.title AS varchar), '(' || organisation_organisationauthority_pt_rrggzt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_rrggzt.href
  )) as lat_specialdateauthority  from master_join master_join_horojh
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_rrggzt on master_join_horojh.target_id = organisation_organisationauthority_pt_rrggzt.id
  where master_join_horojh.source_id = service.serviceoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rcasxg.*) AS timeinterval
  from master_join master_join_syrpyn
  join shared.timesheet_view shared_timesheet_view_rcasxg on master_join_syrpyn.target_id = shared_timesheet_view_rcasxg.id
  where master_join_syrpyn.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wwnsya.*) AS annotation
  from master_join master_join_bqogph
  join notes.note_view notes_note_view_wwnsya on master_join_bqogph.target_id = notes_note_view_wwnsya.id
  where master_join_bqogph.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vebhjg.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vebhjg.title AS varchar), '(' || organisation_organisationauthority_pt_vebhjg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vebhjg.href
  )) as lat_specialdateauthority  from master_join master_join_owipjf
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vebhjg on master_join_owipjf.target_id = organisation_organisationauthority_pt_vebhjg.id
  where master_join_owipjf.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_gquawu.*) AS timeinterval
  from master_join master_join_alffni
  join shared.timesheet_view shared_timesheet_view_gquawu on master_join_alffni.target_id = shared_timesheet_view_gquawu.id
  where master_join_alffni.source_id = shared.telephonecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pfqded.*) AS annotation
  from master_join master_join_mgobso
  join notes.note_view notes_note_view_pfqded on master_join_mgobso.target_id = notes_note_view_pfqded.id
  where master_join_mgobso.source_id = shared.telephonecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_mkctcf.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_mkctcf.title AS varchar), '(' || organisation_organisationauthority_pt_mkctcf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_mkctcf.href
  )) as lat_specialdateauthority  from master_join master_join_xxnbgy
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_mkctcf on master_join_xxnbgy.target_id = organisation_organisationauthority_pt_mkctcf.id
  where master_join_xxnbgy.source_id = shared.telephonecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_pavydv.*) AS timeinterval
  from master_join master_join_mrtatn
  join shared.timesheet_view shared_timesheet_view_pavydv on master_join_mrtatn.target_id = shared_timesheet_view_pavydv.id
  where master_join_mrtatn.source_id = organisation.unitavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_scsqmp.*) AS annotation
  from master_join master_join_izsaae
  join notes.note_view notes_note_view_scsqmp on master_join_izsaae.target_id = notes_note_view_scsqmp.id
  where master_join_izsaae.source_id = organisation.unitavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_dbelea.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_dbelea.title AS varchar), '(' || organisation_organisationauthority_pt_dbelea.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_dbelea.href
  )) as lat_specialdateauthority  from master_join master_join_pjyfuz
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_dbelea on master_join_pjyfuz.target_id = organisation_organisationauthority_pt_dbelea.id
  where master_join_pjyfuz.source_id = organisation.unitavailability.id
) as lat_specialdateauthority on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rwizhf.*) AS timeinterval
  from master_join master_join_gtpvra
  join shared.timesheet_view shared_timesheet_view_rwizhf on master_join_gtpvra.target_id = shared_timesheet_view_rwizhf.id
  where master_join_gtpvra.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_difqhp.*) AS annotation
  from master_join master_join_kujdss
  join notes.note_view notes_note_view_difqhp on master_join_kujdss.target_id = notes_note_view_difqhp.id
  where master_join_kujdss.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_roczbd.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_roczbd.title AS varchar), '(' || organisation_organisationauthority_pt_roczbd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_roczbd.href
  )) as lat_specialdateauthority  from master_join master_join_jytehu
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_roczbd on master_join_jytehu.target_id = organisation_organisationauthority_pt_roczbd.id
  where master_join_jytehu.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_specialdateauthority on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'shared.timesheet_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    geometry_elevatedpoint_view_ymdhre.geom AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_ymdhre.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_ymdhre.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_ymdhre.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_ymdhre.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_ymdhre.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_ymdhre.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_ymdhre.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_sekrju.geom AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_sekrju.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_sekrju.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_sekrju.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_sekrju.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_sekrju.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_hncodm.geom AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_hncodm.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_hncodm.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_hncodm.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_hncodm.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_hncodm.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_lighting.lat_lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ymdhre on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_ymdhre.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_sekrju on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_sekrju.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hncodm on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_hncodm.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_gvrqyn.*) AS timeinterval
  from master_join master_join_fvjsqq
  join shared.timesheet_view shared_timesheet_view_gvrqyn on master_join_fvjsqq.target_id = shared_timesheet_view_gvrqyn.id
  where master_join_fvjsqq.source_id = obstacles.verticalstructurepart.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cdpoiz.*) AS annotation
  from master_join master_join_vvdlnu
  join notes.note_view notes_note_view_cdpoiz on master_join_vvdlnu.target_id = notes_note_view_cdpoiz.id
  where master_join_vvdlnu.source_id = obstacles.verticalstructurepart.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vbmvfi.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vbmvfi.title AS varchar), '(' || organisation_organisationauthority_pt_vbmvfi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vbmvfi.href
  )) as lat_specialdateauthority  from master_join master_join_ayegke
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vbmvfi on master_join_ayegke.target_id = organisation_organisationauthority_pt_vbmvfi.id
  where master_join_ayegke.source_id = obstacles.verticalstructurepart.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_pt_gebzoh.id) as lat_lighting
  from master_join master_join_bixukd
  join shared.lightelement_pt shared_lightelement_pt_gebzoh on master_join_bixukd.target_id = shared_lightelement_pt_gebzoh.id
  where master_join_bixukd.source_id = obstacles.verticalstructurepart.id
) as lat_lighting on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ofkqva.*) AS timeinterval
  from master_join master_join_pkorqg
  join shared.timesheet_view shared_timesheet_view_ofkqva on master_join_pkorqg.target_id = shared_timesheet_view_ofkqva.id
  where master_join_pkorqg.source_id = airport_heliport.workareaactivity.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qdbqlp.*) AS annotation
  from master_join master_join_vygeye
  join notes.note_view notes_note_view_qdbqlp on master_join_vygeye.target_id = notes_note_view_qdbqlp.id
  where master_join_vygeye.source_id = airport_heliport.workareaactivity.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_pyswpa.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_pyswpa.title AS varchar), '(' || organisation_organisationauthority_pt_pyswpa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_pyswpa.href
  )) as lat_specialdateauthority  from master_join master_join_utshfo
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_pyswpa on master_join_utshfo.target_id = organisation_organisationauthority_pt_pyswpa.id
  where master_join_utshfo.source_id = airport_heliport.workareaactivity.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.postaladdress_view', 'shared.onlinecontact_view', 'notes.note_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_urcfzr.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_urcfzr on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_urcfzr.id
left join lateral(
  select
  from master_join master_join_ndezwz
  join shared.contactinformation_view shared_contactinformation_view_whnfvn on master_join_ndezwz.target_id = shared_contactinformation_view_whnfvn.id
  where master_join_ndezwz.source_id = airport_heliport.airportheliportusage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bgcvss.*) AS annotation
  from master_join master_join_mhwkpi
  join notes.note_view notes_note_view_bgcvss on master_join_mhwkpi.target_id = notes_note_view_bgcvss.id
  where master_join_mhwkpi.source_id = airport_heliport.airportheliportusage.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_homzfr.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_homzfr on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_homzfr.id
left join lateral(
  select
  from master_join master_join_pcoobl
  join shared.contactinformation_view shared_contactinformation_view_mnckzd on master_join_pcoobl.target_id = shared_contactinformation_view_mnckzd.id
  where master_join_pcoobl.source_id = airport_heliport.apronareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mjedpw.*) AS annotation
  from master_join master_join_bexcrr
  join notes.note_view notes_note_view_mjedpw on master_join_bexcrr.target_id = notes_note_view_mjedpw.id
  where master_join_bexcrr.source_id = airport_heliport.apronareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    lat_routeelement.lat_routeelement as routeelement,
    lat_annotation.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_pt_ywccfr.id) as lat_routeelement
  from master_join master_join_jlfkfp
  join routes.flightroutingelement_pt routes_flightroutingelement_pt_ywccfr on master_join_jlfkfp.target_id = routes_flightroutingelement_pt_ywccfr.id
  where master_join_jlfkfp.source_id = routes.flightrestrictionroute.id
) as lat_routeelement on TRUE
left join lateral(
  select
  from master_join master_join_opeydc
  join shared.contactinformation_view shared_contactinformation_view_vdyyag on master_join_opeydc.target_id = shared_contactinformation_view_vdyyag.id
  where master_join_opeydc.source_id = routes.flightrestrictionroute.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qvejeb.*) AS annotation
  from master_join master_join_cwiejf
  join notes.note_view notes_note_view_qvejeb on master_join_cwiejf.target_id = notes_note_view_qvejeb.id
  where master_join_cwiejf.source_id = routes.flightrestrictionroute.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_rayeuj.id) AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_rayeuj on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_rayeuj.id
left join lateral(
  select
  from master_join master_join_mozelf
  join shared.contactinformation_view shared_contactinformation_view_qeezeg on master_join_mozelf.target_id = shared_contactinformation_view_qeezeg.id
  where master_join_mozelf.source_id = airport_heliport.manoeuvringareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_inyftg.*) AS annotation
  from master_join master_join_wgsnli
  join notes.note_view notes_note_view_inyftg on master_join_wgsnli.target_id = notes_note_view_inyftg.id
  where master_join_wgsnli.source_id = airport_heliport.manoeuvringareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_nrjfdh.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_nrjfdh.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_nrjfdh.href AS oppositetrack_href,
    lat_availability.lat_availability as availability,
    lat_protectingairspace.lat_protectingairspace as protectingairspace,
    lat_track.lat_track as track,
    lat_anchor.lat_anchor as anchor,
    lat_managingorganisation.lat_managingorganisation as managingorganisation,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_nrjfdh on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_nrjfdh.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_wmporm.*) as lat_availability
  from master_join master_join_zzdixr
  join routes.routeavailability_view routes_routeavailability_view_wmporm on master_join_zzdixr.target_id = routes_routeavailability_view_wmporm.id
  where master_join_zzdixr.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_fmddxj.id,
      'title', coalesce(cast(airspace_airspace_pt_fmddxj.title AS varchar), '(' || airspace_airspace_pt_fmddxj.nilreason[1] || ')'),
      'href', airspace_airspace_pt_fmddxj.href
  )) as lat_protectingairspace  from master_join master_join_zypooq
  join airspace.airspace_pt airspace_airspace_pt_fmddxj on master_join_zypooq.target_id = airspace_airspace_pt_fmddxj.id
  where master_join_zypooq.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_protectingairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_view_hhxmst.*) as lat_track
  from master_join master_join_zmyekn
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_view_hhxmst on master_join_zmyekn.target_id = aerial_refuelling_aerialrefuellingtrack_view_hhxmst.id
  where master_join_zmyekn.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_track on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_view_yrimtd.*) as lat_anchor
  from master_join master_join_jnptkq
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_view_yrimtd on master_join_jnptkq.target_id = aerial_refuelling_aerialrefuellinganchor_view_yrimtd.id
  where master_join_jnptkq.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_anchor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_view_lwjqfr.*) as lat_managingorganisation
  from master_join master_join_vidtyp
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_view_lwjqfr on master_join_vidtyp.target_id = aerial_refuelling_authorityforaerialrefuelling_view_lwjqfr.id
  where master_join_vidtyp.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_managingorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_irietf.*) AS annotation
  from master_join master_join_csgfgu
  join notes.note_view notes_note_view_irietf on master_join_csgfgu.target_id = notes_note_view_irietf.id
  where master_join_csgfgu.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_annotation on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_ygjtce.title as varchar), '(' || obstacles_verticalstructure_pt_ygjtce.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_ygjtce.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cexiog.title as varchar), '(' || airport_heliport_airportheliport_pt_cexiog.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_cexiog.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_rbviuf.geom AS location_geom,
    geometry_elevatedpoint_view_rbviuf.longitude AS location_longitude,
    geometry_elevatedpoint_view_rbviuf.latitude AS location_latitude,
    geometry_elevatedpoint_view_rbviuf.elevation AS location_elevation,
    geometry_elevatedpoint_view_rbviuf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rbviuf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rbviuf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rbviuf.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_ygjtce on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_ygjtce.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cexiog on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_cexiog.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rbviuf on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_rbviuf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yzbdfq.*) AS annotation
  from master_join master_join_yiixnw
  join notes.note_view notes_note_view_yzbdfq on master_join_yiixnw.target_id = notes_note_view_yzbdfq.id
  where master_join_yiixnw.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as lat_annotation on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_vsdtfc.geom AS location_geom,
    geometry_elevatedpoint_view_vsdtfc.longitude AS location_longitude,
    geometry_elevatedpoint_view_vsdtfc.latitude AS location_latitude,
    geometry_elevatedpoint_view_vsdtfc.elevation AS location_elevation,
    geometry_elevatedpoint_view_vsdtfc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vsdtfc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vsdtfc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vsdtfc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uxnrsz.title as varchar), '(' || organisation_unit_pt_uxnrsz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_uxnrsz.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vsdtfc on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_vsdtfc.id
left join organisation.unit_pt organisation_unit_pt_uxnrsz on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_uxnrsz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_apeqad.*) as lat_callsign
  from master_join master_join_llsoao
  join service.callsigndetail_view service_callsigndetail_view_apeqad on master_join_llsoao.target_id = service_callsigndetail_view_apeqad.id
  where master_join_llsoao.source_id = service.aircraftgroundservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_aqpbto.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_aqpbto.title AS varchar), '(' || service_radiocommunicationchannel_pt_aqpbto.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_aqpbto.href
  )) as lat_radiocommunication  from master_join master_join_dchtkq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_aqpbto on master_join_dchtkq.target_id = service_radiocommunicationchannel_pt_aqpbto.id
  where master_join_dchtkq.source_id = service.aircraftgroundservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_pgfrmi
  join shared.contactinformation_view shared_contactinformation_view_kwiuif on master_join_pgfrmi.target_id = shared_contactinformation_view_kwiuif.id
  where master_join_pgfrmi.source_id = service.aircraftgroundservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_fvdkdx.*) as lat_availability
  from master_join master_join_wppfcx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_fvdkdx on master_join_wppfcx.target_id = service_serviceoperationalstatus_view_fvdkdx.id
  where master_join_wppfcx.source_id = service.aircraftgroundservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iuaikr.*) AS annotation
  from master_join master_join_hvselh
  join notes.note_view notes_note_view_iuaikr on master_join_hvselh.target_id = notes_note_view_iuaikr.id
  where master_join_hvselh.source_id = service.aircraftgroundservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_vanikl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_vanikl.title AS varchar), '(' || airport_heliport_airportheliport_pt_vanikl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_vanikl.href
  )) as lat_airportheliport  from master_join master_join_jfwbox
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vanikl on master_join_jfwbox.target_id = airport_heliport_airportheliport_pt_vanikl.id
  where master_join_jfwbox.source_id = service.aircraftgroundservice_ts.id
) as lat_airportheliport on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.aircraftstandcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qecmzc.*) AS surfaceproperties,
    geometry_elevatedpoint_view_fimbpu.geom AS location_geom,
    geometry_elevatedpoint_view_fimbpu.longitude AS location_longitude,
    geometry_elevatedpoint_view_fimbpu.latitude AS location_latitude,
    geometry_elevatedpoint_view_fimbpu.elevation AS location_elevation,
    geometry_elevatedpoint_view_fimbpu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fimbpu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fimbpu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fimbpu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_auaach.title as varchar), '(' || airport_heliport_apronelement_pt_auaach.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_auaach.href AS apronlocation_href,
    geometry_elevatedsurface_view_upujcy.geom AS extent_geom,
    geometry_elevatedsurface_view_upujcy.elevation AS extent_elevation,
    geometry_elevatedsurface_view_upujcy.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_upujcy.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_upujcy.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_upujcy.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qecmzc on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qecmzc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fimbpu on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_fimbpu.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_auaach on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_auaach.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_upujcy on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_upujcy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_view_asyodz.*) as lat_contaminant
  from master_join master_join_konesy
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_view_asyodz on master_join_konesy.target_id = airport_heliport_aircraftstandcontamination_view_asyodz.id
  where master_join_konesy.source_id = airport_heliport.aircraftstand_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qfxgqy.*) AS annotation
  from master_join master_join_braozj
  join notes.note_view notes_note_view_qfxgqy on master_join_braozj.target_id = notes_note_view_qfxgqy.id
  where master_join_braozj.source_id = airport_heliport.aircraftstand_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_jeuepg.*) as lat_availability
  from master_join master_join_uttamz
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_jeuepg on master_join_uttamz.target_id = airport_heliport_apronareaavailability_view_jeuepg.id
  where master_join_uttamz.source_id = airport_heliport.aircraftstand_ts.id
) as lat_availability on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_fvvsor.geom AS location_geom,
    geometry_elevatedpoint_view_fvvsor.longitude AS location_longitude,
    geometry_elevatedpoint_view_fvvsor.latitude AS location_latitude,
    geometry_elevatedpoint_view_fvvsor.elevation AS location_elevation,
    geometry_elevatedpoint_view_fvvsor.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fvvsor.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fvvsor.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fvvsor.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_xengnp.title as varchar), '(' || organisation_unit_pt_xengnp.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_xengnp.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fvvsor on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_fvvsor.id
left join organisation.unit_pt organisation_unit_pt_xengnp on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_xengnp.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_tjnsbu.*) as lat_callsign
  from master_join master_join_handte
  join service.callsigndetail_view service_callsigndetail_view_tjnsbu on master_join_handte.target_id = service_callsigndetail_view_tjnsbu.id
  where master_join_handte.source_id = service.airportclearanceservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_fdjuwo.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_fdjuwo.title AS varchar), '(' || service_radiocommunicationchannel_pt_fdjuwo.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_fdjuwo.href
  )) as lat_radiocommunication  from master_join master_join_lyvtvr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_fdjuwo on master_join_lyvtvr.target_id = service_radiocommunicationchannel_pt_fdjuwo.id
  where master_join_lyvtvr.source_id = service.airportclearanceservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_ejasfp
  join shared.contactinformation_view shared_contactinformation_view_eohmwl on master_join_ejasfp.target_id = shared_contactinformation_view_eohmwl.id
  where master_join_ejasfp.source_id = service.airportclearanceservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_befrvo.*) as lat_availability
  from master_join master_join_jhyjlv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_befrvo on master_join_jhyjlv.target_id = service_serviceoperationalstatus_view_befrvo.id
  where master_join_jhyjlv.source_id = service.airportclearanceservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lydwmt.*) AS annotation
  from master_join master_join_gbnozh
  join notes.note_view notes_note_view_lydwmt on master_join_gbnozh.target_id = notes_note_view_lydwmt.id
  where master_join_gbnozh.source_id = service.airportclearanceservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_tgmzhb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_tgmzhb.title AS varchar), '(' || airport_heliport_airportheliport_pt_tgmzhb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_tgmzhb.href
  )) as lat_airportheliport  from master_join master_join_mkwixm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tgmzhb on master_join_mkwixm.target_id = airport_heliport_airportheliport_pt_tgmzhb.id
  where master_join_mkwixm.source_id = service.airportclearanceservice_ts.id
) as lat_airportheliport on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_sbyzof.title as varchar), '(' || airport_heliport_airportheliport_pt_sbyzof.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_sbyzof.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rixivu.title as varchar), '(' || airport_heliport_airportheliport_pt_rixivu.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_rixivu.href AS dependentairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sbyzof on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_sbyzof.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rixivu on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_rixivu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_swyugq.*) AS annotation
  from master_join master_join_ycklbo
  join notes.note_view notes_note_view_swyugq on master_join_ycklbo.target_id = notes_note_view_swyugq.id
  where master_join_ycklbo.source_id = airport_heliport.airportheliportcollocation_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['airport_heliport.airportheliportresponsibilityorganisation_view', 'geometry.elevatedpoint_view', 'airport_heliport.city_view', 'shared.contactinformation_view', 'geometry.elevatedsurface_view', 'airport_heliport.airportheliportavailability_view', 'airport_heliport.airportheliportcontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_ttosxl.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_wkxlwj.geom AS arp_geom,
    geometry_elevatedpoint_view_wkxlwj.longitude AS arp_longitude,
    geometry_elevatedpoint_view_wkxlwj.latitude AS arp_latitude,
    geometry_elevatedpoint_view_wkxlwj.elevation AS arp_elevation,
    geometry_elevatedpoint_view_wkxlwj.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_wkxlwj.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_wkxlwj.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_wkxlwj.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_devsyk.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_devsyk.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_devsyk.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_devsyk.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_devsyk.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_devsyk.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_servedcity.lat_servedcity as servedcity,
    lat_altimetersource.lat_altimetersource as altimetersource,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_ttosxl on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_ttosxl.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wkxlwj on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_wkxlwj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_devsyk on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_devsyk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_view_sybdwf.*) as lat_contaminant
  from master_join master_join_cxtfah
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_view_sybdwf on master_join_cxtfah.target_id = airport_heliport_airportheliportcontamination_view_sybdwf.id
  where master_join_cxtfah.source_id = airport_heliport.airportheliport_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_view_ltdifk.*) as lat_servedcity
  from master_join master_join_rvlxil
  join airport_heliport.city_view airport_heliport_city_view_ltdifk on master_join_rvlxil.target_id = airport_heliport_city_view_ltdifk.id
  where master_join_rvlxil.source_id = airport_heliport.airportheliport_ts.id
) as lat_servedcity on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_qrlffs.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_qrlffs.title AS varchar), '(' || airport_heliport_altimetersource_pt_qrlffs.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_qrlffs.href
  )) as lat_altimetersource  from master_join master_join_wgdhvy
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_qrlffs on master_join_wgdhvy.target_id = airport_heliport_altimetersource_pt_qrlffs.id
  where master_join_wgdhvy.source_id = airport_heliport.airportheliport_ts.id
) as lat_altimetersource on TRUE
left join lateral(
  select
  from master_join master_join_szkjfa
  join shared.contactinformation_view shared_contactinformation_view_kfvezz on master_join_szkjfa.target_id = shared_contactinformation_view_kfvezz.id
  where master_join_szkjfa.source_id = airport_heliport.airportheliport_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_view_mydpuf.*) as lat_availability
  from master_join master_join_iyobul
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_view_mydpuf on master_join_iyobul.target_id = airport_heliport_airportheliportavailability_view_mydpuf.id
  where master_join_iyobul.source_id = airport_heliport.airportheliport_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iicmcp.*) AS annotation
  from master_join master_join_iwkjij
  join notes.note_view notes_note_view_iicmcp on master_join_iwkjij.target_id = notes_note_view_iicmcp.id
  where master_join_iwkjij.source_id = airport_heliport.airportheliport_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_bazjbi.geom AS area_geom,
    geometry_elevatedsurface_view_bazjbi.elevation AS area_elevation,
    geometry_elevatedsurface_view_bazjbi.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_bazjbi.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_bazjbi.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_bazjbi.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_zwrjso.title as varchar), '(' || airport_heliport_airportheliport_pt_zwrjso.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_zwrjso.href AS affectedairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bazjbi on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_bazjbi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zwrjso on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_zwrjso.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wrllch.*) AS annotation
  from master_join master_join_txomgf
  join notes.note_view notes_note_view_wrllch on master_join_txomgf.target_id = notes_note_view_wrllch.id
  where master_join_txomgf.source_id = airport_heliport.airporthotspot_ts.id
) as lat_annotation on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_gtifjr.*) as lat_element
  from master_join master_join_ahbwas
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_gtifjr on master_join_ahbwas.target_id = airport_heliport_markingelement_view_gtifjr.id
  where master_join_ahbwas.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_epiolx.*) AS annotation
  from master_join master_join_mpkznq
  join notes.note_view notes_note_view_epiolx on master_join_mpkznq.target_id = notes_note_view_epiolx.id
  where master_join_mpkznq.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.fuel_view', 'service.nitrogen_view', 'shared.contactinformation_view', 'service.oxygen_view', 'service.oil_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_traxux.geom AS location_geom,
    geometry_elevatedpoint_view_traxux.longitude AS location_longitude,
    geometry_elevatedpoint_view_traxux.latitude AS location_latitude,
    geometry_elevatedpoint_view_traxux.elevation AS location_elevation,
    geometry_elevatedpoint_view_traxux.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_traxux.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_traxux.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_traxux.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_oyftvy.title as varchar), '(' || organisation_unit_pt_oyftvy.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_oyftvy.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_fuelsupply.lat_fuelsupply as fuelsupply,
    lat_oilsupply.lat_oilsupply as oilsupply,
    lat_nitrogensupply.lat_nitrogensupply as nitrogensupply,
    lat_oxygensupply.lat_oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_traxux on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_traxux.id
left join organisation.unit_pt organisation_unit_pt_oyftvy on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_oyftvy.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_fwukir.*) as lat_callsign
  from master_join master_join_nmduuf
  join service.callsigndetail_view service_callsigndetail_view_fwukir on master_join_nmduuf.target_id = service_callsigndetail_view_fwukir.id
  where master_join_nmduuf.source_id = service.airportsuppliesservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_lqgykv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_lqgykv.title AS varchar), '(' || service_radiocommunicationchannel_pt_lqgykv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_lqgykv.href
  )) as lat_radiocommunication  from master_join master_join_bzyzwg
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_lqgykv on master_join_bzyzwg.target_id = service_radiocommunicationchannel_pt_lqgykv.id
  where master_join_bzyzwg.source_id = service.airportsuppliesservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_opjpvq
  join shared.contactinformation_view shared_contactinformation_view_qnkpzr on master_join_opjpvq.target_id = shared_contactinformation_view_qnkpzr.id
  where master_join_opjpvq.source_id = service.airportsuppliesservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_edczyo.*) as lat_availability
  from master_join master_join_hmlxui
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_edczyo on master_join_hmlxui.target_id = service_serviceoperationalstatus_view_edczyo.id
  where master_join_hmlxui.source_id = service.airportsuppliesservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lthiut.*) AS annotation
  from master_join master_join_rzqvyi
  join notes.note_view notes_note_view_lthiut on master_join_rzqvyi.target_id = notes_note_view_lthiut.id
  where master_join_rzqvyi.source_id = service.airportsuppliesservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_nzzdyk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_nzzdyk.title AS varchar), '(' || airport_heliport_airportheliport_pt_nzzdyk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_nzzdyk.href
  )) as lat_airportheliport  from master_join master_join_krakpa
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nzzdyk on master_join_krakpa.target_id = airport_heliport_airportheliport_pt_nzzdyk.id
  where master_join_krakpa.source_id = service.airportsuppliesservice_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_view_qtcwyx.*) as lat_fuelsupply
  from master_join master_join_xegjxo
  join service.fuel_view service_fuel_view_qtcwyx on master_join_xegjxo.target_id = service_fuel_view_qtcwyx.id
  where master_join_xegjxo.source_id = service.airportsuppliesservice_ts.id
) as lat_fuelsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_view_hpklst.*) as lat_oilsupply
  from master_join master_join_nimihh
  join service.oil_view service_oil_view_hpklst on master_join_nimihh.target_id = service_oil_view_hpklst.id
  where master_join_nimihh.source_id = service.airportsuppliesservice_ts.id
) as lat_oilsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_view_ryoltb.*) as lat_nitrogensupply
  from master_join master_join_zklwlr
  join service.nitrogen_view service_nitrogen_view_ryoltb on master_join_zklwlr.target_id = service_nitrogen_view_ryoltb.id
  where master_join_zklwlr.source_id = service.airportsuppliesservice_ts.id
) as lat_nitrogensupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_view_rftfhn.*) as lat_oxygensupply
  from master_join master_join_tfmuoz
  join service.oxygen_view service_oxygen_view_rftfhn on master_join_tfmuoz.target_id = service_oxygen_view_rftfhn.id
  where master_join_tfmuoz.source_id = service.airportsuppliesservice_ts.id
) as lat_oxygensupply on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_odldbb.title as varchar), '(' || airspace_airspace_pt_odldbb.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_odldbb.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_oieevo.title as varchar), '(' || airspace_airspace_pt_oieevo.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_oieevo.href AS enteredairspace_href,
    lat_annotation.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_odldbb on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_odldbb.id
left join airspace.airspace_pt airspace_airspace_pt_oieevo on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_oieevo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cycmmb.*) AS annotation
  from master_join master_join_nsofja
  join notes.note_view notes_note_view_cycmmb on master_join_nsofja.target_id = notes_note_view_cycmmb.id
  where master_join_nsofja.source_id = routes.airspacebordercrossing_ts.id
) as lat_annotation on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacegeometrycomponent_view', 'airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view', 'notes.note_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_iyngph.title as varchar), '(' || routes_route_pt_iyngph.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_iyngph.href AS protectedroute_href,
    lat_clazz.lat_clazz as clazz,
    lat_geometrycomponent.lat_geometrycomponent as geometrycomponent,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_iyngph on airspace.airspace_ts.protectedroute_id = routes_route_pt_iyngph.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_view_hwgeaz.*) as lat_clazz
  from master_join master_join_pxztii
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_view_hwgeaz on master_join_pxztii.target_id = airspace_airspacelayerclass_view_hwgeaz.id
  where master_join_pxztii.source_id = airspace.airspace_ts.id
) as lat_clazz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_view_mowxft.*) as lat_geometrycomponent
  from master_join master_join_guetgd
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_view_mowxft on master_join_guetgd.target_id = airspace_airspacegeometrycomponent_view_mowxft.id
  where master_join_guetgd.source_id = airspace.airspace_ts.id
) as lat_geometrycomponent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_view_vyrdzw.*) as lat_activation
  from master_join master_join_hdcmxi
  join airspace.airspaceactivation_view airspace_airspaceactivation_view_vyrdzw on master_join_hdcmxi.target_id = airspace_airspaceactivation_view_vyrdzw.id
  where master_join_hdcmxi.source_id = airspace.airspace_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qxkmth.*) AS annotation
  from master_join master_join_hxpddp
  join notes.note_view notes_note_view_qxkmth on master_join_hxpddp.target_id = notes_note_view_qxkmth.id
  where master_join_hxpddp.source_id = airspace.airspace_ts.id
) as lat_annotation on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_vxsyqw.geom AS location_geom,
    geometry_elevatedpoint_view_vxsyqw.longitude AS location_longitude,
    geometry_elevatedpoint_view_vxsyqw.latitude AS location_latitude,
    geometry_elevatedpoint_view_vxsyqw.elevation AS location_elevation,
    geometry_elevatedpoint_view_vxsyqw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vxsyqw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vxsyqw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vxsyqw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_khjsms.title as varchar), '(' || organisation_unit_pt_khjsms.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_khjsms.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_ofzewp.title as varchar), '(' || navaids_points_directionfinder_pt_ofzewp.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_ofzewp.href AS aircraftlocator_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vxsyqw on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_vxsyqw.id
left join organisation.unit_pt organisation_unit_pt_khjsms on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_khjsms.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_ofzewp on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_ofzewp.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_hkwhbp.*) as lat_callsign
  from master_join master_join_lmcqec
  join service.callsigndetail_view service_callsigndetail_view_hkwhbp on master_join_lmcqec.target_id = service_callsigndetail_view_hkwhbp.id
  where master_join_lmcqec.source_id = service.airtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_flhjwa.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_flhjwa.title AS varchar), '(' || service_radiocommunicationchannel_pt_flhjwa.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_flhjwa.href
  )) as lat_radiocommunication  from master_join master_join_icyffy
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_flhjwa on master_join_icyffy.target_id = service_radiocommunicationchannel_pt_flhjwa.id
  where master_join_icyffy.source_id = service.airtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_xeiufi
  join shared.contactinformation_view shared_contactinformation_view_zslonj on master_join_xeiufi.target_id = shared_contactinformation_view_zslonj.id
  where master_join_xeiufi.source_id = service.airtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_sffrly.*) as lat_availability
  from master_join master_join_xlbawd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_sffrly on master_join_xlbawd.target_id = service_serviceoperationalstatus_view_sffrly.id
  where master_join_xlbawd.source_id = service.airtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xihnmw.*) AS annotation
  from master_join master_join_uncvlp
  join notes.note_view notes_note_view_xihnmw on master_join_uncvlp.target_id = notes_note_view_xihnmw.id
  where master_join_uncvlp.source_id = service.airtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_hbbvcd.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_hbbvcd.title AS varchar), '(' || airport_heliport_airportheliport_pt_hbbvcd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_hbbvcd.href
  )) as lat_clientairport  from master_join master_join_dykfkg
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hbbvcd on master_join_dykfkg.target_id = airport_heliport_airportheliport_pt_hbbvcd.id
  where master_join_dykfkg.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_zpipwa.id,
      'title', coalesce(cast(airspace_airspace_pt_zpipwa.title AS varchar), '(' || airspace_airspace_pt_zpipwa.nilreason[1] || ')'),
      'href', airspace_airspace_pt_zpipwa.href
  )) as lat_clientairspace  from master_join master_join_ozitht
  join airspace.airspace_pt airspace_airspace_pt_zpipwa on master_join_ozitht.target_id = airspace_airspace_pt_zpipwa.id
  where master_join_ozitht.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_cysykm.*) as lat_clientroute
  from master_join master_join_zlusjl
  join routes.routeportion_view routes_routeportion_view_cysykm on master_join_zlusjl.target_id = routes_routeportion_view_cysykm.id
  where master_join_zlusjl.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_tdvqwb.id,
      'title', coalesce(cast(holding_holdingpattern_pt_tdvqwb.title AS varchar), '(' || holding_holdingpattern_pt_tdvqwb.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_tdvqwb.href
  )) as lat_clientholding  from master_join master_join_eptwra
  join holding.holdingpattern_pt holding_holdingpattern_pt_tdvqwb on master_join_eptwra.target_id = holding_holdingpattern_pt_tdvqwb.id
  where master_join_eptwra.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_dgslqs.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_dgslqs.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_dgslqs.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_dgslqs.href
  )) as lat_clientaerialrefuelling  from master_join master_join_ylwqtc
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_dgslqs on master_join_ylwqtc.target_id = aerial_refuelling_aerialrefuelling_pt_dgslqs.id
  where master_join_ylwqtc.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_unotog.geom AS location_geom,
    geometry_elevatedpoint_view_unotog.longitude AS location_longitude,
    geometry_elevatedpoint_view_unotog.latitude AS location_latitude,
    geometry_elevatedpoint_view_unotog.elevation AS location_elevation,
    geometry_elevatedpoint_view_unotog.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_unotog.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_unotog.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_unotog.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hmiauq.title as varchar), '(' || organisation_unit_pt_hmiauq.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_hmiauq.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling,
    lat_clientroute.lat_clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_unotog on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_unotog.id
left join organisation.unit_pt organisation_unit_pt_hmiauq on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_hmiauq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_qejqig.*) as lat_callsign
  from master_join master_join_udlecr
  join service.callsigndetail_view service_callsigndetail_view_qejqig on master_join_udlecr.target_id = service_callsigndetail_view_qejqig.id
  where master_join_udlecr.source_id = service.airtrafficmanagementservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_djltym.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_djltym.title AS varchar), '(' || service_radiocommunicationchannel_pt_djltym.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_djltym.href
  )) as lat_radiocommunication  from master_join master_join_ylxbtc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_djltym on master_join_ylxbtc.target_id = service_radiocommunicationchannel_pt_djltym.id
  where master_join_ylxbtc.source_id = service.airtrafficmanagementservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_onjncs
  join shared.contactinformation_view shared_contactinformation_view_bhuhaj on master_join_onjncs.target_id = shared_contactinformation_view_bhuhaj.id
  where master_join_onjncs.source_id = service.airtrafficmanagementservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_axmfqg.*) as lat_availability
  from master_join master_join_uyyrhn
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_axmfqg on master_join_uyyrhn.target_id = service_serviceoperationalstatus_view_axmfqg.id
  where master_join_uyyrhn.source_id = service.airtrafficmanagementservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gajwxo.*) AS annotation
  from master_join master_join_hylbhi
  join notes.note_view notes_note_view_gajwxo on master_join_hylbhi.target_id = notes_note_view_gajwxo.id
  where master_join_hylbhi.source_id = service.airtrafficmanagementservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_akqkxd.id,
      'title', coalesce(cast(airspace_airspace_pt_akqkxd.title AS varchar), '(' || airspace_airspace_pt_akqkxd.nilreason[1] || ')'),
      'href', airspace_airspace_pt_akqkxd.href
  )) as lat_clientairspace  from master_join master_join_msurij
  join airspace.airspace_pt airspace_airspace_pt_akqkxd on master_join_msurij.target_id = airspace_airspace_pt_akqkxd.id
  where master_join_msurij.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_xaeqdk.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_xaeqdk.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_xaeqdk.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_xaeqdk.href
  )) as lat_clientaerialrefuelling  from master_join master_join_ntlhgo
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_xaeqdk on master_join_ntlhgo.target_id = aerial_refuelling_aerialrefuelling_pt_xaeqdk.id
  where master_join_ntlhgo.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientaerialrefuelling on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_wzckes.*) as lat_clientroute
  from master_join master_join_wiukfz
  join routes.routeportion_view routes_routeportion_view_wzckes on master_join_wiukfz.target_id = routes_routeportion_view_wzckes.id
  where master_join_wiukfz.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientroute on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_view_glefij.*) as lat_availability
  from master_join master_join_sptzlc
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_view_glefij on master_join_sptzlc.target_id = airport_heliport_altimetersourcestatus_view_glefij.id
  where master_join_sptzlc.source_id = airport_heliport.altimetersource_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_teuebm.*) AS annotation
  from master_join master_join_wqwhir
  join notes.note_view notes_note_view_teuebm on master_join_wqwhir.target_id = notes_note_view_teuebm.id
  where master_join_wqwhir.source_id = airport_heliport.altimetersource_ts.id
) as lat_annotation on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_gvvzeo.title as varchar), '(' || navaids_points_designatedpoint_pt_gvvzeo.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_gvvzeo.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_zhswek.title as varchar), '(' || navaids_points_designatedpoint_pt_zhswek.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_zhswek.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jbthhd.title as varchar), '(' || navaids_points_navaid_pt_jbthhd.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jbthhd.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jpnpcy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jpnpcy.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_jpnpcy.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bwgqta.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bwgqta.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bwgqta.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lfpygn.title as varchar), '(' || airport_heliport_airportheliport_pt_lfpygn.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_lfpygn.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_uzmjay.geom AS pointchoiceposition_geom,
    geometry_point_view_uzmjay.longitude AS pointchoiceposition_longitude,
    geometry_point_view_uzmjay.latitude AS pointchoiceposition_latitude,
    geometry_point_view_uzmjay.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gvvzeo on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_gvvzeo.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zhswek on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zhswek.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jbthhd on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_jbthhd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jpnpcy on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jpnpcy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bwgqta on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bwgqta.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lfpygn on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_lfpygn.id
left join geometry.point_view geometry_point_view_uzmjay on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_uzmjay.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ojctjv.*) AS annotation
  from master_join master_join_rdegof
  join notes.note_view notes_note_view_ojctjv on master_join_rdegof.target_id = notes_note_view_ojctjv.id
  where master_join_rdegof.source_id = navaids_points.angleindication_ts.id
) as lat_annotation on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_opvxja.title as varchar), '(' || airport_heliport_runwaydirection_pt_opvxja.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_opvxja.href AS servedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_opvxja on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_opvxja.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_qyrglm.*) as lat_element
  from master_join master_join_adllkg
  join shared.lightelement_view shared_lightelement_view_qyrglm on master_join_adllkg.target_id = shared_lightelement_view_qyrglm.id
  where master_join_adllkg.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_twfymg.*) as lat_availability
  from master_join master_join_qjggnk
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_twfymg on master_join_qjggnk.target_id = airport_heliport_groundlightingavailability_view_twfymg.id
  where master_join_qjggnk.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ottrzm.*) AS annotation
  from master_join master_join_ftevde
  join notes.note_view notes_note_view_ottrzm on master_join_ftevde.target_id = notes_note_view_ottrzm.id
  where master_join_ftevde.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_vcuvlf.title as varchar), '(' || airport_heliport_apron_pt_vcuvlf.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_vcuvlf.href AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qxkxya.*) AS surfaceproperties,
    geometry_elevatedsurface_view_igxoxn.geom AS extent_geom,
    geometry_elevatedsurface_view_igxoxn.elevation AS extent_elevation,
    geometry_elevatedsurface_view_igxoxn.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_igxoxn.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_igxoxn.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_igxoxn.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_supplyservice.lat_supplyservice as supplyservice,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_vcuvlf on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_vcuvlf.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qxkxya on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qxkxya.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_igxoxn on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_igxoxn.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_pt_badkre.id,
      'title', coalesce(cast(service_airportsuppliesservice_pt_badkre.title AS varchar), '(' || service_airportsuppliesservice_pt_badkre.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_pt_badkre.href
  )) as lat_supplyservice  from master_join master_join_ytkmov
  join service.airportsuppliesservice_pt service_airportsuppliesservice_pt_badkre on master_join_ytkmov.target_id = service_airportsuppliesservice_pt_badkre.id
  where master_join_ytkmov.source_id = airport_heliport.apronelement_ts.id
) as lat_supplyservice on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ulajjr.*) AS annotation
  from master_join master_join_znypxc
  join notes.note_view notes_note_view_ulajjr on master_join_znypxc.target_id = notes_note_view_ulajjr.id
  where master_join_znypxc.source_id = airport_heliport.apronelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_mwmkkg.*) as lat_availability
  from master_join master_join_dxhseq
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_mwmkkg on master_join_dxhseq.target_id = airport_heliport_apronareaavailability_view_mwmkkg.id
  where master_join_dxhseq.source_id = airport_heliport.apronelement_ts.id
) as lat_availability on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_doxsrv.title as varchar), '(' || airport_heliport_apron_pt_doxsrv.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_doxsrv.href AS lightedapron_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_doxsrv on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_doxsrv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_yjlhas.*) as lat_element
  from master_join master_join_yrkddx
  join shared.lightelement_view shared_lightelement_view_yjlhas on master_join_yrkddx.target_id = shared_lightelement_view_yjlhas.id
  where master_join_yrkddx.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_vhayya.*) as lat_availability
  from master_join master_join_yoxqfi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_vhayya on master_join_yoxqfi.target_id = airport_heliport_groundlightingavailability_view_vhayya.id
  where master_join_yoxqfi.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_foifhq.*) AS annotation
  from master_join master_join_bxfwgw
  join notes.note_view notes_note_view_foifhq on master_join_bxfwgw.target_id = notes_note_view_foifhq.id
  where master_join_bxfwgw.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_vhrtph.title as varchar), '(' || airport_heliport_apron_pt_vhrtph.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_vhrtph.href AS markedapron_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_vhrtph on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_vhrtph.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_vtvyns.*) as lat_element
  from master_join master_join_qfehuq
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_vtvyns on master_join_qfehuq.target_id = airport_heliport_markingelement_view_vtvyns.id
  where master_join_qfehuq.source_id = airport_heliport.apronmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_odfqda.*) AS annotation
  from master_join master_join_cmebue
  join notes.note_view notes_note_view_odfqda on master_join_cmebue.target_id = notes_note_view_odfqda.id
  where master_join_cmebue.source_id = airport_heliport.apronmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fkgvfj.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_pqrugd.title as varchar), '(' || airport_heliport_airportheliport_pt_pqrugd.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_pqrugd.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fkgvfj on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fkgvfj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pqrugd on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_pqrugd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_view_ooqyeh.*) as lat_contaminant
  from master_join master_join_fkyyfq
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_view_ooqyeh on master_join_fkyyfq.target_id = airport_heliport_aproncontamination_view_ooqyeh.id
  where master_join_fkyyfq.source_id = airport_heliport.apron_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sddyuk.*) AS annotation
  from master_join master_join_ooeycu
  join notes.note_view notes_note_view_sddyuk on master_join_ooeycu.target_id = notes_note_view_sddyuk.id
  where master_join_ooeycu.source_id = airport_heliport.apron_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_tdoyis.*) as lat_availability
  from master_join master_join_jpnrsb
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_tdoyis on master_join_jpnrsb.target_id = airport_heliport_apronareaavailability_view_tdoyis.id
  where master_join_jpnrsb.source_id = airport_heliport.apron_ts.id
) as lat_availability on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_wlsrah.*) AS surfaceproperties,
    geometry_elevatedcurve_view_iiudzf.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_iiudzf.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_iiudzf.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_iiudzf.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_iiudzf.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_iiudzf.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_gbnzrv.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_gbnzrv.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_gbnzrv.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_gbnzrv.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_gbnzrv.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_gbnzrv.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_dhssrs.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_dhssrs.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_dhssrs.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_dhssrs.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_dhssrs.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_dhssrs.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_dhssrs.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_dhssrs.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_wlsrah on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_wlsrah.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_iiudzf on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_iiudzf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gbnzrv on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_gbnzrv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dhssrs on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_dhssrs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_yadbpx.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_yadbpx.title AS varchar), '(' || airport_heliport_runwaydirection_pt_yadbpx.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_yadbpx.href
  )) as lat_runwaydirection  from master_join master_join_dmadbw
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_yadbpx on master_join_dmadbw.target_id = airport_heliport_runwaydirection_pt_yadbpx.id
  where master_join_dmadbw.source_id = airport_heliport.arrestinggear_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wyggry.*) AS annotation
  from master_join master_join_afimtm
  join notes.note_view notes_note_view_wyggry on master_join_afimtm.target_id = notes_note_view_wyggry.id
  where master_join_afimtm.source_id = airport_heliport.arrestinggear_ts.id
) as lat_annotation on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ogaany.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_oprqav.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_suqzmj.*) AS arccentre,
    geometry_curve_view_bowoik.geom AS trajectory_geom,
    geometry_curve_view_bowoik.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_jxveaz.title as varchar), '(' || navaids_points_angleindication_pt_jxveaz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_jxveaz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tsltqr.title as varchar), '(' || navaids_points_distanceindication_pt_tsltqr.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_tsltqr.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_zaxaco.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_qaafie.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_qaafie.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_qaafie.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ogaany on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ogaany.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_oprqav on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_oprqav.id
left join geometry.curve_view geometry_curve_view_bowoik on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_bowoik.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_suqzmj on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_suqzmj.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_jxveaz on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_jxveaz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tsltqr on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_tsltqr.id
left join procedure.holdinguse_view procedure_holdinguse_view_zaxaco on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_zaxaco.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_qaafie on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_qaafie.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_wdcciy.*) as lat_aircraftcategory
  from master_join master_join_spycun
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_wdcciy on master_join_spycun.target_id = shared_aircraftcharacteristic_view_wdcciy.id
  where master_join_spycun.source_id = procedure.arrivalfeederleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_wyyluc.*) as lat_designsurface
  from master_join master_join_ztvwqs
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_wyyluc on master_join_ztvwqs.target_id = shared_obstacleassessmentarea_view_wyyluc.id
  where master_join_ztvwqs.source_id = procedure.arrivalfeederleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ystvmd.*) AS annotation
  from master_join master_join_extmut
  join notes.note_view notes_note_view_ystvmd on master_join_extmut.target_id = notes_note_view_ystvmd.id
  where master_join_extmut.source_id = procedure.arrivalfeederleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_efamsh.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_omzrgt.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fgiriu.*) AS arccentre,
    geometry_curve_view_ygrxpa.geom AS trajectory_geom,
    geometry_curve_view_ygrxpa.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_eulfco.title as varchar), '(' || navaids_points_angleindication_pt_eulfco.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_eulfco.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zuqlxj.title as varchar), '(' || navaids_points_distanceindication_pt_zuqlxj.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_zuqlxj.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_pstpqi.*) AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_lyhvti.title as varchar), '(' || procedure_standardinstrumentarrival_pt_lyhvti.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_lyhvti.href AS arrival_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_efamsh on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_efamsh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_omzrgt on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_omzrgt.id
left join geometry.curve_view geometry_curve_view_ygrxpa on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_ygrxpa.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fgiriu on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_fgiriu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_eulfco on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_eulfco.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zuqlxj on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_zuqlxj.id
left join procedure.holdinguse_view procedure_holdinguse_view_pstpqi on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_pstpqi.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_lyhvti on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_lyhvti.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_yqupwz.*) as lat_aircraftcategory
  from master_join master_join_mnfhje
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_yqupwz on master_join_mnfhje.target_id = shared_aircraftcharacteristic_view_yqupwz.id
  where master_join_mnfhje.source_id = procedure.arrivalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_oadbpk.*) as lat_designsurface
  from master_join master_join_wgetfi
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_oadbpk on master_join_wgetfi.target_id = shared_obstacleassessmentarea_view_oadbpk.id
  where master_join_wgetfi.source_id = procedure.arrivalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xcwvqt.*) AS annotation
  from master_join master_join_nuqvgc
  join notes.note_view notes_note_view_xcwvqt on master_join_nuqvgc.target_id = notes_note_view_xcwvqt.id
  where master_join_nuqvgc.source_id = procedure.arrivalleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_jriexu.title as varchar), '(' || organisation_organisationauthority_pt_jriexu.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_jriexu.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_gvktwr.title as varchar), '(' || airspace_airspace_pt_gvktwr.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_gvktwr.href AS assignedairspace_href,
    lat_annotation.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jriexu on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_jriexu.id
left join airspace.airspace_pt airspace_airspace_pt_gvktwr on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_gvktwr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hnirqt.*) AS annotation
  from master_join master_join_mvdjbg
  join notes.note_view notes_note_view_hnirqt on master_join_mvdjbg.target_id = notes_note_view_hnirqt.id
  where master_join_mvdjbg.source_id = airspace.authorityforairspace_ts.id
) as lat_annotation on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_indkur.geom AS location_geom,
    geometry_elevatedpoint_view_indkur.longitude AS location_longitude,
    geometry_elevatedpoint_view_indkur.latitude AS location_latitude,
    geometry_elevatedpoint_view_indkur.elevation AS location_elevation,
    geometry_elevatedpoint_view_indkur.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_indkur.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_indkur.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_indkur.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_indkur on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_indkur.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_jbpzyl.*) as lat_authority
  from master_join master_join_infops
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_jbpzyl on master_join_infops.target_id = navaids_points_authorityfornavaidequipment_view_jbpzyl.id
  where master_join_infops.source_id = navaids_points.azimuth_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_ffrnem.*) as lat_monitoring
  from master_join master_join_kyewcb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_ffrnem on master_join_kyewcb.target_id = navaids_points_navaidequipmentmonitoring_view_ffrnem.id
  where master_join_kyewcb.source_id = navaids_points.azimuth_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_kkwlzm.*) as lat_availability
  from master_join master_join_yawiup
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_kkwlzm on master_join_yawiup.target_id = navaids_points_navaidoperationalstatus_view_kkwlzm.id
  where master_join_yawiup.source_id = navaids_points.azimuth_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zgeeqp.*) AS annotation
  from master_join master_join_itptke
  join notes.note_view notes_note_view_zgeeqp on master_join_itptke.target_id = notes_note_view_zgeeqp.id
  where master_join_itptke.source_id = navaids_points.azimuth_ts.id
) as lat_annotation on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['geometry.point_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_lawobs.title as varchar), '(' || navaids_points_designatedpoint_pt_lawobs.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_lawobs.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zgtynj.title as varchar), '(' || navaids_points_navaid_pt_zgtynj.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_zgtynj.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tuvoca.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tuvoca.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_tuvoca.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mhoicg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mhoicg.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mhoicg.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gxqogi.title as varchar), '(' || airport_heliport_airportheliport_pt_gxqogi.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_gxqogi.href AS locationairportreferencepoint_href,
    geometry_point_view_vegyki.geom AS locationposition_geom,
    geometry_point_view_vegyki.longitude AS locationposition_longitude,
    geometry_point_view_vegyki.latitude AS locationposition_latitude,
    geometry_point_view_vegyki.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_abcdii.*) AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lawobs on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lawobs.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zgtynj on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_zgtynj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tuvoca on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tuvoca.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mhoicg on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mhoicg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gxqogi on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_gxqogi.id
left join geometry.point_view geometry_point_view_vegyki on routes.changeoverpoint_ts.location_position_id = geometry_point_view_vegyki.id
left join routes.routeportion_view routes_routeportion_view_abcdii on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_abcdii.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_moelfz.*) AS annotation
  from master_join master_join_txykyy
  join notes.note_view notes_note_view_moelfz on master_join_txykyy.target_id = notes_note_view_moelfz.id
  where master_join_txykyy.source_id = routes.changeoverpoint_ts.id
) as lat_annotation on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_gbosgc.geom AS position_geom,
    geometry_elevatedpoint_view_gbosgc.longitude AS position_longitude,
    geometry_elevatedpoint_view_gbosgc.latitude AS position_latitude,
    geometry_elevatedpoint_view_gbosgc.elevation AS position_elevation,
    geometry_elevatedpoint_view_gbosgc.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_gbosgc.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_gbosgc.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_gbosgc.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_ybeecy.title as varchar), '(' || airport_heliport_airportheliport_pt_ybeecy.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_ybeecy.href AS airportheliport_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gbosgc on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_gbosgc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ybeecy on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_ybeecy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sudspj.*) AS annotation
  from master_join master_join_ynfsbz
  join notes.note_view notes_note_view_sudspj on master_join_ynfsbz.target_id = notes_note_view_sudspj.id
  where master_join_ynfsbz.source_id = navaids_points.checkpointins_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_opebok.geom AS position_geom,
    geometry_elevatedpoint_view_opebok.longitude AS position_longitude,
    geometry_elevatedpoint_view_opebok.latitude AS position_latitude,
    geometry_elevatedpoint_view_opebok.elevation AS position_elevation,
    geometry_elevatedpoint_view_opebok.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_opebok.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_opebok.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_opebok.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_xobuiu.title as varchar), '(' || airport_heliport_airportheliport_pt_xobuiu.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_xobuiu.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_cyevbj.title as varchar), '(' || navaids_points_vor_pt_cyevbj.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_cyevbj.href AS checkpointfacility_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_opebok on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_opebok.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xobuiu on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_xobuiu.id
left join navaids_points.vor_pt navaids_points_vor_pt_cyevbj on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_cyevbj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mgxlzk.*) AS annotation
  from master_join master_join_onhgci
  join notes.note_view notes_note_view_mgxlzk on master_join_onhgci.target_id = notes_note_view_mgxlzk.id
  where master_join_onhgci.source_id = navaids_points.checkpointvor_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_cracqw.geom AS extent_geom,
    geometry_surface_view_cracqw.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zpazin.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zpazin.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_zpazin.href AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_efvdht.*) AS aircraftcategory,
    lat_condition.lat_condition as condition,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_cracqw on public.circlingarea_ts.extent_id = geometry_surface_view_cracqw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zpazin on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_zpazin.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_efvdht on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_efvdht.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_cyzltr.*) as lat_condition
  from master_join master_join_edwvvr
  join procedure.approachcondition_view procedure_approachcondition_view_cyzltr on master_join_edwvvr.target_id = procedure_approachcondition_view_cyzltr.id
  where master_join_edwvvr.source_id = public.circlingarea_ts.id
) as lat_condition on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_tjqecm.*) as lat_designsurface
  from master_join master_join_ikieot
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_tjqecm on master_join_ikieot.target_id = shared_obstacleassessmentarea_view_tjqecm.id
  where master_join_ikieot.source_id = public.circlingarea_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aracjo.*) AS annotation
  from master_join master_join_owvvcy
  join notes.note_view notes_note_view_aracjo on master_join_owvvcy.target_id = notes_note_view_aracjo.id
  where master_join_owvvcy.source_id = public.circlingarea_ts.id
) as lat_annotation on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_ziydil.title as varchar), '(' || airport_heliport_deicingarea_pt_ziydil.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_ziydil.href AS markeddeicingarea_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_ziydil on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_ziydil.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_mhsoum.*) as lat_element
  from master_join master_join_cbkiyh
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_mhsoum on master_join_cbkiyh.target_id = airport_heliport_markingelement_view_mhsoum.id
  where master_join_cbkiyh.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xkpzpa.*) AS annotation
  from master_join master_join_agqilh
  join notes.note_view notes_note_view_xkpzpa on master_join_agqilh.target_id = notes_note_view_xkpzpa.id
  where master_join_agqilh.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_hgseuo.title as varchar), '(' || airport_heliport_apron_pt_hgseuo.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_hgseuo.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_cmbxcy.title as varchar), '(' || airport_heliport_taxiway_pt_cmbxcy.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_cmbxcy.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_czyzjg.title as varchar), '(' || airport_heliport_aircraftstand_pt_czyzjg.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_czyzjg.href AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kgmrzz.*) AS surfaceproperties,
    geometry_elevatedsurface_view_vsrghv.geom AS extent_geom,
    geometry_elevatedsurface_view_vsrghv.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vsrghv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vsrghv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vsrghv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vsrghv.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_hgseuo on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_hgseuo.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_cmbxcy on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_cmbxcy.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_czyzjg on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_czyzjg.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kgmrzz on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kgmrzz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vsrghv on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_vsrghv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ijdocp.*) AS annotation
  from master_join master_join_kzfvpr
  join notes.note_view notes_note_view_ijdocp on master_join_kzfvpr.target_id = notes_note_view_ijdocp.id
  where master_join_kzfvpr.source_id = airport_heliport.deicingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_azimoy.*) as lat_availability
  from master_join master_join_krmdte
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_view_azimoy on master_join_krmdte.target_id = airport_heliport_apronareaavailability_view_azimoy.id
  where master_join_krmdte.source_id = airport_heliport.deicingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.departurearrivalcondition_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tduwfh.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kosvhb.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bxvozs.*) AS arccentre,
    geometry_curve_view_gjqnwi.geom AS trajectory_geom,
    geometry_curve_view_gjqnwi.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_gxqxdn.title as varchar), '(' || navaids_points_angleindication_pt_gxqxdn.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_gxqxdn.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_mppops.title as varchar), '(' || navaids_points_distanceindication_pt_mppops.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_mppops.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_iaqhzj.*) AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_cufzpy.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_cufzpy.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_cufzpy.href AS departure_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tduwfh on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_tduwfh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kosvhb on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_kosvhb.id
left join geometry.curve_view geometry_curve_view_gjqnwi on procedure.departureleg_ts.trajectory_id = geometry_curve_view_gjqnwi.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bxvozs on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_bxvozs.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_gxqxdn on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_gxqxdn.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_mppops on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_mppops.id
left join procedure.holdinguse_view procedure_holdinguse_view_iaqhzj on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_iaqhzj.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_cufzpy on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_cufzpy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_nxnnoj.*) as lat_aircraftcategory
  from master_join master_join_sofqlb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_nxnnoj on master_join_sofqlb.target_id = shared_aircraftcharacteristic_view_nxnnoj.id
  where master_join_sofqlb.source_id = procedure.departureleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_hwpcqt.*) as lat_designsurface
  from master_join master_join_geqlmo
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_hwpcqt on master_join_geqlmo.target_id = shared_obstacleassessmentarea_view_hwpcqt.id
  where master_join_geqlmo.source_id = procedure.departureleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ujnhxi.*) AS annotation
  from master_join master_join_xvadgi
  join notes.note_view notes_note_view_ujnhxi on master_join_xvadgi.target_id = notes_note_view_ujnhxi.id
  where master_join_xvadgi.source_id = procedure.departureleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_view_sypffd.*) as lat_condition
  from master_join master_join_jxmovk
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_view_sypffd on master_join_jxmovk.target_id = procedure_departurearrivalcondition_view_sypffd.id
  where master_join_jxmovk.source_id = procedure.departureleg_ts.id
) as lat_condition on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_lruhjg.geom AS location_geom,
    geometry_point_view_lruhjg.longitude AS location_longitude,
    geometry_point_view_lruhjg.latitude AS location_latitude,
    geometry_point_view_lruhjg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nfnrrw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nfnrrw.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_nfnrrw.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bmqrpw.title as varchar), '(' || airport_heliport_airportheliport_pt_bmqrpw.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_bmqrpw.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_gmrwah.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_gmrwah.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_gmrwah.href AS runwaypoint_href,
    lat_annotation.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_lruhjg on navaids_points.designatedpoint_ts.location_id = geometry_point_view_lruhjg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nfnrrw on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_nfnrrw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bmqrpw on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_bmqrpw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_gmrwah on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_gmrwah.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iqkjzc.*) AS annotation
  from master_join master_join_qmwlsj
  join notes.note_view notes_note_view_iqkjzc on master_join_qmwlsj.target_id = notes_note_view_iqkjzc.id
  where master_join_qmwlsj.source_id = navaids_points.designatedpoint_ts.id
) as lat_annotation on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_dxnoqc.geom AS location_geom,
    geometry_elevatedpoint_view_dxnoqc.longitude AS location_longitude,
    geometry_elevatedpoint_view_dxnoqc.latitude AS location_latitude,
    geometry_elevatedpoint_view_dxnoqc.elevation AS location_elevation,
    geometry_elevatedpoint_view_dxnoqc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dxnoqc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dxnoqc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dxnoqc.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_informationprovision.lat_informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dxnoqc on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_dxnoqc.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_awcecy.*) as lat_authority
  from master_join master_join_glmzjr
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_awcecy on master_join_glmzjr.target_id = navaids_points_authorityfornavaidequipment_view_awcecy.id
  where master_join_glmzjr.source_id = navaids_points.directionfinder_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_efegpf.*) as lat_monitoring
  from master_join master_join_ngfqoo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_efegpf on master_join_ngfqoo.target_id = navaids_points_navaidequipmentmonitoring_view_efegpf.id
  where master_join_ngfqoo.source_id = navaids_points.directionfinder_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ebfhew.*) as lat_availability
  from master_join master_join_cybwfx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ebfhew on master_join_cybwfx.target_id = navaids_points_navaidoperationalstatus_view_ebfhew.id
  where master_join_cybwfx.source_id = navaids_points.directionfinder_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_idwxrf.*) AS annotation
  from master_join master_join_jrjvpy
  join notes.note_view notes_note_view_idwxrf on master_join_jrjvpy.target_id = notes_note_view_idwxrf.id
  where master_join_jrjvpy.source_id = navaids_points.directionfinder_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_pt_pnuyln.id,
      'title', coalesce(cast(service_informationservice_pt_pnuyln.title AS varchar), '(' || service_informationservice_pt_pnuyln.nilreason[1] || ')'),
      'href', service_informationservice_pt_pnuyln.href
  )) as lat_informationprovision  from master_join master_join_gkzkez
  join service.informationservice_pt service_informationservice_pt_pnuyln on master_join_gkzkez.target_id = service_informationservice_pt_pnuyln.id
  where master_join_gkzkez.source_id = navaids_points.directionfinder_ts.id
) as lat_informationprovision on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_eavghc.title as varchar), '(' || navaids_points_designatedpoint_pt_eavghc.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_eavghc.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jwdjht.title as varchar), '(' || navaids_points_designatedpoint_pt_jwdjht.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_jwdjht.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_acwsgy.title as varchar), '(' || navaids_points_navaid_pt_acwsgy.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_acwsgy.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uemlta.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uemlta.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_uemlta.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xpjnga.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xpjnga.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xpjnga.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dxtldx.title as varchar), '(' || airport_heliport_airportheliport_pt_dxtldx.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_dxtldx.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_qkrauj.geom AS pointchoiceposition_geom,
    geometry_point_view_qkrauj.longitude AS pointchoiceposition_longitude,
    geometry_point_view_qkrauj.latitude AS pointchoiceposition_latitude,
    geometry_point_view_qkrauj.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_eavghc on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_eavghc.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jwdjht on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jwdjht.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_acwsgy on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_acwsgy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uemlta on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_uemlta.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xpjnga on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xpjnga.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dxtldx on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_dxtldx.id
left join geometry.point_view geometry_point_view_qkrauj on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_qkrauj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uttdtd.*) AS annotation
  from master_join master_join_boslso
  join notes.note_view notes_note_view_uttdtd on master_join_boslso.target_id = notes_note_view_uttdtd.id
  where master_join_boslso.source_id = navaids_points.distanceindication_ts.id
) as lat_annotation on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_ooirnb.geom AS location_geom,
    geometry_elevatedpoint_view_ooirnb.longitude AS location_longitude,
    geometry_elevatedpoint_view_ooirnb.latitude AS location_latitude,
    geometry_elevatedpoint_view_ooirnb.elevation AS location_elevation,
    geometry_elevatedpoint_view_ooirnb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ooirnb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ooirnb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ooirnb.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ooirnb on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_ooirnb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_cypfjf.*) as lat_authority
  from master_join master_join_comyop
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_cypfjf on master_join_comyop.target_id = navaids_points_authorityfornavaidequipment_view_cypfjf.id
  where master_join_comyop.source_id = navaids_points.dme_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_gpovxk.*) as lat_monitoring
  from master_join master_join_yrykwo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_gpovxk on master_join_yrykwo.target_id = navaids_points_navaidequipmentmonitoring_view_gpovxk.id
  where master_join_yrykwo.source_id = navaids_points.dme_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_eghbyt.*) as lat_availability
  from master_join master_join_ewkipy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_eghbyt on master_join_ewkipy.target_id = navaids_points_navaidoperationalstatus_view_eghbyt.id
  where master_join_ewkipy.source_id = navaids_points.dme_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_easwoe.*) AS annotation
  from master_join master_join_kajhhx
  join notes.note_view notes_note_view_easwoe on master_join_kajhhx.target_id = notes_note_view_easwoe.id
  where master_join_kajhhx.source_id = navaids_points.dme_ts.id
) as lat_annotation on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_xaenhw.geom AS location_geom,
    geometry_elevatedpoint_view_xaenhw.longitude AS location_longitude,
    geometry_elevatedpoint_view_xaenhw.latitude AS location_latitude,
    geometry_elevatedpoint_view_xaenhw.elevation AS location_elevation,
    geometry_elevatedpoint_view_xaenhw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xaenhw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xaenhw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xaenhw.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xaenhw on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_xaenhw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_seurlo.*) as lat_authority
  from master_join master_join_eumdzd
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_seurlo on master_join_eumdzd.target_id = navaids_points_authorityfornavaidequipment_view_seurlo.id
  where master_join_eumdzd.source_id = navaids_points.elevation_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_ccqoaq.*) as lat_monitoring
  from master_join master_join_zkcmjp
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_ccqoaq on master_join_zkcmjp.target_id = navaids_points_navaidequipmentmonitoring_view_ccqoaq.id
  where master_join_zkcmjp.source_id = navaids_points.elevation_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ntmkra.*) as lat_availability
  from master_join master_join_fmsjim
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ntmkra on master_join_fmsjim.target_id = navaids_points_navaidoperationalstatus_view_ntmkra.id
  where master_join_fmsjim.source_id = navaids_points.elevation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wmglzy.*) AS annotation
  from master_join master_join_rnspir
  join notes.note_view notes_note_view_wmglzy on master_join_rnspir.target_id = notes_note_view_wmglzy.id
  where master_join_rnspir.source_id = navaids_points.elevation_ts.id
) as lat_annotation on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view', 'public.fasdatablock_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.point_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ywwpme.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dpyuth.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_uyjrua.*) AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_aqdgvf.*) AS visualdescentpoint,
    geometry_curve_view_zrcrst.geom AS trajectory_geom,
    geometry_curve_view_zrcrst.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_iqpupe.title as varchar), '(' || navaids_points_angleindication_pt_iqpupe.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_iqpupe.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_vivjhz.title as varchar), '(' || navaids_points_distanceindication_pt_vivjhz.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_vivjhz.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_mrlhhf.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_mcqaqt.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_mcqaqt.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_mcqaqt.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bajbub.title as varchar), '(' || navaids_points_designatedpoint_pt_bajbub.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bajbub.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zpvjok.title as varchar), '(' || navaids_points_navaid_pt_zpvjok.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_zpvjok.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tcfknn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tcfknn.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_tcfknn.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fiovfw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fiovfw.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fiovfw.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_woyyfe.title as varchar), '(' || airport_heliport_airportheliport_pt_woyyfe.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_woyyfe.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_jnyytp.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_jnyytp.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_jnyytp.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_jnyytp.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_ytimed.*) AS fasdata,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ywwpme on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ywwpme.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dpyuth on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_dpyuth.id
left join geometry.curve_view geometry_curve_view_zrcrst on procedure.finalleg_ts.trajectory_id = geometry_curve_view_zrcrst.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_uyjrua on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_uyjrua.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_iqpupe on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_iqpupe.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_vivjhz on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_vivjhz.id
left join procedure.holdinguse_view procedure_holdinguse_view_mrlhhf on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_mrlhhf.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_mcqaqt on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_mcqaqt.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bajbub on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bajbub.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zpvjok on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_zpvjok.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tcfknn on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tcfknn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fiovfw on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fiovfw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_woyyfe on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_woyyfe.id
left join geometry.point_view geometry_point_view_jnyytp on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_jnyytp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_aqdgvf on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_aqdgvf.id
left join public.fasdatablock_view public_fasdatablock_view_ytimed on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_ytimed.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_rkkfqk.*) as lat_aircraftcategory
  from master_join master_join_mmynlk
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_rkkfqk on master_join_mmynlk.target_id = shared_aircraftcharacteristic_view_rkkfqk.id
  where master_join_mmynlk.source_id = procedure.finalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_thvwve.*) as lat_designsurface
  from master_join master_join_puwzkf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_thvwve on master_join_puwzkf.target_id = shared_obstacleassessmentarea_view_thvwve.id
  where master_join_puwzkf.source_id = procedure.finalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ifysln.*) AS annotation
  from master_join master_join_iwjjno
  join notes.note_view notes_note_view_ifysln on master_join_iwjjno.target_id = notes_note_view_ifysln.id
  where master_join_iwjjno.source_id = procedure.finalleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_cgswgy.*) as lat_condition
  from master_join master_join_msqfgh
  join procedure.approachcondition_view procedure_approachcondition_view_cgswgy on master_join_msqfgh.target_id = procedure_approachcondition_view_cgswgy.id
  where master_join_msqfgh.source_id = procedure.finalleg_ts.id
) as lat_condition on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_epkjgj.geom AS location_geom,
    geometry_elevatedpoint_view_epkjgj.longitude AS location_longitude,
    geometry_elevatedpoint_view_epkjgj.latitude AS location_latitude,
    geometry_elevatedpoint_view_epkjgj.elevation AS location_elevation,
    geometry_elevatedpoint_view_epkjgj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_epkjgj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_epkjgj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_epkjgj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_nynhdl.title as varchar), '(' || organisation_unit_pt_nynhdl.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_nynhdl.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_epkjgj on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_epkjgj.id
left join organisation.unit_pt organisation_unit_pt_nynhdl on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_nynhdl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_vqpvmr.*) as lat_callsign
  from master_join master_join_vxkryv
  join service.callsigndetail_view service_callsigndetail_view_vqpvmr on master_join_vxkryv.target_id = service_callsigndetail_view_vqpvmr.id
  where master_join_vxkryv.source_id = service.firefightingservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_wtkfod.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_wtkfod.title AS varchar), '(' || service_radiocommunicationchannel_pt_wtkfod.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_wtkfod.href
  )) as lat_radiocommunication  from master_join master_join_lrfzvf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_wtkfod on master_join_lrfzvf.target_id = service_radiocommunicationchannel_pt_wtkfod.id
  where master_join_lrfzvf.source_id = service.firefightingservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_vnocxp
  join shared.contactinformation_view shared_contactinformation_view_bpimlk on master_join_vnocxp.target_id = shared_contactinformation_view_bpimlk.id
  where master_join_vnocxp.source_id = service.firefightingservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_iucqnh.*) as lat_availability
  from master_join master_join_inyqcu
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_iucqnh on master_join_inyqcu.target_id = service_serviceoperationalstatus_view_iucqnh.id
  where master_join_inyqcu.source_id = service.firefightingservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vrksde.*) AS annotation
  from master_join master_join_mymcui
  join notes.note_view notes_note_view_vrksde on master_join_mymcui.target_id = notes_note_view_vrksde.id
  where master_join_mymcui.source_id = service.firefightingservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_rqzpxb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_rqzpxb.title AS varchar), '(' || airport_heliport_airportheliport_pt_rqzpxb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_rqzpxb.href
  )) as lat_airportheliport  from master_join master_join_nrfxty
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rqzpxb on master_join_nrfxty.target_id = airport_heliport_airportheliport_pt_rqzpxb.id
  where master_join_nrfxty.source_id = service.firefightingservice_ts.id
) as lat_airportheliport on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightconditioncombination_view', 'notes.note_view', 'routes.flightrestrictionroute_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    to_jsonb(routes_flightconditioncombination_view_vlxyzc.*) AS flight,
    lat_regulatedroute.lat_regulatedroute as regulatedroute,
    lat_annotation.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_vlxyzc on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_vlxyzc.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_view_lsiuja.*) as lat_regulatedroute
  from master_join master_join_sxtkmg
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_view_lsiuja on master_join_sxtkmg.target_id = routes_flightrestrictionroute_view_lsiuja.id
  where master_join_sxtkmg.source_id = routes.flightrestriction_ts.id
) as lat_regulatedroute on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lhrdmd.*) AS annotation
  from master_join master_join_aadgjk
  join notes.note_view notes_note_view_lhrdmd on master_join_aadgjk.target_id = notes_note_view_lhrdmd.id
  where master_join_aadgjk.source_id = routes.flightrestriction_ts.id
) as lat_annotation on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_uxwmud.geom AS extent_geom,
    geometry_elevatedsurface_view_uxwmud.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uxwmud.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uxwmud.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uxwmud.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uxwmud.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uxwmud on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_uxwmud.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ftkwzs.*) AS annotation
  from master_join master_join_qnzxqh
  join notes.note_view notes_note_view_ftkwzs on master_join_qnzxqh.target_id = notes_note_view_ftkwzs.id
  where master_join_qnzxqh.source_id = airport_heliport.floatingdocksite_ts.id
) as lat_annotation on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_tjtuud.geom AS border_geom,
    geometry_curve_view_tjtuud.horizontalAccuracy as border_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_tjtuud on airspace.geoborder_ts.border_id = geometry_curve_view_tjtuud.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_huxvgu.*) AS annotation
  from master_join master_join_xhmfqh
  join notes.note_view notes_note_view_huxvgu on master_join_xhmfqh.target_id = notes_note_view_huxvgu.id
  where master_join_xhmfqh.source_id = airspace.geoborder_ts.id
) as lat_annotation on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_lylbhp.geom AS location_geom,
    geometry_elevatedpoint_view_lylbhp.longitude AS location_longitude,
    geometry_elevatedpoint_view_lylbhp.latitude AS location_latitude,
    geometry_elevatedpoint_view_lylbhp.elevation AS location_elevation,
    geometry_elevatedpoint_view_lylbhp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lylbhp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lylbhp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lylbhp.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lylbhp on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_lylbhp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_lgyene.*) as lat_authority
  from master_join master_join_glmbxo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_lgyene on master_join_glmbxo.target_id = navaids_points_authorityfornavaidequipment_view_lgyene.id
  where master_join_glmbxo.source_id = navaids_points.glidepath_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_bwbhht.*) as lat_monitoring
  from master_join master_join_ihkfpl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_bwbhht on master_join_ihkfpl.target_id = navaids_points_navaidequipmentmonitoring_view_bwbhht.id
  where master_join_ihkfpl.source_id = navaids_points.glidepath_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_qmagpj.*) as lat_availability
  from master_join master_join_cmooej
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_qmagpj on master_join_cmooej.target_id = navaids_points_navaidoperationalstatus_view_qmagpj.id
  where master_join_cmooej.source_id = navaids_points.glidepath_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rneqwe.*) AS annotation
  from master_join master_join_xrmncz
  join notes.note_view notes_note_view_rneqwe on master_join_xrmncz.target_id = notes_note_view_rneqwe.id
  where master_join_xrmncz.source_id = navaids_points.glidepath_ts.id
) as lat_annotation on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_caxkeb.geom AS location_geom,
    geometry_elevatedpoint_view_caxkeb.longitude AS location_longitude,
    geometry_elevatedpoint_view_caxkeb.latitude AS location_latitude,
    geometry_elevatedpoint_view_caxkeb.elevation AS location_elevation,
    geometry_elevatedpoint_view_caxkeb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_caxkeb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_caxkeb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_caxkeb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_sjoxfq.title as varchar), '(' || organisation_unit_pt_sjoxfq.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_sjoxfq.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_iumamw.title as varchar), '(' || airport_heliport_airportheliport_pt_iumamw.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_iumamw.href AS clientairport_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_caxkeb on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_caxkeb.id
left join organisation.unit_pt organisation_unit_pt_sjoxfq on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_sjoxfq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iumamw on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_iumamw.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_egjzgf.*) as lat_callsign
  from master_join master_join_kkoapi
  join service.callsigndetail_view service_callsigndetail_view_egjzgf on master_join_kkoapi.target_id = service_callsigndetail_view_egjzgf.id
  where master_join_kkoapi.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_mpgeff.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_mpgeff.title AS varchar), '(' || service_radiocommunicationchannel_pt_mpgeff.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_mpgeff.href
  )) as lat_radiocommunication  from master_join master_join_altips
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_mpgeff on master_join_altips.target_id = service_radiocommunicationchannel_pt_mpgeff.id
  where master_join_altips.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_zyyqxf
  join shared.contactinformation_view shared_contactinformation_view_dpfkvg on master_join_zyyqxf.target_id = shared_contactinformation_view_dpfkvg.id
  where master_join_zyyqxf.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_itybgu.*) as lat_availability
  from master_join master_join_dzsiuw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_itybgu on master_join_dzsiuw.target_id = service_serviceoperationalstatus_view_itybgu.id
  where master_join_dzsiuw.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ftnrdq.*) AS annotation
  from master_join master_join_xiwlzp
  join notes.note_view notes_note_view_ftnrdq on master_join_xiwlzp.target_id = notes_note_view_ftnrdq.id
  where master_join_xiwlzp.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_kyojbn.title as varchar), '(' || airport_heliport_guidanceline_pt_kyojbn.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_kyojbn.href AS lightedguidanceline_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_kyojbn on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_kyojbn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_gfhfil.*) as lat_element
  from master_join master_join_yzgsnt
  join shared.lightelement_view shared_lightelement_view_gfhfil on master_join_yzgsnt.target_id = shared_lightelement_view_gfhfil.id
  where master_join_yzgsnt.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_wnumgb.*) as lat_availability
  from master_join master_join_dznihp
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_wnumgb on master_join_dznihp.target_id = airport_heliport_groundlightingavailability_view_wnumgb.id
  where master_join_dznihp.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_czygtd.*) AS annotation
  from master_join master_join_ikqmar
  join notes.note_view notes_note_view_czygtd on master_join_ikqmar.target_id = notes_note_view_czygtd.id
  where master_join_ikqmar.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_luaerk.title as varchar), '(' || airport_heliport_guidanceline_pt_luaerk.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_luaerk.href AS markedguidanceline_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_luaerk on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_luaerk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_bgoirx.*) as lat_element
  from master_join master_join_dyncbp
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_bgoirx on master_join_dyncbp.target_id = airport_heliport_markingelement_view_bgoirx.id
  where master_join_dyncbp.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zefeyu.*) AS annotation
  from master_join master_join_hjfjaq
  join notes.note_view notes_note_view_zefeyu on master_join_hjfjaq.target_id = notes_note_view_zefeyu.id
  where master_join_hjfjaq.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_vdupeo.geom AS extent_geom,
    geometry_elevatedcurve_view_vdupeo.elevation AS extent_elevation,
    geometry_elevatedcurve_view_vdupeo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_vdupeo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_vdupeo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_vdupeo.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_connectedtouchdownliftoff.lat_connectedtouchdownliftoff as connectedtouchdownliftoff,
    lat_connectedrunwaycentrelinepoint.lat_connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    lat_connectedapron.lat_connectedapron as connectedapron,
    lat_connectedstand.lat_connectedstand as connectedstand,
    lat_connectedtaxiway.lat_connectedtaxiway as connectedtaxiway,
    lat_annotation.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_vdupeo on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_vdupeo.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_rzndhw.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_rzndhw.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_rzndhw.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_rzndhw.href
  )) as lat_connectedtouchdownliftoff  from master_join master_join_yoxlnw
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rzndhw on master_join_yoxlnw.target_id = airport_heliport_touchdownliftoff_pt_rzndhw.id
  where master_join_yoxlnw.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtouchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_pt_qbkbzy.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qbkbzy.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qbkbzy.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_pt_qbkbzy.href
  )) as lat_connectedrunwaycentrelinepoint  from master_join master_join_heeqet
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qbkbzy on master_join_heeqet.target_id = airport_heliport_runwaycentrelinepoint_pt_qbkbzy.id
  where master_join_heeqet.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedrunwaycentrelinepoint on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_pt_gsktyf.id,
      'title', coalesce(cast(airport_heliport_apron_pt_gsktyf.title AS varchar), '(' || airport_heliport_apron_pt_gsktyf.nilreason[1] || ')'),
      'href', airport_heliport_apron_pt_gsktyf.href
  )) as lat_connectedapron  from master_join master_join_objfdd
  join airport_heliport.apron_pt airport_heliport_apron_pt_gsktyf on master_join_objfdd.target_id = airport_heliport_apron_pt_gsktyf.id
  where master_join_objfdd.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedapron on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_pqctas.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_pqctas.title AS varchar), '(' || airport_heliport_aircraftstand_pt_pqctas.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_pqctas.href
  )) as lat_connectedstand  from master_join master_join_ncfszr
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_pqctas on master_join_ncfszr.target_id = airport_heliport_aircraftstand_pt_pqctas.id
  where master_join_ncfszr.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedstand on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_pt_twcuel.id,
      'title', coalesce(cast(airport_heliport_taxiway_pt_twcuel.title AS varchar), '(' || airport_heliport_taxiway_pt_twcuel.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_pt_twcuel.href
  )) as lat_connectedtaxiway  from master_join master_join_xvgdld
  join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_twcuel on master_join_xvgdld.target_id = airport_heliport_taxiway_pt_twcuel.id
  where master_join_xvgdld.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtaxiway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vmzthe.*) AS annotation
  from master_join master_join_mouasi
  join notes.note_view notes_note_view_vmzthe on master_join_mouasi.target_id = notes_note_view_vmzthe.id
  where master_join_mouasi.source_id = airport_heliport.guidanceline_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_yxofhf.title as varchar), '(' || holding_unplannedholding_pt_yxofhf.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_yxofhf.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_oakyfn.title as varchar), '(' || holding_holdingpattern_pt_oakyfn.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_oakyfn.href AS assessedholdingpattern_href,
    lat_obstacleassessment.lat_obstacleassessment as obstacleassessment,
    lat_annotation.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_yxofhf on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_yxofhf.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_oakyfn on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_oakyfn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_qhkerf.*) as lat_obstacleassessment
  from master_join master_join_ccnpol
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_qhkerf on master_join_ccnpol.target_id = shared_obstacleassessmentarea_view_qhkerf.id
  where master_join_ccnpol.source_id = shared.holdingassessment_ts.id
) as lat_obstacleassessment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmwwmt.*) AS annotation
  from master_join master_join_qgvapf
  join notes.note_view notes_note_view_nmwwmt on master_join_qgvapf.target_id = notes_note_view_nmwwmt.id
  where master_join_qgvapf.source_id = shared.holdingassessment_ts.id
) as lat_annotation on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatterndistance_view', 'holding.holdingpatternduration_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_jvimzs.*) AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_rzzolw.*) AS outboundlegspanenddistance,
    geometry_curve_view_rbhywu.geom AS extent_geom,
    geometry_curve_view_rbhywu.horizontalAccuracy as extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_jvimzs on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_jvimzs.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_rzzolw on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_rzzolw.id
left join geometry.curve_view geometry_curve_view_rbhywu on holding.holdingpattern_ts.extent_id = geometry_curve_view_rbhywu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rwamkc.*) AS annotation
  from master_join master_join_cgnspr
  join notes.note_view notes_note_view_rwamkc on master_join_cgnspr.target_id = notes_note_view_rwamkc.id
  where master_join_cgnspr.source_id = holding.holdingpattern_ts.id
) as lat_annotation on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_vrgxrg.geom AS location_geom,
    geometry_elevatedpoint_view_vrgxrg.longitude AS location_longitude,
    geometry_elevatedpoint_view_vrgxrg.latitude AS location_latitude,
    geometry_elevatedpoint_view_vrgxrg.elevation AS location_elevation,
    geometry_elevatedpoint_view_vrgxrg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vrgxrg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vrgxrg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vrgxrg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_oxklai.title as varchar), '(' || organisation_unit_pt_oxklai.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_oxklai.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_navaidbroadcast.lat_navaidbroadcast as navaidbroadcast,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vrgxrg on service.informationservice_ts.location_id = geometry_elevatedpoint_view_vrgxrg.id
left join organisation.unit_pt organisation_unit_pt_oxklai on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_oxklai.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_ybmalt.*) as lat_callsign
  from master_join master_join_pcdcte
  join service.callsigndetail_view service_callsigndetail_view_ybmalt on master_join_pcdcte.target_id = service_callsigndetail_view_ybmalt.id
  where master_join_pcdcte.source_id = service.informationservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_dkynrq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_dkynrq.title AS varchar), '(' || service_radiocommunicationchannel_pt_dkynrq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_dkynrq.href
  )) as lat_radiocommunication  from master_join master_join_vwvbjh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_dkynrq on master_join_vwvbjh.target_id = service_radiocommunicationchannel_pt_dkynrq.id
  where master_join_vwvbjh.source_id = service.informationservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_vtahuy
  join shared.contactinformation_view shared_contactinformation_view_nkbbbp on master_join_vtahuy.target_id = shared_contactinformation_view_nkbbbp.id
  where master_join_vtahuy.source_id = service.informationservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_nieawr.*) as lat_availability
  from master_join master_join_prtmzw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_nieawr on master_join_prtmzw.target_id = service_serviceoperationalstatus_view_nieawr.id
  where master_join_prtmzw.source_id = service.informationservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mduwga.*) AS annotation
  from master_join master_join_cnbloq
  join notes.note_view notes_note_view_mduwga on master_join_cnbloq.target_id = notes_note_view_mduwga.id
  where master_join_cnbloq.source_id = service.informationservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_pt_pbaghb.id,
      'title', coalesce(cast(navaids_points_vor_pt_pbaghb.title AS varchar), '(' || navaids_points_vor_pt_pbaghb.nilreason[1] || ')'),
      'href', navaids_points_vor_pt_pbaghb.href
  )) as lat_navaidbroadcast  from master_join master_join_gpgnmx
  join navaids_points.vor_pt navaids_points_vor_pt_pbaghb on master_join_gpgnmx.target_id = navaids_points_vor_pt_pbaghb.id
  where master_join_gpgnmx.source_id = service.informationservice_ts.id
) as lat_navaidbroadcast on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_rjoxqw.id,
      'title', coalesce(cast(airspace_airspace_pt_rjoxqw.title AS varchar), '(' || airspace_airspace_pt_rjoxqw.nilreason[1] || ')'),
      'href', airspace_airspace_pt_rjoxqw.href
  )) as lat_clientairspace  from master_join master_join_bpocyh
  join airspace.airspace_pt airspace_airspace_pt_rjoxqw on master_join_bpocyh.target_id = airspace_airspace_pt_rjoxqw.id
  where master_join_bpocyh.source_id = service.informationservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_ojfmuu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_ojfmuu.title AS varchar), '(' || airport_heliport_airportheliport_pt_ojfmuu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_ojfmuu.href
  )) as lat_clientairport  from master_join master_join_jryqtr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ojfmuu on master_join_jryqtr.target_id = airport_heliport_airportheliport_pt_ojfmuu.id
  where master_join_jryqtr.source_id = service.informationservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_ykzwzz.*) as lat_clientroute
  from master_join master_join_ntznfu
  join routes.routeportion_view routes_routeportion_view_ykzwzz on master_join_ntznfu.target_id = routes_routeportion_view_ykzwzz.id
  where master_join_ntznfu.source_id = service.informationservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_nyplaw.id,
      'title', coalesce(cast(holding_holdingpattern_pt_nyplaw.title AS varchar), '(' || holding_holdingpattern_pt_nyplaw.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_nyplaw.href
  )) as lat_clientholding  from master_join master_join_mgketv
  join holding.holdingpattern_pt holding_holdingpattern_pt_nyplaw on master_join_mgketv.target_id = holding_holdingpattern_pt_nyplaw.id
  where master_join_mgketv.source_id = service.informationservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_hpcywl.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_hpcywl.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_hpcywl.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_hpcywl.href
  )) as lat_clientaerialrefuelling  from master_join master_join_shwdhw
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_hpcywl on master_join_shwdhw.target_id = aerial_refuelling_aerialrefuelling_pt_hpcywl.id
  where master_join_shwdhw.source_id = service.informationservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vrtvuh.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eflgpa.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_clcddu.*) AS arccentre,
    geometry_curve_view_bhnugw.geom AS trajectory_geom,
    geometry_curve_view_bhnugw.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_eogest.title as varchar), '(' || navaids_points_angleindication_pt_eogest.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_eogest.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_qrrdfa.title as varchar), '(' || navaids_points_distanceindication_pt_qrrdfa.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_qrrdfa.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_ajlxzw.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_yurrwg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_yurrwg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_yurrwg.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vrtvuh on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vrtvuh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eflgpa on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_eflgpa.id
left join geometry.curve_view geometry_curve_view_bhnugw on procedure.initialleg_ts.trajectory_id = geometry_curve_view_bhnugw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_clcddu on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_clcddu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_eogest on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_eogest.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_qrrdfa on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_qrrdfa.id
left join procedure.holdinguse_view procedure_holdinguse_view_ajlxzw on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_ajlxzw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_yurrwg on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_yurrwg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_ebmrid.*) as lat_aircraftcategory
  from master_join master_join_cenebi
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_ebmrid on master_join_cenebi.target_id = shared_aircraftcharacteristic_view_ebmrid.id
  where master_join_cenebi.source_id = procedure.initialleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_loqlkc.*) as lat_designsurface
  from master_join master_join_ydjhbf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_loqlkc on master_join_ydjhbf.target_id = shared_obstacleassessmentarea_view_loqlkc.id
  where master_join_ydjhbf.source_id = procedure.initialleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wykiri.*) AS annotation
  from master_join master_join_hrrzut
  join notes.note_view notes_note_view_wykiri on master_join_hrrzut.target_id = notes_note_view_wykiri.id
  where master_join_hrrzut.source_id = procedure.initialleg_ts.id
) as lat_annotation on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.missedapproachgroup_view', 'procedure.proceduretransition_view', 'procedure.finalprofile_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'notes.note_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_ruebde.title as varchar), '(' || navaids_points_navaid_pt_ruebde.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ruebde.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qhwcww.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qhwcww.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qhwcww.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_opvgqn.title as varchar), '(' || surveillance_radarsystem_pt_opvgqn.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_opvgqn.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_fnyrzy.title as varchar), '(' || procedure_safealtitudearea_pt_fnyrzy.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_fnyrzy.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_hnzwpm.*) AS landing,
    to_jsonb(procedure_finalprofile_view_uevqay.*) AS finalprofile,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation,
    lat_missedinstruction.lat_missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ruebde on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ruebde.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qhwcww on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qhwcww.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_opvgqn on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_opvgqn.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_fnyrzy on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_fnyrzy.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_hnzwpm on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_hnzwpm.id
left join procedure.finalprofile_view procedure_finalprofile_view_uevqay on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_uevqay.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_fhwukk.*) as lat_availability
  from master_join master_join_dxupmz
  join procedure.procedureavailability_view procedure_procedureavailability_view_fhwukk on master_join_dxupmz.target_id = procedure_procedureavailability_view_fhwukk.id
  where master_join_dxupmz.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_bvmlmf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_bvmlmf.title AS varchar), '(' || airport_heliport_airportheliport_pt_bvmlmf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_bvmlmf.href
  )) as lat_airportheliport  from master_join master_join_eqqvxi
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bvmlmf on master_join_eqqvxi.target_id = airport_heliport_airportheliport_pt_bvmlmf.id
  where master_join_eqqvxi.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_aqzrto.*) as lat_aircraftcharacteristic
  from master_join master_join_simvjp
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_aqzrto on master_join_simvjp.target_id = shared_aircraftcharacteristic_view_aqzrto.id
  where master_join_simvjp.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_mtgdrn.*) as lat_flighttransition
  from master_join master_join_xvgutb
  join procedure.proceduretransition_view procedure_proceduretransition_view_mtgdrn on master_join_xvgutb.target_id = procedure_proceduretransition_view_mtgdrn.id
  where master_join_xvgutb.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ggcpse.*) AS annotation
  from master_join master_join_gjgwlz
  join notes.note_view notes_note_view_ggcpse on master_join_gjgwlz.target_id = notes_note_view_ggcpse.id
  where master_join_gjgwlz.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_view_hgvpfo.*) as lat_missedinstruction
  from master_join master_join_fktzaa
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_view_hgvpfo on master_join_fktzaa.target_id = procedure_missedapproachgroup_view_hgvpfo.id
  where master_join_fktzaa.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_missedinstruction on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_puobyx.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_otoyis.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ovhlda.*) AS arccentre,
    geometry_curve_view_tbfyea.geom AS trajectory_geom,
    geometry_curve_view_tbfyea.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_mgtuuf.title as varchar), '(' || navaids_points_angleindication_pt_mgtuuf.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_mgtuuf.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tqxhrx.title as varchar), '(' || navaids_points_distanceindication_pt_tqxhrx.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_tqxhrx.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_vhmvmj.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_bfpdht.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_bfpdht.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_bfpdht.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_puobyx on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_puobyx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_otoyis on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_otoyis.id
left join geometry.curve_view geometry_curve_view_tbfyea on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_tbfyea.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ovhlda on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ovhlda.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mgtuuf on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_mgtuuf.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tqxhrx on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_tqxhrx.id
left join procedure.holdinguse_view procedure_holdinguse_view_vhmvmj on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_vhmvmj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_bfpdht on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_bfpdht.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_yoxxlg.*) as lat_aircraftcategory
  from master_join master_join_uwmxyp
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_yoxxlg on master_join_uwmxyp.target_id = shared_aircraftcharacteristic_view_yoxxlg.id
  where master_join_uwmxyp.source_id = procedure.intermediateleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_aqlopx.*) as lat_designsurface
  from master_join master_join_kxevqd
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_aqlopx on master_join_kxevqd.target_id = shared_obstacleassessmentarea_view_aqlopx.id
  where master_join_kxevqd.source_id = procedure.intermediateleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dunwpo.*) AS annotation
  from master_join master_join_nlclud
  join notes.note_view notes_note_view_dunwpo on master_join_nlclud.target_id = notes_note_view_dunwpo.id
  where master_join_nlclud.source_id = procedure.intermediateleg_ts.id
) as lat_annotation on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_lpjwya.geom AS location_geom,
    geometry_elevatedpoint_view_lpjwya.longitude AS location_longitude,
    geometry_elevatedpoint_view_lpjwya.latitude AS location_latitude,
    geometry_elevatedpoint_view_lpjwya.elevation AS location_elevation,
    geometry_elevatedpoint_view_lpjwya.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lpjwya.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lpjwya.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lpjwya.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lpjwya on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_lpjwya.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_xuhgsi.*) as lat_authority
  from master_join master_join_hndobm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_xuhgsi on master_join_hndobm.target_id = navaids_points_authorityfornavaidequipment_view_xuhgsi.id
  where master_join_hndobm.source_id = navaids_points.localizer_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_hlsxlu.*) as lat_monitoring
  from master_join master_join_ajzvvv
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_hlsxlu on master_join_ajzvvv.target_id = navaids_points_navaidequipmentmonitoring_view_hlsxlu.id
  where master_join_ajzvvv.source_id = navaids_points.localizer_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_kugfga.*) as lat_availability
  from master_join master_join_jvslpf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_kugfga on master_join_jvslpf.target_id = navaids_points_navaidoperationalstatus_view_kugfga.id
  where master_join_jvslpf.source_id = navaids_points.localizer_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_khczub.*) AS annotation
  from master_join master_join_nqpmks
  join notes.note_view notes_note_view_khczub on master_join_nqpmks.target_id = notes_note_view_khczub.id
  where master_join_nqpmks.source_id = navaids_points.localizer_ts.id
) as lat_annotation on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_ijcigu.geom AS location_geom,
    geometry_elevatedpoint_view_ijcigu.longitude AS location_longitude,
    geometry_elevatedpoint_view_ijcigu.latitude AS location_latitude,
    geometry_elevatedpoint_view_ijcigu.elevation AS location_elevation,
    geometry_elevatedpoint_view_ijcigu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ijcigu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ijcigu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ijcigu.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ijcigu on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_ijcigu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_ctarpm.*) as lat_authority
  from master_join master_join_vkmqvg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_ctarpm on master_join_vkmqvg.target_id = navaids_points_authorityfornavaidequipment_view_ctarpm.id
  where master_join_vkmqvg.source_id = navaids_points.markerbeacon_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_nkafvg.*) as lat_monitoring
  from master_join master_join_ttsgcl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_nkafvg on master_join_ttsgcl.target_id = navaids_points_navaidequipmentmonitoring_view_nkafvg.id
  where master_join_ttsgcl.source_id = navaids_points.markerbeacon_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_fseiiq.*) as lat_availability
  from master_join master_join_aaliaz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_fseiiq on master_join_aaliaz.target_id = navaids_points_navaidoperationalstatus_view_fseiiq.id
  where master_join_aaliaz.source_id = navaids_points.markerbeacon_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pvytft.*) AS annotation
  from master_join master_join_hjdcup
  join notes.note_view notes_note_view_pvytft on master_join_hjdcup.target_id = notes_note_view_pvytft.id
  where master_join_hjdcup.source_id = navaids_points.markerbeacon_ts.id
) as lat_annotation on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_vjiarx.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_vjiarx.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_vjiarx.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_xmktwv.geom AS location_geom,
    geometry_elevatedpoint_view_xmktwv.longitude AS location_longitude,
    geometry_elevatedpoint_view_xmktwv.latitude AS location_latitude,
    geometry_elevatedpoint_view_xmktwv.elevation AS location_elevation,
    geometry_elevatedpoint_view_xmktwv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xmktwv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xmktwv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xmktwv.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_vjiarx on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_vjiarx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xmktwv on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_xmktwv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nirkth.*) AS annotation
  from master_join master_join_psstsp
  join notes.note_view notes_note_view_nirkth on master_join_psstsp.target_id = notes_note_view_nirkth.id
  where master_join_psstsp.source_id = airport_heliport.markingbuoy_ts.id
) as lat_annotation on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sqaasl.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kzqdzy.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bwayvm.*) AS arccentre,
    geometry_curve_view_ixobaz.geom AS trajectory_geom,
    geometry_curve_view_ixobaz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_amhbdz.title as varchar), '(' || navaids_points_angleindication_pt_amhbdz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_amhbdz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_vipady.title as varchar), '(' || navaids_points_distanceindication_pt_vipady.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_vipady.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_mqsepo.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kbgxrd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kbgxrd.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_kbgxrd.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sqaasl on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_sqaasl.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kzqdzy on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_kzqdzy.id
left join geometry.curve_view geometry_curve_view_ixobaz on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_ixobaz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bwayvm on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_bwayvm.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_amhbdz on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_amhbdz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_vipady on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_vipady.id
left join procedure.holdinguse_view procedure_holdinguse_view_mqsepo on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_mqsepo.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kbgxrd on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kbgxrd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_kfmaeq.*) as lat_aircraftcategory
  from master_join master_join_zxenld
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_kfmaeq on master_join_zxenld.target_id = shared_aircraftcharacteristic_view_kfmaeq.id
  where master_join_zxenld.source_id = procedure.missedapproachleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_mulzyj.*) as lat_designsurface
  from master_join master_join_owziyy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_mulzyj on master_join_owziyy.target_id = shared_obstacleassessmentarea_view_mulzyj.id
  where master_join_owziyy.source_id = procedure.missedapproachleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lwbqwp.*) AS annotation
  from master_join master_join_ngndml
  join notes.note_view notes_note_view_lwbqwp on master_join_ngndml.target_id = notes_note_view_lwbqwp.id
  where master_join_ngndml.source_id = procedure.missedapproachleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_wwrqik.*) as lat_condition
  from master_join master_join_xpvzrz
  join procedure.approachcondition_view procedure_approachcondition_view_wwrqik on master_join_xpvzrz.target_id = procedure_approachcondition_view_wwrqik.id
  where master_join_xpvzrz.source_id = procedure.missedapproachleg_ts.id
) as lat_condition on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.navaidcomponent_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_qdaxvh.geom AS location_geom,
    geometry_elevatedpoint_view_qdaxvh.longitude AS location_longitude,
    geometry_elevatedpoint_view_qdaxvh.latitude AS location_latitude,
    geometry_elevatedpoint_view_qdaxvh.elevation AS location_elevation,
    geometry_elevatedpoint_view_qdaxvh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qdaxvh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qdaxvh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qdaxvh.horizontalAccuracy AS location_horizontalaccuracy,
    lat_touchdownliftoff.lat_touchdownliftoff as touchdownliftoff,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_servedairport.lat_servedairport as servedairport,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qdaxvh on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_qdaxvh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_pezazi.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_pezazi.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_pezazi.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_pezazi.href
  )) as lat_touchdownliftoff  from master_join master_join_hdiymx
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pezazi on master_join_hdiymx.target_id = airport_heliport_touchdownliftoff_pt_pezazi.id
  where master_join_hdiymx.source_id = navaids_points.navaid_ts.id
) as lat_touchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_view_oyznym.*) as lat_navaidequipment
  from master_join master_join_mrardm
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_view_oyznym on master_join_mrardm.target_id = navaids_points_navaidcomponent_view_oyznym.id
  where master_join_mrardm.source_id = navaids_points.navaid_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_yixrse.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_yixrse.title AS varchar), '(' || airport_heliport_runwaydirection_pt_yixrse.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_yixrse.href
  )) as lat_runwaydirection  from master_join master_join_wldffq
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_yixrse on master_join_wldffq.target_id = airport_heliport_runwaydirection_pt_yixrse.id
  where master_join_wldffq.source_id = navaids_points.navaid_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_kvnqld.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_kvnqld.title AS varchar), '(' || airport_heliport_airportheliport_pt_kvnqld.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_kvnqld.href
  )) as lat_servedairport  from master_join master_join_egtwoo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kvnqld on master_join_egtwoo.target_id = airport_heliport_airportheliport_pt_kvnqld.id
  where master_join_egtwoo.source_id = navaids_points.navaid_ts.id
) as lat_servedairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_rrwwue.*) as lat_availability
  from master_join master_join_emrzut
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_rrwwue on master_join_emrzut.target_id = navaids_points_navaidoperationalstatus_view_rrwwue.id
  where master_join_emrzut.source_id = navaids_points.navaid_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vucpfb.*) AS annotation
  from master_join master_join_tguqsy
  join notes.note_view notes_note_view_vucpfb on master_join_tguqsy.target_id = notes_note_view_vucpfb.id
  where master_join_tguqsy.source_id = navaids_points.navaid_ts.id
) as lat_annotation on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.circlesector_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    to_jsonb(shared_obstacleassessmentarea_view_ebpani.*) AS designsurface,
    to_jsonb(shared_circlesector_view_krfhmw.*) AS sectordefinition,
    lat_annotation.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ebpani on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_ebpani.id
left join shared.circlesector_view shared_circlesector_view_krfhmw on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_krfhmw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wcgnlc.*) AS annotation
  from master_join master_join_ulfwrf
  join notes.note_view notes_note_view_wcgnlc on master_join_ulfwrf.target_id = notes_note_view_wcgnlc.id
  where master_join_ulfwrf.source_id = procedure.navigationarearestriction_ts.id
) as lat_annotation on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['geometry.point_view', 'procedure.navigationareasector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_dqvyym.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_dqvyym.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_dqvyym.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_rshgyb.title as varchar), '(' || navaids_points_designatedpoint_pt_rshgyb.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rshgyb.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jgeogs.title as varchar), '(' || navaids_points_navaid_pt_jgeogs.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_jgeogs.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bmdxws.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bmdxws.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_bmdxws.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bseaen.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bseaen.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bseaen.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_owaodr.title as varchar), '(' || airport_heliport_airportheliport_pt_owaodr.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_owaodr.href AS centrepointairportreferencepoint_href,
    geometry_point_view_znbjfi.geom AS centrepointposition_geom,
    geometry_point_view_znbjfi.longitude AS centrepointposition_longitude,
    geometry_point_view_znbjfi.latitude AS centrepointposition_latitude,
    geometry_point_view_znbjfi.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_dqvyym on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_dqvyym.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rshgyb on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rshgyb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jgeogs on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_jgeogs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bmdxws on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bmdxws.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bseaen on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bseaen.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_owaodr on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_owaodr.id
left join geometry.point_view geometry_point_view_znbjfi on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_znbjfi.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_view_jtaakp.*) as lat_sector
  from master_join master_join_jhautc
  join procedure.navigationareasector_view procedure_navigationareasector_view_jtaakp on master_join_jhautc.target_id = procedure_navigationareasector_view_jtaakp.id
  where master_join_jhautc.source_id = procedure.navigationarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wjljlj.*) AS annotation
  from master_join master_join_oevzvx
  join notes.note_view notes_note_view_wjljlj on master_join_oevzvx.target_id = notes_note_view_wjljlj.id
  where master_join_oevzvx.source_id = procedure.navigationarea_ts.id
) as lat_annotation on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_lyvjpj.geom AS location_geom,
    geometry_elevatedpoint_view_lyvjpj.longitude AS location_longitude,
    geometry_elevatedpoint_view_lyvjpj.latitude AS location_latitude,
    geometry_elevatedpoint_view_lyvjpj.elevation AS location_elevation,
    geometry_elevatedpoint_view_lyvjpj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lyvjpj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lyvjpj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lyvjpj.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lyvjpj on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_lyvjpj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_vcblpk.*) as lat_authority
  from master_join master_join_dmsyvj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_vcblpk on master_join_dmsyvj.target_id = navaids_points_authorityfornavaidequipment_view_vcblpk.id
  where master_join_dmsyvj.source_id = navaids_points.ndb_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_lfafto.*) as lat_monitoring
  from master_join master_join_bqduzm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_lfafto on master_join_bqduzm.target_id = navaids_points_navaidequipmentmonitoring_view_lfafto.id
  where master_join_bqduzm.source_id = navaids_points.ndb_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ygcltm.*) as lat_availability
  from master_join master_join_tldlds
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_ygcltm on master_join_tldlds.target_id = navaids_points_navaidoperationalstatus_view_ygcltm.id
  where master_join_tldlds.source_id = navaids_points.ndb_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ffgncb.*) AS annotation
  from master_join master_join_wvqmnx
  join notes.note_view notes_note_view_ffgncb on master_join_wvqmnx.target_id = notes_note_view_ffgncb.id
  where master_join_wvqmnx.source_id = navaids_points.ndb_ts.id
) as lat_annotation on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_uswxtn.title as varchar), '(' || airport_heliport_airportheliport_pt_uswxtn.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_uswxtn.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_hnypcs.geom AS extent_geom,
    geometry_elevatedsurface_view_hnypcs.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hnypcs.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hnypcs.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hnypcs.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hnypcs.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uswxtn on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_uswxtn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hnypcs on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_hnypcs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ptrdlu.*) AS annotation
  from master_join master_join_mpsfyn
  join notes.note_view notes_note_view_ptrdlu on master_join_mpsfyn.target_id = notes_note_view_ptrdlu.id
  where master_join_mpsfyn.source_id = airport_heliport.nonmovementarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_praawy.title as varchar), '(' || airport_heliport_airportheliport_pt_praawy.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_praawy.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_mpmscj.title as varchar), '(' || airport_heliport_runwaydirection_pt_mpmscj.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_mpmscj.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_immcvk.title as varchar), '(' || organisation_organisationauthority_pt_immcvk.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_immcvk.href AS referenceownerorganisation_href,
    geometry_surface_view_porvyh.geom AS surfaceextent_geom,
    geometry_surface_view_porvyh.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    lat_obstacle.lat_obstacle as obstacle,
    lat_annotation.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_praawy on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_praawy.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_mpmscj on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_mpmscj.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_immcvk on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_immcvk.id
left join geometry.surface_view geometry_surface_view_porvyh on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_porvyh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_pt_zyuqzj.id,
      'title', coalesce(cast(obstacles_verticalstructure_pt_zyuqzj.title AS varchar), '(' || obstacles_verticalstructure_pt_zyuqzj.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_pt_zyuqzj.href
  )) as lat_obstacle  from master_join master_join_hrryrz
  join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_zyuqzj on master_join_hrryrz.target_id = obstacles_verticalstructure_pt_zyuqzj.id
  where master_join_hrryrz.source_id = obstacles.obstaclearea_ts.id
) as lat_obstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_khseuh.*) AS annotation
  from master_join master_join_nlwfxp
  join notes.note_view notes_note_view_khseuh on master_join_nlwfxp.target_id = notes_note_view_khseuh.id
  where master_join_nlwfxp.source_id = obstacles.obstaclearea_ts.id
) as lat_annotation on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    lat_relatedorganisationauthority.lat_relatedorganisationauthority as relatedorganisationauthority,
    lat_annotation.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_chulry
  join shared.contactinformation_view shared_contactinformation_view_tlcngb on master_join_chulry.target_id = shared_contactinformation_view_tlcngb.id
  where master_join_chulry.source_id = organisation.organisationauthority_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_view_yysuvp.*) as lat_relatedorganisationauthority
  from master_join master_join_usgajb
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_view_yysuvp on master_join_usgajb.target_id = organisation_organisationauthorityassociation_view_yysuvp.id
  where master_join_usgajb.source_id = organisation.organisationauthority_ts.id
) as lat_relatedorganisationauthority on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rblufv.*) AS annotation
  from master_join master_join_zfzyaj
  join notes.note_view notes_note_view_rblufv on master_join_zfzyaj.target_id = notes_note_view_rblufv.id
  where master_join_zfzyaj.source_id = organisation.organisationauthority_ts.id
) as lat_annotation on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_bpkvar.geom AS extent_geom,
    geometry_elevatedsurface_view_bpkvar.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bpkvar.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bpkvar.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bpkvar.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bpkvar.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedstand.lat_associatedstand as associatedstand,
    lat_annotation.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bpkvar on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_bpkvar.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_dhtvpo.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_dhtvpo.title AS varchar), '(' || airport_heliport_aircraftstand_pt_dhtvpo.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_dhtvpo.href
  )) as lat_associatedstand  from master_join master_join_vzphmn
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_dhtvpo on master_join_vzphmn.target_id = airport_heliport_aircraftstand_pt_dhtvpo.id
  where master_join_vzphmn.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_associatedstand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aaoaza.*) AS annotation
  from master_join master_join_oyhhel
  join notes.note_view notes_note_view_aaoaza on master_join_oyhhel.target_id = notes_note_view_aaoaza.id
  where master_join_oyhhel.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_annotation on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_wmtifa.geom AS location_geom,
    geometry_elevatedpoint_view_wmtifa.longitude AS location_longitude,
    geometry_elevatedpoint_view_wmtifa.latitude AS location_latitude,
    geometry_elevatedpoint_view_wmtifa.elevation AS location_elevation,
    geometry_elevatedpoint_view_wmtifa.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wmtifa.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wmtifa.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wmtifa.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_dabjsz.title as varchar), '(' || organisation_unit_pt_dabjsz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_dabjsz.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wmtifa on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_wmtifa.id
left join organisation.unit_pt organisation_unit_pt_dabjsz on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_dabjsz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_hctaiz.*) as lat_callsign
  from master_join master_join_aexbqg
  join service.callsigndetail_view service_callsigndetail_view_hctaiz on master_join_aexbqg.target_id = service_callsigndetail_view_hctaiz.id
  where master_join_aexbqg.source_id = service.passengerservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_jppznu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_jppznu.title AS varchar), '(' || service_radiocommunicationchannel_pt_jppznu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_jppznu.href
  )) as lat_radiocommunication  from master_join master_join_hvozya
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jppznu on master_join_hvozya.target_id = service_radiocommunicationchannel_pt_jppznu.id
  where master_join_hvozya.source_id = service.passengerservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_aauqku
  join shared.contactinformation_view shared_contactinformation_view_ppbaco on master_join_aauqku.target_id = shared_contactinformation_view_ppbaco.id
  where master_join_aauqku.source_id = service.passengerservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_mohkmi.*) as lat_availability
  from master_join master_join_mzrsel
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_mohkmi on master_join_mzrsel.target_id = service_serviceoperationalstatus_view_mohkmi.id
  where master_join_mzrsel.source_id = service.passengerservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xhmmxk.*) AS annotation
  from master_join master_join_jpfecf
  join notes.note_view notes_note_view_xhmmxk on master_join_jpfecf.target_id = notes_note_view_xhmmxk.id
  where master_join_jpfecf.source_id = service.passengerservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_fufiqh.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_fufiqh.title AS varchar), '(' || airport_heliport_airportheliport_pt_fufiqh.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_fufiqh.href
  )) as lat_airportheliport  from master_join master_join_adwbuv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fufiqh on master_join_adwbuv.target_id = airport_heliport_airportheliport_pt_fufiqh.id
  where master_join_adwbuv.source_id = service.passengerservice_ts.id
) as lat_airportheliport on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    lat_controlledlightintensity.lat_controlledlightintensity as controlledlightintensity,
    lat_annotation.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_view_wjpyhj.*) as lat_controlledlightintensity
  from master_join master_join_nqkshc
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_view_wjpyhj on master_join_nqkshc.target_id = airport_heliport_lightactivation_view_wjpyhj.id
  where master_join_nqkshc.source_id = service.pilotcontrolledlighting_ts.id
) as lat_controlledlightintensity on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_acanyz.*) AS annotation
  from master_join master_join_guwfrb
  join notes.note_view notes_note_view_acanyz on master_join_guwfrb.target_id = notes_note_view_acanyz.id
  where master_join_guwfrb.source_id = service.pilotcontrolledlighting_ts.id
) as lat_annotation on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.reflector_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_kfzxuu.geom AS location_geom,
    geometry_elevatedpoint_view_kfzxuu.longitude AS location_longitude,
    geometry_elevatedpoint_view_kfzxuu.latitude AS location_latitude,
    geometry_elevatedpoint_view_kfzxuu.elevation AS location_elevation,
    geometry_elevatedpoint_view_kfzxuu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kfzxuu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kfzxuu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kfzxuu.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_reflector.lat_reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kfzxuu on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_kfzxuu.id
left join lateral(
  select
  from master_join master_join_cjgdwp
  join shared.contactinformation_view shared_contactinformation_view_pzmdoa on master_join_cjgdwp.target_id = shared_contactinformation_view_pzmdoa.id
  where master_join_cjgdwp.source_id = surveillance.precisionapproachradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_auitri.*) AS annotation
  from master_join master_join_uuiatj
  join notes.note_view notes_note_view_auitri on master_join_uuiatj.target_id = notes_note_view_auitri.id
  where master_join_uuiatj.source_id = surveillance.precisionapproachradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_view_pptlwy.*) as lat_reflector
  from master_join master_join_vqzopc
  join surveillance.reflector_view surveillance_reflector_view_pptlwy on master_join_vqzopc.target_id = surveillance_reflector_view_pptlwy.id
  where master_join_vqzopc.source_id = surveillance.precisionapproachradar_ts.id
) as lat_reflector on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_ybgojx.geom AS location_geom,
    geometry_elevatedpoint_view_ybgojx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ybgojx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ybgojx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ybgojx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ybgojx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ybgojx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ybgojx.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ybgojx on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ybgojx.id
left join lateral(
  select
  from master_join master_join_ohmmni
  join shared.contactinformation_view shared_contactinformation_view_ryrdfz on master_join_ohmmni.target_id = shared_contactinformation_view_ryrdfz.id
  where master_join_ohmmni.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_txodxy.*) AS annotation
  from master_join master_join_lkrzyz
  join notes.note_view notes_note_view_txodxy on master_join_lkrzyz.target_id = notes_note_view_txodxy.id
  where master_join_lkrzyz.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_usjyep.*) as lat_groundstation
  from master_join master_join_wbekzi
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_view_usjyep on master_join_wbekzi.target_id = surveillance_surveillancegroundstation_view_usjyep.id
  where master_join_wbekzi.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_rkdyez.title as varchar), '(' || navaids_points_dme_pt_rkdyez.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_rkdyez.href AS dme_href,
    lat_annotation.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_rkdyez on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_rkdyez.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lxtkxw.*) AS annotation
  from master_join master_join_snykno
  join notes.note_view notes_note_view_lxtkxw on master_join_snykno.target_id = notes_note_view_lxtkxw.id
  where master_join_snykno.source_id = procedure.proceduredme_ts.id
) as lat_annotation on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_aqccnr.title as varchar), '(' || airport_heliport_airportheliport_pt_aqccnr.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_aqccnr.href AS airportheliport_href,
    geometry_elevatedpoint_view_rdyizl.geom AS location_geom,
    geometry_elevatedpoint_view_rdyizl.longitude AS location_longitude,
    geometry_elevatedpoint_view_rdyizl.latitude AS location_latitude,
    geometry_elevatedpoint_view_rdyizl.elevation AS location_elevation,
    geometry_elevatedpoint_view_rdyizl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rdyizl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rdyizl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rdyizl.horizontalAccuracy AS location_horizontalaccuracy,
    lat_radarequipment.lat_radarequipment as radarequipment,
    lat_office.lat_office as office,
    lat_parrunway.lat_parrunway as parrunway,
    lat_annotation.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aqccnr on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_aqccnr.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rdyizl on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_rdyizl.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_view_azkwxw.*) as lat_radarequipment
  from master_join master_join_oilfry
  join surveillance.radarcomponent_view surveillance_radarcomponent_view_azkwxw on master_join_oilfry.target_id = surveillance_radarcomponent_view_azkwxw.id
  where master_join_oilfry.source_id = surveillance.radarsystem_ts.id
) as lat_radarequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_llbvvj.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_llbvvj.title AS varchar), '(' || organisation_organisationauthority_pt_llbvvj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_llbvvj.href
  )) as lat_office  from master_join master_join_ptsqdo
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_llbvvj on master_join_ptsqdo.target_id = organisation_organisationauthority_pt_llbvvj.id
  where master_join_ptsqdo.source_id = surveillance.radarsystem_ts.id
) as lat_office on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_eplnku.id,
      'title', coalesce(cast(airport_heliport_runway_pt_eplnku.title AS varchar), '(' || airport_heliport_runway_pt_eplnku.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_eplnku.href
  )) as lat_parrunway  from master_join master_join_umbexq
  join airport_heliport.runway_pt airport_heliport_runway_pt_eplnku on master_join_umbexq.target_id = airport_heliport_runway_pt_eplnku.id
  where master_join_umbexq.source_id = surveillance.radarsystem_ts.id
) as lat_parrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iqysle.*) AS annotation
  from master_join master_join_gfqbsf
  join notes.note_view notes_note_view_iqysle on master_join_gfqbsf.target_id = notes_note_view_iqysle.id
  where master_join_gfqbsf.source_id = surveillance.radarsystem_ts.id
) as lat_annotation on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    lat_location.geom as location_geom,
    lat_location.attr as location,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_view_mufkph.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_view_mufkph.id,
      'longitude', geometry_elevatedpoint_view_mufkph.longitude,
      'latitude', geometry_elevatedpoint_view_mufkph.latitude,
      'elevation', geometry_elevatedpoint_view_mufkph.elevation,
      'geoidUndulation', geometry_elevatedpoint_view_mufkph.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_view_mufkph.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_view_mufkph.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_view_mufkph.horizontalAccuracy
    )) AS attr
  from master_join master_join_yxzaom
  join geometry.elevatedpoint_view geometry_elevatedpoint_view_mufkph on master_join_yxzaom.target_id = geometry_elevatedpoint_view_mufkph.id
  where master_join_yxzaom.source_id = service.radiocommunicationchannel_ts.id
) as lat_location on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_view_sbcoqy.*) as lat_availability
  from master_join master_join_angncy
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_view_sbcoqy on master_join_angncy.target_id = service_radiocommunicationoperationalstatus_view_sbcoqy.id
  where master_join_angncy.source_id = service.radiocommunicationchannel_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xzmdwn.*) AS annotation
  from master_join master_join_hqaaxa
  join notes.note_view notes_note_view_xzmdwn on master_join_hqaaxa.target_id = notes_note_view_xzmdwn.id
  where master_join_hqaaxa.source_id = service.radiocommunicationchannel_ts.id
) as lat_annotation on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_cvwdcm.title as varchar), '(' || service_radiocommunicationchannel_pt_cvwdcm.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_cvwdcm.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_zbbtyq.title as varchar), '(' || navaids_points_specialnavigationstation_pt_zbbtyq.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_zbbtyq.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_lolpff.title as varchar), '(' || surveillance_precisionapproachradar_pt_lolpff.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_lolpff.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_trzhhm.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_trzhhm.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_trzhhm.href AS equipmentradar_href,
    lat_sector.lat_sector as sector,
    lat_extent.geom as extent_geom,
    lat_extent.attr as extent,
    lat_annotation.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_cvwdcm on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_cvwdcm.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_zbbtyq on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_zbbtyq.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_lolpff on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_lolpff.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_trzhhm on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_trzhhm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_view_fsjwqx.*) as lat_sector
  from master_join master_join_icjihi
  join shared.circlesector_view shared_circlesector_view_fsjwqx on master_join_icjihi.target_id = shared_circlesector_view_fsjwqx.id
  where master_join_icjihi.source_id = shared.radiofrequencyarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_view_lzeisf.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_view_lzeisf.id,
      'horizontalAccuracy', geometry_surface_view_lzeisf.horizontalAccuracy
    )) AS attr
  from master_join master_join_efhrxo
  join geometry.surface_view geometry_surface_view_lzeisf on master_join_efhrxo.target_id = geometry_surface_view_lzeisf.id
  where master_join_efhrxo.source_id = shared.radiofrequencyarea_ts.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_krdwce.*) AS annotation
  from master_join master_join_bycucn
  join notes.note_view notes_note_view_krdwce on master_join_bycucn.target_id = notes_note_view_krdwce.id
  where master_join_bycucn.source_id = shared.radiofrequencyarea_ts.id
) as lat_annotation on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_sxguxj.title as varchar), '(' || airport_heliport_airportheliport_pt_sxguxj.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_sxguxj.href AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_urqtdm.*) AS surfaceproperties,
    geometry_elevatedsurface_view_rbneza.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_rbneza.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_rbneza.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_rbneza.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_rbneza.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_rbneza.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    lat_accessiblestand.lat_accessiblestand as accessiblestand,
    lat_annotation.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sxguxj on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_sxguxj.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_urqtdm on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_urqtdm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rbneza on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_rbneza.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_mqwvde.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_mqwvde.title AS varchar), '(' || airport_heliport_aircraftstand_pt_mqwvde.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_mqwvde.href
  )) as lat_accessiblestand  from master_join master_join_drjnwl
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_mqwvde on master_join_drjnwl.target_id = airport_heliport_aircraftstand_pt_mqwvde.id
  where master_join_drjnwl.source_id = airport_heliport.road_ts.id
) as lat_accessiblestand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kjxcca.*) AS annotation
  from master_join master_join_upyvwx
  join notes.note_view notes_note_view_kjxcca on master_join_upyvwx.target_id = notes_note_view_kjxcca.id
  where master_join_upyvwx.source_id = airport_heliport.road_ts.id
) as lat_annotation on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_gaftkk.title as varchar), '(' || navaids_points_dme_pt_gaftkk.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_gaftkk.href AS referenceddme_href,
    to_jsonb(routes_routeportion_view_vdtrkr.*) AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_gaftkk on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_gaftkk.id
left join routes.routeportion_view routes_routeportion_view_vdtrkr on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_vdtrkr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hyxiqq.*) AS annotation
  from master_join master_join_jyomkg
  join notes.note_view notes_note_view_hyxiqq on master_join_jyomkg.target_id = notes_note_view_hyxiqq.id
  where master_join_jyomkg.source_id = routes.routedme_ts.id
) as lat_annotation on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'navaids_points.enroutesegmentpoint_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_kolcye.*) AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_eekoox.*) AS end,
    coalesce(cast(routes_route_pt_aygltc.title as varchar), '(' || routes_route_pt_aygltc.nilreason[1] || ')') AS routeformed,
    routes_route_pt_aygltc.href AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_dkzets.*) AS evaluationarea,
    geometry_curve_view_naickb.geom AS curveextent_geom,
    geometry_curve_view_naickb.horizontalAccuracy as curveextent_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_kolcye on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_kolcye.id
left join routes.route_pt routes_route_pt_aygltc on routes.routesegment_ts.routeformed_id = routes_route_pt_aygltc.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_dkzets on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_dkzets.id
left join geometry.curve_view geometry_curve_view_naickb on routes.routesegment_ts.curveextent_id = geometry_curve_view_naickb.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_eekoox on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_eekoox.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_ypyqhb.*) as lat_availability
  from master_join master_join_bochco
  join routes.routeavailability_view routes_routeavailability_view_ypyqhb on master_join_bochco.target_id = routes_routeavailability_view_ypyqhb.id
  where master_join_bochco.source_id = routes.routesegment_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mdrjav.*) AS annotation
  from master_join master_join_cwdsbf
  join notes.note_view notes_note_view_mdrjav on master_join_cwdsbf.target_id = notes_note_view_mdrjav.id
  where master_join_cwdsbf.source_id = routes.routesegment_ts.id
) as lat_annotation on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_ljxmzz.title as varchar), '(' || organisation_organisationauthority_pt_ljxmzz.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_ljxmzz.href AS userorganisation_href,
    lat_annotation.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ljxmzz on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_ljxmzz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oydwgs.*) AS annotation
  from master_join master_join_ckferm
  join notes.note_view notes_note_view_oydwgs on master_join_ckferm.target_id = notes_note_view_oydwgs.id
  where master_join_ckferm.source_id = routes.route_ts.id
) as lat_annotation on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    lat_affectedlocation.lat_affectedlocation as affectedlocation,
    lat_affectedarea.lat_affectedarea as affectedarea,
    lat_annotation.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_iydjsv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_iydjsv.title AS varchar), '(' || airport_heliport_airportheliport_pt_iydjsv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_iydjsv.href
  )) as lat_affectedlocation  from master_join master_join_dthwfu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iydjsv on master_join_dthwfu.target_id = airport_heliport_airportheliport_pt_iydjsv.id
  where master_join_dthwfu.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedlocation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_uejauq.id,
      'title', coalesce(cast(airspace_airspace_pt_uejauq.title AS varchar), '(' || airspace_airspace_pt_uejauq.nilreason[1] || ')'),
      'href', airspace_airspace_pt_uejauq.href
  )) as lat_affectedarea  from master_join master_join_qzqidc
  join airspace.airspace_pt airspace_airspace_pt_uejauq on master_join_qzqidc.target_id = airspace_airspace_pt_uejauq.id
  where master_join_qzqidc.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedarea on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qfnduc.*) AS annotation
  from master_join master_join_tvgvyc
  join notes.note_view notes_note_view_qfnduc on master_join_tvgvyc.target_id = notes_note_view_qfnduc.id
  where master_join_tvgvyc.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_annotation on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_oxjhia.title as varchar), '(' || airport_heliport_runwaydirection_pt_oxjhia.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_oxjhia.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_vnjwty.geom AS extent_geom,
    geometry_elevatedsurface_view_vnjwty.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vnjwty.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vnjwty.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vnjwty.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vnjwty.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qiauub.*) AS surfaceproperties,
    lat_annotation.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_oxjhia on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_oxjhia.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vnjwty on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_vnjwty.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qiauub on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qiauub.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zfwchh.*) AS annotation
  from master_join master_join_afrwgv
  join notes.note_view notes_note_view_zfwchh on master_join_afrwgv.target_id = notes_note_view_zfwchh.id
  where master_join_afrwgv.source_id = airport_heliport.runwayblastpad_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.navaidequipmentdistance_view', 'notes.note_view', 'airport_heliport.runwaydeclareddistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_qyttnx.geom AS location_geom,
    geometry_elevatedpoint_view_qyttnx.longitude AS location_longitude,
    geometry_elevatedpoint_view_qyttnx.latitude AS location_latitude,
    geometry_elevatedpoint_view_qyttnx.elevation AS location_elevation,
    geometry_elevatedpoint_view_qyttnx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qyttnx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qyttnx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qyttnx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_fkqxgx.title as varchar), '(' || airport_heliport_runwaydirection_pt_fkqxgx.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_fkqxgx.href AS onrunway_href,
    lat_associateddeclareddistance.lat_associateddeclareddistance as associateddeclareddistance,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qyttnx on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_qyttnx.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_fkqxgx on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_fkqxgx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_view_bcgdru.*) as lat_associateddeclareddistance
  from master_join master_join_ikvvqx
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_view_bcgdru on master_join_ikvvqx.target_id = airport_heliport_runwaydeclareddistance_view_bcgdru.id
  where master_join_ikvvqx.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_associateddeclareddistance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_view_sctztc.*) as lat_navaidequipment
  from master_join master_join_oxijzn
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_view_sctztc on master_join_oxijzn.target_id = airport_heliport_navaidequipmentdistance_view_sctztc.id
  where master_join_oxijzn.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mlesbj.*) AS annotation
  from master_join master_join_yauobc
  join notes.note_view notes_note_view_mlesbj on master_join_yauobc.target_id = notes_note_view_mlesbj.id
  where master_join_yauobc.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_nwmhln.title as varchar), '(' || airport_heliport_runwaydirection_pt_nwmhln.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_nwmhln.href AS associatedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_nwmhln on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_nwmhln.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_ragdte.*) as lat_element
  from master_join master_join_mvxpeo
  join shared.lightelement_view shared_lightelement_view_ragdte on master_join_mvxpeo.target_id = shared_lightelement_view_ragdte.id
  where master_join_mvxpeo.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_ncukif.*) as lat_availability
  from master_join master_join_ehbsvc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_ncukif on master_join_ehbsvc.target_id = airport_heliport_groundlightingavailability_view_ncukif.id
  where master_join_ehbsvc.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_akucjt.*) AS annotation
  from master_join master_join_xqsjfq
  join notes.note_view notes_note_view_akucjt on master_join_xqsjfq.target_id = notes_note_view_akucjt.id
  where master_join_xqsjfq.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_rivxwp.title as varchar), '(' || airport_heliport_runway_pt_rivxwp.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_rivxwp.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_djsgwa.title as varchar), '(' || airport_heliport_runwayelement_pt_djsgwa.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_djsgwa.href AS startingelement_href,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_rivxwp on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_rivxwp.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_djsgwa on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_djsgwa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bdaspb.*) AS annotation
  from master_join master_join_ssxcho
  join notes.note_view notes_note_view_bdaspb on master_join_ssxcho.target_id = notes_note_view_bdaspb.id
  where master_join_ssxcho.source_id = airport_heliport.runwaydirection_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_vrgxjm.*) as lat_availability
  from master_join master_join_drjjse
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_vrgxjm on master_join_drjjse.target_id = airport_heliport_manoeuvringareaavailability_view_vrgxjm.id
  where master_join_drjjse.source_id = airport_heliport.runwaydirection_ts.id
) as lat_availability on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xrixsl.*) AS surfaceproperties,
    geometry_elevatedsurface_view_rjxmsq.geom AS extent_geom,
    geometry_elevatedsurface_view_rjxmsq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rjxmsq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rjxmsq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rjxmsq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rjxmsq.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedrunway.lat_associatedrunway as associatedrunway,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xrixsl on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xrixsl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rjxmsq on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_rjxmsq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_dqyyvb.id,
      'title', coalesce(cast(airport_heliport_runway_pt_dqyyvb.title AS varchar), '(' || airport_heliport_runway_pt_dqyyvb.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_dqyyvb.href
  )) as lat_associatedrunway  from master_join master_join_siksda
  join airport_heliport.runway_pt airport_heliport_runway_pt_dqyyvb on master_join_siksda.target_id = airport_heliport_runway_pt_dqyyvb.id
  where master_join_siksda.source_id = airport_heliport.runwayelement_ts.id
) as lat_associatedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qhinog.*) AS annotation
  from master_join master_join_hxvfqw
  join notes.note_view notes_note_view_qhinog on master_join_hxvfqw.target_id = notes_note_view_qhinog.id
  where master_join_hxvfqw.source_id = airport_heliport.runwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_ehsvyn.*) as lat_availability
  from master_join master_join_xbklvv
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_ehsvyn on master_join_xbklvv.target_id = airport_heliport_manoeuvringareaavailability_view_ehsvyn.id
  where master_join_xbklvv.source_id = airport_heliport.runwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_jioxxu.title as varchar), '(' || airport_heliport_runway_pt_jioxxu.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_jioxxu.href AS markedrunway_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_jioxxu on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_jioxxu.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_ljaslj.*) as lat_element
  from master_join master_join_tjpdqu
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_ljaslj on master_join_tjpdqu.target_id = airport_heliport_markingelement_view_ljaslj.id
  where master_join_tjpdqu.source_id = airport_heliport.runwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_shbniy.*) AS annotation
  from master_join master_join_omrtsw
  join notes.note_view notes_note_view_shbniy on master_join_omrtsw.target_id = notes_note_view_shbniy.id
  where master_join_omrtsw.source_id = airport_heliport.runwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_znamts.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_znamts.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_znamts.href AS lightedarea_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_znamts on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_znamts.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_orlfdh.*) as lat_element
  from master_join master_join_kqtwjp
  join shared.lightelement_view shared_lightelement_view_orlfdh on master_join_kqtwjp.target_id = shared_lightelement_view_orlfdh.id
  where master_join_kqtwjp.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_hlnmyb.*) as lat_availability
  from master_join master_join_eiimck
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_hlnmyb on master_join_eiimck.target_id = airport_heliport_groundlightingavailability_view_hlnmyb.id
  where master_join_eiimck.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jvhxim.*) AS annotation
  from master_join master_join_gsedwx
  join notes.note_view notes_note_view_jvhxim on master_join_gsedwx.target_id = notes_note_view_jvhxim.id
  where master_join_gsedwx.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lfgqyu.*) AS surfaceproperties,
    geometry_elevatedsurface_view_uiivrc.geom AS extent_geom,
    geometry_elevatedsurface_view_uiivrc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uiivrc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uiivrc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uiivrc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uiivrc.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_grdqor.title as varchar), '(' || airport_heliport_runwaydirection_pt_grdqor.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_grdqor.href AS protectedrunwaydirection_href,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lfgqyu on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lfgqyu.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uiivrc on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_uiivrc.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_grdqor on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_grdqor.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yaaahb.*) AS annotation
  from master_join master_join_snegzu
  join notes.note_view notes_note_view_yaaahb on master_join_snegzu.target_id = notes_note_view_yaaahb.id
  where master_join_snegzu.source_id = airport_heliport.runwayprotectarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.runwaysectioncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.runwaycontamination_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rrmnis.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_zjnqoa.title as varchar), '(' || airport_heliport_airportheliport_pt_zjnqoa.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zjnqoa.href AS associatedairportheliport_href,
    lat_overallcontaminant.lat_overallcontaminant as overallcontaminant,
    lat_annotation.annotation as annotation,
    lat_areacontaminant.lat_areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rrmnis on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rrmnis.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zjnqoa on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zjnqoa.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_view_auoybr.*) as lat_overallcontaminant
  from master_join master_join_zqaezr
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_view_auoybr on master_join_zqaezr.target_id = airport_heliport_runwaycontamination_view_auoybr.id
  where master_join_zqaezr.source_id = airport_heliport.runway_ts.id
) as lat_overallcontaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_flskzl.*) AS annotation
  from master_join master_join_fpxrzu
  join notes.note_view notes_note_view_flskzl on master_join_fpxrzu.target_id = notes_note_view_flskzl.id
  where master_join_fpxrzu.source_id = airport_heliport.runway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_view_nferwu.*) as lat_areacontaminant
  from master_join master_join_bpfuqi
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_view_nferwu on master_join_bpfuqi.target_id = airport_heliport_runwaysectioncontamination_view_nferwu.id
  where master_join_bpfuqi.source_id = airport_heliport.runway_ts.id
) as lat_areacontaminant on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_pmfoqj.geom AS location_geom,
    geometry_elevatedpoint_view_pmfoqj.longitude AS location_longitude,
    geometry_elevatedpoint_view_pmfoqj.latitude AS location_latitude,
    geometry_elevatedpoint_view_pmfoqj.elevation AS location_elevation,
    geometry_elevatedpoint_view_pmfoqj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pmfoqj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pmfoqj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pmfoqj.horizontalAccuracy AS location_horizontalaccuracy,
    lat_associatedrunwaydirection.lat_associatedrunwaydirection as associatedrunwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pmfoqj on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_pmfoqj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_bpflcq.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_bpflcq.title AS varchar), '(' || airport_heliport_runwaydirection_pt_bpflcq.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_bpflcq.href
  )) as lat_associatedrunwaydirection  from master_join master_join_fldgti
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_bpflcq on master_join_fldgti.target_id = airport_heliport_runwaydirection_pt_bpflcq.id
  where master_join_fldgti.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_associatedrunwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dwrzdw.*) AS annotation
  from master_join master_join_cvcnjs
  join notes.note_view notes_note_view_dwrzdw on master_join_cvcnjs.target_id = notes_note_view_dwrzdw.id
  where master_join_cvcnjs.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['geometry.point_view', 'procedure.safealtitudeareasector_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_lldkge.title as varchar), '(' || navaids_points_designatedpoint_pt_lldkge.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_lldkge.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zkqdsk.title as varchar), '(' || navaids_points_navaid_pt_zkqdsk.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_zkqdsk.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uyiwpb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uyiwpb.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_uyiwpb.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mzlbpw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mzlbpw.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mzlbpw.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fdscaq.title as varchar), '(' || airport_heliport_airportheliport_pt_fdscaq.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_fdscaq.href AS centrepointairportreferencepoint_href,
    lat_location.lat_location as location,
    geometry_point_view_qbxmmb.geom AS centrepointposition_geom,
    geometry_point_view_qbxmmb.longitude AS centrepointposition_longitude,
    geometry_point_view_qbxmmb.latitude AS centrepointposition_latitude,
    geometry_point_view_qbxmmb.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lldkge on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lldkge.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zkqdsk on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_zkqdsk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uyiwpb on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_uyiwpb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mzlbpw on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mzlbpw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fdscaq on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_fdscaq.id
left join geometry.point_view geometry_point_view_qbxmmb on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_qbxmmb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_view_esomsc.*) as lat_sector
  from master_join master_join_imxkgi
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_view_esomsc on master_join_imxkgi.target_id = procedure_safealtitudeareasector_view_esomsc.id
  where master_join_imxkgi.source_id = procedure.safealtitudearea_ts.id
) as lat_sector on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_psrcib.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_psrcib.title AS varchar), '(' || airport_heliport_airportheliport_pt_psrcib.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_psrcib.href
  )) as lat_location  from master_join master_join_hbqtkj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_psrcib on master_join_hbqtkj.target_id = airport_heliport_airportheliport_pt_psrcib.id
  where master_join_hbqtkj.source_id = procedure.safealtitudearea_ts.id
) as lat_location on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fczlkt.*) AS annotation
  from master_join master_join_rqerbc
  join notes.note_view notes_note_view_fczlkt on master_join_rqerbc.target_id = notes_note_view_fczlkt.id
  where master_join_rqerbc.source_id = procedure.safealtitudearea_ts.id
) as lat_annotation on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_wwabgn.geom AS location_geom,
    geometry_elevatedpoint_view_wwabgn.longitude AS location_longitude,
    geometry_elevatedpoint_view_wwabgn.latitude AS location_latitude,
    geometry_elevatedpoint_view_wwabgn.elevation AS location_elevation,
    geometry_elevatedpoint_view_wwabgn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wwabgn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wwabgn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wwabgn.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wwabgn on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_wwabgn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_cmfvfn.*) as lat_authority
  from master_join master_join_wfcxsl
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_cmfvfn on master_join_wfcxsl.target_id = navaids_points_authorityfornavaidequipment_view_cmfvfn.id
  where master_join_wfcxsl.source_id = navaids_points.sdf_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_veejxf.*) as lat_monitoring
  from master_join master_join_gregij
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_veejxf on master_join_gregij.target_id = navaids_points_navaidequipmentmonitoring_view_veejxf.id
  where master_join_gregij.source_id = navaids_points.sdf_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_stheey.*) as lat_availability
  from master_join master_join_twinuh
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_stheey on master_join_twinuh.target_id = navaids_points_navaidoperationalstatus_view_stheey.id
  where master_join_twinuh.source_id = navaids_points.sdf_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jzptye.*) AS annotation
  from master_join master_join_vleacl
  join notes.note_view notes_note_view_jzptye on master_join_vleacl.target_id = notes_note_view_jzptye.id
  where master_join_vleacl.source_id = navaids_points.sdf_ts.id
) as lat_annotation on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_ngyggq.geom AS extent_geom,
    geometry_elevatedsurface_view_ngyggq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ngyggq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ngyggq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ngyggq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ngyggq.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_rampsite.lat_rampsite as rampsite,
    lat_docksite.lat_docksite as docksite,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ngyggq on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_ngyggq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_pt_yddvpa.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_pt_yddvpa.title AS varchar), '(' || airport_heliport_seaplanerampsite_pt_yddvpa.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_pt_yddvpa.href
  )) as lat_rampsite  from master_join master_join_iwoffc
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_pt_yddvpa on master_join_iwoffc.target_id = airport_heliport_seaplanerampsite_pt_yddvpa.id
  where master_join_iwoffc.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_rampsite on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_pt_bboqhn.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_pt_bboqhn.title AS varchar), '(' || airport_heliport_floatingdocksite_pt_bboqhn.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_pt_bboqhn.href
  )) as lat_docksite  from master_join master_join_wanauv
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_pt_bboqhn on master_join_wanauv.target_id = airport_heliport_floatingdocksite_pt_bboqhn.id
  where master_join_wanauv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_docksite on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_enzfnp.*) AS annotation
  from master_join master_join_skdnia
  join notes.note_view notes_note_view_enzfnp on master_join_skdnia.target_id = notes_note_view_enzfnp.id
  where master_join_skdnia.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_wcijzx.*) as lat_availability
  from master_join master_join_oqvvld
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_wcijzx on master_join_oqvvld.target_id = airport_heliport_manoeuvringareaavailability_view_wcijzx.id
  where master_join_oqvvld.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_jaednc.geom AS extent_geom,
    geometry_elevatedsurface_view_jaednc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jaednc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jaednc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jaednc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jaednc.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_xhztib.geom AS centreline_geom,
    geometry_elevatedcurve_view_xhztib.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_xhztib.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_xhztib.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_xhztib.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_xhztib.horizontalAccuracy AS centreline_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jaednc on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_jaednc.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_xhztib on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_xhztib.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_saoztp.*) AS annotation
  from master_join master_join_txcqzp
  join notes.note_view notes_note_view_saoztp on master_join_txcqzp.target_id = notes_note_view_saoztp.id
  where master_join_txcqzp.source_id = airport_heliport.seaplanerampsite_ts.id
) as lat_annotation on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_cqynno.geom AS location_geom,
    geometry_elevatedpoint_view_cqynno.longitude AS location_longitude,
    geometry_elevatedpoint_view_cqynno.latitude AS location_latitude,
    geometry_elevatedpoint_view_cqynno.elevation AS location_elevation,
    geometry_elevatedpoint_view_cqynno.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cqynno.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cqynno.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cqynno.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ukksyk.title as varchar), '(' || organisation_unit_pt_ukksyk.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_ukksyk.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cqynno on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_cqynno.id
left join organisation.unit_pt organisation_unit_pt_ukksyk on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_ukksyk.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_upftnk.*) as lat_callsign
  from master_join master_join_gacxgw
  join service.callsigndetail_view service_callsigndetail_view_upftnk on master_join_gacxgw.target_id = service_callsigndetail_view_upftnk.id
  where master_join_gacxgw.source_id = service.searchrescueservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_zbcwgp.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_zbcwgp.title AS varchar), '(' || service_radiocommunicationchannel_pt_zbcwgp.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_zbcwgp.href
  )) as lat_radiocommunication  from master_join master_join_bxmmsi
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_zbcwgp on master_join_bxmmsi.target_id = service_radiocommunicationchannel_pt_zbcwgp.id
  where master_join_bxmmsi.source_id = service.searchrescueservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_idaidq
  join shared.contactinformation_view shared_contactinformation_view_hzrjtu on master_join_idaidq.target_id = shared_contactinformation_view_hzrjtu.id
  where master_join_idaidq.source_id = service.searchrescueservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_nhgyjp.*) as lat_availability
  from master_join master_join_boqlvf
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_view_nhgyjp on master_join_boqlvf.target_id = service_serviceoperationalstatus_view_nhgyjp.id
  where master_join_boqlvf.source_id = service.searchrescueservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ultqhl.*) AS annotation
  from master_join master_join_ltdvdp
  join notes.note_view notes_note_view_ultqhl on master_join_ltdvdp.target_id = notes_note_view_ultqhl.id
  where master_join_ltdvdp.source_id = service.searchrescueservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_beeqhb.id,
      'title', coalesce(cast(airspace_airspace_pt_beeqhb.title AS varchar), '(' || airspace_airspace_pt_beeqhb.nilreason[1] || ')'),
      'href', airspace_airspace_pt_beeqhb.href
  )) as lat_clientairspace  from master_join master_join_hrngoy
  join airspace.airspace_pt airspace_airspace_pt_beeqhb on master_join_hrngoy.target_id = airspace_airspace_pt_beeqhb.id
  where master_join_hrngoy.source_id = service.searchrescueservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_awhkkd.*) as lat_clientroute
  from master_join master_join_gangjm
  join routes.routeportion_view routes_routeportion_view_awhkkd on master_join_gangjm.target_id = routes_routeportion_view_awhkkd.id
  where master_join_gangjm.source_id = service.searchrescueservice_ts.id
) as lat_clientroute on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_lrfbvq.geom AS location_geom,
    geometry_elevatedpoint_view_lrfbvq.longitude AS location_longitude,
    geometry_elevatedpoint_view_lrfbvq.latitude AS location_latitude,
    geometry_elevatedpoint_view_lrfbvq.elevation AS location_elevation,
    geometry_elevatedpoint_view_lrfbvq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lrfbvq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lrfbvq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lrfbvq.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lrfbvq on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_lrfbvq.id
left join lateral(
  select
  from master_join master_join_kmlkse
  join shared.contactinformation_view shared_contactinformation_view_dmwlxv on master_join_kmlkse.target_id = shared_contactinformation_view_dmwlxv.id
  where master_join_kmlkse.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lscbdt.*) AS annotation
  from master_join master_join_agaxwh
  join notes.note_view notes_note_view_lscbdt on master_join_agaxwh.target_id = notes_note_view_lscbdt.id
  where master_join_agaxwh.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_eclaiy.*) as lat_groundstation
  from master_join master_join_ltlkhe
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_view_eclaiy on master_join_ltlkhe.target_id = surveillance_surveillancegroundstation_view_eclaiy.id
  where master_join_ltlkhe.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_ynmqmj.title as varchar), '(' || airspace_airspace_pt_ynmqmj.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_ynmqmj.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nczwwa.title as varchar), '(' || navaids_points_designatedpoint_pt_nczwwa.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nczwwa.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wkxvwy.title as varchar), '(' || navaids_points_navaid_pt_wkxvwy.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_wkxvwy.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hxydlu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hxydlu.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_hxydlu.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cwocgt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cwocgt.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cwocgt.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pribcr.title as varchar), '(' || airport_heliport_airportheliport_pt_pribcr.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_pribcr.href AS locationairportreferencepoint_href,
    geometry_point_view_enlazb.geom AS locationposition_geom,
    geometry_point_view_enlazb.longitude AS locationposition_longitude,
    geometry_point_view_enlazb.latitude AS locationposition_latitude,
    geometry_point_view_enlazb.horizontalAccuracy AS locationposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_ynmqmj on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_ynmqmj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nczwwa on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nczwwa.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wkxvwy on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_wkxvwy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hxydlu on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hxydlu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cwocgt on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cwocgt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pribcr on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_pribcr.id
left join geometry.point_view geometry_point_view_enlazb on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_enlazb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bwfuqe.*) AS annotation
  from master_join master_join_ugrfoa
  join notes.note_view notes_note_view_bwfuqe on master_join_ugrfoa.target_id = notes_note_view_bwfuqe.id
  where master_join_ugrfoa.source_id = navaids_points.significantpointinairspace_ts.id
) as lat_annotation on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_pfphmj.title as varchar), '(' || organisation_organisationauthority_pt_pfphmj.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_pfphmj.href AS authority_href,
    lat_annotation.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pfphmj on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_pfphmj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zvmgzd.*) AS annotation
  from master_join master_join_llstbi
  join notes.note_view notes_note_view_zvmgzd on master_join_llstbi.target_id = notes_note_view_zvmgzd.id
  where master_join_llstbi.source_id = shared.specialdate_ts.id
) as lat_annotation on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.specialnavigationstationstatus_view', 'navaids_points.authorityforspecialnavigationstation_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_smvueq.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_smvueq.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_smvueq.href AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_wuxeuj.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_slorrn.geom AS position_geom,
    geometry_elevatedpoint_view_slorrn.longitude AS position_longitude,
    geometry_elevatedpoint_view_slorrn.latitude AS position_latitude,
    geometry_elevatedpoint_view_slorrn.elevation AS position_elevation,
    geometry_elevatedpoint_view_slorrn.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_slorrn.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_slorrn.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_slorrn.horizontalAccuracy AS position_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_smvueq on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_smvueq.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_wuxeuj on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_wuxeuj.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_slorrn on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_slorrn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_view_pbxofs.*) as lat_availability
  from master_join master_join_spiidx
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_view_pbxofs on master_join_spiidx.target_id = navaids_points_specialnavigationstationstatus_view_pbxofs.id
  where master_join_spiidx.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ojiydb.*) AS annotation
  from master_join master_join_pefmhn
  join notes.note_view notes_note_view_ojiydb on master_join_pefmhn.target_id = notes_note_view_ojiydb.id
  where master_join_pefmhn.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['notes.note_view', 'navaids_points.authorityforspecialnavigationsystem_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_ibtpte.*) AS responsibleorganisation,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_ibtpte on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_ibtpte.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mxhezv.*) AS annotation
  from master_join master_join_nqjdef
  join notes.note_view notes_note_view_mxhezv on master_join_nqjdef.target_id = notes_note_view_mxhezv.id
  where master_join_nqjdef.source_id = navaids_points.specialnavigationsystem_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_aqxedg.title as varchar), '(' || navaids_points_navaid_pt_aqxedg.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_aqxedg.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_idltcr.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_idltcr.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_idltcr.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_kwcwkb.title as varchar), '(' || surveillance_radarsystem_pt_kwcwkb.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_kwcwkb.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_xtngox.title as varchar), '(' || procedure_safealtitudearea_pt_xtngox.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_xtngox.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_unnogb.*) AS arrival,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_aqxedg on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_aqxedg.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_idltcr on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_idltcr.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_kwcwkb on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_kwcwkb.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_xtngox on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_xtngox.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_unnogb on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_unnogb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_rwpkmb.*) as lat_availability
  from master_join master_join_ckttmd
  join procedure.procedureavailability_view procedure_procedureavailability_view_rwpkmb on master_join_ckttmd.target_id = procedure_procedureavailability_view_rwpkmb.id
  where master_join_ckttmd.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_dzhdsi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_dzhdsi.title AS varchar), '(' || airport_heliport_airportheliport_pt_dzhdsi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_dzhdsi.href
  )) as lat_airportheliport  from master_join master_join_hyuxpq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dzhdsi on master_join_hyuxpq.target_id = airport_heliport_airportheliport_pt_dzhdsi.id
  where master_join_hyuxpq.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_cdapbi.*) as lat_aircraftcharacteristic
  from master_join master_join_mjuize
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_cdapbi on master_join_mjuize.target_id = shared_aircraftcharacteristic_view_cdapbi.id
  where master_join_mjuize.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_oavzfk.*) as lat_flighttransition
  from master_join master_join_ynwesx
  join procedure.proceduretransition_view procedure_proceduretransition_view_oavzfk on master_join_ynwesx.target_id = procedure_proceduretransition_view_oavzfk.id
  where master_join_ynwesx.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eelzoj.*) AS annotation
  from master_join master_join_ydxjzb
  join notes.note_view notes_note_view_eelzoj on master_join_ydxjzb.target_id = notes_note_view_eelzoj.id
  where master_join_ydxjzb.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_czzear.title as varchar), '(' || navaids_points_navaid_pt_czzear.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_czzear.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_dpytaf.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_dpytaf.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_dpytaf.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_wdueso.title as varchar), '(' || surveillance_radarsystem_pt_wdueso.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_wdueso.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_nnucav.title as varchar), '(' || procedure_safealtitudearea_pt_nnucav.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_nnucav.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ozwpuw.*) AS takeoff,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_czzear on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_czzear.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_dpytaf on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_dpytaf.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_wdueso on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_wdueso.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_nnucav on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_nnucav.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ozwpuw on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_ozwpuw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_tdqtek.*) as lat_availability
  from master_join master_join_fhrugh
  join procedure.procedureavailability_view procedure_procedureavailability_view_tdqtek on master_join_fhrugh.target_id = procedure_procedureavailability_view_tdqtek.id
  where master_join_fhrugh.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_oqsonx.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_oqsonx.title AS varchar), '(' || airport_heliport_airportheliport_pt_oqsonx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_oqsonx.href
  )) as lat_airportheliport  from master_join master_join_bvbkva
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oqsonx on master_join_bvbkva.target_id = airport_heliport_airportheliport_pt_oqsonx.id
  where master_join_bvbkva.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_mubefw.*) as lat_aircraftcharacteristic
  from master_join master_join_ejpujd
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_mubefw on master_join_ejpujd.target_id = shared_aircraftcharacteristic_view_mubefw.id
  where master_join_ejpujd.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_xluruv.*) as lat_flighttransition
  from master_join master_join_trsmdu
  join procedure.proceduretransition_view procedure_proceduretransition_view_xluruv on master_join_trsmdu.target_id = procedure_proceduretransition_view_xluruv.id
  where master_join_trsmdu.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ooqoyd.*) AS annotation
  from master_join master_join_uxkald
  join notes.note_view notes_note_view_ooqoyd on master_join_uxkald.target_id = notes_note_view_ooqoyd.id
  where master_join_uxkald.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_dxlbqe.title as varchar), '(' || shared_standardleveltable_pt_dxlbqe.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_dxlbqe.href AS leveltable_href,
    lat_level.lat_level as level,
    lat_annotation.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_dxlbqe on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_dxlbqe.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_view_qulvhl.*) as lat_level
  from master_join master_join_enchya
  join shared.standardlevel_view shared_standardlevel_view_qulvhl on master_join_enchya.target_id = shared_standardlevel_view_qulvhl.id
  where master_join_enchya.source_id = shared.standardlevelcolumn_ts.id
) as lat_level on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cjywdv.*) AS annotation
  from master_join master_join_bmiosl
  join notes.note_view notes_note_view_cjywdv on master_join_bmiosl.target_id = notes_note_view_cjywdv.id
  where master_join_bmiosl.source_id = shared.standardlevelcolumn_ts.id
) as lat_annotation on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_dnrxqg.title as varchar), '(' || shared_standardlevelcolumn_pt_dnrxqg.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_dnrxqg.href AS applicablelevelcolumn_href,
    lat_applicableairspace.lat_applicableairspace as applicableairspace,
    lat_annotation.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_dnrxqg on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_dnrxqg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_iunyyo.id,
      'title', coalesce(cast(airspace_airspace_pt_iunyyo.title AS varchar), '(' || airspace_airspace_pt_iunyyo.nilreason[1] || ')'),
      'href', airspace_airspace_pt_iunyyo.href
  )) as lat_applicableairspace  from master_join master_join_wfvmce
  join airspace.airspace_pt airspace_airspace_pt_iunyyo on master_join_wfvmce.target_id = airspace_airspace_pt_iunyyo.id
  where master_join_wfvmce.source_id = shared.standardlevelsector_ts.id
) as lat_applicableairspace on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tfpngw.*) AS annotation
  from master_join master_join_jmidwp
  join notes.note_view notes_note_view_tfpngw on master_join_jmidwp.target_id = notes_note_view_tfpngw.id
  where master_join_jmidwp.source_id = shared.standardlevelsector_ts.id
) as lat_annotation on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    lat_annotation.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ancqtt.*) AS annotation
  from master_join master_join_xoqosq
  join notes.note_view notes_note_view_ancqtt on master_join_xoqosq.target_id = notes_note_view_ancqtt.id
  where master_join_xoqosq.source_id = shared.standardleveltable_ts.id
) as lat_annotation on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_cypduq.title as varchar), '(' || airport_heliport_aircraftstand_pt_cypduq.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_cypduq.href AS markedstand_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_cypduq on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_cypduq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_ktcyke.*) as lat_element
  from master_join master_join_mynjci
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_ktcyke on master_join_mynjci.target_id = airport_heliport_markingelement_view_ktcyke.id
  where master_join_mynjci.source_id = airport_heliport.standmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fsdxga.*) AS annotation
  from master_join master_join_pydets
  join notes.note_view notes_note_view_fsdxga on master_join_pydets.target_id = notes_note_view_fsdxga.id
  where master_join_pydets.source_id = airport_heliport.standmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_fzjnvv.title as varchar), '(' || airport_heliport_airportheliport_pt_fzjnvv.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_fzjnvv.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_phvynd.geom AS location_geom,
    geometry_elevatedpoint_view_phvynd.longitude AS location_longitude,
    geometry_elevatedpoint_view_phvynd.latitude AS location_latitude,
    geometry_elevatedpoint_view_phvynd.elevation AS location_elevation,
    geometry_elevatedpoint_view_phvynd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_phvynd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_phvynd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_phvynd.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fzjnvv on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_fzjnvv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_phvynd on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_phvynd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uvrrfg.*) AS annotation
  from master_join master_join_ttwrpu
  join notes.note_view notes_note_view_uvrrfg on master_join_ttwrpu.target_id = notes_note_view_uvrrfg.id
  where master_join_ttwrpu.source_id = airport_heliport.surveycontrolpoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_oamvfs.geom AS location_geom,
    geometry_elevatedpoint_view_oamvfs.longitude AS location_longitude,
    geometry_elevatedpoint_view_oamvfs.latitude AS location_latitude,
    geometry_elevatedpoint_view_oamvfs.elevation AS location_elevation,
    geometry_elevatedpoint_view_oamvfs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oamvfs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oamvfs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oamvfs.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oamvfs on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_oamvfs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_ikgzwl.*) as lat_authority
  from master_join master_join_mcfarm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_ikgzwl on master_join_mcfarm.target_id = navaids_points_authorityfornavaidequipment_view_ikgzwl.id
  where master_join_mcfarm.source_id = navaids_points.tacan_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_hqnwke.*) as lat_monitoring
  from master_join master_join_mjeeoa
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_hqnwke on master_join_mjeeoa.target_id = navaids_points_navaidequipmentmonitoring_view_hqnwke.id
  where master_join_mjeeoa.source_id = navaids_points.tacan_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_dwabkr.*) as lat_availability
  from master_join master_join_dsbqdy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_dwabkr on master_join_dsbqdy.target_id = navaids_points_navaidoperationalstatus_view_dwabkr.id
  where master_join_dsbqdy.source_id = navaids_points.tacan_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vfdrrv.*) AS annotation
  from master_join master_join_flozwb
  join notes.note_view notes_note_view_vfdrrv on master_join_flozwb.target_id = notes_note_view_vfdrrv.id
  where master_join_flozwb.source_id = navaids_points.tacan_ts.id
) as lat_annotation on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_txmggb.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_txmggb.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_txmggb.href AS taxiholding_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_txmggb on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_txmggb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_jejvut.*) as lat_element
  from master_join master_join_ofkgtc
  join shared.lightelement_view shared_lightelement_view_jejvut on master_join_ofkgtc.target_id = shared_lightelement_view_jejvut.id
  where master_join_ofkgtc.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_elapcn.*) as lat_availability
  from master_join master_join_dwhpsn
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_elapcn on master_join_dwhpsn.target_id = airport_heliport_groundlightingavailability_view_elapcn.id
  where master_join_dwhpsn.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fywoun.*) AS annotation
  from master_join master_join_xdttmj
  join notes.note_view notes_note_view_fywoun on master_join_xdttmj.target_id = notes_note_view_fywoun.id
  where master_join_xdttmj.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_kbeqit.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_kbeqit.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_kbeqit.href AS markedtaxihold_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_kbeqit on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_kbeqit.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_tqfhrj.*) as lat_element
  from master_join master_join_jkcxyp
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_tqfhrj on master_join_jkcxyp.target_id = airport_heliport_markingelement_view_tqfhrj.id
  where master_join_jkcxyp.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lhqtli.*) AS annotation
  from master_join master_join_rxlsew
  join notes.note_view notes_note_view_lhqtli on master_join_rxlsew.target_id = notes_note_view_lhqtli.id
  where master_join_rxlsew.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_jiftfm.title as varchar), '(' || airport_heliport_guidanceline_pt_jiftfm.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_jiftfm.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_kuextd.geom AS location_geom,
    geometry_elevatedpoint_view_kuextd.longitude AS location_longitude,
    geometry_elevatedpoint_view_kuextd.latitude AS location_latitude,
    geometry_elevatedpoint_view_kuextd.elevation AS location_elevation,
    geometry_elevatedpoint_view_kuextd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kuextd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kuextd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kuextd.horizontalAccuracy AS location_horizontalaccuracy,
    lat_protectedrunway.lat_protectedrunway as protectedrunway,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jiftfm on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_jiftfm.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kuextd on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_kuextd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_piskgo.id,
      'title', coalesce(cast(airport_heliport_runway_pt_piskgo.title AS varchar), '(' || airport_heliport_runway_pt_piskgo.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_piskgo.href
  )) as lat_protectedrunway  from master_join master_join_lfuynt
  join airport_heliport.runway_pt airport_heliport_runway_pt_piskgo on master_join_lfuynt.target_id = airport_heliport_runway_pt_piskgo.id
  where master_join_lfuynt.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_protectedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uversw.*) AS annotation
  from master_join master_join_twrqjs
  join notes.note_view notes_note_view_uversw on master_join_twrqjs.target_id = notes_note_view_uversw.id
  where master_join_twrqjs.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_cwwfcb.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_rwfgzy.title as varchar), '(' || airport_heliport_taxiway_pt_rwfgzy.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_rwfgzy.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_mwbtay.geom AS extent_geom,
    geometry_elevatedsurface_view_mwbtay.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mwbtay.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mwbtay.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mwbtay.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mwbtay.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_cwwfcb on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_cwwfcb.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_rwfgzy on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_rwfgzy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mwbtay on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_mwbtay.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmaxpk.*) AS annotation
  from master_join master_join_yhaupe
  join notes.note_view notes_note_view_nmaxpk on master_join_yhaupe.target_id = notes_note_view_nmaxpk.id
  where master_join_yhaupe.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_fdzzet.*) as lat_availability
  from master_join master_join_msvucj
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_fdzzet on master_join_msvucj.target_id = airport_heliport_manoeuvringareaavailability_view_fdzzet.id
  where master_join_msvucj.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_cvqmmc.title as varchar), '(' || airport_heliport_taxiway_pt_cvqmmc.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_cvqmmc.href AS lightedtaxiway_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_cvqmmc on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_cvqmmc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_vzsrqq.*) as lat_element
  from master_join master_join_axjwnz
  join shared.lightelement_view shared_lightelement_view_vzsrqq on master_join_axjwnz.target_id = shared_lightelement_view_vzsrqq.id
  where master_join_axjwnz.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_zbniym.*) as lat_availability
  from master_join master_join_rottrc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_zbniym on master_join_rottrc.target_id = airport_heliport_groundlightingavailability_view_zbniym.id
  where master_join_rottrc.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rsqjek.*) AS annotation
  from master_join master_join_zsqjqm
  join notes.note_view notes_note_view_rsqjek on master_join_zsqjqm.target_id = notes_note_view_rsqjek.id
  where master_join_zsqjqm.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_kzqezm.title as varchar), '(' || airport_heliport_taxiway_pt_kzqezm.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_kzqezm.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_rqejhk.title as varchar), '(' || airport_heliport_taxiwayelement_pt_rqejhk.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_rqejhk.href AS markedelement_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_kzqezm on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_kzqezm.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_rqejhk on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_rqejhk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_gisxxt.*) as lat_element
  from master_join master_join_cdbqdz
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_gisxxt on master_join_cdbqdz.target_id = airport_heliport_markingelement_view_gisxxt.id
  where master_join_cdbqdz.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mrwbss.*) AS annotation
  from master_join master_join_eqzpol
  join notes.note_view notes_note_view_mrwbss on master_join_eqzpol.target_id = notes_note_view_mrwbss.id
  where master_join_eqzpol.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.taxiwaycontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kodzud.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_mrfbes.title as varchar), '(' || airport_heliport_airportheliport_pt_mrfbes.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mrfbes.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kodzud on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kodzud.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mrfbes on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mrfbes.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_view_ntxcfu.*) as lat_contaminant
  from master_join master_join_osmgub
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_view_ntxcfu on master_join_osmgub.target_id = airport_heliport_taxiwaycontamination_view_ntxcfu.id
  where master_join_osmgub.source_id = airport_heliport.taxiway_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dfrojm.*) AS annotation
  from master_join master_join_hwovgf
  join notes.note_view notes_note_view_dfrojm on master_join_hwovgf.target_id = notes_note_view_dfrojm.id
  where master_join_hwovgf.source_id = airport_heliport.taxiway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_yuvqsf.*) as lat_availability
  from master_join master_join_cyckhm
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_yuvqsf on master_join_cyckhm.target_id = airport_heliport_manoeuvringareaavailability_view_yuvqsf.id
  where master_join_cyckhm.source_id = airport_heliport.taxiway_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.point_view', 'geometry.surface_view', 'procedure.terminalarrivalareasector_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_zqvuhq.title as varchar), '(' || navaids_points_designatedpoint_pt_zqvuhq.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_zqvuhq.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ovxaia.title as varchar), '(' || navaids_points_designatedpoint_pt_ovxaia.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ovxaia.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jqsyyf.title as varchar), '(' || navaids_points_navaid_pt_jqsyyf.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_jqsyyf.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_fjyzom.title as varchar), '(' || navaids_points_navaid_pt_fjyzom.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_fjyzom.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ybvpdu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ybvpdu.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_ybvpdu.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lkmrrm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lkmrrm.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_lkmrrm.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_prlaio.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_prlaio.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_prlaio.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dwfeha.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dwfeha.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dwfeha.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tducoc.title as varchar), '(' || airport_heliport_airportheliport_pt_tducoc.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_tducoc.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cxtmra.title as varchar), '(' || airport_heliport_airportheliport_pt_cxtmra.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_cxtmra.href AS iafairportreferencepoint_href,
    geometry_point_view_udkbga.geom AS ifposition_geom,
    geometry_point_view_udkbga.longitude AS ifposition_longitude,
    geometry_point_view_udkbga.latitude AS ifposition_latitude,
    geometry_point_view_udkbga.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_isagnc.geom AS iafposition_geom,
    geometry_point_view_isagnc.longitude AS iafposition_longitude,
    geometry_point_view_isagnc.latitude AS iafposition_latitude,
    geometry_point_view_isagnc.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_ngrmbn.geom AS buffer_geom,
    geometry_surface_view_ngrmbn.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_pdalte.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_pdalte.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_pdalte.href AS approachrnav_href,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zqvuhq on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zqvuhq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jqsyyf on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_jqsyyf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ybvpdu on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ybvpdu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_prlaio on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_prlaio.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tducoc on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_tducoc.id
left join geometry.point_view geometry_point_view_udkbga on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_udkbga.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ovxaia on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ovxaia.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fjyzom on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_fjyzom.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lkmrrm on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lkmrrm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dwfeha on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dwfeha.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cxtmra on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_cxtmra.id
left join geometry.point_view geometry_point_view_isagnc on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_isagnc.id
left join geometry.surface_view geometry_surface_view_ngrmbn on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_ngrmbn.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_pdalte on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_pdalte.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_view_vlvlqt.*) as lat_sector
  from master_join master_join_xiehii
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_view_vlvlqt on master_join_xiehii.target_id = procedure_terminalarrivalareasector_view_vlvlqt.id
  where master_join_xiehii.source_id = procedure.terminalarrivalarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_btgvrs.*) AS annotation
  from master_join master_join_woxckc
  join notes.note_view notes_note_view_btgvrs on master_join_woxckc.target_id = notes_note_view_btgvrs.id
  where master_join_woxckc.source_id = procedure.terminalarrivalarea_ts.id
) as lat_annotation on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gcwgys.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gcwgys.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_gcwgys.href AS lightedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gcwgys on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_gcwgys.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_zisilf.*) as lat_element
  from master_join master_join_daauhk
  join shared.lightelement_view shared_lightelement_view_zisilf on master_join_daauhk.target_id = shared_lightelement_view_zisilf.id
  where master_join_daauhk.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_xvdqhe.*) as lat_availability
  from master_join master_join_pqteov
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_xvdqhe on master_join_pqteov.target_id = airport_heliport_groundlightingavailability_view_xvdqhe.id
  where master_join_pqteov.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bvjtre.*) AS annotation
  from master_join master_join_pnhmlf
  join notes.note_view notes_note_view_bvjtre on master_join_pnhmlf.target_id = notes_note_view_bvjtre.id
  where master_join_pnhmlf.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xmugxo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xmugxo.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xmugxo.href AS markedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xmugxo on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xmugxo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_kaedvh.*) as lat_element
  from master_join master_join_rjxfay
  join airport_heliport.markingelement_view airport_heliport_markingelement_view_kaedvh on master_join_rjxfay.target_id = airport_heliport_markingelement_view_kaedvh.id
  where master_join_rjxfay.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gmbfda.*) AS annotation
  from master_join master_join_bbptqm
  join notes.note_view notes_note_view_gmbfda on master_join_bbptqm.target_id = notes_note_view_gmbfda.id
  where master_join_bbptqm.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xhxdud.*) AS surfaceproperties,
    geometry_elevatedsurface_view_seqeef.geom AS extent_geom,
    geometry_elevatedsurface_view_seqeef.elevation AS extent_elevation,
    geometry_elevatedsurface_view_seqeef.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_seqeef.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_seqeef.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_seqeef.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rglazs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rglazs.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_rglazs.href AS protectedtouchdownliftoff_href,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xhxdud on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xhxdud.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_seqeef on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_seqeef.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rglazs on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_rglazs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cuvhhj.*) AS annotation
  from master_join master_join_huistv
  join notes.note_view notes_note_view_cuvhhj on master_join_huistv.target_id = notes_note_view_cuvhhj.id
  where master_join_huistv.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_fmirhq.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_fmirhq.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_fmirhq.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_fmirhq.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_fmirhq.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_fmirhq.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_fmirhq.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_fmirhq.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_omyesx.geom AS extent_geom,
    geometry_elevatedsurface_view_omyesx.elevation AS extent_elevation,
    geometry_elevatedsurface_view_omyesx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_omyesx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_omyesx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_omyesx.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lxtxkb.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_vnzozm.title as varchar), '(' || airport_heliport_airportheliport_pt_vnzozm.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_vnzozm.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_yrpntg.title as varchar), '(' || airport_heliport_runway_pt_yrpntg.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_yrpntg.href AS approachtakeoffarea_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fmirhq on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_fmirhq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_omyesx on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_omyesx.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lxtxkb on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lxtxkb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vnzozm on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_vnzozm.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_yrpntg on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_yrpntg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_view_zrjdhz.*) as lat_contaminant
  from master_join master_join_irvank
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_view_zrjdhz on master_join_irvank.target_id = airport_heliport_touchdownliftoffcontamination_view_zrjdhz.id
  where master_join_irvank.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_shisky.*) AS annotation
  from master_join master_join_xfoavt
  join notes.note_view notes_note_view_shisky on master_join_xfoavt.target_id = notes_note_view_shisky.id
  where master_join_xfoavt.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_ikevww.*) as lat_availability
  from master_join master_join_lbeaft
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_view_ikevww on master_join_lbeaft.target_id = airport_heliport_manoeuvringareaavailability_view_ikevww.id
  where master_join_lbeaft.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_availability on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['geometry.elevatedpoint_view', 'organisation.unitdependency_view', 'shared.contactinformation_view', 'organisation.unitavailability_view', 'notes.note_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_trwtri.geom AS position_geom,
    geometry_elevatedpoint_view_trwtri.longitude AS position_longitude,
    geometry_elevatedpoint_view_trwtri.latitude AS position_latitude,
    geometry_elevatedpoint_view_trwtri.elevation AS position_elevation,
    geometry_elevatedpoint_view_trwtri.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_trwtri.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_trwtri.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_trwtri.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_dskhfs.title as varchar), '(' || airport_heliport_airportheliport_pt_dskhfs.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_dskhfs.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_uqngcz.title as varchar), '(' || organisation_organisationauthority_pt_uqngcz.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_uqngcz.href AS ownerorganisation_href,
    lat_relatedunit.lat_relatedunit as relatedunit,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_trwtri on organisation.unit_ts.position_id = geometry_elevatedpoint_view_trwtri.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dskhfs on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_dskhfs.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_uqngcz on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_uqngcz.id
left join lateral(
  select
  from master_join master_join_xqtdal
  join shared.contactinformation_view shared_contactinformation_view_ypospx on master_join_xqtdal.target_id = shared_contactinformation_view_ypospx.id
  where master_join_xqtdal.source_id = organisation.unit_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_view_jyxpgq.*) as lat_relatedunit
  from master_join master_join_srorhb
  join organisation.unitdependency_view organisation_unitdependency_view_jyxpgq on master_join_srorhb.target_id = organisation_unitdependency_view_jyxpgq.id
  where master_join_srorhb.source_id = organisation.unit_ts.id
) as lat_relatedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_view_godxab.*) as lat_availability
  from master_join master_join_vwwoei
  join organisation.unitavailability_view organisation_unitavailability_view_godxab on master_join_vwwoei.target_id = organisation_unitavailability_view_godxab.id
  where master_join_vwwoei.source_id = organisation.unit_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mwxtqv.*) AS annotation
  from master_join master_join_pycrqm
  join notes.note_view notes_note_view_mwxtqv on master_join_pycrqm.target_id = notes_note_view_mwxtqv.id
  where master_join_pycrqm.source_id = organisation.unit_ts.id
) as lat_annotation on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    lat_annotation.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ytdvgo.*) AS annotation
  from master_join master_join_cssrvm
  join notes.note_view notes_note_view_ytdvgo on master_join_cssrvm.target_id = notes_note_view_ytdvgo.id
  where master_join_cssrvm.source_id = holding.unplannedholding_ts.id
) as lat_annotation on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurepart_view', 'notes.note_view', 'obstacles.verticalstructurelightingstatus_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_nnijka.title as varchar), '(' || navaids_points_markerbeacon_pt_nnijka.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_nnijka.href AS marker_href,
    lat_part.lat_part as part,
    lat_hostedpassengerservice.lat_hostedpassengerservice as hostedpassengerservice,
    lat_hostedspecialnavstation.lat_hostedspecialnavstation as hostedspecialnavstation,
    lat_hostedunit.lat_hostedunit as hostedunit,
    lat_hostedorganisation.lat_hostedorganisation as hostedorganisation,
    lat_annotation.annotation as annotation,
    lat_lightingavailability.lat_lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_nnijka on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_nnijka.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_view_ueojgc.*) as lat_part
  from master_join master_join_rheyhd
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_view_ueojgc on master_join_rheyhd.target_id = obstacles_verticalstructurepart_view_ueojgc.id
  where master_join_rheyhd.source_id = obstacles.verticalstructure_ts.id
) as lat_part on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_pt_nobhdh.id,
      'title', coalesce(cast(service_passengerservice_pt_nobhdh.title AS varchar), '(' || service_passengerservice_pt_nobhdh.nilreason[1] || ')'),
      'href', service_passengerservice_pt_nobhdh.href
  )) as lat_hostedpassengerservice  from master_join master_join_rtqzer
  join service.passengerservice_pt service_passengerservice_pt_nobhdh on master_join_rtqzer.target_id = service_passengerservice_pt_nobhdh.id
  where master_join_rtqzer.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedpassengerservice on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_pt_yhxabd.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_pt_yhxabd.title AS varchar), '(' || navaids_points_specialnavigationstation_pt_yhxabd.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_pt_yhxabd.href
  )) as lat_hostedspecialnavstation  from master_join master_join_vmqlfe
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_yhxabd on master_join_vmqlfe.target_id = navaids_points_specialnavigationstation_pt_yhxabd.id
  where master_join_vmqlfe.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedspecialnavstation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_pt_xtfnak.id,
      'title', coalesce(cast(organisation_unit_pt_xtfnak.title AS varchar), '(' || organisation_unit_pt_xtfnak.nilreason[1] || ')'),
      'href', organisation_unit_pt_xtfnak.href
  )) as lat_hostedunit  from master_join master_join_jimgmz
  join organisation.unit_pt organisation_unit_pt_xtfnak on master_join_jimgmz.target_id = organisation_unit_pt_xtfnak.id
  where master_join_jimgmz.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_rvflkc.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_rvflkc.title AS varchar), '(' || organisation_organisationauthority_pt_rvflkc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_rvflkc.href
  )) as lat_hostedorganisation  from master_join master_join_srtqbe
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_rvflkc on master_join_srtqbe.target_id = organisation_organisationauthority_pt_rvflkc.id
  where master_join_srtqbe.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pcspzf.*) AS annotation
  from master_join master_join_fdodsg
  join notes.note_view notes_note_view_pcspzf on master_join_fdodsg.target_id = notes_note_view_pcspzf.id
  where master_join_fdodsg.source_id = obstacles.verticalstructure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_view_wyvphr.*) as lat_lightingavailability
  from master_join master_join_emazqr
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_view_wyvphr on master_join_emazqr.target_id = obstacles_verticalstructurelightingstatus_view_wyvphr.id
  where master_join_emazqr.source_id = obstacles.verticalstructure_ts.id
) as lat_lightingavailability on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'shared.lightelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_bjpvew.title as varchar), '(' || airport_heliport_runwaydirection_pt_bjpvew.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_bjpvew.href AS runwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_bjpvew on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_bjpvew.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_ixvaki.*) as lat_element
  from master_join master_join_nfdzes
  join shared.lightelement_view shared_lightelement_view_ixvaki on master_join_nfdzes.target_id = shared_lightelement_view_ixvaki.id
  where master_join_nfdzes.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_emjujj.*) as lat_availability
  from master_join master_join_qoqjjp
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_view_emjujj on master_join_qoqjjp.target_id = airport_heliport_groundlightingavailability_view_emjujj.id
  where master_join_qoqjjp.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ubgpam.*) AS annotation
  from master_join master_join_kxunlr
  join notes.note_view notes_note_view_ubgpam on master_join_kxunlr.target_id = notes_note_view_ubgpam.id
  where master_join_kxunlr.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_annotation on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'notes.note_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_rgzsuu.geom AS location_geom,
    geometry_elevatedpoint_view_rgzsuu.longitude AS location_longitude,
    geometry_elevatedpoint_view_rgzsuu.latitude AS location_latitude,
    geometry_elevatedpoint_view_rgzsuu.elevation AS location_elevation,
    geometry_elevatedpoint_view_rgzsuu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rgzsuu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rgzsuu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rgzsuu.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rgzsuu on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_rgzsuu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_bwlefo.*) as lat_authority
  from master_join master_join_xuqnjn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_view_bwlefo on master_join_xuqnjn.target_id = navaids_points_authorityfornavaidequipment_view_bwlefo.id
  where master_join_xuqnjn.source_id = navaids_points.vor_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_njwomt.*) as lat_monitoring
  from master_join master_join_kqjwxo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_view_njwomt on master_join_kqjwxo.target_id = navaids_points_navaidequipmentmonitoring_view_njwomt.id
  where master_join_kqjwxo.source_id = navaids_points.vor_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_cisysm.*) as lat_availability
  from master_join master_join_qhtodw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_view_cisysm on master_join_qhtodw.target_id = navaids_points_navaidoperationalstatus_view_cisysm.id
  where master_join_qhtodw.source_id = navaids_points.vor_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ygidyo.*) AS annotation
  from master_join master_join_rpaqjt
  join notes.note_view notes_note_view_ygidyo on master_join_rpaqjt.target_id = notes_note_view_ygidyo.id
  where master_join_rpaqjt.source_id = navaids_points.vor_ts.id
) as lat_annotation on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['airport_heliport.workareaactivity_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_cgjigi.title as varchar), '(' || airport_heliport_airportheliport_pt_cgjigi.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_cgjigi.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_gkmkdj.geom AS extent_geom,
    geometry_elevatedsurface_view_gkmkdj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_gkmkdj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_gkmkdj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_gkmkdj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_gkmkdj.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cgjigi on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_cgjigi.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gkmkdj on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_gkmkdj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_view_vuyacn.*) as lat_activation
  from master_join master_join_kxryih
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_view_vuyacn on master_join_kxryih.target_id = airport_heliport_workareaactivity_view_vuyacn.id
  where master_join_kxryih.source_id = airport_heliport.workarea_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_spasov.*) AS annotation
  from master_join master_join_zesqrp
  join notes.note_view notes_note_view_spasov on master_join_zesqrp.target_id = notes_note_view_spasov.id
  where master_join_zesqrp.source_id = airport_heliport.workarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
