-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
SELECT
    notes.note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(notes.note.propertyname_value, '(' || notes.note.propertyname_nilreason || ')'),
        'purpose', COALESCE(notes.note.purpose_value, '(' || notes.note.purpose_nilreason || ')'),
        'notes', translated_notes.notes_array
    ) AS note
FROM notes.note_pt
INNER JOIN notes.note ON notes.note_pt.note_id = notes.note.id
LEFT JOIN LATERAL (
    SELECT jsonb_agg(
        jsonb_build_object(
            'id', notes.linguisticnote_view.id,
            'lang', notes.linguisticnote_view.lang,
            'note', notes.linguisticnote_view.note
        )
    ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = notes.linguisticnote_view.id
    WHERE master_join.source_id = notes.note.id
) AS translated_notes ON true;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wznhga.*) AS annotation
  from master_join master_join_dfdosd
  join notes.note_view notes_note_view_wznhga on master_join_dfdosd.target_id = notes_note_view_wznhga.id
  where master_join_dfdosd.source_id = shared.aircraftcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_aiacgw.id) as lat_criticalridge
  from master_join master_join_waycim
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_aiacgw on master_join_waycim.target_id = airport_heliport_ridge_pt_aiacgw.id
  where master_join_waycim.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_gvqdxn.id) as lat_layer
  from master_join master_join_cuazqz
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_gvqdxn on master_join_cuazqz.target_id = airport_heliport_surfacecontaminationlayer_pt_gvqdxn.id
  where master_join_cuazqz.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qvfagl.*) AS annotation
  from master_join master_join_yroqqa
  join notes.note_view notes_note_view_qvfagl on master_join_yroqqa.target_id = notes_note_view_qvfagl.id
  where master_join_yroqqa.source_id = airport_heliport.aircraftstandcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_dfjueo.id) as lat_criticalridge
  from master_join master_join_ynfulu
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_dfjueo on master_join_ynfulu.target_id = airport_heliport_ridge_pt_dfjueo.id
  where master_join_ynfulu.source_id = airport_heliport.airportheliportcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_uqzuwy.id) as lat_layer
  from master_join master_join_ouywgq
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_uqzuwy on master_join_ouywgq.target_id = airport_heliport_surfacecontaminationlayer_pt_uqzuwy.id
  where master_join_ouywgq.source_id = airport_heliport.airportheliportcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jxxjpf.*) AS annotation
  from master_join master_join_ejnmyv
  join notes.note_view notes_note_view_jxxjpf on master_join_ejnmyv.target_id = notes_note_view_jxxjpf.id
  where master_join_ejnmyv.source_id = airport_heliport.airportheliportcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    airspace_airspacevolume_pt_zgqrxm.id AS theairspacevolume,
    lat_annotation.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_zgqrxm on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_zgqrxm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_detyli.*) AS annotation
  from master_join master_join_syvncr
  join notes.note_view notes_note_view_detyli on master_join_syvncr.target_id = notes_note_view_detyli.id
  where master_join_syvncr.source_id = airspace.airspacegeometrycomponent.id
) as lat_annotation on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_hwcvhb.title as varchar), '(' || shared_standardlevelcolumn_pt_hwcvhb.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_hwcvhb.href AS discretelevelseries_href,
    lat_annotation.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_hwcvhb on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_hwcvhb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kqkkab.*) AS annotation
  from master_join master_join_yvkwxv
  join notes.note_view notes_note_view_kqkkab on master_join_yvkwxv.target_id = notes_note_view_kqkkab.id
  where master_join_yvkwxv.source_id = shared.airspacelayer.id
) as lat_annotation on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_hwwoab.title as varchar), '(' || airspace_airspace_pt_hwwoab.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_hwwoab.href AS theairspace_href,
    lat_annotation.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_hwwoab on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_hwwoab.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oagbsi.*) AS annotation
  from master_join master_join_uwdhgf
  join notes.note_view notes_note_view_oagbsi on master_join_uwdhgf.target_id = notes_note_view_oagbsi.id
  where master_join_uwdhgf.source_id = airspace.airspacevolumedependency.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    lat_annotation.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rlycwl.*) AS annotation
  from master_join master_join_xhxyoy
  join notes.note_view notes_note_view_rlycwl on master_join_xhxyoy.target_id = notes_note_view_rlycwl.id
  where master_join_xhxyoy.source_id = shared.altitudeadjustment.id
) as lat_annotation on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_guqovt.title as varchar), '(' || navaids_points_angleindication_pt_guqovt.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_guqovt.href AS theangleindication_href,
    lat_annotation.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_guqovt on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_guqovt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qrifau.*) AS annotation
  from master_join master_join_maymja
  join notes.note_view notes_note_view_qrifau on master_join_maymja.target_id = notes_note_view_qrifau.id
  where master_join_maymja.source_id = navaids_points.angleuse.id
) as lat_annotation on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    lat_annotation.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ydosmq.*) AS annotation
  from master_join master_join_uqphgs
  join notes.note_view notes_note_view_ydosmq on master_join_uqphgs.target_id = notes_note_view_ydosmq.id
  where master_join_uqphgs.source_id = procedure.approachaltitudetable.id
) as lat_annotation on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    procedure_minima_pt_butxwp.id AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_xcdqoj.title as varchar), '(' || airport_heliport_altimetersource_pt_xcdqoj.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_xcdqoj.href AS altimeter_href,
    lat_circlingrestriction.lat_circlingrestriction as circlingrestriction,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_landingarea.lat_landingarea as landingarea,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_butxwp on procedure.approachcondition.minimumset_id = procedure_minima_pt_butxwp.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_xcdqoj on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_xcdqoj.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_pt_zgbitp.id) as lat_circlingrestriction
  from master_join master_join_yxaipg
  join procedure.circlingrestriction_pt procedure_circlingrestriction_pt_zgbitp on master_join_yxaipg.target_id = procedure_circlingrestriction_pt_zgbitp.id
  where master_join_yxaipg.source_id = procedure.approachcondition.id
) as lat_circlingrestriction on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_seggmu.id) as lat_aircraftcategory
  from master_join master_join_iiyili
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_seggmu on master_join_iiyili.target_id = shared_aircraftcharacteristic_pt_seggmu.id
  where master_join_iiyili.source_id = procedure.approachcondition.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_pt_ouwjai.id) as lat_landingarea
  from master_join master_join_imrmyu
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_ouwjai on master_join_imrmyu.target_id = procedure_landingtakeoffareacollection_pt_ouwjai.id
  where master_join_imrmyu.source_id = procedure.approachcondition.id
) as lat_landingarea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_pt_dnskij.id) as lat_designsurface
  from master_join master_join_paqash
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_pt_dnskij on master_join_paqash.target_id = shared_obstacleassessmentarea_pt_dnskij.id
  where master_join_paqash.source_id = procedure.approachcondition.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nabcpu.*) AS annotation
  from master_join master_join_idfyna
  join notes.note_view notes_note_view_nabcpu on master_join_idfyna.target_id = notes_note_view_nabcpu.id
  where master_join_idfyna.source_id = procedure.approachcondition.id
) as lat_annotation on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    lat_annotation.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rzddeh.*) AS annotation
  from master_join master_join_etvbwp
  join notes.note_view notes_note_view_rzddeh on master_join_etvbwp.target_id = notes_note_view_rzddeh.id
  where master_join_etvbwp.source_id = procedure.approachdistancetable.id
) as lat_annotation on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    lat_annotation.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ctozhv.*) AS annotation
  from master_join master_join_gzqifo
  join notes.note_view notes_note_view_ctozhv on master_join_gzqifo.target_id = notes_note_view_ctozhv.id
  where master_join_gzqifo.source_id = procedure.approachtimingtable.id
) as lat_annotation on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_iynqwt.id) as lat_criticalridge
  from master_join master_join_yhtxsu
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_iynqwt on master_join_yhtxsu.target_id = airport_heliport_ridge_pt_iynqwt.id
  where master_join_yhtxsu.source_id = airport_heliport.aproncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_aaybnb.id) as lat_layer
  from master_join master_join_oeiwbn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_aaybnb on master_join_oeiwbn.target_id = airport_heliport_surfacecontaminationlayer_pt_aaybnb.id
  where master_join_oeiwbn.source_id = airport_heliport.aproncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_povipi.*) AS annotation
  from master_join master_join_fcyueb
  join notes.note_view notes_note_view_povipi on master_join_fcyueb.target_id = notes_note_view_povipi.id
  where master_join_fcyueb.source_id = airport_heliport.aproncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_htcbdm.title as varchar), '(' || organisation_organisationauthority_pt_htcbdm.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_htcbdm.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_htcbdm on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_htcbdm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jnsovc.*) AS annotation
  from master_join master_join_egpjjm
  join notes.note_view notes_note_view_jnsovc on master_join_egpjjm.target_id = notes_note_view_jnsovc.id
  where master_join_egpjjm.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_zdtafp.title as varchar), '(' || organisation_organisationauthority_pt_zdtafp.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_zdtafp.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zdtafp on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_zdtafp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aiueek.*) AS annotation
  from master_join master_join_ykclvt
  join notes.note_view notes_note_view_aiueek on master_join_ykclvt.target_id = notes_note_view_aiueek.id
  where master_join_ykclvt.source_id = navaids_points.authorityfornavaidequipment.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_mmnyfs.title as varchar), '(' || organisation_organisationauthority_pt_mmnyfs.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_mmnyfs.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mmnyfs on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_mmnyfs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rwyxsp.*) AS annotation
  from master_join master_join_hdsssp
  join notes.note_view notes_note_view_rwyxsp on master_join_hdsssp.target_id = notes_note_view_rwyxsp.id
  where master_join_hdsssp.source_id = navaids_points.authorityforspecialnavigationstation.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_pszuya.title as varchar), '(' || organisation_organisationauthority_pt_pszuya.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_pszuya.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pszuya on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_pszuya.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aywqpd.*) AS annotation
  from master_join master_join_tlrrpo
  join notes.note_view notes_note_view_aywqpd on master_join_tlrrpo.target_id = notes_note_view_aywqpd.id
  where master_join_tlrrpo.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as lat_annotation on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    lat_annotation.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_onvbou.*) AS annotation
  from master_join master_join_qtgdnl
  join notes.note_view notes_note_view_onvbou on master_join_qtgdnl.target_id = notes_note_view_onvbou.id
  where master_join_qtgdnl.source_id = service.callsigndetail.id
) as lat_annotation on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    lat_annotation.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mejtnl.*) AS annotation
  from master_join master_join_fbhbpo
  join notes.note_view notes_note_view_mejtnl on master_join_fbhbpo.target_id = notes_note_view_mejtnl.id
  where master_join_fbhbpo.source_id = shared.circlesector.id
) as lat_annotation on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    lat_annotation.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qkwfnl.*) AS annotation
  from master_join master_join_xqaqln
  join notes.note_view notes_note_view_qkwfnl on master_join_xqaqln.target_id = notes_note_view_qkwfnl.id
  where master_join_xqaqln.source_id = airport_heliport.city.id
) as lat_annotation on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    shared_aircraftcharacteristic_pt_womiox.id AS enginetype,
    lat_annotation.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_womiox on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_womiox.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wjuixp.*) AS annotation
  from master_join master_join_gusgok
  join notes.note_view notes_note_view_wjuixp on master_join_gusgok.target_id = notes_note_view_wjuixp.id
  where master_join_gusgok.source_id = procedure.departurearrivalcondition.id
) as lat_annotation on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    lat_annotation.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kiqvum.*) AS annotation
  from master_join master_join_hgpmtu
  join notes.note_view notes_note_view_kiqvum on master_join_hgpmtu.target_id = notes_note_view_kiqvum.id
  where master_join_hgpmtu.source_id = routes.directflightclass.id
) as lat_annotation on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

-- DROP VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

-- CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
-- WITH  
-- segment_ref AS(
-- 	SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		SUBSTRING(
-- 	        curve_ref 
-- 	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
-- 	    ) AS uuid
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 4
-- ),
-- segment_value AS(
-- 	SELECT 
-- 		airspace.geoborder.identifier AS uuid,
-- 		geom
-- 	FROM airspace.geoborder
-- 	INNER JOIN public.geoborder_timeslice
-- 		ON airspace.geoborder.id = public.geoborder_timeslice.geoborder_id
-- 	INNER JOIN airspace.geoborder_tsp
-- 		ON public.geoborder_timeslice.geoborder_tsp_id = airspace.geoborder_tsp.id
-- 	INNER JOIN airspace.geoborder_ts
-- 		ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
-- 	INNER JOIN public.curve_pt
-- 		ON airspace.geoborder_ts.border_id = public.curve_pt.id
-- 	INNER JOIN geometry.curve_view
-- 		ON public.curve_pt.id = geometry.curve_view.id
-- ),
-- center AS (
--     SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		point,
-- 		radius,
-- 		start_angle,
-- 		end_angle,
-- 		(end_angle - start_angle) / 256 AS step_size
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 2
-- 	UNION ALL 
-- 	SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		point,
-- 		radius,
-- 		0 as start_angle,
-- 		2*PI() as end_angle,
-- 		(0 - 2*PI()) / 256 AS step_size
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 3
-- ),
-- interpolated_points AS (
--     SELECT 
--         center.id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
--     FROM 
--         generate_series(0, 256) AS n, 	
--         center
-- ),
-- arc_line AS (
--     SELECT 
--         id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
--         ST_MakeLine(point_geom) AS geom
--     FROM interpolated_points
--     GROUP BY 
-- 		id, 
-- 		curve_xml_id,
-- 		part, 
-- 		member, 
-- 		sequence, 
-- 		interpretation
-- ),
-- segment_union AS (
--     SELECT 
--         id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
--     FROM 
--         public.polygon_segment 
--     WHERE 
--         public.polygon_segment.interpretation = 0
--     UNION ALL 
--     SELECT 
--         id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
--         ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
-- 		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
--     FROM 
--         public.polygon_segment 
--     WHERE 
--         public.polygon_segment.interpretation = 1
-- 	UNION ALL
-- 	SELECT
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
-- 	FROM
-- 		arc_line
-- 	UNION ALL
-- 	SELECT
-- 		id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
-- 	FROM segment_ref
-- 	INNER JOIN segment_value
-- 	ON segment_ref.uuid = segment_value.uuid		
-- ),
-- segement_ownership AS (
-- 	SELECT 
-- 		public.elevated_surface_pt.id,
--         public.elevated_surface_pt.xml_id,
-- 		segment_union.curve_xml_id,
-- 		segment_union.part AS part,
-- 		segment_union.member AS member,
-- 		segment_union.sequence AS sequence,
-- 		segment_union.interpretation AS interpretation,
-- 		segment_union.geom AS geom,
-- 		segment_union.first_point as first_point,
-- 		segment_union.last_point as last_point,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         public.elevated_surface_pt
--     INNER JOIN 
--         public.elevatedsurface_exterior 
--         ON public.elevated_surface_pt.id = public.elevatedsurface_exterior.elevatedsurfacepropertytype_id
--     INNER JOIN 
--         segment_union 
--         ON public.elevatedsurface_exterior.exteriorlinestring_id = segment_union.id
-- 	UNION ALL
-- 	SELECT 
-- 		public.elevated_surface_pt.id,
--         public.elevated_surface_pt.xml_id,
-- 		segment_union.curve_xml_id,
-- 		segment_union.part AS part,
-- 		segment_union.member AS member,
-- 		segment_union.sequence AS sequence,
-- 		segment_union.interpretation AS interpretation,
-- 		segment_union.geom AS geom,
-- 		segment_union.first_point AS first_point,
-- 		segment_union.last_point AS last_point,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         public.elevated_surface_pt
--     INNER JOIN 
--         public.elevatedsurface_interior 
--         ON public.elevated_surface_pt.id = public.elevatedsurface_interior.elevatedsurfacepropertytype_id
--     INNER JOIN 
--         segment_union 
--         ON public.elevatedsurface_interior.interiorlinestring_id = segment_union.id
-- ),
-- ordered_segments AS (
--     SELECT 
-- 		id,
--         xml_id, 
-- 		curve_xml_id,
--         part,
-- 		member,
--         sequence,
-- 		interpretation,
--         geom,
--         first_point, 
--         last_point,
-- 		ST_IsClosed(segement_ownership.geom) AS closed,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         segement_ownership
--     ORDER BY 
--         xml_id, 
-- 		part, 
-- 		member, 
-- 		sequence
-- ),
-- connecting_segments AS (
--     SELECT 
--         id,
-- 		xml_id,
-- 		curve_xml_id,
--         part,
-- 		member,
--         sequence,
-- 		interpretation,
--         geom,
--         first_point,
--         last_point,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         ordered_segments
--     UNION ALL
--     SELECT 
--         curr.id,
-- 		curr.xml_id,
-- 		Null AS curve_xml_id,
--         curr.part,
-- 		curr.member,
--         curr.sequence + 0.5 AS sequence,
-- 		1,
--         ST_MakeLine(curr.last_point, next.first_point) AS geom,
--         curr.last_point AS first_point,
--         next.first_point AS last_point,
-- 		NULL AS elevation,
-- 		NULL AS elevation_uom,
-- 		NULL AS elevation_nilreason,
-- 		NULL AS geoidundulation,
-- 		NULL AS geoidundulation_uom,
-- 		NULL AS geoidundulation_nilreason,
-- 		NULL AS horizontalaccuracy,
-- 		NULL AS horizontalaccuracy_uom,
-- 		NULL AS horizontalaccuracy_nilreason,
-- 		NULL AS verticalaccuracy,
-- 		NULL AS verticalaccuracy_uom,
-- 		NULL AS verticalaccuracy_nilreason,
-- 		NULL AS verticaldatum,
-- 		NULL AS verticaldatum_nilreason,
-- 		NULL AS nilreason
--     FROM 
--         ordered_segments curr
--     JOIN 
--         ordered_segments next
--     ON 
--         curr.xml_id = next.xml_id
--         AND curr.part = next.part
--         AND curr.sequence + 1 = next.sequence
-- 		AND curr.member = next.member
-- 	WHERE 
-- 		ST_IsClosed(curr.geom) = false
-- 		AND
-- 		curr.interpretation != 4
-- 		AND
-- 		next.interpretation != 4
--     UNION ALL
--     SELECT 
--         curr.id,
-- 		curr.xml_id,
-- 		Null AS curve_xml_id,
--         curr.part,
-- 		curr.member + 0.5 AS member,
--         curr.sequence,
-- 		1,
--         ST_MakeLine(curr.last_point, next.first_point) AS geom,
--         curr.last_point AS first_point,
--         next.first_point AS last_point,
-- 		NULL AS elevation,
-- 		NULL AS elevation_uom,
-- 		NULL AS elevation_nilreason,
-- 		NULL AS geoidundulation,
-- 		NULL AS geoidundulation_uom,
-- 		NULL AS geoidundulation_nilreason,
-- 		NULL AS horizontalaccuracy,
-- 		NULL AS horizontalaccuracy_uom,
-- 		NULL AS horizontalaccuracy_nilreason,
-- 		NULL AS verticalaccuracy,
-- 		NULL AS verticalaccuracy_uom,
-- 		NULL AS verticalaccuracy_nilreason,
-- 		NULL AS verticaldatum,
-- 		NULL AS verticaldatum_nilreason,
-- 		NULL AS nilreason
--     FROM 
--         ordered_segments curr
--     JOIN 
--         ordered_segments next
--     ON 
--         curr.xml_id = next.xml_id
--         AND curr.part = next.part
--         AND curr.member + 1 = next.member
-- 	WHERE 
-- 		ST_IsClosed(curr.geom) = false
-- 		AND
-- 		curr.interpretation != 4
-- 		AND
-- 		next.interpretation != 4
--     ORDER BY 
--         xml_id, 
--         part, 
--         member,
--         sequence
-- ),
-- clustered_segments AS (
--     SELECT 
--         id, 
--         xml_id,
-- 		curve_xml_id,
--         part,
--         member,
-- 		interpretation,
--         geom,
-- 		ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY xml_id, part)  AS cluster_id,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         connecting_segments
--     WHERE 
--         interpretation != 4
-- 	UNION ALL
--     SELECT 
--         id, 
-- 		xml_id,
-- 		curve_xml_id,
--         part,
--         member,
-- 		interpretation,
--         geom,
-- 		Null AS cluster_id,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         connecting_segments
--     WHERE 
--         interpretation = 4
-- 	ORDER BY
-- 		xml_id,
-- 		part, 
-- 		member
-- ),
-- partial_ring AS (
--     SELECT 
--         id, 
--         xml_id,
-- 		ARRAY_AGG(curve_xml_id) as curve_xml_id,
--         part,
--         MIN(member) AS member,
-- 		MIN(interpretation) AS interpretation,
--         ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
--         ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
--         ST_LineMerge(ST_Collect(geom)) AS geom,
--         NULL::geometry AS points,
-- 		MAX(elevation) AS elevation,
-- 		MAX(elevation_uom) AS elevation_uom,
-- 		MAX(elevation_nilreason) AS elevation_nilreason,
-- 		MAX(geoidundulation) AS geoidundulation,
-- 		MAX(geoidundulation_uom) AS geoidundulation_uom,
-- 		MAX(geoidundulation_nilreason) AS geoidundulation_nilreason,
-- 		MAX(horizontalaccuracy) AS horizontalaccuracy,
-- 		MAX(horizontalaccuracy_uom) AS horizontalaccuracy_uom,
-- 		MAX(horizontalaccuracy_nilreason) AS horizontalaccuracy_nilreason,
-- 		MAX(verticalaccuracy) AS verticalaccuracy,
-- 		MAX(verticalaccuracy_uom) AS verticalaccuracy_uom,
-- 		MAX(verticalaccuracy_nilreason) AS verticalaccuracy_nilreason,
-- 		MAX(verticaldatum) AS verticaldatum,
-- 		MAX(verticaldatum_nilreason) AS verticaldatum_nilreason,
-- 		MAX(nilreason) AS nilreason
--     FROM 
--         clustered_segments
-- 	WHERE 
-- 		interpretation != 4
--     GROUP BY 
-- 		id,
--         xml_id, 
--         part, 
--         cluster_id,
--         horizontalaccuracy, 
--         horizontalaccuracy_uom, 
--         horizontalaccuracy_nilreason,	
--         nilreason
-- 	UNION ALL
--     SELECT 
--         id, 
--         xml_id,
-- 		ARRAY[curve_xml_id] AS curve_xml_id,
--         part,
--         member,
-- 		interpretation,
--         ST_IsClosed(geom) AS closed,
--         ST_GeometryType(geom) AS type, 
-- 		geom AS geom,
-- 		ST_Points(geom) AS points,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         clustered_segments
-- 	WHERE 
-- 		interpretation = 4
-- 	ORDER BY 
--         xml_id, 
-- 		part, 
-- 		member
-- ),
-- output AS (
--     SELECT 
--         pr.id, 
--         pr.xml_id,
-- 		pr.curve_xml_id,
--         pr.part,
-- 		ROW_NUMBER() OVER (PARTITION BY xml_id, part ORDER BY id) - 1 AS increment,
-- 		COUNT(*) OVER (PARTITION BY xml_id, part ) AS total_count,
-- 		pr.interpretation,
-- 		pr.points,
--         COALESCE(dumped.geom, pr.geom) AS geom,
-- 		pr.elevation,
-- 		pr.elevation_uom,
-- 		pr.elevation_nilreason,
-- 		pr.geoidundulation,
-- 		pr.geoidundulation_uom,
-- 		pr.geoidundulation_nilreason,
-- 		pr.horizontalaccuracy,
-- 		pr.horizontalaccuracy_uom,
-- 		pr.horizontalaccuracy_nilreason,
-- 		pr.verticalaccuracy,
-- 		pr.verticalaccuracy_uom,
-- 		pr.verticalaccuracy_nilreason,
-- 		pr.verticaldatum,
-- 		pr.verticaldatum_nilreason,
-- 		pr.nilreason
--     FROM 
--         partial_ring pr
--     LEFT JOIN LATERAL (
--         SELECT (ST_Dump(pr.geom)).geom
--         WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
--     ) dumped ON true
-- 	ORDER BY
-- 		xml_id, 
-- 		part, 
-- 		member
-- )
-- SELECT 
-- 	ST_GeometryType(geom),
-- 	output.id, 
-- 	to_jsonb(output.xml_id) AS xml_id,
-- 	to_jsonb(output.curve_xml_id) AS curve_xml_id,
-- 	output.part,
-- 	output.increment,
-- 	output.total_count,
-- 	output.interpretation,
-- 	output.geom,
-- 	output.points,
-- 	output.elevation,
-- 	output.elevation_uom,
-- 	output.elevation_nilreason,
-- 	output.geoidundulation,
-- 	output.geoidundulation_uom,
-- 	output.geoidundulation_nilreason,
-- 	output.horizontalaccuracy,
-- 	output.horizontalaccuracy_uom,
-- 	output.horizontalaccuracy_nilreason,
-- 	output.verticalaccuracy,
-- 	output.verticalaccuracy_uom,
-- 	output.verticalaccuracy_nilreason,
-- 	output.verticaldatum,
-- 	output.verticaldatum_nilreason,
-- 	output.nilreason
-- FROM
-- output;

-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
-- CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
-- WITH 
-- g1_segment AS (
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,
-- 			ST_Union(
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
-- 			)
-- 		  )
-- 		)).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view geoborder
-- 	JOIN
-- 		partial_elevated_surface_view ring
-- 	ON 
--         ring.xml_id = geoborder.xml_id
-- 		AND
-- 		ring.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE 
-- 		geoborder.total_count = 2
-- 		AND
-- 		geoborder.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.geom, 
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.geom, 
-- 		ring.geom,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		partial_elevated_surface_view.id, 
-- 		partial_elevated_surface_view.xml_id,
-- 		partial_elevated_surface_view.curve_xml_id,
-- 		partial_elevated_surface_view.part,
-- 		partial_elevated_surface_view.increment,
-- 		partial_elevated_surface_view.interpretation,
-- 		partial_elevated_surface_view.geom,
-- 		Null::geometry AS start_segment,
-- 		Null::geometry AS end_segment,
-- 		partial_elevated_surface_view.elevation,
-- 		partial_elevated_surface_view.elevation_uom,
-- 		partial_elevated_surface_view.elevation_nilreason,
-- 		partial_elevated_surface_view.geoidundulation,
-- 		partial_elevated_surface_view.geoidundulation_uom,
-- 		partial_elevated_surface_view.geoidundulation_nilreason,
-- 		partial_elevated_surface_view.horizontalaccuracy,
-- 		partial_elevated_surface_view.horizontalaccuracy_uom,
-- 		partial_elevated_surface_view.horizontalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticalaccuracy,
-- 		partial_elevated_surface_view.verticalaccuracy_uom,
-- 		partial_elevated_surface_view.verticalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticaldatum,
-- 		partial_elevated_surface_view.verticaldatum_nilreason,
-- 		partial_elevated_surface_view.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view
-- 	WHERE 
-- 		partial_elevated_surface_view.total_count = 2 
-- 		AND
-- 		partial_elevated_surface_view.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- g2_segment AS (
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		geoborder.geom AS geom,
-- 		Null::geometry AS  start_segment,
-- 		Null::geometry AS end_segment,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view geoborder
-- 	JOIN
-- 		partial_elevated_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_elevated_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,
-- 			ST_Union(
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
-- 			)
-- 		  )
-- 		)).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view geoborder
-- 	JOIN
-- 		partial_elevated_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_elevated_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation != 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
-- 			)
-- 		  )
-- 		).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
-- 		Null::geometry AS end_segment,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view geoborder
-- 	JOIN
-- 		partial_elevated_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_elevated_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
-- 			)
-- 		  )
-- 		).geom AS geom,
-- 		Null::geometry AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment,
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view geoborder
-- 	JOIN
-- 		partial_elevated_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_elevated_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation != 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.elevation,
-- 		geoborder.elevation_uom,
-- 		geoborder.elevation_nilreason,
-- 		geoborder.geoidundulation,
-- 		geoborder.geoidundulation_uom,
-- 		geoborder.geoidundulation_nilreason,
-- 		geoborder.horizontalaccuracy,
-- 		geoborder.horizontalaccuracy_uom,
-- 		geoborder.horizontalaccuracy_nilreason,
-- 		geoborder.verticalaccuracy,
-- 		geoborder.verticalaccuracy_uom,
-- 		geoborder.verticalaccuracy_nilreason,
-- 		geoborder.verticaldatum,
-- 		geoborder.verticaldatum_nilreason,
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		partial_elevated_surface_view.id, 
-- 		partial_elevated_surface_view.xml_id,
-- 		partial_elevated_surface_view.curve_xml_id,
-- 		partial_elevated_surface_view.part,
-- 		partial_elevated_surface_view.increment,
-- 		partial_elevated_surface_view.interpretation,
-- 		partial_elevated_surface_view.total_count,
-- 		partial_elevated_surface_view.geom,
-- 		Null::geometry AS start_segment,
-- 		Null::geometry AS end_segment,
-- 		partial_elevated_surface_view.elevation,
-- 		partial_elevated_surface_view.elevation_uom,
-- 		partial_elevated_surface_view.elevation_nilreason,
-- 		partial_elevated_surface_view.geoidundulation,
-- 		partial_elevated_surface_view.geoidundulation_uom,
-- 		partial_elevated_surface_view.geoidundulation_nilreason,
-- 		partial_elevated_surface_view.horizontalaccuracy,
-- 		partial_elevated_surface_view.horizontalaccuracy_uom,
-- 		partial_elevated_surface_view.horizontalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticalaccuracy,
-- 		partial_elevated_surface_view.verticalaccuracy_uom,
-- 		partial_elevated_surface_view.verticalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticaldatum,
-- 		partial_elevated_surface_view.verticaldatum_nilreason,
-- 		partial_elevated_surface_view.nilreason
-- 	FROM 
-- 		partial_elevated_surface_view
-- 	WHERE 
-- 		partial_elevated_surface_view.total_count > 2 
-- 		AND
-- 		partial_elevated_surface_view.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- g2_segment_filtered AS (
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		curr.geom AS geom,
-- 		curr.elevation,
-- 		curr.elevation_uom,
-- 		curr.elevation_nilreason,
-- 		curr.geoidundulation,
-- 		curr.geoidundulation_uom,
-- 		curr.geoidundulation_nilreason,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.verticalaccuracy,
-- 		curr.verticalaccuracy_uom,
-- 		curr.verticalaccuracy_nilreason,
-- 		curr.verticaldatum,
-- 		curr.verticaldatum_nilreason,
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, before.geom) 
-- 		AND 
-- 		ST_Intersects(curr.geom, after.geom)
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation = 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom,
-- 		curr.elevation,
-- 		curr.elevation_uom,
-- 		curr.elevation_nilreason,
-- 		curr.geoidundulation,
-- 		curr.geoidundulation_uom,
-- 		curr.geoidundulation_nilreason,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.verticalaccuracy,
-- 		curr.verticalaccuracy_uom,
-- 		curr.verticalaccuracy_nilreason,
-- 		curr.verticaldatum,
-- 		curr.verticaldatum_nilreason,
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, curr.start_segment)  
-- 		AND 
-- 		ST_Intersects(curr.geom, after.geom)
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation = 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom,
-- 		curr.elevation,
-- 		curr.elevation_uom,
-- 		curr.elevation_nilreason,
-- 		curr.geoidundulation,
-- 		curr.geoidundulation_uom,
-- 		curr.geoidundulation_nilreason,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.verticalaccuracy,
-- 		curr.verticalaccuracy_uom,
-- 		curr.verticalaccuracy_nilreason,
-- 		curr.verticaldatum,
-- 		curr.verticaldatum_nilreason,
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, before.geom) 
-- 		AND 
-- 		ST_Intersects(curr.geom, curr.end_segment)
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation != 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom,
-- 		curr.elevation,
-- 		curr.elevation_uom,
-- 		curr.elevation_nilreason,
-- 		curr.geoidundulation,
-- 		curr.geoidundulation_uom,
-- 		curr.geoidundulation_nilreason,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.verticalaccuracy,
-- 		curr.verticalaccuracy_uom,
-- 		curr.verticalaccuracy_nilreason,
-- 		curr.verticaldatum,
-- 		curr.verticaldatum_nilreason,
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 	g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, curr.start_segment) 
-- 		AND 
-- 		ST_Intersects(curr.geom, curr.end_segment)
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation != 4
-- 	UNION ALL
-- 	SELECT
-- 		g2_segment.id, 
-- 		g2_segment.xml_id,
-- 		g2_segment.curve_xml_id,
-- 		g2_segment.part,
-- 		g2_segment.increment,
-- 		g2_segment.geom,
-- 		g2_segment.elevation,
-- 		g2_segment.elevation_uom,
-- 		g2_segment.elevation_nilreason,
-- 		g2_segment.geoidundulation,
-- 		g2_segment.geoidundulation_uom,
-- 		g2_segment.geoidundulation_nilreason,
-- 		g2_segment.horizontalaccuracy,
-- 		g2_segment.horizontalaccuracy_uom,
-- 		g2_segment.horizontalaccuracy_nilreason,
-- 		g2_segment.verticalaccuracy,
-- 		g2_segment.verticalaccuracy_uom,
-- 		g2_segment.verticalaccuracy_nilreason,
-- 		g2_segment.verticaldatum,
-- 		g2_segment.verticaldatum_nilreason,
-- 		g2_segment.nilreason
-- 	FROM 
-- 		g2_segment
-- 	WHERE 
-- 		g2_segment.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- r1 AS (
-- 	SELECT
-- 		partial_elevated_surface_view.id,
-- 		partial_elevated_surface_view.xml_id,
-- 		partial_elevated_surface_view.curve_xml_id,
-- 		partial_elevated_surface_view.part,
-- 		partial_elevated_surface_view.geom,
-- 		partial_elevated_surface_view.elevation,
-- 		partial_elevated_surface_view.elevation_uom,
-- 		partial_elevated_surface_view.elevation_nilreason,
-- 		partial_elevated_surface_view.geoidundulation,
-- 		partial_elevated_surface_view.geoidundulation_uom,
-- 		partial_elevated_surface_view.geoidundulation_nilreason,
-- 		partial_elevated_surface_view.horizontalaccuracy,
-- 		partial_elevated_surface_view.horizontalaccuracy_uom,
-- 		partial_elevated_surface_view.horizontalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticalaccuracy,
-- 		partial_elevated_surface_view.verticalaccuracy_uom,
-- 		partial_elevated_surface_view.verticalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticaldatum,
-- 		partial_elevated_surface_view.verticaldatum_nilreason,
-- 		partial_elevated_surface_view.nilreason
-- 	FROM
-- 		partial_elevated_surface_view
-- 	WHERE
-- 		ST_IsClosed(partial_elevated_surface_view.geom) = true
-- 		AND 
-- 		partial_elevated_surface_view.total_count = 1
-- 		AND 
-- 		ST_NPoints(geom) >= 4
-- ),
-- r2 AS (
-- 	SELECT
-- 		partial_elevated_surface_view.id,
-- 		partial_elevated_surface_view.xml_id,
-- 		partial_elevated_surface_view.curve_xml_id,
-- 		partial_elevated_surface_view.part,
-- 		ST_AddPoint(partial_elevated_surface_view.geom, ST_StartPoint(partial_elevated_surface_view.geom)) AS geom,
-- 		partial_elevated_surface_view.elevation,
-- 		partial_elevated_surface_view.elevation_uom,
-- 		partial_elevated_surface_view.elevation_nilreason,
-- 		partial_elevated_surface_view.geoidundulation,
-- 		partial_elevated_surface_view.geoidundulation_uom,
-- 		partial_elevated_surface_view.geoidundulation_nilreason,
-- 		partial_elevated_surface_view.horizontalaccuracy,
-- 		partial_elevated_surface_view.horizontalaccuracy_uom,
-- 		partial_elevated_surface_view.horizontalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticalaccuracy,
-- 		partial_elevated_surface_view.verticalaccuracy_uom,
-- 		partial_elevated_surface_view.verticalaccuracy_nilreason,
-- 		partial_elevated_surface_view.verticaldatum,
-- 		partial_elevated_surface_view.verticaldatum_nilreason,
-- 		partial_elevated_surface_view.nilreason
-- 	FROM
-- 		partial_elevated_surface_view
-- 	WHERE
-- 		ST_IsClosed(partial_elevated_surface_view.geom) = false
-- 		AND 
-- 		partial_elevated_surface_view.total_count = 1
-- 		AND 
-- 		ST_NPoints(ST_AddPoint(partial_elevated_surface_view.geom, ST_StartPoint(partial_elevated_surface_view.geom))) >= 4		
-- ),
-- g1 AS (
-- 	SELECT 
-- 		ring.id,
-- 		ring.xml_id || geoborder.xml_id AS xml_id,
-- 		ring.curve_xml_id || geoborder.curve_xml_id AS curve_xml_id,
-- 		ring.part,
-- 		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom,
-- 		ring.elevation,
-- 		ring.elevation_uom,
-- 		ring.elevation_nilreason,
-- 		ring.geoidundulation,
-- 		ring.geoidundulation_uom,
-- 		ring.geoidundulation_nilreason,
-- 		ring.horizontalaccuracy,
-- 		ring.horizontalaccuracy_uom,
-- 		ring.horizontalaccuracy_nilreason,
-- 		ring.verticalaccuracy,
-- 		ring.verticalaccuracy_uom,
-- 		ring.verticalaccuracy_nilreason,
-- 		ring.verticaldatum,
-- 		ring.verticaldatum_nilreason,
-- 		ring.nilreason
-- 	FROM
-- 	g1_segment ring
-- 	JOIN
-- 	g1_segment geoborder
-- 	ON 
-- 		ring.xml_id = geoborder.xml_id
-- 		AND
-- 		geoborder.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE
-- 		ST_Intersects(geoborder.geom, geoborder.start_segment) 
-- 		AND 
-- 		ST_Intersects(geoborder.geom, geoborder.end_segment)
-- 		AND 
-- 		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
-- 		AND
-- 		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
-- 	UNION ALL
-- 	SELECT DISTINCT 
-- 		ring.id,
-- 		ring.xml_id || geoborder.xml_id AS xml_id,
-- 		ring.curve_xml_id || geoborder.curve_xml_id AS curve_xml_id,
-- 		ring.part,
-- 		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom,
-- 		ring.elevation,
-- 		ring.elevation_uom,
-- 		ring.elevation_nilreason,
-- 		ring.geoidundulation,
-- 		ring.geoidundulation_uom,
-- 		ring.geoidundulation_nilreason,
-- 		ring.horizontalaccuracy,
-- 		ring.horizontalaccuracy_uom,
-- 		ring.horizontalaccuracy_nilreason,
-- 		ring.verticalaccuracy,
-- 		ring.verticalaccuracy_uom,
-- 		ring.verticalaccuracy_nilreason,
-- 		ring.verticaldatum,
-- 		ring.verticaldatum_nilreason,
-- 		ring.nilreason
-- 	FROM
-- 	g1_segment ring
-- 	JOIN
-- 	g1_segment geoborder
-- 	ON 
-- 		ring.xml_id = geoborder.xml_id
-- 		AND
-- 		geoborder.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE
-- 		ST_Intersects(geoborder.geom, geoborder.start_segment) 
-- 		AND 
-- 		ST_Intersects(geoborder.geom, geoborder.end_segment)
-- 		AND 
-- 		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
-- 		AND
-- 		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
-- ),
-- g2 AS (	
-- 	SELECT 
-- 		MIN(g2_segment_filtered.id) AS id,
-- 		JSONB_AGG(g2_segment_filtered.xml_id) AS xml_id,
-- 		JSONB_AGG(g2_segment_filtered.curve_xml_id) AS curve_xml_id,
-- 		MIN(g2_segment_filtered.part) AS part,
-- 		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom,
-- 		MAX(g2_segment_filtered.elevation) AS elevation,
-- 		MAX(g2_segment_filtered.elevation_uom) AS elevation_uom,
-- 		MAX(g2_segment_filtered.elevation_nilreason) AS elevation_nilreason,
-- 		MAX(g2_segment_filtered.geoidundulation) AS geoidundulation,
-- 		MAX(g2_segment_filtered.geoidundulation_uom) AS geoidundulation_uom,
-- 		MAX(g2_segment_filtered.geoidundulation_nilreason) AS geoidundulation_nilreason,
-- 		MAX(g2_segment_filtered.horizontalaccuracy) AS horizontalaccuracy,
-- 		MAX(g2_segment_filtered.horizontalaccuracy_uom) AS horizontalaccuracy_uom,
-- 		MAX(g2_segment_filtered.horizontalaccuracy_nilreason) AS horizontalaccuracy_nilreason,
-- 		MAX(g2_segment_filtered.verticalaccuracy) AS verticalaccuracy,
-- 		MAX(g2_segment_filtered.verticalaccuracy_uom) AS verticalaccuracy_uom,
-- 		MAX(g2_segment_filtered.verticalaccuracy_nilreason) AS verticalaccuracy_nilreason,
-- 		MAX(g2_segment_filtered.verticaldatum) AS verticaldatum,
-- 		MAX(g2_segment_filtered.verticaldatum_nilreason) AS verticaldatum_nilreason,
-- 		MAX(g2_segment_filtered.nilreason) AS nilreason
-- 	FROM
-- 		g2_segment_filtered
-- 	GROUP BY
-- 		g2_segment_filtered.id,
-- 		g2_segment_filtered.xml_id,
-- 		g2_segment_filtered.part
-- 	HAVING
-- 		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
-- 		AND
-- 		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
-- 		AND 
-- 		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
-- 	UNION ALL
-- 	SELECT 
-- 		MIN(g2_segment_filtered.id) AS id,
-- 		JSONB_AGG(g2_segment_filtered.xml_id) AS xml_id,
-- 		JSONB_AGG(g2_segment_filtered.curve_xml_id) AS curve_xml_id,
-- 		MIN(g2_segment_filtered.part) AS part,
-- 		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom,
-- 		MAX(g2_segment_filtered.elevation) AS elevation,
-- 		MAX(g2_segment_filtered.elevation_uom) AS elevation_uom,
-- 		MAX(g2_segment_filtered.elevation_nilreason) AS elevation_nilreason,
-- 		MAX(g2_segment_filtered.geoidundulation) AS geoidundulation,
-- 		MAX(g2_segment_filtered.geoidundulation_uom) AS geoidundulation_uom,
-- 		MAX(g2_segment_filtered.geoidundulation_nilreason) AS geoidundulation_nilreason,
-- 		MAX(g2_segment_filtered.horizontalaccuracy) AS horizontalaccuracy,
-- 		MAX(g2_segment_filtered.horizontalaccuracy_uom) AS horizontalaccuracy_uom,
-- 		MAX(g2_segment_filtered.horizontalaccuracy_nilreason) AS horizontalaccuracy_nilreason,
-- 		MAX(g2_segment_filtered.verticalaccuracy) AS verticalaccuracy,
-- 		MAX(g2_segment_filtered.verticalaccuracy_uom) AS verticalaccuracy_uom,
-- 		MAX(g2_segment_filtered.verticalaccuracy_nilreason) AS verticalaccuracy_nilreason,
-- 		MAX(g2_segment_filtered.verticaldatum) AS verticaldatum,
-- 		MAX(g2_segment_filtered.verticaldatum_nilreason) AS verticaldatum_nilreason,
-- 		MAX(g2_segment_filtered.nilreason) AS nilreason
-- 	FROM
-- 		g2_segment_filtered
-- 	GROUP BY
-- 		g2_segment_filtered.id,
-- 		g2_segment_filtered.xml_id,
-- 		g2_segment_filtered.part
-- 	HAVING
-- 		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
-- 		AND
-- 		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
-- 		AND 
-- 		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
-- ),
-- combined_data AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
-- 		geom,
-- 		part,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         r1
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id,
-- 		curve_xml_id,
--         geom,
--         part,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         r2
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
--         part,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         g1
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
--         part,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         g2
-- ),
-- outer_shells AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         ST_MakePolygon(geom) AS geom,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         combined_data
--     WHERE 
--         part = 0
-- ),
-- inner_shells AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
-- 		elevation,
-- 		elevation_uom,
-- 		elevation_nilreason,
-- 		geoidundulation,
-- 		geoidundulation_uom,
-- 		geoidundulation_nilreason,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		verticalaccuracy,
-- 		verticalaccuracy_uom,
-- 		verticalaccuracy_nilreason,
-- 		verticaldatum,
-- 		verticaldatum_nilreason,
-- 		nilreason
--     FROM 
--         combined_data
--     WHERE 
--         part <> 0
-- )
-- SELECT 
--     outer_shells.id, 
--     ST_MakePolygon(
--         ST_ExteriorRing(outer_shells.geom),
--         ARRAY(
--             SELECT ST_ExteriorRing(inner_shells.geom)
--             FROM inner_shells 
--             WHERE inner_shells.id = outer_shells.id
--         )
--     ) AS geom,
-- 	COALESCE(outer_shells.elevation || ' ' || outer_shells.elevation_uom, '(' || outer_shells.elevation_nilreason || ')') AS elevation,
-- 	COALESCE(outer_shells.geoidundulation || ' ' || outer_shells.geoidundulation_uom, '(' || outer_shells.geoidundulation_nilreason || ')') AS geoidUndulation,
-- 	COALESCE(outer_shells.verticaldatum || ' ' || outer_shells.outer_shells.geoidundulation_uom, '(' || outer_shells.geoidundulation_nilreason || ')') AS verticalDatum,
-- 	COALESCE(CAST(outer_shells.verticalaccuracy AS varchar), '(' || outer_shells.verticaldatum_nilreason || ')') AS verticalAccuracy,
-- 	COALESCE(outer_shells.horizontalaccuracy || ' ' || outer_shells.horizontalaccuracy_uom, '(' || outer_shells.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
-- FROM 
-- outer_shells;

-- CREATE INDEX ON geometry.elevatedsurface_view (id);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS

SELECT 
0 AS id,
ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))', 4326) AS geom,
0 AS elevation,
0 AS geoidUndulation,
0 AS verticalDatum,
0 AS verticalAccuracy,
0 AS horizontalAccuracy;
-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xvuvkr.*) AS annotation
  from master_join master_join_xtcdlv
  join notes.note_view notes_note_view_xvuvkr on master_join_xtcdlv.target_id = notes_note_view_xvuvkr.id
  where master_join_xtcdlv.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    lat_adjustmentinopcol.lat_adjustmentinopcol as adjustmentinopcol,
    lat_annotation.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_pt_rdgsin.id) as lat_adjustmentinopcol
  from master_join master_join_ecympv
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_pt_rdgsin on master_join_ecympv.target_id = procedure_equipmentunavailableadjustmentcolumn_pt_rdgsin.id
  where master_join_ecympv.source_id = procedure.equipmentunavailableadjustment.id
) as lat_adjustmentinopcol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pusaik.*) AS annotation
  from master_join master_join_bpgiub
  join notes.note_view notes_note_view_pusaik on master_join_bpgiub.target_id = notes_note_view_pusaik.id
  where master_join_bpgiub.source_id = procedure.equipmentunavailableadjustment.id
) as lat_annotation on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    lat_annotation.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jidzpk.*) AS annotation
  from master_join master_join_kperjt
  join notes.note_view notes_note_view_jidzpk on master_join_kperjt.target_id = notes_note_view_jidzpk.id
  where master_join_kperjt.source_id = public.fasdatablock.id
) as lat_annotation on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    lat_altitude.lat_altitude as altitude,
    lat_distance.lat_distance as distance,
    lat_timing.lat_timing as timing,
    lat_annotation.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_pt_zrufxp.id) as lat_altitude
  from master_join master_join_uolscb
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_pt_zrufxp on master_join_uolscb.target_id = procedure_approachaltitudetable_pt_zrufxp.id
  where master_join_uolscb.source_id = procedure.finalprofile.id
) as lat_altitude on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_pt_dpsiib.id) as lat_distance
  from master_join master_join_rxcjau
  join procedure.approachdistancetable_pt procedure_approachdistancetable_pt_dpsiib on master_join_rxcjau.target_id = procedure_approachdistancetable_pt_dpsiib.id
  where master_join_rxcjau.source_id = procedure.finalprofile.id
) as lat_distance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_pt_jzawpn.id) as lat_timing
  from master_join master_join_itgzwt
  join procedure.approachtimingtable_pt procedure_approachtimingtable_pt_jzawpn on master_join_itgzwt.target_id = procedure_approachtimingtable_pt_jzawpn.id
  where master_join_itgzwt.source_id = procedure.finalprofile.id
) as lat_timing on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gscctw.*) AS annotation
  from master_join master_join_plzpqf
  join notes.note_view notes_note_view_gscctw on master_join_plzpqf.target_id = notes_note_view_gscctw.id
  where master_join_plzpqf.source_id = procedure.finalprofile.id
) as lat_annotation on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    lat_annotation.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bobnej.*) AS annotation
  from master_join master_join_piectx
  join notes.note_view notes_note_view_bobnej on master_join_piectx.target_id = notes_note_view_bobnej.id
  where master_join_piectx.source_id = shared.flightcharacteristic.id
) as lat_annotation on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    lat_annotation.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rdczrq.*) AS annotation
  from master_join master_join_bqdnsx
  join notes.note_view notes_note_view_rdczrq on master_join_bqdnsx.target_id = notes_note_view_rdczrq.id
  where master_join_bqdnsx.source_id = routes.flightconditioncircumstance.id
) as lat_annotation on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    lat_annotation.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tivtnh.*) AS annotation
  from master_join master_join_zhgtnu
  join notes.note_view notes_note_view_tivtnh on master_join_zhgtnu.target_id = notes_note_view_tivtnh.id
  where master_join_zhgtnu.source_id = routes.flightrestrictionlevel.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lqckbo.*) AS annotation
  from master_join master_join_tejjjr
  join notes.note_view notes_note_view_lqckbo on master_join_tejjjr.target_id = notes_note_view_lqckbo.id
  where master_join_tejjjr.source_id = service.fuel.id
) as lat_annotation on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    lat_annotation.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rlukfv.*) AS annotation
  from master_join master_join_xojkyg
  join notes.note_view notes_note_view_rlukfv on master_join_xojkyg.target_id = notes_note_view_rlukfv.id
  where master_join_xojkyg.source_id = holding.holdingpatterndistance.id
) as lat_annotation on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    lat_annotation.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_worhnm.*) AS annotation
  from master_join master_join_btnykq
  join notes.note_view notes_note_view_worhnm on master_join_btnykq.target_id = notes_note_view_worhnm.id
  where master_join_btnykq.source_id = holding.holdingpatternduration.id
) as lat_annotation on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_kitthg.title as varchar), '(' || holding_holdingpattern_pt_kitthg.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_kitthg.href AS theholdingpattern_href,
    lat_annotation.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_kitthg on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_kitthg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cbcbtu.*) AS annotation
  from master_join master_join_kcwypq
  join notes.note_view notes_note_view_cbcbtu on master_join_kcwypq.target_id = notes_note_view_cbcbtu.id
  where master_join_kcwypq.source_id = procedure.holdinguse.id
) as lat_annotation on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    lat_runway.lat_runway as runway,
    lat_tlof.lat_tlof as tlof,
    lat_annotation.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_rozccj.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_rozccj.title AS varchar), '(' || airport_heliport_runwaydirection_pt_rozccj.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_rozccj.href
  )) as lat_runway  from master_join master_join_mjlucv
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_rozccj on master_join_mjlucv.target_id = airport_heliport_runwaydirection_pt_rozccj.id
  where master_join_mjlucv.source_id = procedure.landingtakeoffareacollection.id
) as lat_runway on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_tsceyx.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_tsceyx.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_tsceyx.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_tsceyx.href
  )) as lat_tlof  from master_join master_join_ibfxio
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tsceyx on master_join_ibfxio.target_id = airport_heliport_touchdownliftoff_pt_tsceyx.id
  where master_join_ibfxio.source_id = procedure.landingtakeoffareacollection.id
) as lat_tlof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yvoddn.*) AS annotation
  from master_join master_join_jjfvlq
  join notes.note_view notes_note_view_yvoddn on master_join_jjfvlq.target_id = notes_note_view_yvoddn.id
  where master_join_jjfvlq.source_id = procedure.landingtakeoffareacollection.id
) as lat_annotation on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    lat_annotation.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_woigdg.*) AS annotation
  from master_join master_join_jpiuqu
  join notes.note_view notes_note_view_woigdg on master_join_jpiuqu.target_id = notes_note_view_woigdg.id
  where master_join_jpiuqu.source_id = airport_heliport.lightactivation.id
) as lat_annotation on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    lat_annotation.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wphhzk.*) AS annotation
  from master_join master_join_dzrnox
  join notes.note_view notes_note_view_wphhzk on master_join_dzrnox.target_id = notes_note_view_wphhzk.id
  where master_join_dzrnox.source_id = shared.meteorology.id
) as lat_annotation on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    lat_adjustmentinop.lat_adjustmentinop as adjustmentinop,
    lat_annotation.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_pt_dzetde.id) as lat_adjustmentinop
  from master_join master_join_glrxol
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_pt_dzetde on master_join_glrxol.target_id = procedure_equipmentunavailableadjustment_pt_dzetde.id
  where master_join_glrxol.source_id = procedure.minima.id
) as lat_adjustmentinop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ycvyxq.*) AS annotation
  from master_join master_join_kcniuc
  join notes.note_view notes_note_view_ycvyxq on master_join_kcniuc.target_id = notes_note_view_ycvyxq.id
  where master_join_kcniuc.source_id = procedure.minima.id
) as lat_annotation on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    lat_altimeter.lat_altimeter as altimeter,
    lat_annotation.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_rxsgri.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_rxsgri.title AS varchar), '(' || airport_heliport_altimetersource_pt_rxsgri.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_rxsgri.href
  )) as lat_altimeter  from master_join master_join_keoeos
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_rxsgri on master_join_keoeos.target_id = airport_heliport_altimetersource_pt_rxsgri.id
  where master_join_keoeos.source_id = procedure.missedapproachgroup.id
) as lat_altimeter on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ypsjkk.*) AS annotation
  from master_join master_join_nztnsa
  join notes.note_view notes_note_view_ypsjkk on master_join_nztnsa.target_id = notes_note_view_ypsjkk.id
  where master_join_nztnsa.source_id = procedure.missedapproachgroup.id
) as lat_annotation on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    lat_annotation.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vewufu.*) AS annotation
  from master_join master_join_wkuqdd
  join notes.note_view notes_note_view_vewufu on master_join_wkuqdd.target_id = notes_note_view_vewufu.id
  where master_join_wkuqdd.source_id = navaids_points.navaidcomponent.id
) as lat_annotation on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bytdjz.*) AS annotation
  from master_join master_join_amlkbb
  join notes.note_view notes_note_view_bytdjz on master_join_amlkbb.target_id = notes_note_view_bytdjz.id
  where master_join_amlkbb.source_id = airport_heliport.navaidequipmentdistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cgtxed.*) AS annotation
  from master_join master_join_pswgra
  join notes.note_view notes_note_view_cgtxed on master_join_pswgra.target_id = notes_note_view_cgtxed.id
  where master_join_pswgra.source_id = service.nitrogen.id
) as lat_annotation on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    lat_annotation.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lmqefp.*) AS annotation
  from master_join master_join_ueqyhf
  join notes.note_view notes_note_view_lmqefp on master_join_ueqyhf.target_id = notes_note_view_lmqefp.id
  where master_join_ueqyhf.source_id = shared.obstacleplacement.id
) as lat_annotation on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_mmusmn.title as varchar), '(' || obstacles_verticalstructure_pt_mmusmn.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_mmusmn.href AS theverticalstructure_href,
    lat_adjustment.lat_adjustment as adjustment,
    lat_obstacleplacement.lat_obstacleplacement as obstacleplacement,
    lat_annotation.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_mmusmn on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_mmusmn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_pt_tsnsnk.id) as lat_adjustment
  from master_join master_join_vufycb
  join shared.altitudeadjustment_pt shared_altitudeadjustment_pt_tsnsnk on master_join_vufycb.target_id = shared_altitudeadjustment_pt_tsnsnk.id
  where master_join_vufycb.source_id = shared.obstruction.id
) as lat_adjustment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_pt_kfwkqx.id) as lat_obstacleplacement
  from master_join master_join_vtwoyq
  join shared.obstacleplacement_pt shared_obstacleplacement_pt_kfwkqx on master_join_vtwoyq.target_id = shared_obstacleplacement_pt_kfwkqx.id
  where master_join_vtwoyq.source_id = shared.obstruction.id
) as lat_obstacleplacement on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hbazfy.*) AS annotation
  from master_join master_join_flkefw
  join notes.note_view notes_note_view_hbazfy on master_join_flkefw.target_id = notes_note_view_hbazfy.id
  where master_join_flkefw.source_id = shared.obstruction.id
) as lat_annotation on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    lat_annotation.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gloteo.*) AS annotation
  from master_join master_join_mtrbkl
  join notes.note_view notes_note_view_gloteo on master_join_mtrbkl.target_id = notes_note_view_gloteo.id
  where master_join_mtrbkl.source_id = service.oil.id
) as lat_annotation on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_thimzr.title as varchar), '(' || organisation_organisationauthority_pt_thimzr.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_thimzr.href AS theorganisationauthority_href,
    lat_annotation.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_thimzr on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_thimzr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bdozkv.*) AS annotation
  from master_join master_join_fxgzec
  join notes.note_view notes_note_view_bdozkv on master_join_fxgzec.target_id = notes_note_view_bdozkv.id
  where master_join_fxgzec.source_id = organisation.organisationauthorityassociation.id
) as lat_annotation on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fthhqe.*) AS annotation
  from master_join master_join_eddsrq
  join notes.note_view notes_note_view_fthhqe on master_join_eddsrq.target_id = notes_note_view_fthhqe.id
  where master_join_eddsrq.source_id = service.oxygen.id
) as lat_annotation on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    lat_annotation.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gwufwd.*) AS annotation
  from master_join master_join_zkksbk
  join notes.note_view notes_note_view_gwufwd on master_join_zkksbk.target_id = notes_note_view_gwufwd.id
  where master_join_zkksbk.source_id = procedure.proceduretransitionleg.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    lat_annotation.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mpbzxe.*) AS annotation
  from master_join master_join_sxkacx
  join notes.note_view notes_note_view_mpbzxe on master_join_sxkacx.target_id = notes_note_view_mpbzxe.id
  where master_join_sxkacx.source_id = surveillance.radarcomponent.id
) as lat_annotation on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    lat_annotation.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uxtxqg.*) AS annotation
  from master_join master_join_bqluvm
  join notes.note_view notes_note_view_uxtxqg on master_join_bqluvm.target_id = notes_note_view_uxtxqg.id
  where master_join_bqluvm.source_id = airport_heliport.ridge.id
) as lat_annotation on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_rpxewc.id) as lat_criticalridge
  from master_join master_join_ddlcqk
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_rpxewc on master_join_ddlcqk.target_id = airport_heliport_ridge_pt_rpxewc.id
  where master_join_ddlcqk.source_id = airport_heliport.runwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_nuuepi.id) as lat_layer
  from master_join master_join_gqlgpo
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_nuuepi on master_join_gqlgpo.target_id = airport_heliport_surfacecontaminationlayer_pt_nuuepi.id
  where master_join_gqlgpo.source_id = airport_heliport.runwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wjwgxe.*) AS annotation
  from master_join master_join_jktiqj
  join notes.note_view notes_note_view_wjwgxe on master_join_jktiqj.target_id = notes_note_view_wjwgxe.id
  where master_join_jktiqj.source_id = airport_heliport.runwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    lat_declaredvalue.lat_declaredvalue as declaredvalue,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_pt_djzcgl.id) as lat_declaredvalue
  from master_join master_join_urqaoo
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_pt_djzcgl on master_join_urqaoo.target_id = airport_heliport_runwaydeclareddistancevalue_pt_djzcgl.id
  where master_join_urqaoo.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_declaredvalue on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_aourvb.*) AS annotation
  from master_join master_join_txujwl
  join notes.note_view notes_note_view_aourvb on master_join_txujwl.target_id = notes_note_view_aourvb.id
  where master_join_txujwl.source_id = airport_heliport.runwaydeclareddistance.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_fzacgh.id) as lat_criticalridge
  from master_join master_join_uyyhnq
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_fzacgh on master_join_uyyhnq.target_id = airport_heliport_ridge_pt_fzacgh.id
  where master_join_uyyhnq.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_qsyggw.id) as lat_layer
  from master_join master_join_smbyoa
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_qsyggw on master_join_smbyoa.target_id = airport_heliport_surfacecontaminationlayer_pt_qsyggw.id
  where master_join_smbyoa.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_euwipm.*) AS annotation
  from master_join master_join_oaizeu
  join notes.note_view notes_note_view_euwipm on master_join_oaizeu.target_id = notes_note_view_euwipm.id
  where master_join_oaizeu.source_id = airport_heliport.runwaysectioncontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    lat_annotation.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nfecip.*) AS annotation
  from master_join master_join_sjcylu
  join notes.note_view notes_note_view_nfecip on master_join_sjcylu.target_id = notes_note_view_nfecip.id
  where master_join_sjcylu.source_id = procedure.sectordesign.id
) as lat_annotation on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    lat_annotation.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xmxnjg.*) AS annotation
  from master_join master_join_lnlvvd
  join notes.note_view notes_note_view_xmxnjg on master_join_lnlvvd.target_id = notes_note_view_xmxnjg.id
  where master_join_lnlvvd.source_id = shared.standardlevel.id
) as lat_annotation on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kydynr.*) AS annotation
  from master_join master_join_pwhkbr
  join notes.note_view notes_note_view_kydynr on master_join_pwhkbr.target_id = notes_note_view_kydynr.id
  where master_join_pwhkbr.source_id = airport_heliport.surfacecharacteristics.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

-- CREATE MATERIALIZED VIEW partial_surface_view AS
-- WITH  
-- segment_ref AS(
-- 	SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		SUBSTRING(
-- 	        curve_ref 
-- 	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
-- 	    ) AS uuid
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 4
-- ),
-- segment_value AS(
-- 	SELECT 
-- 		airspace.geoborder.identifier AS uuid,
-- 		geom
-- 	FROM airspace.geoborder
-- 	INNER JOIN public.geoborder_timeslice
-- 		ON airspace.geoborder.id = public.geoborder_timeslice.geoborder_id
-- 	INNER JOIN airspace.geoborder_tsp
-- 		ON public.geoborder_timeslice.geoborder_tsp_id = airspace.geoborder_tsp.id
-- 	INNER JOIN airspace.geoborder_ts
-- 		ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
-- 	INNER JOIN public.curve_pt
-- 		ON airspace.geoborder_ts.border_id = public.curve_pt.id
-- 	INNER JOIN geometry.curve_view
-- 		ON public.curve_pt.id = geometry.curve_view.id
-- ),
-- center AS (
--     SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		point,
-- 		radius,
-- 		start_angle,
-- 		end_angle,
-- 		(end_angle - start_angle) / 256 AS step_size
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 2
-- 	UNION ALL 
-- 	SELECT 
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		point,
-- 		radius,
-- 		0 as start_angle,
-- 		2*PI() as end_angle,
-- 		(0 - 2*PI()) / 256 AS step_size
--     FROM public.polygon_segment 
-- 	WHERE public.polygon_segment.interpretation = 3
-- ),
-- interpolated_points AS (
--     SELECT 
--         center.id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
--     FROM 
--         generate_series(0, 256) AS n, 	
--         center
-- ),
-- arc_line AS (
--     SELECT 
--         id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
--         ST_MakeLine(point_geom) AS geom
--     FROM interpolated_points
--     GROUP BY 
-- 		id, 
-- 		curve_xml_id,
-- 		part, 
-- 		member, 
-- 		sequence, 
-- 		interpretation
-- ),
-- segment_union AS (
--     SELECT 
--         id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
--     FROM 
--         public.polygon_segment 
--     WHERE 
--         public.polygon_segment.interpretation = 0
--     UNION ALL 
--     SELECT 
--         id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
--         ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
-- 		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
--     FROM 
--         public.polygon_segment 
--     WHERE 
--         public.polygon_segment.interpretation = 1
-- 	UNION ALL
-- 	SELECT
-- 		id, 
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
-- 	FROM
-- 		arc_line
-- 	UNION ALL
-- 	SELECT
-- 		id,
-- 		curve_xml_id,
-- 		part,
-- 		member,
-- 		sequence,
-- 		interpretation,
-- 		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
-- 		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
-- 		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
-- 	FROM segment_ref
-- 	INNER JOIN segment_value
-- 	ON segment_ref.uuid = segment_value.uuid		
-- ),
-- segement_ownership AS (
-- 	SELECT 
-- 		public.surface_pt.id,
--         public.surface_pt.xml_id,
-- 		segment_union.curve_xml_id,
-- 		segment_union.part AS part,
-- 		segment_union.member AS member,
-- 		segment_union.sequence AS sequence,
-- 		segment_union.interpretation AS interpretation,
-- 		segment_union.geom AS geom,
-- 		segment_union.first_point as first_point,
-- 		segment_union.last_point as last_point,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         public.surface_pt
--     INNER JOIN 
--         public.surface_exterior 
--         ON public.surface_pt.id = public.surface_exterior.surfacepropertytype_id
--     INNER JOIN 
--         segment_union 
--         ON public.surface_exterior.exteriorlinestring_id = segment_union.id
-- 	UNION ALL
-- 	SELECT 
-- 		public.surface_pt.id,
--         public.surface_pt.xml_id,
-- 		segment_union.curve_xml_id,
-- 		segment_union.part AS part,
-- 		segment_union.member AS member,
-- 		segment_union.sequence AS sequence,
-- 		segment_union.interpretation AS interpretation,
-- 		segment_union.geom AS geom,
-- 		segment_union.first_point AS first_point,
-- 		segment_union.last_point AS last_point,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         public.surface_pt
--     INNER JOIN 
--         public.surface_interior 
--         ON public.surface_pt.id = public.surface_interior.surfacepropertytype_id
--     INNER JOIN 
--         segment_union 
--         ON public.surface_interior.interiorlinestring_id = segment_union.id
-- ),
-- ordered_segments AS (
--     SELECT 
-- 		id,
--         xml_id, 
-- 		curve_xml_id,
--         part,
-- 		member,
--         sequence,
-- 		interpretation,
--         geom,
--         first_point, 
--         last_point,
-- 		ST_IsClosed(segement_ownership.geom) AS closed,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         segement_ownership
--     ORDER BY 
--         xml_id, 
-- 		part, 
-- 		member, 
-- 		sequence
-- ),
-- connecting_segments AS (
--     SELECT 
--         id,
-- 		xml_id,
-- 		curve_xml_id,
--         part,
-- 		member,
--         sequence,
-- 		interpretation,
--         geom,
--         first_point,
--         last_point,
-- 		horizontalaccuracy,
-- 		horizontalaccuracy_uom,
-- 		horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         ordered_segments
--     UNION ALL
--     SELECT 
--         curr.id,
-- 		curr.xml_id,
-- 		Null AS curve_xml_id,
--         curr.part,
-- 		curr.member,
--         curr.sequence + 0.5 AS sequence,
-- 		1,
--         ST_MakeLine(curr.last_point, next.first_point) AS geom,
--         curr.last_point AS first_point,
--         next.first_point AS last_point,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.nilreason
--     FROM 
--         ordered_segments curr
--     JOIN 
--         ordered_segments next
--     ON 
--         curr.xml_id = next.xml_id
--         AND curr.part = next.part
--         AND curr.sequence + 1 = next.sequence
-- 		AND curr.member = next.member
-- 	WHERE 
-- 		ST_IsClosed(curr.geom) = false
-- 		AND
-- 		curr.interpretation != 4
-- 		AND
-- 		next.interpretation != 4
--     UNION ALL
--     SELECT 
--         curr.id,
-- 		curr.xml_id,
-- 		Null AS curve_xml_id,
--         curr.part,
-- 		curr.member + 0.5 AS member,
--         curr.sequence,
-- 		1,
--         ST_MakeLine(curr.last_point, next.first_point) AS geom,
--         curr.last_point AS first_point,
--         next.first_point AS last_point,
-- 		curr.horizontalaccuracy,
-- 		curr.horizontalaccuracy_uom,
-- 		curr.horizontalaccuracy_nilreason,
-- 		curr.nilreason
--     FROM 
--         ordered_segments curr
--     JOIN 
--         ordered_segments next
--     ON 
--         curr.xml_id = next.xml_id
--         AND curr.part = next.part
--         AND curr.member + 1 = next.member
-- 	WHERE 
-- 		ST_IsClosed(curr.geom) = false
-- 		AND
-- 		curr.interpretation != 4
-- 		AND
-- 		next.interpretation != 4
--     ORDER BY 
--         xml_id, 
--         part, 
--         member,
--         sequence
-- ),
-- clustered_segments AS (
--     SELECT 
--         id, 
--         xml_id,
-- 		curve_xml_id,
--         part,
--         member,
--         geom,
-- 		interpretation,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
--         nilreason,
--         ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY xml_id, part)  AS cluster_id
--     FROM 
--         connecting_segments
--     WHERE 
--         interpretation != 4
-- 	UNION ALL
--     SELECT 
--         id, 
-- 		xml_id,
-- 		curve_xml_id,
--         part,
--         member,
--         geom,
-- 		interpretation,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
--         nilreason,
--         Null AS cluster_id
--     FROM 
--         connecting_segments
--     WHERE 
--         interpretation = 4
-- 	ORDER BY
-- 		xml_id,
-- 		part, 
-- 		member
-- ),
-- partial_ring AS (
--     SELECT 
--         id, 
--         xml_id,
-- 		ARRAY_AGG(curve_xml_id) as curve_xml_id,
--         part,
--         MIN(member) AS member,
-- 		MIN(interpretation) AS interpretation,
--         ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
--         ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
--         ST_LineMerge(ST_Collect(geom)) AS geom,
--         NULL::geometry AS points,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
--         nilreason
--     FROM 
--         clustered_segments
-- 	WHERE 
-- 		interpretation != 4
--     GROUP BY 
-- 		id,
--         xml_id, 
--         part, 
--         cluster_id,
--         horizontalaccuracy, 
--         horizontalaccuracy_uom, 
--         horizontalaccuracy_nilreason,	
--         nilreason
-- 	UNION ALL
--     SELECT 
--         id, 
--         xml_id,
-- 		ARRAY[curve_xml_id] AS curve_xml_id,
--         part,
--         member,
-- 		interpretation,
--         ST_IsClosed(geom) AS closed,
--         ST_GeometryType(geom) AS type, 
-- 		geom AS geom,
-- 		ST_Points(geom) AS points,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
--         nilreason
--     FROM 
--         clustered_segments
-- 	WHERE 
-- 		interpretation = 4
-- 	ORDER BY 
--         xml_id, 
-- 		part, 
-- 		member
-- ),
-- output AS (
--     SELECT 
--         pr.id, 
--         pr.xml_id,
-- 		pr.curve_xml_id,
--         pr.part,
-- 		ROW_NUMBER() OVER (PARTITION BY xml_id, part ORDER BY id) - 1 AS increment,
-- 		COUNT(*) OVER (PARTITION BY xml_id, part ) AS total_count,
-- 		pr.interpretation,
-- 		pr.points,
--         COALESCE(dumped.geom, pr.geom) AS geom,
--         pr.horizontalaccuracy,
--         pr.horizontalaccuracy_uom,
--         pr.horizontalaccuracy_nilreason,
--         pr.nilreason
--     FROM 
--         partial_ring pr
--     LEFT JOIN LATERAL (
--         SELECT (ST_Dump(pr.geom)).geom
--         WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
--     ) dumped ON true
-- 	ORDER BY
-- 		xml_id, 
-- 		part, 
-- 		member
-- )
-- SELECT 
-- 	ST_GeometryType(geom),
-- 	output.id, 
-- 	to_jsonb(output.xml_id) AS xml_id,
-- 	to_jsonb(output.curve_xml_id) AS curve_xml_id,
-- 	output.part,
-- 	output.increment,
-- 	output.total_count,
-- 	output.interpretation,
-- 	output.geom,
-- 	output.points,
-- 	output.horizontalaccuracy,
-- 	output.horizontalaccuracy_uom,
-- 	output.horizontalaccuracy_nilreason,
-- 	output.nilreason
-- FROM
-- 	output;

-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
-- CREATE MATERIALIZED VIEW geometry.surface_view AS
-- WITH 
-- g1_segment AS (
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,
-- 			ST_Union(
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
-- 			)
-- 		  )
-- 		)).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_surface_view geoborder
-- 	JOIN
-- 		partial_surface_view ring
-- 	ON 
--         ring.xml_id = geoborder.xml_id
-- 		AND
-- 		ring.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE 
-- 		geoborder.total_count = 2
-- 		AND
-- 		geoborder.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.geom, 
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.geom, 
-- 		ring.geom,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		partial_surface_view.id, 
-- 		partial_surface_view.xml_id,
-- 		partial_surface_view.curve_xml_id,
-- 		partial_surface_view.part,
-- 		partial_surface_view.increment,
-- 		partial_surface_view.interpretation,
-- 		partial_surface_view.geom,
-- 		Null::geometry AS start_segment,
-- 		Null::geometry AS end_segment,
-- 		partial_surface_view.horizontalaccuracy, 
-- 		partial_surface_view.horizontalaccuracy_uom, 
-- 		partial_surface_view.horizontalaccuracy_nilreason, 
-- 		partial_surface_view.nilreason
-- 	FROM 
-- 		partial_surface_view
-- 	WHERE 
-- 		partial_surface_view.total_count = 2 
-- 		AND
-- 		partial_surface_view.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- g2_segment AS (
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		geoborder.geom AS geom,
-- 		Null::geometry AS  start_segment,
-- 		Null::geometry AS end_segment,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_surface_view geoborder
-- 	JOIN
-- 		partial_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,
-- 			ST_Union(
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
-- 				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
-- 			)
-- 		  )
-- 		)).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_surface_view geoborder
-- 	JOIN
-- 		partial_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation != 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
-- 			)
-- 		  )
-- 		).geom AS geom,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
-- 		Null::geometry AS end_segment,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_surface_view geoborder
-- 	JOIN
-- 		partial_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation = 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id, 
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		(ST_Dump(
-- 		  ST_Split(
-- 			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
-- 			)
-- 		  )
-- 		).geom AS geom,
-- 		Null::geometry AS  start_segment,
-- 		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment,
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	FROM 
-- 		partial_surface_view geoborder
-- 	JOIN
-- 		partial_surface_view before
-- 	ON 
--         before.xml_id = geoborder.xml_id
-- 		AND
-- 		before.part = geoborder.part
-- 	    AND (
-- 	        before.increment = geoborder.increment - 1
-- 	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
-- 	    )
-- 	JOIN
-- 		partial_surface_view after
-- 	ON 
--         after.xml_id = geoborder.xml_id
-- 		AND
-- 		after.part = geoborder.part
-- 	    AND (
-- 	        after.increment = geoborder.increment + 1
-- 	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		geoborder.total_count > 2 
-- 		AND
-- 		geoborder.interpretation = 4
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation != 4
-- 	GROUP BY
-- 		geoborder.id, 
-- 		geoborder.xml_id,
-- 		geoborder.curve_xml_id,
-- 		geoborder.part,
-- 		before.geom, 
-- 		after.geom,
-- 		geoborder.increment,
-- 		geoborder.interpretation,
-- 		geoborder.total_count,
-- 		before.increment,
-- 		after.increment,
-- 		geoborder.geom, 
-- 		geoborder.horizontalaccuracy, 
-- 		geoborder.horizontalaccuracy_uom, 
-- 		geoborder.horizontalaccuracy_nilreason, 
-- 		geoborder.nilreason
-- 	UNION ALL
-- 	SELECT
-- 		partial_surface_view.id, 
-- 		partial_surface_view.xml_id,
-- 		partial_surface_view.curve_xml_id,
-- 		partial_surface_view.part,
-- 		partial_surface_view.increment,
-- 		partial_surface_view.interpretation,
-- 		partial_surface_view.total_count,
-- 		partial_surface_view.geom,
-- 		Null::geometry AS start_segment,
-- 		Null::geometry AS end_segment,
-- 		partial_surface_view.horizontalaccuracy, 
-- 		partial_surface_view.horizontalaccuracy_uom, 
-- 		partial_surface_view.horizontalaccuracy_nilreason, 
-- 		partial_surface_view.nilreason
-- 	FROM 
-- 		partial_surface_view
-- 	WHERE 
-- 		partial_surface_view.total_count > 2 
-- 		AND
-- 		partial_surface_view.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- g2_segment_filtered AS (
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		curr.geom AS geom,
-- 		curr.horizontalaccuracy, 
-- 		curr.horizontalaccuracy_uom, 
-- 		curr.horizontalaccuracy_nilreason, 
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, before.geom) 
-- 		AND 
-- 		ST_Intersects(curr.geom, after.geom)
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation = 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom,
-- 		curr.horizontalaccuracy, 
-- 		curr.horizontalaccuracy_uom, 
-- 		curr.horizontalaccuracy_nilreason, 
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, curr.start_segment)  
-- 		AND 
-- 		ST_Intersects(curr.geom, after.geom)
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation = 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom,
-- 		curr.horizontalaccuracy, 
-- 		curr.horizontalaccuracy_uom, 
-- 		curr.horizontalaccuracy_nilreason, 
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 		g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, before.geom) 
-- 		AND 
-- 		ST_Intersects(curr.geom, curr.end_segment)
-- 		AND 
-- 		before.interpretation = 4
-- 		AND 
-- 		after.interpretation != 4
-- 	UNION ALL
-- 	SELECT 
-- 		curr.id, 
-- 		curr.xml_id,
-- 		curr.curve_xml_id,
-- 		curr.part,
-- 		curr.increment,
-- 		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom,
-- 		curr.horizontalaccuracy, 
-- 		curr.horizontalaccuracy_uom, 
-- 		curr.horizontalaccuracy_nilreason, 
-- 		curr.nilreason
-- 	FROM
-- 		g2_segment curr
-- 	JOIN
-- 		g2_segment before
-- 	ON 
--         before.xml_id = curr.xml_id
-- 		AND
-- 		before.part = curr.part
-- 	    AND (
-- 	        before.increment = curr.increment - 1
-- 	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
-- 	    )
-- 	JOIN	
-- 	g2_segment after
-- 	ON 
--         after.xml_id = curr.xml_id
-- 		AND
-- 		after.part = curr.part
-- 	    AND (
-- 	        after.increment = curr.increment + 1
-- 	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
-- 	    )
-- 	WHERE 
-- 		curr.interpretation = 4
-- 		AND
-- 		ST_Intersects(curr.geom, curr.start_segment) 
-- 		AND 
-- 		ST_Intersects(curr.geom, curr.end_segment)
-- 		AND 
-- 		before.interpretation != 4
-- 		AND 
-- 		after.interpretation != 4
-- 	UNION ALL
-- 	SELECT
-- 		g2_segment.id, 
-- 		g2_segment.xml_id,
-- 		g2_segment.curve_xml_id,
-- 		g2_segment.part,
-- 		g2_segment.increment,
-- 		g2_segment.geom,
-- 		g2_segment.horizontalaccuracy, 
-- 		g2_segment.horizontalaccuracy_uom, 
-- 		g2_segment.horizontalaccuracy_nilreason, 
-- 		g2_segment.nilreason
-- 	FROM 
-- 		g2_segment
-- 	WHERE 
-- 		g2_segment.interpretation != 4
-- 	ORDER BY
-- 		id, 
-- 		xml_id, 
-- 		part,
-- 		increment
-- ),
-- r1 AS (
-- 	SELECT
-- 		partial_surface_view.id,
-- 		partial_surface_view.xml_id,
-- 		partial_surface_view.curve_xml_id,
-- 		partial_surface_view.part,
-- 		partial_surface_view.geom,
-- 		partial_surface_view.horizontalaccuracy,
-- 		partial_surface_view.horizontalaccuracy_uom,
-- 		partial_surface_view.horizontalaccuracy_nilreason,
-- 		partial_surface_view.nilreason
-- 	FROM
-- 		partial_surface_view
-- 	WHERE
-- 		ST_IsClosed(partial_surface_view.geom) = true
-- 		AND 
-- 		partial_surface_view.total_count = 1
-- 		AND 
-- 		ST_NPoints(geom) >= 4
-- ),
-- r2 AS (
-- 	SELECT
-- 		partial_surface_view.id,
-- 		partial_surface_view.xml_id,
-- 		partial_surface_view.curve_xml_id,
-- 		partial_surface_view.part,
-- 		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom,
-- 		partial_surface_view.horizontalaccuracy,
-- 		partial_surface_view.horizontalaccuracy_uom,
-- 		partial_surface_view.horizontalaccuracy_nilreason,
-- 		partial_surface_view.nilreason
-- 	FROM
-- 		partial_surface_view
-- 	WHERE
-- 		ST_IsClosed(partial_surface_view.geom) = false
-- 		AND 
-- 		partial_surface_view.total_count = 1
-- 		AND 
-- 		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
-- ),
-- g1 AS (
-- 	SELECT 
-- 		ring.id,
-- 		ring.xml_id || geoborder.xml_id AS xml_id,
-- 		ring.curve_xml_id || geoborder.curve_xml_id AS curve_xml_id,
-- 		ring.part,
-- 		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom,
-- 		ring.horizontalaccuracy,
-- 		ring.horizontalaccuracy_uom,
-- 		ring.horizontalaccuracy_nilreason,
-- 		ring.nilreason
-- 	FROM
-- 	g1_segment ring
-- 	JOIN
-- 	g1_segment geoborder
-- 	ON 
-- 		ring.xml_id = geoborder.xml_id
-- 		AND
-- 		geoborder.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE
-- 		ST_Intersects(geoborder.geom, geoborder.start_segment) 
-- 		AND 
-- 		ST_Intersects(geoborder.geom, geoborder.end_segment)
-- 		AND 
-- 		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
-- 		AND
-- 		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
-- 	UNION ALL
-- 	SELECT DISTINCT 
-- 		ring.id,
-- 		ring.xml_id || geoborder.xml_id AS xml_id,
-- 		ring.curve_xml_id || geoborder.curve_xml_id AS curve_xml_id,
-- 		ring.part,
-- 		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom,
-- 		ring.horizontalaccuracy,
-- 		ring.horizontalaccuracy_uom,
-- 		ring.horizontalaccuracy_nilreason,
-- 		ring.nilreason
-- 	FROM
-- 	g1_segment ring
-- 	JOIN
-- 	g1_segment geoborder
-- 	ON 
-- 		ring.xml_id = geoborder.xml_id
-- 		AND
-- 		geoborder.part = geoborder.part
-- 		AND 
-- 		ring.increment <> geoborder.increment
-- 	WHERE
-- 		ST_Intersects(geoborder.geom, geoborder.start_segment) 
-- 		AND 
-- 		ST_Intersects(geoborder.geom, geoborder.end_segment)
-- 		AND 
-- 		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
-- 		AND
-- 		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
-- ),
-- g2 AS (	
-- 	SELECT 
-- 		MIN(g2_segment_filtered.id) AS id,
-- 		JSONB_AGG(g2_segment_filtered.xml_id) AS xml_id,
-- 		JSONB_AGG(g2_segment_filtered.curve_xml_id) AS curve_xml_id,
-- 		MIN(g2_segment_filtered.part) AS part,
-- 		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom,
-- 		MIN(g2_segment_filtered.horizontalaccuracy) AS horizontalaccuracy,
-- 		MIN(g2_segment_filtered.horizontalaccuracy_uom) AS horizontalaccuracy_uom,
-- 		MIN(g2_segment_filtered.horizontalaccuracy_nilreason) AS horizontalaccuracy_nilreason,
-- 		MIN(g2_segment_filtered.nilreason) AS nilreason
-- 	FROM
-- 		g2_segment_filtered
-- 	GROUP BY
-- 		g2_segment_filtered.id,
-- 		g2_segment_filtered.xml_id,
-- 		g2_segment_filtered.part
-- 	HAVING
-- 		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
-- 		AND
-- 		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
-- 		AND 
-- 		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
-- 	UNION ALL
-- 	SELECT 
-- 		MIN(g2_segment_filtered.id) AS id,
-- 		JSONB_AGG(g2_segment_filtered.xml_id) AS xml_id,
-- 		JSONB_AGG(g2_segment_filtered.curve_xml_id) AS curve_xml_id,
-- 		MIN(g2_segment_filtered.part) AS part,
-- 		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom,
-- 		MIN(g2_segment_filtered.horizontalaccuracy) AS horizontalaccuracy,
-- 		MIN(g2_segment_filtered.horizontalaccuracy_uom) AS horizontalaccuracy_uom,
-- 		MIN(g2_segment_filtered.horizontalaccuracy_nilreason) AS horizontalaccuracy_nilreason,
-- 		MIN(g2_segment_filtered.nilreason) AS nilreason
-- 	FROM
-- 		g2_segment_filtered
-- 	GROUP BY
-- 		g2_segment_filtered.id,
-- 		g2_segment_filtered.xml_id,
-- 		g2_segment_filtered.part
-- 	HAVING
-- 		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
-- 		AND
-- 		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
-- 		AND 
-- 		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
-- ),
-- combined_data AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
-- 		geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason,
--         part
--     FROM 
--         r1
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id,
-- 		curve_xml_id,
--         geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason,
--         part
--     FROM 
--         r2
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason,
--         part
--     FROM 
--         g1
--     UNION ALL
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason,
--         part
--     FROM 
--         g2
-- ),
-- outer_shells AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         ST_MakePolygon(geom) AS geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         combined_data
--     WHERE 
--         part = 0
-- ),
-- inner_shells AS (
--     SELECT 
--         id, 
--         xml_id, 
-- 		curve_xml_id,
--         geom,
--         horizontalaccuracy,
--         horizontalaccuracy_uom,
--         horizontalaccuracy_nilreason,
-- 		nilreason
--     FROM 
--         combined_data
--     WHERE 
--         part <> 0
-- )
-- SELECT 
--     outer_shells.id,
--     ST_MakePolygon(
--         ST_ExteriorRing(outer_shells.geom),
--         ARRAY(
--             SELECT ST_ExteriorRing(inner_shells.geom)
--             FROM inner_shells 
--             WHERE inner_shells.id = outer_shells.id
--         )
--     ) AS geom,
-- 	COALESCE(outer_shells.horizontalaccuracy || ' ' ||outer_shells. horizontalaccuracy_uom, '(' || outer_shells.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
-- FROM 
-- outer_shells;

-- CREATE INDEX ON geometry.surface_view (id);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

CREATE MATERIALIZED VIEW geometry.surface_view AS
SELECT 
0 AS id,
ST_GeomFromText('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))', 4326) AS geom,
0 AS horizontalAccuracy;
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_ekmbbo.title as varchar), '(' || organisation_unit_pt_ekmbbo.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_ekmbbo.href AS theunit_href,
    lat_annotation.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_ekmbbo on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_ekmbbo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_irdthy.*) AS annotation
  from master_join master_join_yvhobd
  join notes.note_view notes_note_view_irdthy on master_join_yvhobd.target_id = notes_note_view_irdthy.id
  where master_join_yvhobd.source_id = surveillance.surveillancegroundstation.id
) as lat_annotation on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_yzoezy.id) as lat_criticalridge
  from master_join master_join_ipdcdy
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_yzoezy on master_join_ipdcdy.target_id = airport_heliport_ridge_pt_yzoezy.id
  where master_join_ipdcdy.source_id = airport_heliport.taxiwaycontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_rwbkpd.id) as lat_layer
  from master_join master_join_yhggdb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_rwbkpd on master_join_yhggdb.target_id = airport_heliport_surfacecontaminationlayer_pt_rwbkpd.id
  where master_join_yhggdb.source_id = airport_heliport.taxiwaycontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ebhpyx.*) AS annotation
  from master_join master_join_uxicla
  join notes.note_view notes_note_view_ebhpyx on master_join_uxicla.target_id = notes_note_view_ebhpyx.id
  where master_join_uxicla.source_id = airport_heliport.taxiwaycontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    lat_criticalridge.lat_criticalridge as criticalridge,
    lat_layer.lat_layer as layer,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_pt_logbql.id) as lat_criticalridge
  from master_join master_join_hpcogv
  join airport_heliport.ridge_pt airport_heliport_ridge_pt_logbql on master_join_hpcogv.target_id = airport_heliport_ridge_pt_logbql.id
  where master_join_hpcogv.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_criticalridge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_pt_pdibfu.id) as lat_layer
  from master_join master_join_mucdmc
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_pt_pdibfu on master_join_mucdmc.target_id = airport_heliport_surfacecontaminationlayer_pt_pdibfu.id
  where master_join_mucdmc.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_layer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tmqiuy.*) AS annotation
  from master_join master_join_wmcqmx
  join notes.note_view notes_note_view_tmqiuy on master_join_wmcqmx.target_id = notes_note_view_tmqiuy.id
  where master_join_wmcqmx.source_id = airport_heliport.touchdownliftoffcontamination.id
) as lat_annotation on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_xzdqng.title as varchar), '(' || organisation_unit_pt_xzdqng.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_xzdqng.href AS theunit_href,
    lat_annotation.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_xzdqng on organisation.unitdependency.theunit_id = organisation_unit_pt_xzdqng.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jirqtc.*) AS annotation
  from master_join master_join_ewiocd
  join notes.note_view notes_note_view_jirqtc on master_join_ewiocd.target_id = notes_note_view_jirqtc.id
  where master_join_ewiocd.source_id = organisation.unitdependency.id
) as lat_annotation on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    lat_point.lat_point as point,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_idntyn.id) as lat_point
  from master_join master_join_ekyjgq
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_idntyn on master_join_ekyjgq.target_id = aerial_refuelling_aerialrefuellingpoint_pt_idntyn.id
  where master_join_ekyjgq.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_point on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_mkqrmw.id) as lat_verticalextent
  from master_join master_join_kbulgd
  join shared.airspacelayer_pt shared_airspacelayer_pt_mkqrmw on master_join_kbulgd.target_id = shared_airspacelayer_pt_mkqrmw.id
  where master_join_kbulgd.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_verticalextent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wjtksr.*) AS annotation
  from master_join master_join_jhjilu
  join notes.note_view notes_note_view_wjtksr on master_join_jhjilu.target_id = notes_note_view_wjtksr.id
  where master_join_jhjilu.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    procedure_landingtakeoffareacollection_pt_duwifa.id AS departurerunwaytransition,
    lat_transitionleg.lat_transitionleg as transitionleg,
    lat_annotation.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_duwifa on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_duwifa.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_pt_owvisi.id) as lat_transitionleg
  from master_join master_join_ouhkav
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_pt_owvisi on master_join_ouhkav.target_id = procedure_proceduretransitionleg_pt_owvisi.id
  where master_join_ouhkav.source_id = procedure.proceduretransition.id
) as lat_transitionleg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_htxuka.*) AS annotation
  from master_join master_join_felpvv
  join notes.note_view notes_note_view_htxuka on master_join_felpvv.target_id = notes_note_view_htxuka.id
  where master_join_felpvv.source_id = procedure.proceduretransition.id
) as lat_annotation on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kkaryc.*) AS annotation
  from master_join master_join_kpcuxe
  join notes.note_view notes_note_view_kkaryc on master_join_kpcuxe.target_id = notes_note_view_kkaryc.id
  where master_join_kpcuxe.source_id = shared.lightelement.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_pt_ktkhtm.id) as lat_availability
  from master_join master_join_bljrxv
  join shared.lightelementstatus_pt shared_lightelementstatus_pt_ktkhtm on master_join_bljrxv.target_id = shared_lightelementstatus_pt_ktkhtm.id
  where master_join_bljrxv.source_id = shared.lightelement.id
) as lat_availability on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qbmkfw.*) AS annotation
  from master_join master_join_cfzlip
  join notes.note_view notes_note_view_qbmkfw on master_join_cfzlip.target_id = notes_note_view_qbmkfw.id
  where master_join_cfzlip.source_id = surveillance.reflector.id
) as lat_annotation on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    lat_annotation.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sdidjn.*) AS annotation
  from master_join master_join_ruthmy
  join notes.note_view notes_note_view_sdidjn on master_join_ruthmy.target_id = notes_note_view_sdidjn.id
  where master_join_ruthmy.source_id = airport_heliport.markingelement.id
) as lat_annotation on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    lat_annotation.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
  from master_join master_join_lmyctm
  join geometry.elevatedsurface_view geometry_elevatedsurface_view_kmxrgp on master_join_lmyctm.target_id = geometry_elevatedsurface_view_kmxrgp.id
  where master_join_lmyctm.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_emgfml.*) AS annotation
  from master_join master_join_dpxizq
  join notes.note_view notes_note_view_emgfml on master_join_dpxizq.target_id = notes_note_view_emgfml.id
  where master_join_dpxizq.source_id = airport_heliport.surfacecontaminationlayer.id
) as lat_annotation on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_whpmzu.title as varchar), '(' || navaids_points_designatedpoint_pt_whpmzu.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_whpmzu.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_uqtgss.title as varchar), '(' || navaids_points_navaid_pt_uqtgss.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_uqtgss.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lhqift.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lhqift.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_lhqift.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_okrehn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_okrehn.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_okrehn.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aqwyqg.title as varchar), '(' || airport_heliport_airportheliport_pt_aqwyqg.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_aqwyqg.href AS pointchoiceairportreferencepoint_href,
    coalesce(cast(shared_radiofrequencyarea_pt_xgufys.title as varchar), '(' || shared_radiofrequencyarea_pt_xgufys.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_xgufys.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_whpmzu on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_whpmzu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uqtgss on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_uqtgss.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lhqift on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lhqift.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_okrehn on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_okrehn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aqwyqg on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_aqwyqg.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_xgufys on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_xgufys.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_vcheee.id) as lat_facilitymakeup
  from master_join master_join_ufmbis
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_vcheee on master_join_ufmbis.target_id = navaids_points_pointreference_pt_vcheee.id
  where master_join_ufmbis.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmdlxk.*) AS annotation
  from master_join master_join_axscbm
  join notes.note_view notes_note_view_nmdlxk on master_join_axscbm.target_id = notes_note_view_nmdlxk.id
  where master_join_axscbm.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_dnljxp.title as varchar), '(' || navaids_points_designatedpoint_pt_dnljxp.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dnljxp.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_htlqtk.title as varchar), '(' || navaids_points_designatedpoint_pt_htlqtk.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_htlqtk.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jpfngn.title as varchar), '(' || navaids_points_navaid_pt_jpfngn.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_jpfngn.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_cvleri.title as varchar), '(' || navaids_points_navaid_pt_cvleri.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_cvleri.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lfxlck.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lfxlck.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_lfxlck.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_igyjnp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_igyjnp.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_igyjnp.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wxdzwq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wxdzwq.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wxdzwq.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nzxwcu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nzxwcu.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nzxwcu.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rncnlg.title as varchar), '(' || airport_heliport_airportheliport_pt_rncnlg.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_rncnlg.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ofvjsg.title as varchar), '(' || airport_heliport_airportheliport_pt_ofvjsg.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_ofvjsg.href AS startairportreferencepoint_href,
    lat_annotation.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dnljxp on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dnljxp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jpfngn on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_jpfngn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lfxlck on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lfxlck.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wxdzwq on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wxdzwq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rncnlg on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_rncnlg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_htlqtk on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_htlqtk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cvleri on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_cvleri.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_igyjnp on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_igyjnp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nzxwcu on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nzxwcu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ofvjsg on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_ofvjsg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fqqgoc.*) AS annotation
  from master_join master_join_gaohbo
  join notes.note_view notes_note_view_fqqgoc on master_join_gaohbo.target_id = notes_note_view_fqqgoc.id
  where master_join_gaohbo.source_id = routes.directflightsegment.id
) as lat_annotation on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_juhknf.title as varchar), '(' || navaids_points_designatedpoint_pt_juhknf.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_juhknf.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_itecur.title as varchar), '(' || navaids_points_navaid_pt_itecur.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_itecur.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nfltpv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nfltpv.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_nfltpv.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_sagrwm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_sagrwm.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_sagrwm.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kbulyd.title as varchar), '(' || airport_heliport_airportheliport_pt_kbulyd.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_kbulyd.href AS pointchoiceairportreferencepoint_href,
    coalesce(cast(shared_radiofrequencyarea_pt_ovpusw.title as varchar), '(' || shared_radiofrequencyarea_pt_ovpusw.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_ovpusw.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_juhknf on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_juhknf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_itecur on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_itecur.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nfltpv on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nfltpv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_sagrwm on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_sagrwm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kbulyd on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_kbulyd.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_ovpusw on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_ovpusw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_khmowc.id) as lat_facilitymakeup
  from master_join master_join_zrgdcg
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_khmowc on master_join_zrgdcg.target_id = navaids_points_pointreference_pt_khmowc.id
  where master_join_zrgdcg.source_id = navaids_points.enroutesegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_czaxse.*) AS annotation
  from master_join master_join_kfzcmj
  join notes.note_view notes_note_view_czaxse on master_join_kfzcmj.target_id = notes_note_view_czaxse.id
  where master_join_kfzcmj.source_id = navaids_points.enroutesegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_qmgcto.title as varchar), '(' || airport_heliport_airportheliport_pt_qmgcto.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_qmgcto.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mknayu.title as varchar), '(' || airport_heliport_airportheliport_pt_mknayu.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_mknayu.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_hwelpz.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_hwelpz.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_hwelpz.href AS flightconditionstandardinstrumentdeparturecondition_href,
    routes_routeportion_pt_xjheaz.id AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_pqcgdo.title as varchar), '(' || organisation_organisationauthority_pt_pqcgdo.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_pqcgdo.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ipjpdu.title as varchar), '(' || navaids_points_designatedpoint_pt_ipjpdu.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ipjpdu.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dyvygt.title as varchar), '(' || navaids_points_navaid_pt_dyvygt.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_dyvygt.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xockng.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xockng.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_xockng.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fyidjd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fyidjd.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fyidjd.href AS significantpointconditionrunwaypoint_href,
    shared_aircraftcharacteristic_pt_hrfblc.id AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_ruvfrf.title as varchar), '(' || routes_airspacebordercrossing_pt_ruvfrf.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_ruvfrf.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_oblsht.title as varchar), '(' || airspace_airspace_pt_oblsht.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_oblsht.href AS flightconditionairspacecondition_href,
    shared_flightcharacteristic_pt_mihmpu.id AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ksswgd.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ksswgd.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ksswgd.href AS flightconditionstandardinstrumentarrivalcondition_href,
    routes_flightconditioncombination_pt_dmpnea.id AS flightconditionoperand,
    shared_meteorology_pt_mxxuqj.id AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_gyxdrk.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_gyxdrk.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_gyxdrk.href AS flightconditionaerialrefuellingcondition_href,
    routes_flightconditioncircumstance_pt_rcysih.id AS operationalcondition,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qmgcto on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_qmgcto.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_hwelpz on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_hwelpz.id
left join routes.routeportion_pt routes_routeportion_pt_xjheaz on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_xjheaz.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pqcgdo on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_pqcgdo.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ipjpdu on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ipjpdu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dyvygt on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_dyvygt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xockng on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xockng.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fyidjd on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fyidjd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mknayu on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_mknayu.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_hrfblc on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_hrfblc.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_ruvfrf on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_ruvfrf.id
left join airspace.airspace_pt airspace_airspace_pt_oblsht on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_oblsht.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_mihmpu on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_mihmpu.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ksswgd on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ksswgd.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_dmpnea on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_dmpnea.id
left join shared.meteorology_pt shared_meteorology_pt_mxxuqj on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_mxxuqj.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_gyxdrk on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_gyxdrk.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_rcysih on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_rcysih.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_zfblsv.id) as lat_flightlevel
  from master_join master_join_rkgdzg
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_zfblsv on master_join_rkgdzg.target_id = routes_flightrestrictionlevel_pt_zfblsv.id
  where master_join_rkgdzg.source_id = routes.flightconditionelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_clxarv.*) AS annotation
  from master_join master_join_vqbodz
  join notes.note_view notes_note_view_clxarv on master_join_vqbodz.target_id = notes_note_view_clxarv.id
  where master_join_vqbodz.source_id = routes.flightconditionelement.id
) as lat_annotation on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_wdgbbc.title as varchar), '(' || procedure_standardinstrumentarrival_pt_wdgbbc.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_wdgbbc.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_ostfch.title as varchar), '(' || airspace_airspace_pt_ostfch.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_ostfch.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nhcrfd.title as varchar), '(' || navaids_points_designatedpoint_pt_nhcrfd.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nhcrfd.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_izzvfw.title as varchar), '(' || navaids_points_navaid_pt_izzvfw.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_izzvfw.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_emfjil.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_emfjil.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_emfjil.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fdzkdx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fdzkdx.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fdzkdx.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_szpeqs.title as varchar), '(' || airport_heliport_airportheliport_pt_szpeqs.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_szpeqs.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dmhgrs.title as varchar), '(' || airport_heliport_airportheliport_pt_dmhgrs.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_dmhgrs.href AS elementairportheliportelement_href,
    routes_directflightsegment_pt_zmqjwg.id AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_lrfynx.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_lrfynx.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_lrfynx.href AS elementstandardinstrumentdepartureelement_href,
    routes_routeportion_pt_mfdyzb.id AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_hvorkt.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_hvorkt.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_hvorkt.href AS elementaerialrefuellingelement_href,
    lat_flightlevel.lat_flightlevel as flightlevel,
    lat_annotation.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_wdgbbc on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_wdgbbc.id
left join airspace.airspace_pt airspace_airspace_pt_ostfch on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_ostfch.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nhcrfd on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nhcrfd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_izzvfw on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_izzvfw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_emfjil on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_emfjil.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fdzkdx on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fdzkdx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_szpeqs on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_szpeqs.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_zmqjwg on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_zmqjwg.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_lrfynx on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_lrfynx.id
left join routes.routeportion_pt routes_routeportion_pt_mfdyzb on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_mfdyzb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dmhgrs on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_dmhgrs.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_hvorkt on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_hvorkt.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_pt_mipaaa.id) as lat_flightlevel
  from master_join master_join_kbsegs
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_pt_mipaaa on master_join_kbsegs.target_id = routes_flightrestrictionlevel_pt_mipaaa.id
  where master_join_kbsegs.source_id = routes.flightroutingelement.id
) as lat_flightlevel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qkhuqw.*) AS annotation
  from master_join master_join_uevdps
  join notes.note_view notes_note_view_qkhuqw on master_join_uevdps.target_id = notes_note_view_qkhuqw.id
  where master_join_uevdps.source_id = routes.flightroutingelement.id
) as lat_annotation on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_ijbyyj.title as varchar), '(' || navaids_points_designatedpoint_pt_ijbyyj.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ijbyyj.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ujxhzz.title as varchar), '(' || navaids_points_designatedpoint_pt_ujxhzz.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ujxhzz.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_gpafxd.title as varchar), '(' || navaids_points_designatedpoint_pt_gpafxd.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gpafxd.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gkkasw.title as varchar), '(' || navaids_points_navaid_pt_gkkasw.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_gkkasw.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_wlsgoq.title as varchar), '(' || navaids_points_navaid_pt_wlsgoq.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_wlsgoq.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_rgxnll.title as varchar), '(' || navaids_points_navaid_pt_rgxnll.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_rgxnll.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pkwppb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pkwppb.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_pkwppb.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ildljl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ildljl.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_ildljl.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zqfyzf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zqfyzf.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_zqfyzf.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_drqzpa.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_drqzpa.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_drqzpa.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nfeqca.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nfeqca.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nfeqca.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rhzoud.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rhzoud.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rhzoud.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_iofdhv.title as varchar), '(' || airport_heliport_airportheliport_pt_iofdhv.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_iofdhv.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cyjvff.title as varchar), '(' || airport_heliport_airportheliport_pt_cyjvff.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_cyjvff.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dguvba.title as varchar), '(' || airport_heliport_airportheliport_pt_dguvba.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_dguvba.href AS endairportreferencepoint_href,
    coalesce(cast(routes_route_pt_swpvqi.title as varchar), '(' || routes_route_pt_swpvqi.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_swpvqi.href AS referencedroute_href,
    lat_annotation.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ijbyyj on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ijbyyj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gkkasw on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_gkkasw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pkwppb on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pkwppb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_drqzpa on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_drqzpa.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iofdhv on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_iofdhv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ujxhzz on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ujxhzz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wlsgoq on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_wlsgoq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ildljl on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ildljl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nfeqca on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nfeqca.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cyjvff on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_cyjvff.id
left join routes.route_pt routes_route_pt_swpvqi on routes.routeportion.referencedroute_id = routes_route_pt_swpvqi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gpafxd on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gpafxd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_rgxnll on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_rgxnll.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zqfyzf on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zqfyzf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rhzoud on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rhzoud.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dguvba on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_dguvba.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zrutsw.*) AS annotation
  from master_join master_join_krznfn
  join notes.note_view notes_note_view_zrutsw on master_join_krznfn.target_id = notes_note_view_zrutsw.id
  where master_join_krznfn.source_id = routes.routeportion.id
) as lat_annotation on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_vlbwnx.title as varchar), '(' || navaids_points_designatedpoint_pt_vlbwnx.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_vlbwnx.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jhbcrz.title as varchar), '(' || navaids_points_navaid_pt_jhbcrz.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jhbcrz.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jxyoqm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jxyoqm.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_jxyoqm.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tohfyn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tohfyn.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tohfyn.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ylqinu.title as varchar), '(' || airport_heliport_airportheliport_pt_ylqinu.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ylqinu.href AS pointchoiceairportreferencepoint_href,
    coalesce(cast(shared_radiofrequencyarea_pt_ricitv.title as varchar), '(' || shared_radiofrequencyarea_pt_ricitv.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_ricitv.href AS extendedservicevolume_href,
    lat_facilitymakeup.lat_facilitymakeup as facilitymakeup,
    lat_annotation.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vlbwnx on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vlbwnx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jhbcrz on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_jhbcrz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jxyoqm on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jxyoqm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tohfyn on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tohfyn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ylqinu on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ylqinu.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_ricitv on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_ricitv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_pt_artyow.id) as lat_facilitymakeup
  from master_join master_join_mcxlam
  join navaids_points.pointreference_pt navaids_points_pointreference_pt_artyow on master_join_mcxlam.target_id = navaids_points_pointreference_pt_artyow.id
  where master_join_mcxlam.source_id = navaids_points.terminalsegmentpoint.id
) as lat_facilitymakeup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uoecvk.*) AS annotation
  from master_join master_join_pvowie
  join notes.note_view notes_note_view_uoecvk on master_join_pvowie.target_id = notes_note_view_uoecvk.id
  where master_join_pvowie.source_id = navaids_points.terminalsegmentpoint.id
) as lat_annotation on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    lat_verticalextent.lat_verticalextent as verticalextent,
    lat_point.lat_point as point,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_pekcdt.id) as lat_verticalextent
  from master_join master_join_zutyfv
  join shared.airspacelayer_pt shared_airspacelayer_pt_pekcdt on master_join_zutyfv.target_id = shared_airspacelayer_pt_pekcdt.id
  where master_join_zutyfv.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_verticalextent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_pt_susvvy.id) as lat_point
  from master_join master_join_ctaxos
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_pt_susvvy on master_join_ctaxos.target_id = aerial_refuelling_aerialrefuellingpoint_pt_susvvy.id
  where master_join_ctaxos.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_point on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_waxzqb.*) AS annotation
  from master_join master_join_ncntpm
  join notes.note_view notes_note_view_waxzqb on master_join_ncntpm.target_id = notes_note_view_waxzqb.id
  where master_join_ncntpm.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as lat_annotation on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    airspace_airspacevolumedependency_pt_damgih.id AS contributorairspace,
    lat_annotation.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_damgih on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_damgih.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zvevtl.*) AS annotation
  from master_join master_join_pfrpjr
  join notes.note_view notes_note_view_zvevtl on master_join_pfrpjr.target_id = notes_note_view_zvevtl.id
  where master_join_pfrpjr.source_id = airspace.airspacevolume.id
) as lat_annotation on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    shared_circlesector_pt_hupgkt.id AS sectordefinition,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_sectorcriteria.lat_sectorcriteria as sectorcriteria,
    lat_annotation.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_hupgkt on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_hupgkt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_yxtdyd.id) as lat_significantobstacle
  from master_join master_join_ymgway
  join shared.obstruction_pt shared_obstruction_pt_yxtdyd on master_join_ymgway.target_id = shared_obstruction_pt_yxtdyd.id
  where master_join_ymgway.source_id = procedure.navigationareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_pt_speyuf.id) as lat_sectorcriteria
  from master_join master_join_fourrc
  join procedure.sectordesign_pt procedure_sectordesign_pt_speyuf on master_join_fourrc.target_id = procedure_sectordesign_pt_speyuf.id
  where master_join_fourrc.source_id = procedure.navigationareasector.id
) as lat_sectorcriteria on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ngflxj.*) AS annotation
  from master_join master_join_fpnnjl
  join notes.note_view notes_note_view_ngflxj on master_join_fpnnjl.target_id = notes_note_view_ngflxj.id
  where master_join_fpnnjl.source_id = procedure.navigationareasector.id
) as lat_annotation on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_jtehiz.id) as lat_aircraftcategory
  from master_join master_join_utfkex
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_jtehiz on master_join_utfkex.target_id = shared_aircraftcharacteristic_pt_jtehiz.id
  where master_join_utfkex.source_id = shared.obstacleassessmentarea.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_fqemom.id) as lat_significantobstacle
  from master_join master_join_wcoqvo
  join shared.obstruction_pt shared_obstruction_pt_fqemom on master_join_wcoqvo.target_id = shared_obstruction_pt_fqemom.id
  where master_join_wcoqvo.source_id = shared.obstacleassessmentarea.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_goldpp.*) AS annotation
  from master_join master_join_cdtxay
  join notes.note_view notes_note_view_goldpp on master_join_cdtxay.target_id = notes_note_view_goldpp.id
  where master_join_cdtxay.source_id = shared.obstacleassessmentarea.id
) as lat_annotation on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_soqijz.title as varchar), '(' || navaids_points_designatedpoint_pt_soqijz.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_soqijz.href AS point_href,
    lat_facilityangle.lat_facilityangle as facilityangle,
    lat_facilitydistance.lat_facilitydistance as facilitydistance,
    lat_annotation.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_soqijz on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_soqijz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_pt_kcjdjr.id) as lat_facilityangle
  from master_join master_join_ierhsr
  join navaids_points.angleuse_pt navaids_points_angleuse_pt_kcjdjr on master_join_ierhsr.target_id = navaids_points_angleuse_pt_kcjdjr.id
  where master_join_ierhsr.source_id = navaids_points.pointreference.id
) as lat_facilityangle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_pt_wnfpes.id,
      'title', coalesce(cast(navaids_points_distanceindication_pt_wnfpes.title AS varchar), '(' || navaids_points_distanceindication_pt_wnfpes.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_pt_wnfpes.href
  )) as lat_facilitydistance  from master_join master_join_tysktw
  join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_wnfpes on master_join_tysktw.target_id = navaids_points_distanceindication_pt_wnfpes.id
  where master_join_tysktw.source_id = navaids_points.pointreference.id
) as lat_facilitydistance on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yaivxc.*) AS annotation
  from master_join master_join_uxrdaj
  join notes.note_view notes_note_view_yaivxc on master_join_uxrdaj.target_id = notes_note_view_yaivxc.id
  where master_join_uxrdaj.source_id = navaids_points.pointreference.id
) as lat_annotation on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    shared_circlesector_pt_wezqaj.id AS sectordefinition,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join shared.circlesector_pt shared_circlesector_pt_wezqaj on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_wezqaj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_ctknrp.id) as lat_significantobstacle
  from master_join master_join_mshhml
  join shared.obstruction_pt shared_obstruction_pt_ctknrp on master_join_mshhml.target_id = shared_obstruction_pt_ctknrp.id
  where master_join_mshhml.source_id = procedure.safealtitudeareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lliqqb.*) AS annotation
  from master_join master_join_vexajg
  join notes.note_view notes_note_view_lliqqb on master_join_vexajg.target_id = notes_note_view_lliqqb.id
  where master_join_vexajg.source_id = procedure.safealtitudeareasector.id
) as lat_annotation on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    shared_circlesector_pt_gdelnz.id AS sectordefinition,
    lat_significantobstacle.lat_significantobstacle as significantobstacle,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_gdelnz on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_gdelnz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_pt_ueeocz.id) as lat_significantobstacle
  from master_join master_join_ztyoat
  join shared.obstruction_pt shared_obstruction_pt_ueeocz on master_join_ztyoat.target_id = shared_obstruction_pt_ueeocz.id
  where master_join_ztyoat.source_id = procedure.terminalarrivalareasector.id
) as lat_significantobstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wuoxwk.*) AS annotation
  from master_join master_join_shrscc
  join notes.note_view notes_note_view_wuoxwk on master_join_shrscc.target_id = notes_note_view_wuoxwk.id
  where master_join_shrscc.source_id = procedure.terminalarrivalareasector.id
) as lat_annotation on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_yzlqco.*) AS timeinterval
  from master_join master_join_ypndan
  join shared.timesheet_view shared_timesheet_view_yzlqco on master_join_ypndan.target_id = shared_timesheet_view_yzlqco.id
  where master_join_ypndan.source_id = airport_heliport.airportheliportavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kkklvq.*) AS annotation
  from master_join master_join_stqvnd
  join notes.note_view notes_note_view_kkklvq on master_join_stqvnd.target_id = notes_note_view_kkklvq.id
  where master_join_stqvnd.source_id = airport_heliport.airportheliportavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_qgigna.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_qgigna.title AS varchar), '(' || organisation_organisationauthority_pt_qgigna.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_qgigna.href
  )) as lat_specialdateauthority  from master_join master_join_iflzwf
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_qgigna on master_join_iflzwf.target_id = organisation_organisationauthority_pt_qgigna.id
  where master_join_iflzwf.source_id = airport_heliport.airportheliportavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_pt_lwzstg.id) as lat_usage
  from master_join master_join_pkjamv
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_pt_lwzstg on master_join_pkjamv.target_id = airport_heliport_airportheliportusage_pt_lwzstg.id
  where master_join_pkjamv.source_id = airport_heliport.airportheliportavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_mtkkhj.title as varchar), '(' || organisation_organisationauthority_pt_mtkkhj.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_mtkkhj.href AS theorganisationauthority_href,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mtkkhj on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_mtkkhj.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_sdajiv.*) AS timeinterval
  from master_join master_join_eetxeg
  join shared.timesheet_view shared_timesheet_view_sdajiv on master_join_eetxeg.target_id = shared_timesheet_view_sdajiv.id
  where master_join_eetxeg.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yjpkov.*) AS annotation
  from master_join master_join_zbqnqn
  join notes.note_view notes_note_view_yjpkov on master_join_zbqnqn.target_id = notes_note_view_yjpkov.id
  where master_join_zbqnqn.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_grxjiu.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_grxjiu.title AS varchar), '(' || organisation_organisationauthority_pt_grxjiu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_grxjiu.href
  )) as lat_specialdateauthority  from master_join master_join_rocldx
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_grxjiu on master_join_rocldx.target_id = organisation_organisationauthority_pt_grxjiu.id
  where master_join_rocldx.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_user.lat_user as user,
    lat_levels.lat_levels as levels,
    lat_aircraft.lat_aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xbotrj.*) AS timeinterval
  from master_join master_join_qypgsx
  join shared.timesheet_view shared_timesheet_view_xbotrj on master_join_qypgsx.target_id = shared_timesheet_view_xbotrj.id
  where master_join_qypgsx.source_id = airspace.airspaceactivation.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xuclqc.*) AS annotation
  from master_join master_join_urumgg
  join notes.note_view notes_note_view_xuclqc on master_join_urumgg.target_id = notes_note_view_xuclqc.id
  where master_join_urumgg.source_id = airspace.airspaceactivation.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vnehgz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vnehgz.title AS varchar), '(' || organisation_organisationauthority_pt_vnehgz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vnehgz.href
  )) as lat_specialdateauthority  from master_join master_join_oesjrh
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vnehgz on master_join_oesjrh.target_id = organisation_organisationauthority_pt_vnehgz.id
  where master_join_oesjrh.source_id = airspace.airspaceactivation.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_vgxikn.id) as lat_levels
  from master_join master_join_frskaw
  join shared.airspacelayer_pt shared_airspacelayer_pt_vgxikn on master_join_frskaw.target_id = shared_airspacelayer_pt_vgxikn.id
  where master_join_frskaw.source_id = airspace.airspaceactivation.id
) as lat_levels on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_cnlkam.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_cnlkam.title AS varchar), '(' || organisation_organisationauthority_pt_cnlkam.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_cnlkam.href
  )) as lat_user  from master_join master_join_rclioz
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_cnlkam on master_join_rclioz.target_id = organisation_organisationauthority_pt_cnlkam.id
  where master_join_rclioz.source_id = airspace.airspaceactivation.id
) as lat_user on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_mmcvip.id) as lat_aircraft
  from master_join master_join_urzlvv
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_mmcvip on master_join_urzlvv.target_id = shared_aircraftcharacteristic_pt_mmcvip.id
  where master_join_urzlvv.source_id = airspace.airspaceactivation.id
) as lat_aircraft on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_associatedlevels.lat_associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_dobbmh.*) AS timeinterval
  from master_join master_join_xdjdlo
  join shared.timesheet_view shared_timesheet_view_dobbmh on master_join_xdjdlo.target_id = shared_timesheet_view_dobbmh.id
  where master_join_xdjdlo.source_id = airspace.airspacelayerclass.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dhlecs.*) AS annotation
  from master_join master_join_dpdllv
  join notes.note_view notes_note_view_dhlecs on master_join_dpdllv.target_id = notes_note_view_dhlecs.id
  where master_join_dpdllv.source_id = airspace.airspacelayerclass.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_yjgpss.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_yjgpss.title AS varchar), '(' || organisation_organisationauthority_pt_yjgpss.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_yjgpss.href
  )) as lat_specialdateauthority  from master_join master_join_nwcavr
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_yjgpss on master_join_nwcavr.target_id = organisation_organisationauthority_pt_yjgpss.id
  where master_join_nwcavr.source_id = airspace.airspacelayerclass.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_nyxhye.id) as lat_associatedlevels
  from master_join master_join_ngasff
  join shared.airspacelayer_pt shared_airspacelayer_pt_nyxhye on master_join_ngasff.target_id = shared_airspacelayer_pt_nyxhye.id
  where master_join_ngasff.source_id = airspace.airspacelayerclass.id
) as lat_associatedlevels on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xetrca.*) AS timeinterval
  from master_join master_join_sdnbqa
  join shared.timesheet_view shared_timesheet_view_xetrca on master_join_sdnbqa.target_id = shared_timesheet_view_xetrca.id
  where master_join_sdnbqa.source_id = airport_heliport.altimetersourcestatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sgidew.*) AS annotation
  from master_join master_join_oebian
  join notes.note_view notes_note_view_sgidew on master_join_oebian.target_id = notes_note_view_sgidew.id
  where master_join_oebian.source_id = airport_heliport.altimetersourcestatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_eoofgg.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_eoofgg.title AS varchar), '(' || organisation_organisationauthority_pt_eoofgg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_eoofgg.href
  )) as lat_specialdateauthority  from master_join master_join_lnhgfq
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_eoofgg on master_join_lnhgfq.target_id = organisation_organisationauthority_pt_eoofgg.id
  where master_join_lnhgfq.source_id = airport_heliport.altimetersourcestatus.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_kncrcm.*) AS timeinterval
  from master_join master_join_xkllko
  join shared.timesheet_view shared_timesheet_view_kncrcm on master_join_xkllko.target_id = shared_timesheet_view_kncrcm.id
  where master_join_xkllko.source_id = airport_heliport.apronareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xkyrfi.*) AS annotation
  from master_join master_join_lvfpwd
  join notes.note_view notes_note_view_xkyrfi on master_join_lvfpwd.target_id = notes_note_view_xkyrfi.id
  where master_join_lvfpwd.source_id = airport_heliport.apronareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_dvqxay.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_dvqxay.title AS varchar), '(' || organisation_organisationauthority_pt_dvqxay.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_dvqxay.href
  )) as lat_specialdateauthority  from master_join master_join_qugnty
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_dvqxay on master_join_qugnty.target_id = organisation_organisationauthority_pt_dvqxay.id
  where master_join_qugnty.source_id = airport_heliport.apronareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_pt_ebbqpu.id) as lat_usage
  from master_join master_join_skzpsm
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_pt_ebbqpu on master_join_skzpsm.target_id = airport_heliport_apronareausage_pt_ebbqpu.id
  where master_join_skzpsm.source_id = airport_heliport.apronareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    shared_circlesector_pt_dhaprw.id AS sectordescription,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_dhaprw on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_dhaprw.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_nenlmb.*) AS timeinterval
  from master_join master_join_jqqihk
  join shared.timesheet_view shared_timesheet_view_nenlmb on master_join_jqqihk.target_id = shared_timesheet_view_nenlmb.id
  where master_join_jqqihk.source_id = procedure.circlingrestriction.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ewwlot.*) AS annotation
  from master_join master_join_retqet
  join notes.note_view notes_note_view_ewwlot on master_join_retqet.target_id = notes_note_view_ewwlot.id
  where master_join_retqet.source_id = procedure.circlingrestriction.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_sgztuv.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_sgztuv.title AS varchar), '(' || organisation_organisationauthority_pt_sgztuv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_sgztuv.href
  )) as lat_specialdateauthority  from master_join master_join_fdwqnh
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_sgztuv on master_join_fdwqnh.target_id = organisation_organisationauthority_pt_sgztuv.id
  where master_join_fdwqnh.source_id = procedure.circlingrestriction.id
) as lat_specialdateauthority on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_weather.lat_weather as weather,
    lat_aircraft.lat_aircraft as aircraft,
    lat_flight.lat_flight as flight,
    lat_subcondition.lat_subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_frhhax.*) AS timeinterval
  from master_join master_join_bdztlj
  join shared.timesheet_view shared_timesheet_view_frhhax on master_join_bdztlj.target_id = shared_timesheet_view_frhhax.id
  where master_join_bdztlj.source_id = airport_heliport.conditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wluzqd.*) AS annotation
  from master_join master_join_gsyngb
  join notes.note_view notes_note_view_wluzqd on master_join_gsyngb.target_id = notes_note_view_wluzqd.id
  where master_join_gsyngb.source_id = airport_heliport.conditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_qfrcde.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_qfrcde.title AS varchar), '(' || organisation_organisationauthority_pt_qfrcde.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_qfrcde.href
  )) as lat_specialdateauthority  from master_join master_join_nkmxdw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_qfrcde on master_join_nkmxdw.target_id = organisation_organisationauthority_pt_qfrcde.id
  where master_join_nkmxdw.source_id = airport_heliport.conditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_pt_jtknww.id) as lat_weather
  from master_join master_join_prgnmb
  join shared.meteorology_pt shared_meteorology_pt_jtknww on master_join_prgnmb.target_id = shared_meteorology_pt_jtknww.id
  where master_join_prgnmb.source_id = airport_heliport.conditioncombination.id
) as lat_weather on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_pt_jtfvlv.id) as lat_aircraft
  from master_join master_join_inlyql
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_jtfvlv on master_join_inlyql.target_id = shared_aircraftcharacteristic_pt_jtfvlv.id
  where master_join_inlyql.source_id = airport_heliport.conditioncombination.id
) as lat_aircraft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_pt_bbndfi.id) as lat_flight
  from master_join master_join_dzhiso
  join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_bbndfi on master_join_dzhiso.target_id = shared_flightcharacteristic_pt_bbndfi.id
  where master_join_dzhiso.source_id = airport_heliport.conditioncombination.id
) as lat_flight on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_pt_wlhlir.id) as lat_subcondition
  from master_join master_join_tjfbyz
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_wlhlir on master_join_tjfbyz.target_id = airport_heliport_conditioncombination_pt_wlhlir.id
  where master_join_tjfbyz.source_id = airport_heliport.conditioncombination.id
) as lat_subcondition on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_element.lat_element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_vonppr.*) AS timeinterval
  from master_join master_join_jasfiy
  join shared.timesheet_view shared_timesheet_view_vonppr on master_join_jasfiy.target_id = shared_timesheet_view_vonppr.id
  where master_join_jasfiy.source_id = routes.flightconditioncombination.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_vbbiqu.*) AS annotation
  from master_join master_join_eczkfe
  join notes.note_view notes_note_view_vbbiqu on master_join_eczkfe.target_id = notes_note_view_vbbiqu.id
  where master_join_eczkfe.source_id = routes.flightconditioncombination.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ugnbti.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ugnbti.title AS varchar), '(' || organisation_organisationauthority_pt_ugnbti.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ugnbti.href
  )) as lat_specialdateauthority  from master_join master_join_wqcnfd
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ugnbti on master_join_wqcnfd.target_id = organisation_organisationauthority_pt_ugnbti.id
  where master_join_wqcnfd.source_id = routes.flightconditioncombination.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_pt_vaitlz.id) as lat_element
  from master_join master_join_apiwpa
  join routes.flightconditionelement_pt routes_flightconditionelement_pt_vaitlz on master_join_apiwpa.target_id = routes_flightconditionelement_pt_vaitlz.id
  where master_join_apiwpa.source_id = routes.flightconditioncombination.id
) as lat_element on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_uresii.*) AS timeinterval
  from master_join master_join_yupnwx
  join shared.timesheet_view shared_timesheet_view_uresii on master_join_yupnwx.target_id = shared_timesheet_view_uresii.id
  where master_join_yupnwx.source_id = airport_heliport.groundlightingavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pboplc.*) AS annotation
  from master_join master_join_gqyclj
  join notes.note_view notes_note_view_pboplc on master_join_gqyclj.target_id = notes_note_view_pboplc.id
  where master_join_gqyclj.source_id = airport_heliport.groundlightingavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_cbebve.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_cbebve.title AS varchar), '(' || organisation_organisationauthority_pt_cbebve.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_cbebve.href
  )) as lat_specialdateauthority  from master_join master_join_pdxfnj
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_cbebve on master_join_pdxfnj.target_id = organisation_organisationauthority_pt_cbebve.id
  where master_join_pdxfnj.source_id = airport_heliport.groundlightingavailability.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_qoqkoh.*) AS timeinterval
  from master_join master_join_ctqqpr
  join shared.timesheet_view shared_timesheet_view_qoqkoh on master_join_ctqqpr.target_id = shared_timesheet_view_qoqkoh.id
  where master_join_ctqqpr.source_id = shared.lightelementstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ibnpyb.*) AS annotation
  from master_join master_join_enwjiu
  join notes.note_view notes_note_view_ibnpyb on master_join_enwjiu.target_id = notes_note_view_ibnpyb.id
  where master_join_enwjiu.source_id = shared.lightelementstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_cfwjfc.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_cfwjfc.title AS varchar), '(' || organisation_organisationauthority_pt_cfwjfc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_cfwjfc.href
  )) as lat_specialdateauthority  from master_join master_join_ystawe
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_cfwjfc on master_join_ystawe.target_id = organisation_organisationauthority_pt_cfwjfc.id
  where master_join_ystawe.source_id = shared.lightelementstatus.id
) as lat_specialdateauthority on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_usage.lat_usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_qhnqbm.*) AS timeinterval
  from master_join master_join_amklfw
  join shared.timesheet_view shared_timesheet_view_qhnqbm on master_join_amklfw.target_id = shared_timesheet_view_qhnqbm.id
  where master_join_amklfw.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bjvdwc.*) AS annotation
  from master_join master_join_danfok
  join notes.note_view notes_note_view_bjvdwc on master_join_danfok.target_id = notes_note_view_bjvdwc.id
  where master_join_danfok.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_uwtttz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_uwtttz.title AS varchar), '(' || organisation_organisationauthority_pt_uwtttz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_uwtttz.href
  )) as lat_specialdateauthority  from master_join master_join_jlknbz
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_uwtttz on master_join_jlknbz.target_id = organisation_organisationauthority_pt_uwtttz.id
  where master_join_jlknbz.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_pt_lkntsy.id) as lat_usage
  from master_join master_join_ymfgsh
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_pt_lkntsy on master_join_ymfgsh.target_id = airport_heliport_manoeuvringareausage_pt_lkntsy.id
  where master_join_ymfgsh.source_id = airport_heliport.manoeuvringareaavailability.id
) as lat_usage on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_kjfbav.*) AS timeinterval
  from master_join master_join_cizvit
  join shared.timesheet_view shared_timesheet_view_kjfbav on master_join_cizvit.target_id = shared_timesheet_view_kjfbav.id
  where master_join_cizvit.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yhfayq.*) AS annotation
  from master_join master_join_fjlzhn
  join notes.note_view notes_note_view_yhfayq on master_join_fjlzhn.target_id = notes_note_view_yhfayq.id
  where master_join_fjlzhn.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_mygaux.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_mygaux.title AS varchar), '(' || organisation_organisationauthority_pt_mygaux.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_mygaux.href
  )) as lat_specialdateauthority  from master_join master_join_mufbzn
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_mygaux on master_join_mufbzn.target_id = organisation_organisationauthority_pt_mygaux.id
  where master_join_mufbzn.source_id = navaids_points.navaidequipmentmonitoring.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_bggtzn.*) AS timeinterval
  from master_join master_join_vmszrg
  join shared.timesheet_view shared_timesheet_view_bggtzn on master_join_vmszrg.target_id = shared_timesheet_view_bggtzn.id
  where master_join_vmszrg.source_id = navaids_points.navaidoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pybcsu.*) AS annotation
  from master_join master_join_vjvckk
  join notes.note_view notes_note_view_pybcsu on master_join_vjvckk.target_id = notes_note_view_pybcsu.id
  where master_join_vjvckk.source_id = navaids_points.navaidoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_xjgiin.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_xjgiin.title AS varchar), '(' || organisation_organisationauthority_pt_xjgiin.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_xjgiin.href
  )) as lat_specialdateauthority  from master_join master_join_gahdig
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_xjgiin on master_join_gahdig.target_id = organisation_organisationauthority_pt_xjgiin.id
  where master_join_gahdig.source_id = navaids_points.navaidoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_vntksu.*) AS timeinterval
  from master_join master_join_okzlfz
  join shared.timesheet_view shared_timesheet_view_vntksu on master_join_okzlfz.target_id = shared_timesheet_view_vntksu.id
  where master_join_okzlfz.source_id = shared.onlinecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kgpljx.*) AS annotation
  from master_join master_join_gwqcxb
  join notes.note_view notes_note_view_kgpljx on master_join_gwqcxb.target_id = notes_note_view_kgpljx.id
  where master_join_gwqcxb.source_id = shared.onlinecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ypvdte.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ypvdte.title AS varchar), '(' || organisation_organisationauthority_pt_ypvdte.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ypvdte.href
  )) as lat_specialdateauthority  from master_join master_join_yytsad
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ypvdte on master_join_yytsad.target_id = organisation_organisationauthority_pt_ypvdte.id
  where master_join_yytsad.source_id = shared.onlinecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xlbilh.*) AS timeinterval
  from master_join master_join_qfwxby
  join shared.timesheet_view shared_timesheet_view_xlbilh on master_join_qfwxby.target_id = shared_timesheet_view_xlbilh.id
  where master_join_qfwxby.source_id = shared.postaladdress.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yaufze.*) AS annotation
  from master_join master_join_bnpmhv
  join notes.note_view notes_note_view_yaufze on master_join_bnpmhv.target_id = notes_note_view_yaufze.id
  where master_join_bnpmhv.source_id = shared.postaladdress.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_kizcza.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_kizcza.title AS varchar), '(' || organisation_organisationauthority_pt_kizcza.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_kizcza.href
  )) as lat_specialdateauthority  from master_join master_join_abcgck
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_kizcza on master_join_abcgck.target_id = organisation_organisationauthority_pt_kizcza.id
  where master_join_abcgck.source_id = shared.postaladdress.id
) as lat_specialdateauthority on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_plzotp.*) AS timeinterval
  from master_join master_join_lwlrwo
  join shared.timesheet_view shared_timesheet_view_plzotp on master_join_lwlrwo.target_id = shared_timesheet_view_plzotp.id
  where master_join_lwlrwo.source_id = procedure.procedureavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hwkehu.*) AS annotation
  from master_join master_join_zzkzuz
  join notes.note_view notes_note_view_hwkehu on master_join_zzkzuz.target_id = notes_note_view_hwkehu.id
  where master_join_zzkzuz.source_id = procedure.procedureavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nbskbn.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nbskbn.title AS varchar), '(' || organisation_organisationauthority_pt_nbskbn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nbskbn.href
  )) as lat_specialdateauthority  from master_join master_join_ickrsg
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nbskbn on master_join_ickrsg.target_id = organisation_organisationauthority_pt_nbskbn.id
  where master_join_ickrsg.source_id = procedure.procedureavailability.id
) as lat_specialdateauthority on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rryvmi.*) AS timeinterval
  from master_join master_join_hfindm
  join shared.timesheet_view shared_timesheet_view_rryvmi on master_join_hfindm.target_id = shared_timesheet_view_rryvmi.id
  where master_join_hfindm.source_id = service.radiocommunicationoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rnckcf.*) AS annotation
  from master_join master_join_qoeuim
  join notes.note_view notes_note_view_rnckcf on master_join_qoeuim.target_id = notes_note_view_rnckcf.id
  where master_join_qoeuim.source_id = service.radiocommunicationoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nqvqix.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nqvqix.title AS varchar), '(' || organisation_organisationauthority_pt_nqvqix.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nqvqix.href
  )) as lat_specialdateauthority  from master_join master_join_jzgpnc
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nqvqix on master_join_jzgpnc.target_id = organisation_organisationauthority_pt_nqvqix.id
  where master_join_jzgpnc.source_id = service.radiocommunicationoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_levels.lat_levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_olxqnp.*) AS timeinterval
  from master_join master_join_hdwmon
  join shared.timesheet_view shared_timesheet_view_olxqnp on master_join_hdwmon.target_id = shared_timesheet_view_olxqnp.id
  where master_join_hdwmon.source_id = routes.routeavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zflxwx.*) AS annotation
  from master_join master_join_phgumx
  join notes.note_view notes_note_view_zflxwx on master_join_phgumx.target_id = notes_note_view_zflxwx.id
  where master_join_phgumx.source_id = routes.routeavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vfxmms.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vfxmms.title AS varchar), '(' || organisation_organisationauthority_pt_vfxmms.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vfxmms.href
  )) as lat_specialdateauthority  from master_join master_join_lubcju
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vfxmms on master_join_lubcju.target_id = organisation_organisationauthority_pt_vfxmms.id
  where master_join_lubcju.source_id = routes.routeavailability.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_pt_knlutn.id) as lat_levels
  from master_join master_join_oiynbi
  join shared.airspacelayer_pt shared_airspacelayer_pt_knlutn on master_join_oiynbi.target_id = shared_airspacelayer_pt_knlutn.id
  where master_join_oiynbi.source_id = routes.routeavailability.id
) as lat_levels on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rvpmuo.*) AS timeinterval
  from master_join master_join_nqqzqj
  join shared.timesheet_view shared_timesheet_view_rvpmuo on master_join_nqqzqj.target_id = shared_timesheet_view_rvpmuo.id
  where master_join_nqqzqj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dhvuzq.*) AS annotation
  from master_join master_join_esgdmg
  join notes.note_view notes_note_view_dhvuzq on master_join_esgdmg.target_id = notes_note_view_dhvuzq.id
  where master_join_esgdmg.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_nuaqno.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_nuaqno.title AS varchar), '(' || organisation_organisationauthority_pt_nuaqno.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_nuaqno.href
  )) as lat_specialdateauthority  from master_join master_join_pcavau
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_nuaqno on master_join_pcavau.target_id = organisation_organisationauthority_pt_nuaqno.id
  where master_join_pcavau.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_klsdtv.*) AS timeinterval
  from master_join master_join_qkwzcf
  join shared.timesheet_view shared_timesheet_view_klsdtv on master_join_qkwzcf.target_id = shared_timesheet_view_klsdtv.id
  where master_join_qkwzcf.source_id = service.serviceoperationalstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kvzgaz.*) AS annotation
  from master_join master_join_eruuup
  join notes.note_view notes_note_view_kvzgaz on master_join_eruuup.target_id = notes_note_view_kvzgaz.id
  where master_join_eruuup.source_id = service.serviceoperationalstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_soeirj.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_soeirj.title AS varchar), '(' || organisation_organisationauthority_pt_soeirj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_soeirj.href
  )) as lat_specialdateauthority  from master_join master_join_tygayw
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_soeirj on master_join_tygayw.target_id = organisation_organisationauthority_pt_soeirj.id
  where master_join_tygayw.source_id = service.serviceoperationalstatus.id
) as lat_specialdateauthority on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_acnpky.*) AS timeinterval
  from master_join master_join_xojlil
  join shared.timesheet_view shared_timesheet_view_acnpky on master_join_xojlil.target_id = shared_timesheet_view_acnpky.id
  where master_join_xojlil.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_atqxep.*) AS annotation
  from master_join master_join_jlcpcn
  join notes.note_view notes_note_view_atqxep on master_join_jlcpcn.target_id = notes_note_view_atqxep.id
  where master_join_jlcpcn.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_sfgaoh.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_sfgaoh.title AS varchar), '(' || organisation_organisationauthority_pt_sfgaoh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_sfgaoh.href
  )) as lat_specialdateauthority  from master_join master_join_ewhtid
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_sfgaoh on master_join_ewhtid.target_id = organisation_organisationauthority_pt_sfgaoh.id
  where master_join_ewhtid.source_id = navaids_points.specialnavigationstationstatus.id
) as lat_specialdateauthority on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ftafra.*) AS timeinterval
  from master_join master_join_seucsx
  join shared.timesheet_view shared_timesheet_view_ftafra on master_join_seucsx.target_id = shared_timesheet_view_ftafra.id
  where master_join_seucsx.source_id = shared.telephonecontact.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kduysy.*) AS annotation
  from master_join master_join_mshzhs
  join notes.note_view notes_note_view_kduysy on master_join_mshzhs.target_id = notes_note_view_kduysy.id
  where master_join_mshzhs.source_id = shared.telephonecontact.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_vhczfw.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_vhczfw.title AS varchar), '(' || organisation_organisationauthority_pt_vhczfw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_vhczfw.href
  )) as lat_specialdateauthority  from master_join master_join_pxutvd
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_vhczfw on master_join_pxutvd.target_id = organisation_organisationauthority_pt_vhczfw.id
  where master_join_pxutvd.source_id = shared.telephonecontact.id
) as lat_specialdateauthority on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_xisylf.*) AS timeinterval
  from master_join master_join_icormo
  join shared.timesheet_view shared_timesheet_view_xisylf on master_join_icormo.target_id = shared_timesheet_view_xisylf.id
  where master_join_icormo.source_id = organisation.unitavailability.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_czxqpe.*) AS annotation
  from master_join master_join_drkiri
  join notes.note_view notes_note_view_czxqpe on master_join_drkiri.target_id = notes_note_view_czxqpe.id
  where master_join_drkiri.source_id = organisation.unitavailability.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_zppshz.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_zppshz.title AS varchar), '(' || organisation_organisationauthority_pt_zppshz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_zppshz.href
  )) as lat_specialdateauthority  from master_join master_join_doxeyi
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_zppshz on master_join_doxeyi.target_id = organisation_organisationauthority_pt_zppshz.id
  where master_join_doxeyi.source_id = organisation.unitavailability.id
) as lat_specialdateauthority on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_sdfbjp.*) AS timeinterval
  from master_join master_join_oqkyqi
  join shared.timesheet_view shared_timesheet_view_sdfbjp on master_join_oqkyqi.target_id = shared_timesheet_view_sdfbjp.id
  where master_join_oqkyqi.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ilqqxa.*) AS annotation
  from master_join master_join_paovqj
  join notes.note_view notes_note_view_ilqqxa on master_join_paovqj.target_id = notes_note_view_ilqqxa.id
  where master_join_paovqj.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_fdewaq.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_fdewaq.title AS varchar), '(' || organisation_organisationauthority_pt_fdewaq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_fdewaq.href
  )) as lat_specialdateauthority  from master_join master_join_pyoxor
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_fdewaq on master_join_pyoxor.target_id = organisation_organisationauthority_pt_fdewaq.id
  where master_join_pyoxor.source_id = obstacles.verticalstructurelightingstatus.id
) as lat_specialdateauthority on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority,
    lat_lighting.lat_lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_ewfmzi.*) AS timeinterval
  from master_join master_join_kwijhi
  join shared.timesheet_view shared_timesheet_view_ewfmzi on master_join_kwijhi.target_id = shared_timesheet_view_ewfmzi.id
  where master_join_kwijhi.source_id = obstacles.verticalstructurepart.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tskxcx.*) AS annotation
  from master_join master_join_slrzfi
  join notes.note_view notes_note_view_tskxcx on master_join_slrzfi.target_id = notes_note_view_tskxcx.id
  where master_join_slrzfi.source_id = obstacles.verticalstructurepart.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_ngrdrd.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_ngrdrd.title AS varchar), '(' || organisation_organisationauthority_pt_ngrdrd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_ngrdrd.href
  )) as lat_specialdateauthority  from master_join master_join_mhccfg
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_ngrdrd on master_join_mhccfg.target_id = organisation_organisationauthority_pt_ngrdrd.id
  where master_join_mhccfg.source_id = obstacles.verticalstructurepart.id
) as lat_specialdateauthority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_pt_bnehka.id) as lat_lighting
  from master_join master_join_arbsww
  join shared.lightelement_pt shared_lightelement_pt_bnehka on master_join_arbsww.target_id = shared_lightelement_pt_bnehka.id
  where master_join_arbsww.source_id = obstacles.verticalstructurepart.id
) as lat_lighting on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    lat_timeinterval.timeinterval as timeinterval,
    lat_annotation.annotation as annotation,
    lat_specialdateauthority.lat_specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_view_rocsvj.*) AS timeinterval
  from master_join master_join_frozeu
  join shared.timesheet_view shared_timesheet_view_rocsvj on master_join_frozeu.target_id = shared_timesheet_view_rocsvj.id
  where master_join_frozeu.source_id = airport_heliport.workareaactivity.id
) as lat_timeinterval on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gtzedt.*) AS annotation
  from master_join master_join_flqdko
  join notes.note_view notes_note_view_gtzedt on master_join_flqdko.target_id = notes_note_view_gtzedt.id
  where master_join_flqdko.source_id = airport_heliport.workareaactivity.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_spzuhi.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_spzuhi.title AS varchar), '(' || organisation_organisationauthority_pt_spzuhi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_spzuhi.href
  )) as lat_specialdateauthority  from master_join master_join_vxjjib
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_spzuhi on master_join_vxjjib.target_id = organisation_organisationauthority_pt_spzuhi.id
  where master_join_vxjjib.source_id = airport_heliport.workareaactivity.id
) as lat_specialdateauthority on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.onlinecontact_view', 'notes.note_view', 'shared.postaladdress_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    airport_heliport_conditioncombination_pt_ealjjf.id AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_ealjjf on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_ealjjf.id
left join lateral(
  select
  from master_join master_join_ifpntd
  join shared.contactinformation_view shared_contactinformation_view_ltiuar on master_join_ifpntd.target_id = shared_contactinformation_view_ltiuar.id
  where master_join_ifpntd.source_id = airport_heliport.airportheliportusage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tqefew.*) AS annotation
  from master_join master_join_uuuxzb
  join notes.note_view notes_note_view_tqefew on master_join_uuuxzb.target_id = notes_note_view_tqefew.id
  where master_join_uuuxzb.source_id = airport_heliport.airportheliportusage.id
) as lat_annotation on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    airport_heliport_conditioncombination_pt_nkdmce.id AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_nkdmce on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_nkdmce.id
left join lateral(
  select
  from master_join master_join_hbissd
  join shared.contactinformation_view shared_contactinformation_view_vapcin on master_join_hbissd.target_id = shared_contactinformation_view_vapcin.id
  where master_join_hbissd.source_id = airport_heliport.apronareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ublzgx.*) AS annotation
  from master_join master_join_ndzaia
  join notes.note_view notes_note_view_ublzgx on master_join_ndzaia.target_id = notes_note_view_ublzgx.id
  where master_join_ndzaia.source_id = airport_heliport.apronareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    lat_routeelement.lat_routeelement as routeelement,
    lat_annotation.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_pt_qprijp.id) as lat_routeelement
  from master_join master_join_hjtcin
  join routes.flightroutingelement_pt routes_flightroutingelement_pt_qprijp on master_join_hjtcin.target_id = routes_flightroutingelement_pt_qprijp.id
  where master_join_hjtcin.source_id = routes.flightrestrictionroute.id
) as lat_routeelement on TRUE
left join lateral(
  select
  from master_join master_join_wxbafm
  join shared.contactinformation_view shared_contactinformation_view_ayjdaj on master_join_wxbafm.target_id = shared_contactinformation_view_ayjdaj.id
  where master_join_wxbafm.source_id = routes.flightrestrictionroute.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_egdmey.*) AS annotation
  from master_join master_join_ytgqag
  join notes.note_view notes_note_view_egdmey on master_join_ytgqag.target_id = notes_note_view_egdmey.id
  where master_join_ytgqag.source_id = routes.flightrestrictionroute.id
) as lat_annotation on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    airport_heliport_conditioncombination_pt_egrycf.id AS selection,
    lat_annotation.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_egrycf on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_egrycf.id
left join lateral(
  select
  from master_join master_join_bpwzhw
  join shared.contactinformation_view shared_contactinformation_view_zzdogr on master_join_bpwzhw.target_id = shared_contactinformation_view_zzdogr.id
  where master_join_bpwzhw.source_id = airport_heliport.manoeuvringareausage.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qhqksh.*) AS annotation
  from master_join master_join_qvccwo
  join notes.note_view notes_note_view_qhqksh on master_join_qvccwo.target_id = notes_note_view_qhqksh.id
  where master_join_qvccwo.source_id = airport_heliport.manoeuvringareausage.id
) as lat_annotation on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_vtqqri.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_vtqqri.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_vtqqri.href AS oppositetrack_href,
    lat_availability.lat_availability as availability,
    lat_protectingairspace.lat_protectingairspace as protectingairspace,
    lat_track.lat_track as track,
    lat_anchor.lat_anchor as anchor,
    lat_managingorganisation.lat_managingorganisation as managingorganisation,
    lat_annotation.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_vtqqri on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_vtqqri.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_uitbgj.id) as lat_availability
  from master_join master_join_ciszcl
  join routes.routeavailability_pt routes_routeavailability_view_uitbgj on master_join_ciszcl.target_id = routes_routeavailability_view_uitbgj.id
  where master_join_ciszcl.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_edxfev.id,
      'title', coalesce(cast(airspace_airspace_pt_edxfev.title AS varchar), '(' || airspace_airspace_pt_edxfev.nilreason[1] || ')'),
      'href', airspace_airspace_pt_edxfev.href
  )) as lat_protectingairspace  from master_join master_join_cfnpub
  join airspace.airspace_pt airspace_airspace_pt_edxfev on master_join_cfnpub.target_id = airspace_airspace_pt_edxfev.id
  where master_join_cfnpub.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_protectingairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_view_icvhyf.id) as lat_track
  from master_join master_join_axsnqk
  join aerial_refuelling.aerialrefuellingtrack_pt aerial_refuelling_aerialrefuellingtrack_view_icvhyf on master_join_axsnqk.target_id = aerial_refuelling_aerialrefuellingtrack_view_icvhyf.id
  where master_join_axsnqk.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_track on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_view_eewaaz.id) as lat_anchor
  from master_join master_join_ubbddb
  join aerial_refuelling.aerialrefuellinganchor_pt aerial_refuelling_aerialrefuellinganchor_view_eewaaz on master_join_ubbddb.target_id = aerial_refuelling_aerialrefuellinganchor_view_eewaaz.id
  where master_join_ubbddb.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_anchor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_view_icngbl.id) as lat_managingorganisation
  from master_join master_join_qpmycm
  join aerial_refuelling.authorityforaerialrefuelling_pt aerial_refuelling_authorityforaerialrefuelling_view_icngbl on master_join_qpmycm.target_id = aerial_refuelling_authorityforaerialrefuelling_view_icngbl.id
  where master_join_qpmycm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_managingorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fmmhqg.*) AS annotation
  from master_join master_join_jrxjbt
  join notes.note_view notes_note_view_fmmhqg on master_join_jrxjbt.target_id = notes_note_view_fmmhqg.id
  where master_join_jrxjbt.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as lat_annotation on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_vfrlah.title as varchar), '(' || obstacles_verticalstructure_pt_vfrlah.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_vfrlah.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_flagtv.title as varchar), '(' || airport_heliport_airportheliport_pt_flagtv.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_flagtv.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_ifklmi.geom AS location_geom,
    geometry_elevatedpoint_view_ifklmi.longitude AS location_longitude,
    geometry_elevatedpoint_view_ifklmi.latitude AS location_latitude,
    geometry_elevatedpoint_view_ifklmi.elevation AS location_elevation,
    geometry_elevatedpoint_view_ifklmi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ifklmi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ifklmi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ifklmi.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_vfrlah on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_vfrlah.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_flagtv on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_flagtv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ifklmi on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_ifklmi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yyjjog.*) AS annotation
  from master_join master_join_vfqcnc
  join notes.note_view notes_note_view_yyjjog on master_join_vfqcnc.target_id = notes_note_view_yyjjog.id
  where master_join_vfqcnc.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as lat_annotation on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_uoeudk.geom AS location_geom,
    geometry_elevatedpoint_view_uoeudk.longitude AS location_longitude,
    geometry_elevatedpoint_view_uoeudk.latitude AS location_latitude,
    geometry_elevatedpoint_view_uoeudk.elevation AS location_elevation,
    geometry_elevatedpoint_view_uoeudk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uoeudk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uoeudk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uoeudk.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wpcspa.title as varchar), '(' || organisation_unit_pt_wpcspa.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_wpcspa.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uoeudk on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_uoeudk.id
left join organisation.unit_pt organisation_unit_pt_wpcspa on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_wpcspa.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_vtptdf.id) as lat_callsign
  from master_join master_join_nhsnkd
  join service.callsigndetail_pt service_callsigndetail_view_vtptdf on master_join_nhsnkd.target_id = service_callsigndetail_view_vtptdf.id
  where master_join_nhsnkd.source_id = service.aircraftgroundservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_azhktx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_azhktx.title AS varchar), '(' || service_radiocommunicationchannel_pt_azhktx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_azhktx.href
  )) as lat_radiocommunication  from master_join master_join_snuqod
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_azhktx on master_join_snuqod.target_id = service_radiocommunicationchannel_pt_azhktx.id
  where master_join_snuqod.source_id = service.aircraftgroundservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_cidsqa
  join shared.contactinformation_view shared_contactinformation_view_eorlvy on master_join_cidsqa.target_id = shared_contactinformation_view_eorlvy.id
  where master_join_cidsqa.source_id = service.aircraftgroundservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_rmjcev.id) as lat_availability
  from master_join master_join_dikvsf
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_rmjcev on master_join_dikvsf.target_id = service_serviceoperationalstatus_view_rmjcev.id
  where master_join_dikvsf.source_id = service.aircraftgroundservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_krwkkj.*) AS annotation
  from master_join master_join_nkrgut
  join notes.note_view notes_note_view_krwkkj on master_join_nkrgut.target_id = notes_note_view_krwkkj.id
  where master_join_nkrgut.source_id = service.aircraftgroundservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_mnducj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_mnducj.title AS varchar), '(' || airport_heliport_airportheliport_pt_mnducj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_mnducj.href
  )) as lat_airportheliport  from master_join master_join_ppcovv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mnducj on master_join_ppcovv.target_id = airport_heliport_airportheliport_pt_mnducj.id
  where master_join_ppcovv.source_id = service.aircraftgroundservice_ts.id
) as lat_airportheliport on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.aircraftstandcontamination_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    airport_heliport_surfacecharacteristics_view_acqjcu.id AS surfaceproperties,
    geometry_elevatedpoint_view_vdshva.geom AS location_geom,
    geometry_elevatedpoint_view_vdshva.longitude AS location_longitude,
    geometry_elevatedpoint_view_vdshva.latitude AS location_latitude,
    geometry_elevatedpoint_view_vdshva.elevation AS location_elevation,
    geometry_elevatedpoint_view_vdshva.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vdshva.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vdshva.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vdshva.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_dndhah.title as varchar), '(' || airport_heliport_apronelement_pt_dndhah.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_dndhah.href AS apronlocation_href,
    geometry_elevatedsurface_view_dhrwka.geom AS extent_geom,
    geometry_elevatedsurface_view_dhrwka.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dhrwka.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dhrwka.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dhrwka.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dhrwka.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_acqjcu on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_acqjcu.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vdshva on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_vdshva.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_dndhah on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_dndhah.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dhrwka on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_dhrwka.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_view_cynldh.id) as lat_contaminant
  from master_join master_join_aqqreg
  join airport_heliport.aircraftstandcontamination_pt airport_heliport_aircraftstandcontamination_view_cynldh on master_join_aqqreg.target_id = airport_heliport_aircraftstandcontamination_view_cynldh.id
  where master_join_aqqreg.source_id = airport_heliport.aircraftstand_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wddmtu.*) AS annotation
  from master_join master_join_tjhhcv
  join notes.note_view notes_note_view_wddmtu on master_join_tjhhcv.target_id = notes_note_view_wddmtu.id
  where master_join_tjhhcv.source_id = airport_heliport.aircraftstand_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_blcqof.id) as lat_availability
  from master_join master_join_gmyeua
  join airport_heliport.apronareaavailability_pt airport_heliport_apronareaavailability_view_blcqof on master_join_gmyeua.target_id = airport_heliport_apronareaavailability_view_blcqof.id
  where master_join_gmyeua.source_id = airport_heliport.aircraftstand_ts.id
) as lat_availability on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_aizzfm.geom AS location_geom,
    geometry_elevatedpoint_view_aizzfm.longitude AS location_longitude,
    geometry_elevatedpoint_view_aizzfm.latitude AS location_latitude,
    geometry_elevatedpoint_view_aizzfm.elevation AS location_elevation,
    geometry_elevatedpoint_view_aizzfm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aizzfm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aizzfm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aizzfm.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_oqalwz.title as varchar), '(' || organisation_unit_pt_oqalwz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_oqalwz.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aizzfm on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_aizzfm.id
left join organisation.unit_pt organisation_unit_pt_oqalwz on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_oqalwz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_ynjgil.id) as lat_callsign
  from master_join master_join_ooujfs
  join service.callsigndetail_pt service_callsigndetail_view_ynjgil on master_join_ooujfs.target_id = service_callsigndetail_view_ynjgil.id
  where master_join_ooujfs.source_id = service.airportclearanceservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_jirbyx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_jirbyx.title AS varchar), '(' || service_radiocommunicationchannel_pt_jirbyx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_jirbyx.href
  )) as lat_radiocommunication  from master_join master_join_tlahqp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jirbyx on master_join_tlahqp.target_id = service_radiocommunicationchannel_pt_jirbyx.id
  where master_join_tlahqp.source_id = service.airportclearanceservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_oypyol
  join shared.contactinformation_view shared_contactinformation_view_narknh on master_join_oypyol.target_id = shared_contactinformation_view_narknh.id
  where master_join_oypyol.source_id = service.airportclearanceservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_hjhndn.id) as lat_availability
  from master_join master_join_lbrqfu
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_hjhndn on master_join_lbrqfu.target_id = service_serviceoperationalstatus_view_hjhndn.id
  where master_join_lbrqfu.source_id = service.airportclearanceservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gszvjm.*) AS annotation
  from master_join master_join_hgwhmm
  join notes.note_view notes_note_view_gszvjm on master_join_hgwhmm.target_id = notes_note_view_gszvjm.id
  where master_join_hgwhmm.source_id = service.airportclearanceservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_ywlmqy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_ywlmqy.title AS varchar), '(' || airport_heliport_airportheliport_pt_ywlmqy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_ywlmqy.href
  )) as lat_airportheliport  from master_join master_join_psedve
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ywlmqy on master_join_psedve.target_id = airport_heliport_airportheliport_pt_ywlmqy.id
  where master_join_psedve.source_id = service.airportclearanceservice_ts.id
) as lat_airportheliport on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_chxnlj.title as varchar), '(' || airport_heliport_airportheliport_pt_chxnlj.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_chxnlj.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pwklwd.title as varchar), '(' || airport_heliport_airportheliport_pt_pwklwd.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_pwklwd.href AS dependentairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_chxnlj on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_chxnlj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pwklwd on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_pwklwd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nxbgnw.*) AS annotation
  from master_join master_join_obgnza
  join notes.note_view notes_note_view_nxbgnw on master_join_obgnza.target_id = notes_note_view_nxbgnw.id
  where master_join_obgnza.source_id = airport_heliport.airportheliportcollocation_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['shared.contactinformation_view', 'airport_heliport.city_view', 'geometry.elevatedpoint_view', 'airport_heliport.airportheliportcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.airportheliportavailability_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    airport_heliport_airportheliportresponsibilityorganisation_view_zomsee.id AS responsibleorganisation,
    geometry_elevatedpoint_view_mwkxoz.geom AS arp_geom,
    geometry_elevatedpoint_view_mwkxoz.longitude AS arp_longitude,
    geometry_elevatedpoint_view_mwkxoz.latitude AS arp_latitude,
    geometry_elevatedpoint_view_mwkxoz.elevation AS arp_elevation,
    geometry_elevatedpoint_view_mwkxoz.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_mwkxoz.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_mwkxoz.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_mwkxoz.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_ockfgg.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_ockfgg.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_ockfgg.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_ockfgg.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_ockfgg.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_ockfgg.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    lat_contaminant.lat_contaminant as contaminant,
    lat_servedcity.lat_servedcity as servedcity,
    lat_altimetersource.lat_altimetersource as altimetersource,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_zomsee on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_zomsee.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mwkxoz on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_mwkxoz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ockfgg on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_ockfgg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_view_ljmapf.id) as lat_contaminant
  from master_join master_join_nadyhi
  join airport_heliport.airportheliportcontamination_pt airport_heliport_airportheliportcontamination_view_ljmapf on master_join_nadyhi.target_id = airport_heliport_airportheliportcontamination_view_ljmapf.id
  where master_join_nadyhi.source_id = airport_heliport.airportheliport_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_view_lmbfvx.id) as lat_servedcity
  from master_join master_join_ojgoxz
  join airport_heliport.city_pt airport_heliport_city_view_lmbfvx on master_join_ojgoxz.target_id = airport_heliport_city_view_lmbfvx.id
  where master_join_ojgoxz.source_id = airport_heliport.airportheliport_ts.id
) as lat_servedcity on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_pt_uxumld.id,
      'title', coalesce(cast(airport_heliport_altimetersource_pt_uxumld.title AS varchar), '(' || airport_heliport_altimetersource_pt_uxumld.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_pt_uxumld.href
  )) as lat_altimetersource  from master_join master_join_kyyahj
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_uxumld on master_join_kyyahj.target_id = airport_heliport_altimetersource_pt_uxumld.id
  where master_join_kyyahj.source_id = airport_heliport.airportheliport_ts.id
) as lat_altimetersource on TRUE
left join lateral(
  select
  from master_join master_join_kkejuv
  join shared.contactinformation_view shared_contactinformation_view_gsmzpt on master_join_kkejuv.target_id = shared_contactinformation_view_gsmzpt.id
  where master_join_kkejuv.source_id = airport_heliport.airportheliport_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_view_gfglaa.id) as lat_availability
  from master_join master_join_giijmm
  join airport_heliport.airportheliportavailability_pt airport_heliport_airportheliportavailability_view_gfglaa on master_join_giijmm.target_id = airport_heliport_airportheliportavailability_view_gfglaa.id
  where master_join_giijmm.source_id = airport_heliport.airportheliport_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tenbiw.*) AS annotation
  from master_join master_join_lfnxos
  join notes.note_view notes_note_view_tenbiw on master_join_lfnxos.target_id = notes_note_view_tenbiw.id
  where master_join_lfnxos.source_id = airport_heliport.airportheliport_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_vjvslg.geom AS area_geom,
    geometry_elevatedsurface_view_vjvslg.elevation AS area_elevation,
    geometry_elevatedsurface_view_vjvslg.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_vjvslg.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_vjvslg.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_vjvslg.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_xkyeut.title as varchar), '(' || airport_heliport_airportheliport_pt_xkyeut.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_xkyeut.href AS affectedairport_href,
    lat_annotation.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vjvslg on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_vjvslg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xkyeut on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_xkyeut.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kvlhcs.*) AS annotation
  from master_join master_join_isaxxz
  join notes.note_view notes_note_view_kvlhcs on master_join_isaxxz.target_id = notes_note_view_kvlhcs.id
  where master_join_isaxxz.source_id = airport_heliport.airporthotspot_ts.id
) as lat_annotation on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_nqcgal.id) as lat_element
  from master_join master_join_cvlsee
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_nqcgal on master_join_cvlsee.target_id = airport_heliport_markingelement_view_nqcgal.id
  where master_join_cvlsee.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zowsoe.*) AS annotation
  from master_join master_join_nqgxfj
  join notes.note_view notes_note_view_zowsoe on master_join_nqgxfj.target_id = notes_note_view_zowsoe.id
  where master_join_nqgxfj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.nitrogen_view', 'service.oil_view', 'service.serviceoperationalstatus_view', 'service.fuel_view', 'service.oxygen_view', 'notes.note_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_peczka.geom AS location_geom,
    geometry_elevatedpoint_view_peczka.longitude AS location_longitude,
    geometry_elevatedpoint_view_peczka.latitude AS location_latitude,
    geometry_elevatedpoint_view_peczka.elevation AS location_elevation,
    geometry_elevatedpoint_view_peczka.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_peczka.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_peczka.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_peczka.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kievra.title as varchar), '(' || organisation_unit_pt_kievra.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_kievra.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_fuelsupply.lat_fuelsupply as fuelsupply,
    lat_oilsupply.lat_oilsupply as oilsupply,
    lat_nitrogensupply.lat_nitrogensupply as nitrogensupply,
    lat_oxygensupply.lat_oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_peczka on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_peczka.id
left join organisation.unit_pt organisation_unit_pt_kievra on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_kievra.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_liiynn.id) as lat_callsign
  from master_join master_join_eppuop
  join service.callsigndetail_pt service_callsigndetail_view_liiynn on master_join_eppuop.target_id = service_callsigndetail_view_liiynn.id
  where master_join_eppuop.source_id = service.airportsuppliesservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_tpbiuh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_tpbiuh.title AS varchar), '(' || service_radiocommunicationchannel_pt_tpbiuh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_tpbiuh.href
  )) as lat_radiocommunication  from master_join master_join_buettc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_tpbiuh on master_join_buettc.target_id = service_radiocommunicationchannel_pt_tpbiuh.id
  where master_join_buettc.source_id = service.airportsuppliesservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_lvbkbx
  join shared.contactinformation_view shared_contactinformation_view_hgqqzh on master_join_lvbkbx.target_id = shared_contactinformation_view_hgqqzh.id
  where master_join_lvbkbx.source_id = service.airportsuppliesservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_jquhcu.id) as lat_availability
  from master_join master_join_ibdiis
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_jquhcu on master_join_ibdiis.target_id = service_serviceoperationalstatus_view_jquhcu.id
  where master_join_ibdiis.source_id = service.airportsuppliesservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nlxvog.*) AS annotation
  from master_join master_join_rtnppq
  join notes.note_view notes_note_view_nlxvog on master_join_rtnppq.target_id = notes_note_view_nlxvog.id
  where master_join_rtnppq.source_id = service.airportsuppliesservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_wnbkit.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_wnbkit.title AS varchar), '(' || airport_heliport_airportheliport_pt_wnbkit.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_wnbkit.href
  )) as lat_airportheliport  from master_join master_join_dclccu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wnbkit on master_join_dclccu.target_id = airport_heliport_airportheliport_pt_wnbkit.id
  where master_join_dclccu.source_id = service.airportsuppliesservice_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_view_wqntpm.id) as lat_fuelsupply
  from master_join master_join_gttybo
  join service.fuel_pt service_fuel_view_wqntpm on master_join_gttybo.target_id = service_fuel_view_wqntpm.id
  where master_join_gttybo.source_id = service.airportsuppliesservice_ts.id
) as lat_fuelsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_view_esmebh.id) as lat_oilsupply
  from master_join master_join_fkisun
  join service.oil_pt service_oil_view_esmebh on master_join_fkisun.target_id = service_oil_view_esmebh.id
  where master_join_fkisun.source_id = service.airportsuppliesservice_ts.id
) as lat_oilsupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_view_ogmcij.id) as lat_nitrogensupply
  from master_join master_join_ptznay
  join service.nitrogen_pt service_nitrogen_view_ogmcij on master_join_ptznay.target_id = service_nitrogen_view_ogmcij.id
  where master_join_ptznay.source_id = service.airportsuppliesservice_ts.id
) as lat_nitrogensupply on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_view_xjlzsu.id) as lat_oxygensupply
  from master_join master_join_izgoxv
  join service.oxygen_pt service_oxygen_view_xjlzsu on master_join_izgoxv.target_id = service_oxygen_view_xjlzsu.id
  where master_join_izgoxv.source_id = service.airportsuppliesservice_ts.id
) as lat_oxygensupply on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_vogakv.title as varchar), '(' || airspace_airspace_pt_vogakv.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_vogakv.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_ktppzs.title as varchar), '(' || airspace_airspace_pt_ktppzs.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_ktppzs.href AS enteredairspace_href,
    lat_annotation.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_vogakv on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_vogakv.id
left join airspace.airspace_pt airspace_airspace_pt_ktppzs on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_ktppzs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xztucy.*) AS annotation
  from master_join master_join_vefqxl
  join notes.note_view notes_note_view_xztucy on master_join_vefqxl.target_id = notes_note_view_xztucy.id
  where master_join_vefqxl.source_id = routes.airspacebordercrossing_ts.id
) as lat_annotation on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacegeometrycomponent_view', 'airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view', 'notes.note_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_vctdnz.title as varchar), '(' || routes_route_pt_vctdnz.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_vctdnz.href AS protectedroute_href,
    lat_clazz.lat_clazz as clazz,
    lat_geometrycomponent.lat_geometrycomponent as geometrycomponent,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_vctdnz on airspace.airspace_ts.protectedroute_id = routes_route_pt_vctdnz.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_view_cjyazf.id) as lat_clazz
  from master_join master_join_lpujyj
  join airspace.airspacelayerclass_pt airspace_airspacelayerclass_view_cjyazf on master_join_lpujyj.target_id = airspace_airspacelayerclass_view_cjyazf.id
  where master_join_lpujyj.source_id = airspace.airspace_ts.id
) as lat_clazz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_view_aymobe.id) as lat_geometrycomponent
  from master_join master_join_ghfges
  join airspace.airspacegeometrycomponent_pt airspace_airspacegeometrycomponent_view_aymobe on master_join_ghfges.target_id = airspace_airspacegeometrycomponent_view_aymobe.id
  where master_join_ghfges.source_id = airspace.airspace_ts.id
) as lat_geometrycomponent on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_view_upqsgc.id) as lat_activation
  from master_join master_join_kgqafa
  join airspace.airspaceactivation_pt airspace_airspaceactivation_view_upqsgc on master_join_kgqafa.target_id = airspace_airspaceactivation_view_upqsgc.id
  where master_join_kgqafa.source_id = airspace.airspace_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ffttqr.*) AS annotation
  from master_join master_join_playau
  join notes.note_view notes_note_view_ffttqr on master_join_playau.target_id = notes_note_view_ffttqr.id
  where master_join_playau.source_id = airspace.airspace_ts.id
) as lat_annotation on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_srujxr.geom AS location_geom,
    geometry_elevatedpoint_view_srujxr.longitude AS location_longitude,
    geometry_elevatedpoint_view_srujxr.latitude AS location_latitude,
    geometry_elevatedpoint_view_srujxr.elevation AS location_elevation,
    geometry_elevatedpoint_view_srujxr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_srujxr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_srujxr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_srujxr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_huzqmq.title as varchar), '(' || organisation_unit_pt_huzqmq.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_huzqmq.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_dnddyr.title as varchar), '(' || navaids_points_directionfinder_pt_dnddyr.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_dnddyr.href AS aircraftlocator_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_srujxr on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_srujxr.id
left join organisation.unit_pt organisation_unit_pt_huzqmq on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_huzqmq.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_dnddyr on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_dnddyr.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_vrowcc.id) as lat_callsign
  from master_join master_join_zkgaxv
  join service.callsigndetail_pt service_callsigndetail_view_vrowcc on master_join_zkgaxv.target_id = service_callsigndetail_view_vrowcc.id
  where master_join_zkgaxv.source_id = service.airtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_ocmlob.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_ocmlob.title AS varchar), '(' || service_radiocommunicationchannel_pt_ocmlob.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_ocmlob.href
  )) as lat_radiocommunication  from master_join master_join_qzwjzz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_ocmlob on master_join_qzwjzz.target_id = service_radiocommunicationchannel_pt_ocmlob.id
  where master_join_qzwjzz.source_id = service.airtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_gajnmn
  join shared.contactinformation_view shared_contactinformation_view_lcpuqd on master_join_gajnmn.target_id = shared_contactinformation_view_lcpuqd.id
  where master_join_gajnmn.source_id = service.airtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_uxmcha.id) as lat_availability
  from master_join master_join_vhagrc
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_uxmcha on master_join_vhagrc.target_id = service_serviceoperationalstatus_view_uxmcha.id
  where master_join_vhagrc.source_id = service.airtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sktagm.*) AS annotation
  from master_join master_join_spmzfd
  join notes.note_view notes_note_view_sktagm on master_join_spmzfd.target_id = notes_note_view_sktagm.id
  where master_join_spmzfd.source_id = service.airtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_bgymlx.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_bgymlx.title AS varchar), '(' || airport_heliport_airportheliport_pt_bgymlx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_bgymlx.href
  )) as lat_clientairport  from master_join master_join_vfppsc
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bgymlx on master_join_vfppsc.target_id = airport_heliport_airportheliport_pt_bgymlx.id
  where master_join_vfppsc.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_qqfwpg.id,
      'title', coalesce(cast(airspace_airspace_pt_qqfwpg.title AS varchar), '(' || airspace_airspace_pt_qqfwpg.nilreason[1] || ')'),
      'href', airspace_airspace_pt_qqfwpg.href
  )) as lat_clientairspace  from master_join master_join_ednytp
  join airspace.airspace_pt airspace_airspace_pt_qqfwpg on master_join_ednytp.target_id = airspace_airspace_pt_qqfwpg.id
  where master_join_ednytp.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_enncld.id) as lat_clientroute
  from master_join master_join_ghzluw
  join routes.routeportion_pt routes_routeportion_view_enncld on master_join_ghzluw.target_id = routes_routeportion_view_enncld.id
  where master_join_ghzluw.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_xbjvmd.id,
      'title', coalesce(cast(holding_holdingpattern_pt_xbjvmd.title AS varchar), '(' || holding_holdingpattern_pt_xbjvmd.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_xbjvmd.href
  )) as lat_clientholding  from master_join master_join_pzolzp
  join holding.holdingpattern_pt holding_holdingpattern_pt_xbjvmd on master_join_pzolzp.target_id = holding_holdingpattern_pt_xbjvmd.id
  where master_join_pzolzp.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_eqtgsh.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_eqtgsh.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_eqtgsh.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_eqtgsh.href
  )) as lat_clientaerialrefuelling  from master_join master_join_qhyjfe
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_eqtgsh on master_join_qhyjfe.target_id = aerial_refuelling_aerialrefuelling_pt_eqtgsh.id
  where master_join_qhyjfe.source_id = service.airtrafficcontrolservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_lcsyhy.geom AS location_geom,
    geometry_elevatedpoint_view_lcsyhy.longitude AS location_longitude,
    geometry_elevatedpoint_view_lcsyhy.latitude AS location_latitude,
    geometry_elevatedpoint_view_lcsyhy.elevation AS location_elevation,
    geometry_elevatedpoint_view_lcsyhy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lcsyhy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lcsyhy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lcsyhy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kmaqcf.title as varchar), '(' || organisation_unit_pt_kmaqcf.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_kmaqcf.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling,
    lat_clientroute.lat_clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lcsyhy on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_lcsyhy.id
left join organisation.unit_pt organisation_unit_pt_kmaqcf on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_kmaqcf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_rqpzom.id) as lat_callsign
  from master_join master_join_urncjh
  join service.callsigndetail_pt service_callsigndetail_view_rqpzom on master_join_urncjh.target_id = service_callsigndetail_view_rqpzom.id
  where master_join_urncjh.source_id = service.airtrafficmanagementservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_lxkafi.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_lxkafi.title AS varchar), '(' || service_radiocommunicationchannel_pt_lxkafi.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_lxkafi.href
  )) as lat_radiocommunication  from master_join master_join_bltfkb
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_lxkafi on master_join_bltfkb.target_id = service_radiocommunicationchannel_pt_lxkafi.id
  where master_join_bltfkb.source_id = service.airtrafficmanagementservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_dpjvpi
  join shared.contactinformation_view shared_contactinformation_view_bhgdhb on master_join_dpjvpi.target_id = shared_contactinformation_view_bhgdhb.id
  where master_join_dpjvpi.source_id = service.airtrafficmanagementservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_xxmjee.id) as lat_availability
  from master_join master_join_vljkru
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_xxmjee on master_join_vljkru.target_id = service_serviceoperationalstatus_view_xxmjee.id
  where master_join_vljkru.source_id = service.airtrafficmanagementservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_niytxe.*) AS annotation
  from master_join master_join_rawdun
  join notes.note_view notes_note_view_niytxe on master_join_rawdun.target_id = notes_note_view_niytxe.id
  where master_join_rawdun.source_id = service.airtrafficmanagementservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_pjkrvi.id,
      'title', coalesce(cast(airspace_airspace_pt_pjkrvi.title AS varchar), '(' || airspace_airspace_pt_pjkrvi.nilreason[1] || ')'),
      'href', airspace_airspace_pt_pjkrvi.href
  )) as lat_clientairspace  from master_join master_join_nyrldl
  join airspace.airspace_pt airspace_airspace_pt_pjkrvi on master_join_nyrldl.target_id = airspace_airspace_pt_pjkrvi.id
  where master_join_nyrldl.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_yjskfq.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_yjskfq.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_yjskfq.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_yjskfq.href
  )) as lat_clientaerialrefuelling  from master_join master_join_decetg
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_yjskfq on master_join_decetg.target_id = aerial_refuelling_aerialrefuelling_pt_yjskfq.id
  where master_join_decetg.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientaerialrefuelling on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_czsbyh.id) as lat_clientroute
  from master_join master_join_okmtia
  join routes.routeportion_pt routes_routeportion_view_czsbyh on master_join_okmtia.target_id = routes_routeportion_view_czsbyh.id
  where master_join_okmtia.source_id = service.airtrafficmanagementservice_ts.id
) as lat_clientroute on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['notes.note_view', 'airport_heliport.altimetersourcestatus_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_view_aioaci.id) as lat_availability
  from master_join master_join_fvyjbz
  join airport_heliport.altimetersourcestatus_pt airport_heliport_altimetersourcestatus_view_aioaci on master_join_fvyjbz.target_id = airport_heliport_altimetersourcestatus_view_aioaci.id
  where master_join_fvyjbz.source_id = airport_heliport.altimetersource_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wkhgrt.*) AS annotation
  from master_join master_join_ammtoz
  join notes.note_view notes_note_view_wkhgrt on master_join_ammtoz.target_id = notes_note_view_wkhgrt.id
  where master_join_ammtoz.source_id = airport_heliport.altimetersource_ts.id
) as lat_annotation on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_khxtyb.title as varchar), '(' || navaids_points_designatedpoint_pt_khxtyb.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_khxtyb.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_azbcqp.title as varchar), '(' || navaids_points_designatedpoint_pt_azbcqp.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_azbcqp.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_okonnp.title as varchar), '(' || navaids_points_navaid_pt_okonnp.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_okonnp.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vlnxzv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vlnxzv.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_vlnxzv.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dmnffz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dmnffz.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dmnffz.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qxrvfq.title as varchar), '(' || airport_heliport_airportheliport_pt_qxrvfq.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_qxrvfq.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_tvjdyz.geom AS pointchoiceposition_geom,
    geometry_point_view_tvjdyz.longitude AS pointchoiceposition_longitude,
    geometry_point_view_tvjdyz.latitude AS pointchoiceposition_latitude,
    geometry_point_view_tvjdyz.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_khxtyb on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_khxtyb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_azbcqp on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_azbcqp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_okonnp on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_okonnp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vlnxzv on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vlnxzv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dmnffz on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dmnffz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qxrvfq on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_qxrvfq.id
left join geometry.point_view geometry_point_view_tvjdyz on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_tvjdyz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lkrwgk.*) AS annotation
  from master_join master_join_jbicrp
  join notes.note_view notes_note_view_lkrwgk on master_join_jbicrp.target_id = notes_note_view_lkrwgk.id
  where master_join_jbicrp.source_id = navaids_points.angleindication_ts.id
) as lat_annotation on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_uvqcag.title as varchar), '(' || airport_heliport_runwaydirection_pt_uvqcag.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_uvqcag.href AS servedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_uvqcag on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_uvqcag.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_wpjnzi.id) as lat_element
  from master_join master_join_buuzap
  join shared.lightelement_pt shared_lightelement_view_wpjnzi on master_join_buuzap.target_id = shared_lightelement_view_wpjnzi.id
  where master_join_buuzap.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_tuozvt.id) as lat_availability
  from master_join master_join_xgykbr
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_tuozvt on master_join_xgykbr.target_id = airport_heliport_groundlightingavailability_view_tuozvt.id
  where master_join_xgykbr.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gptvrf.*) AS annotation
  from master_join master_join_nwlyod
  join notes.note_view notes_note_view_gptvrf on master_join_nwlyod.target_id = notes_note_view_gptvrf.id
  where master_join_nwlyod.source_id = airport_heliport.approachlightingsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_glshqk.title as varchar), '(' || airport_heliport_apron_pt_glshqk.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_glshqk.href AS associatedapron_href,
    airport_heliport_surfacecharacteristics_view_lghnci.id AS surfaceproperties,
    geometry_elevatedsurface_view_vchkmy.geom AS extent_geom,
    geometry_elevatedsurface_view_vchkmy.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vchkmy.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vchkmy.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vchkmy.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vchkmy.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_supplyservice.lat_supplyservice as supplyservice,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_glshqk on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_glshqk.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lghnci on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lghnci.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vchkmy on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_vchkmy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_pt_toqvem.id,
      'title', coalesce(cast(service_airportsuppliesservice_pt_toqvem.title AS varchar), '(' || service_airportsuppliesservice_pt_toqvem.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_pt_toqvem.href
  )) as lat_supplyservice  from master_join master_join_qgcsyv
  join service.airportsuppliesservice_pt service_airportsuppliesservice_pt_toqvem on master_join_qgcsyv.target_id = service_airportsuppliesservice_pt_toqvem.id
  where master_join_qgcsyv.source_id = airport_heliport.apronelement_ts.id
) as lat_supplyservice on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tiolga.*) AS annotation
  from master_join master_join_ekeepy
  join notes.note_view notes_note_view_tiolga on master_join_ekeepy.target_id = notes_note_view_tiolga.id
  where master_join_ekeepy.source_id = airport_heliport.apronelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_nvuckg.id) as lat_availability
  from master_join master_join_fdmgnm
  join airport_heliport.apronareaavailability_pt airport_heliport_apronareaavailability_view_nvuckg on master_join_fdmgnm.target_id = airport_heliport_apronareaavailability_view_nvuckg.id
  where master_join_fdmgnm.source_id = airport_heliport.apronelement_ts.id
) as lat_availability on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_wfavbl.title as varchar), '(' || airport_heliport_apron_pt_wfavbl.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_wfavbl.href AS lightedapron_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_wfavbl on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_wfavbl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_fdoxld.id) as lat_element
  from master_join master_join_zhwpbo
  join shared.lightelement_pt shared_lightelement_view_fdoxld on master_join_zhwpbo.target_id = shared_lightelement_view_fdoxld.id
  where master_join_zhwpbo.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_jaltmd.id) as lat_availability
  from master_join master_join_jazojf
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_jaltmd on master_join_jazojf.target_id = airport_heliport_groundlightingavailability_view_jaltmd.id
  where master_join_jazojf.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_huubdv.*) AS annotation
  from master_join master_join_iibmod
  join notes.note_view notes_note_view_huubdv on master_join_iibmod.target_id = notes_note_view_huubdv.id
  where master_join_iibmod.source_id = airport_heliport.apronlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_qahmnx.title as varchar), '(' || airport_heliport_apron_pt_qahmnx.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_qahmnx.href AS markedapron_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_qahmnx on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_qahmnx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_sreamv.id) as lat_element
  from master_join master_join_omthsn
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_sreamv on master_join_omthsn.target_id = airport_heliport_markingelement_view_sreamv.id
  where master_join_omthsn.source_id = airport_heliport.apronmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eovlvg.*) AS annotation
  from master_join master_join_mqhgss
  join notes.note_view notes_note_view_eovlvg on master_join_mqhgss.target_id = notes_note_view_eovlvg.id
  where master_join_mqhgss.source_id = airport_heliport.apronmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.aproncontamination_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    airport_heliport_surfacecharacteristics_view_mztcps.id AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_veoeph.title as varchar), '(' || airport_heliport_airportheliport_pt_veoeph.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_veoeph.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mztcps on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mztcps.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_veoeph on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_veoeph.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_view_lfishd.id) as lat_contaminant
  from master_join master_join_gcauqq
  join airport_heliport.aproncontamination_pt airport_heliport_aproncontamination_view_lfishd on master_join_gcauqq.target_id = airport_heliport_aproncontamination_view_lfishd.id
  where master_join_gcauqq.source_id = airport_heliport.apron_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jxrngv.*) AS annotation
  from master_join master_join_tispfc
  join notes.note_view notes_note_view_jxrngv on master_join_tispfc.target_id = notes_note_view_jxrngv.id
  where master_join_tispfc.source_id = airport_heliport.apron_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_myeeei.id) as lat_availability
  from master_join master_join_tuzqfa
  join airport_heliport.apronareaavailability_pt airport_heliport_apronareaavailability_view_myeeei on master_join_tuzqfa.target_id = airport_heliport_apronareaavailability_view_myeeei.id
  where master_join_tuzqfa.source_id = airport_heliport.apron_ts.id
) as lat_availability on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['geometry.elevatedcurve_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    airport_heliport_surfacecharacteristics_view_jwadxh.id AS surfaceproperties,
    geometry_elevatedcurve_view_dpmjhl.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_dpmjhl.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_dpmjhl.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_dpmjhl.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_dpmjhl.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_dpmjhl.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_esxnkf.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_esxnkf.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_esxnkf.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_esxnkf.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_esxnkf.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_esxnkf.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_flfdvr.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_flfdvr.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_flfdvr.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_flfdvr.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_flfdvr.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_flfdvr.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_flfdvr.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_flfdvr.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jwadxh on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jwadxh.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_dpmjhl on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_dpmjhl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_esxnkf on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_esxnkf.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_flfdvr on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_flfdvr.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_bglozd.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_bglozd.title AS varchar), '(' || airport_heliport_runwaydirection_pt_bglozd.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_bglozd.href
  )) as lat_runwaydirection  from master_join master_join_xamoao
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_bglozd on master_join_xamoao.target_id = airport_heliport_runwaydirection_pt_bglozd.id
  where master_join_xamoao.source_id = airport_heliport.arrestinggear_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_mbwndt.*) AS annotation
  from master_join master_join_majwok
  join notes.note_view notes_note_view_mbwndt on master_join_majwok.target_id = notes_note_view_mbwndt.id
  where master_join_majwok.source_id = airport_heliport.arrestinggear_ts.id
) as lat_annotation on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    navaids_points_terminalsegmentpoint_view_liaffa.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_yeknmv.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_eztocc.id AS arccentre,
    geometry_curve_view_txsitb.geom AS trajectory_geom,
    geometry_curve_view_txsitb.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_tcyugm.title as varchar), '(' || navaids_points_angleindication_pt_tcyugm.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_tcyugm.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zddokv.title as varchar), '(' || navaids_points_distanceindication_pt_zddokv.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_zddokv.href AS distance_href,
    procedure_holdinguse_view_jyugjh.id AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ftlvng.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ftlvng.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_ftlvng.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_liaffa on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_liaffa.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yeknmv on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_yeknmv.id
left join geometry.curve_view geometry_curve_view_txsitb on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_txsitb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eztocc on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_eztocc.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_tcyugm on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_tcyugm.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zddokv on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_zddokv.id
left join procedure.holdinguse_view procedure_holdinguse_view_jyugjh on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_jyugjh.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ftlvng on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ftlvng.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_cjzzkp.id) as lat_aircraftcategory
  from master_join master_join_uqacyl
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_cjzzkp on master_join_uqacyl.target_id = shared_aircraftcharacteristic_view_cjzzkp.id
  where master_join_uqacyl.source_id = procedure.arrivalfeederleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_eztzvt.id) as lat_designsurface
  from master_join master_join_oskklp
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_eztzvt on master_join_oskklp.target_id = shared_obstacleassessmentarea_view_eztzvt.id
  where master_join_oskklp.source_id = procedure.arrivalfeederleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ompour.*) AS annotation
  from master_join master_join_sdlydl
  join notes.note_view notes_note_view_ompour on master_join_sdlydl.target_id = notes_note_view_ompour.id
  where master_join_sdlydl.source_id = procedure.arrivalfeederleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    navaids_points_terminalsegmentpoint_view_vvscuk.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_ndyoib.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_vqqjhv.id AS arccentre,
    geometry_curve_view_gtpomj.geom AS trajectory_geom,
    geometry_curve_view_gtpomj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_upmfrz.title as varchar), '(' || navaids_points_angleindication_pt_upmfrz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_upmfrz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_gwmdbg.title as varchar), '(' || navaids_points_distanceindication_pt_gwmdbg.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_gwmdbg.href AS distance_href,
    procedure_holdinguse_view_bdnmdn.id AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_spuscj.title as varchar), '(' || procedure_standardinstrumentarrival_pt_spuscj.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_spuscj.href AS arrival_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vvscuk on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vvscuk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ndyoib on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ndyoib.id
left join geometry.curve_view geometry_curve_view_gtpomj on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_gtpomj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vqqjhv on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vqqjhv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_upmfrz on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_upmfrz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_gwmdbg on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_gwmdbg.id
left join procedure.holdinguse_view procedure_holdinguse_view_bdnmdn on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_bdnmdn.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_spuscj on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_spuscj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_asmacw.id) as lat_aircraftcategory
  from master_join master_join_naqwtj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_asmacw on master_join_naqwtj.target_id = shared_aircraftcharacteristic_view_asmacw.id
  where master_join_naqwtj.source_id = procedure.arrivalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_qhrrgn.id) as lat_designsurface
  from master_join master_join_ekuabb
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_qhrrgn on master_join_ekuabb.target_id = shared_obstacleassessmentarea_view_qhrrgn.id
  where master_join_ekuabb.source_id = procedure.arrivalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tmqosh.*) AS annotation
  from master_join master_join_xqbvmh
  join notes.note_view notes_note_view_tmqosh on master_join_xqbvmh.target_id = notes_note_view_tmqosh.id
  where master_join_xqbvmh.source_id = procedure.arrivalleg_ts.id
) as lat_annotation on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_mebnbe.title as varchar), '(' || organisation_organisationauthority_pt_mebnbe.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_mebnbe.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_wvpnni.title as varchar), '(' || airspace_airspace_pt_wvpnni.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_wvpnni.href AS assignedairspace_href,
    lat_annotation.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mebnbe on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_mebnbe.id
left join airspace.airspace_pt airspace_airspace_pt_wvpnni on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_wvpnni.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dsalyz.*) AS annotation
  from master_join master_join_oxsmzp
  join notes.note_view notes_note_view_dsalyz on master_join_oxsmzp.target_id = notes_note_view_dsalyz.id
  where master_join_oxsmzp.source_id = airspace.authorityforairspace_ts.id
) as lat_annotation on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_yoqqhp.geom AS location_geom,
    geometry_elevatedpoint_view_yoqqhp.longitude AS location_longitude,
    geometry_elevatedpoint_view_yoqqhp.latitude AS location_latitude,
    geometry_elevatedpoint_view_yoqqhp.elevation AS location_elevation,
    geometry_elevatedpoint_view_yoqqhp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yoqqhp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yoqqhp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yoqqhp.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yoqqhp on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_yoqqhp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_jjhbmx.id) as lat_authority
  from master_join master_join_hsomyy
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_jjhbmx on master_join_hsomyy.target_id = navaids_points_authorityfornavaidequipment_view_jjhbmx.id
  where master_join_hsomyy.source_id = navaids_points.azimuth_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_uovmdd.id) as lat_monitoring
  from master_join master_join_wlqptt
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_uovmdd on master_join_wlqptt.target_id = navaids_points_navaidequipmentmonitoring_view_uovmdd.id
  where master_join_wlqptt.source_id = navaids_points.azimuth_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_cdifqy.id) as lat_availability
  from master_join master_join_gghqvx
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_cdifqy on master_join_gghqvx.target_id = navaids_points_navaidoperationalstatus_view_cdifqy.id
  where master_join_gghqvx.source_id = navaids_points.azimuth_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_attyuf.*) AS annotation
  from master_join master_join_zsarcs
  join notes.note_view notes_note_view_attyuf on master_join_zsarcs.target_id = notes_note_view_attyuf.id
  where master_join_zsarcs.source_id = navaids_points.azimuth_ts.id
) as lat_annotation on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['geometry.point_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_rasqjy.title as varchar), '(' || navaids_points_designatedpoint_pt_rasqjy.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rasqjy.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vgfjrd.title as varchar), '(' || navaids_points_navaid_pt_vgfjrd.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_vgfjrd.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mpqmcb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mpqmcb.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_mpqmcb.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kmqfpq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kmqfpq.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kmqfpq.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kpnluf.title as varchar), '(' || airport_heliport_airportheliport_pt_kpnluf.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_kpnluf.href AS locationairportreferencepoint_href,
    geometry_point_view_rpfikv.geom AS locationposition_geom,
    geometry_point_view_rpfikv.longitude AS locationposition_longitude,
    geometry_point_view_rpfikv.latitude AS locationposition_latitude,
    geometry_point_view_rpfikv.horizontalAccuracy AS locationposition_horizontalaccuracy,
    routes_routeportion_view_gtvbyi.id AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rasqjy on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rasqjy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vgfjrd on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_vgfjrd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mpqmcb on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mpqmcb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kmqfpq on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kmqfpq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kpnluf on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_kpnluf.id
left join geometry.point_view geometry_point_view_rpfikv on routes.changeoverpoint_ts.location_position_id = geometry_point_view_rpfikv.id
left join routes.routeportion_view routes_routeportion_view_gtvbyi on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_gtvbyi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dfxxaj.*) AS annotation
  from master_join master_join_sujciv
  join notes.note_view notes_note_view_dfxxaj on master_join_sujciv.target_id = notes_note_view_dfxxaj.id
  where master_join_sujciv.source_id = routes.changeoverpoint_ts.id
) as lat_annotation on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_tajaxy.geom AS position_geom,
    geometry_elevatedpoint_view_tajaxy.longitude AS position_longitude,
    geometry_elevatedpoint_view_tajaxy.latitude AS position_latitude,
    geometry_elevatedpoint_view_tajaxy.elevation AS position_elevation,
    geometry_elevatedpoint_view_tajaxy.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_tajaxy.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_tajaxy.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_tajaxy.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_ejtrgz.title as varchar), '(' || airport_heliport_airportheliport_pt_ejtrgz.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_ejtrgz.href AS airportheliport_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tajaxy on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_tajaxy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ejtrgz on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_ejtrgz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ayfxyo.*) AS annotation
  from master_join master_join_wsypmx
  join notes.note_view notes_note_view_ayfxyo on master_join_wsypmx.target_id = notes_note_view_ayfxyo.id
  where master_join_wsypmx.source_id = navaids_points.checkpointins_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_wibbzq.geom AS position_geom,
    geometry_elevatedpoint_view_wibbzq.longitude AS position_longitude,
    geometry_elevatedpoint_view_wibbzq.latitude AS position_latitude,
    geometry_elevatedpoint_view_wibbzq.elevation AS position_elevation,
    geometry_elevatedpoint_view_wibbzq.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_wibbzq.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_wibbzq.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_wibbzq.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_pmvpxh.title as varchar), '(' || airport_heliport_airportheliport_pt_pmvpxh.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_pmvpxh.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_jcziyf.title as varchar), '(' || navaids_points_vor_pt_jcziyf.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_jcziyf.href AS checkpointfacility_href,
    lat_annotation.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wibbzq on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_wibbzq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pmvpxh on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_pmvpxh.id
left join navaids_points.vor_pt navaids_points_vor_pt_jcziyf on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_jcziyf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_isieib.*) AS annotation
  from master_join master_join_esavxw
  join notes.note_view notes_note_view_isieib on master_join_esavxw.target_id = notes_note_view_isieib.id
  where master_join_esavxw.source_id = navaids_points.checkpointvor_ts.id
) as lat_annotation on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_milepj.geom AS extent_geom,
    geometry_surface_view_milepj.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_racrus.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_racrus.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_racrus.href AS approach_href,
    shared_aircraftcharacteristic_view_kynvwr.id AS aircraftcategory,
    lat_condition.lat_condition as condition,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_milepj on public.circlingarea_ts.extent_id = geometry_surface_view_milepj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_racrus on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_racrus.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_kynvwr on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_kynvwr.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_khwqly.id) as lat_condition
  from master_join master_join_wejzfy
  join procedure.approachcondition_pt procedure_approachcondition_view_khwqly on master_join_wejzfy.target_id = procedure_approachcondition_view_khwqly.id
  where master_join_wejzfy.source_id = public.circlingarea_ts.id
) as lat_condition on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_dztrrj.id) as lat_designsurface
  from master_join master_join_adjzbv
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_dztrrj on master_join_adjzbv.target_id = shared_obstacleassessmentarea_view_dztrrj.id
  where master_join_adjzbv.source_id = public.circlingarea_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_npmhzr.*) AS annotation
  from master_join master_join_tihzge
  join notes.note_view notes_note_view_npmhzr on master_join_tihzge.target_id = notes_note_view_npmhzr.id
  where master_join_tihzge.source_id = public.circlingarea_ts.id
) as lat_annotation on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_klubmo.title as varchar), '(' || airport_heliport_deicingarea_pt_klubmo.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_klubmo.href AS markeddeicingarea_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_klubmo on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_klubmo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_uxpqit.id) as lat_element
  from master_join master_join_fitegc
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_uxpqit on master_join_fitegc.target_id = airport_heliport_markingelement_view_uxpqit.id
  where master_join_fitegc.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nwusni.*) AS annotation
  from master_join master_join_qdkvzq
  join notes.note_view notes_note_view_nwusni on master_join_qdkvzq.target_id = notes_note_view_nwusni.id
  where master_join_qdkvzq.source_id = airport_heliport.deicingareamarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_dgmxup.title as varchar), '(' || airport_heliport_apron_pt_dgmxup.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_dgmxup.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_zpkjur.title as varchar), '(' || airport_heliport_taxiway_pt_zpkjur.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_zpkjur.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_qublek.title as varchar), '(' || airport_heliport_aircraftstand_pt_qublek.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_qublek.href AS standlocation_href,
    airport_heliport_surfacecharacteristics_view_uafekd.id AS surfaceproperties,
    geometry_elevatedsurface_view_xyvwwi.geom AS extent_geom,
    geometry_elevatedsurface_view_xyvwwi.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xyvwwi.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xyvwwi.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xyvwwi.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xyvwwi.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_dgmxup on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_dgmxup.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_zpkjur on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_zpkjur.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_qublek on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_qublek.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_uafekd on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_uafekd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xyvwwi on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_xyvwwi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zmuale.*) AS annotation
  from master_join master_join_qvdhjk
  join notes.note_view notes_note_view_zmuale on master_join_qvdhjk.target_id = notes_note_view_zmuale.id
  where master_join_qvdhjk.source_id = airport_heliport.deicingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_view_coqeht.id) as lat_availability
  from master_join master_join_mhvkmo
  join airport_heliport.apronareaavailability_pt airport_heliport_apronareaavailability_view_coqeht on master_join_mhvkmo.target_id = airport_heliport_apronareaavailability_view_coqeht.id
  where master_join_mhvkmo.source_id = airport_heliport.deicingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['procedure.departurearrivalcondition_view', 'navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    navaids_points_terminalsegmentpoint_view_bmfvpd.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_mumgbq.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_vqhiuh.id AS arccentre,
    geometry_curve_view_jbtaic.geom AS trajectory_geom,
    geometry_curve_view_jbtaic.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_bsbcee.title as varchar), '(' || navaids_points_angleindication_pt_bsbcee.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_bsbcee.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_oayzfb.title as varchar), '(' || navaids_points_distanceindication_pt_oayzfb.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_oayzfb.href AS distance_href,
    procedure_holdinguse_view_ftezdp.id AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_jmvkyc.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_jmvkyc.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_jmvkyc.href AS departure_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bmfvpd on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_bmfvpd.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mumgbq on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_mumgbq.id
left join geometry.curve_view geometry_curve_view_jbtaic on procedure.departureleg_ts.trajectory_id = geometry_curve_view_jbtaic.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vqhiuh on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vqhiuh.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_bsbcee on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_bsbcee.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_oayzfb on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_oayzfb.id
left join procedure.holdinguse_view procedure_holdinguse_view_ftezdp on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_ftezdp.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_jmvkyc on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_jmvkyc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_nxbgxn.id) as lat_aircraftcategory
  from master_join master_join_jmniey
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_nxbgxn on master_join_jmniey.target_id = shared_aircraftcharacteristic_view_nxbgxn.id
  where master_join_jmniey.source_id = procedure.departureleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_gycqtj.id) as lat_designsurface
  from master_join master_join_wxpdtv
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_gycqtj on master_join_wxpdtv.target_id = shared_obstacleassessmentarea_view_gycqtj.id
  where master_join_wxpdtv.source_id = procedure.departureleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lzeyfy.*) AS annotation
  from master_join master_join_nmnqjq
  join notes.note_view notes_note_view_lzeyfy on master_join_nmnqjq.target_id = notes_note_view_lzeyfy.id
  where master_join_nmnqjq.source_id = procedure.departureleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_view_kfgrpb.id) as lat_condition
  from master_join master_join_pflzjl
  join procedure.departurearrivalcondition_pt procedure_departurearrivalcondition_view_kfgrpb on master_join_pflzjl.target_id = procedure_departurearrivalcondition_view_kfgrpb.id
  where master_join_pflzjl.source_id = procedure.departureleg_ts.id
) as lat_condition on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_lbawzv.geom AS location_geom,
    geometry_point_view_lbawzv.longitude AS location_longitude,
    geometry_point_view_lbawzv.latitude AS location_latitude,
    geometry_point_view_lbawzv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gjtagx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gjtagx.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_gjtagx.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ihobym.title as varchar), '(' || airport_heliport_airportheliport_pt_ihobym.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_ihobym.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lurbbk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lurbbk.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lurbbk.href AS runwaypoint_href,
    lat_annotation.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_lbawzv on navaids_points.designatedpoint_ts.location_id = geometry_point_view_lbawzv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gjtagx on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_gjtagx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ihobym on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_ihobym.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lurbbk on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lurbbk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oxzoqi.*) AS annotation
  from master_join master_join_ltzxmw
  join notes.note_view notes_note_view_oxzoqi on master_join_ltzxmw.target_id = notes_note_view_oxzoqi.id
  where master_join_ltzxmw.source_id = navaids_points.designatedpoint_ts.id
) as lat_annotation on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_lyzkij.geom AS location_geom,
    geometry_elevatedpoint_view_lyzkij.longitude AS location_longitude,
    geometry_elevatedpoint_view_lyzkij.latitude AS location_latitude,
    geometry_elevatedpoint_view_lyzkij.elevation AS location_elevation,
    geometry_elevatedpoint_view_lyzkij.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lyzkij.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lyzkij.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lyzkij.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_informationprovision.lat_informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lyzkij on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_lyzkij.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_znyjus.id) as lat_authority
  from master_join master_join_vmcfbp
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_znyjus on master_join_vmcfbp.target_id = navaids_points_authorityfornavaidequipment_view_znyjus.id
  where master_join_vmcfbp.source_id = navaids_points.directionfinder_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_nrykyx.id) as lat_monitoring
  from master_join master_join_mrxspk
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_nrykyx on master_join_mrxspk.target_id = navaids_points_navaidequipmentmonitoring_view_nrykyx.id
  where master_join_mrxspk.source_id = navaids_points.directionfinder_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_kovzhl.id) as lat_availability
  from master_join master_join_mufuod
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_kovzhl on master_join_mufuod.target_id = navaids_points_navaidoperationalstatus_view_kovzhl.id
  where master_join_mufuod.source_id = navaids_points.directionfinder_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cpwyig.*) AS annotation
  from master_join master_join_vxoads
  join notes.note_view notes_note_view_cpwyig on master_join_vxoads.target_id = notes_note_view_cpwyig.id
  where master_join_vxoads.source_id = navaids_points.directionfinder_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_pt_gftewg.id,
      'title', coalesce(cast(service_informationservice_pt_gftewg.title AS varchar), '(' || service_informationservice_pt_gftewg.nilreason[1] || ')'),
      'href', service_informationservice_pt_gftewg.href
  )) as lat_informationprovision  from master_join master_join_zcrjmk
  join service.informationservice_pt service_informationservice_pt_gftewg on master_join_zcrjmk.target_id = service_informationservice_pt_gftewg.id
  where master_join_zcrjmk.source_id = navaids_points.directionfinder_ts.id
) as lat_informationprovision on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_iatytj.title as varchar), '(' || navaids_points_designatedpoint_pt_iatytj.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_iatytj.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_gokwki.title as varchar), '(' || navaids_points_designatedpoint_pt_gokwki.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_gokwki.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_syycdt.title as varchar), '(' || navaids_points_navaid_pt_syycdt.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_syycdt.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_puwczb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_puwczb.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_puwczb.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_diqncw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_diqncw.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_diqncw.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bkwfxx.title as varchar), '(' || airport_heliport_airportheliport_pt_bkwfxx.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_bkwfxx.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_gitlbv.geom AS pointchoiceposition_geom,
    geometry_point_view_gitlbv.longitude AS pointchoiceposition_longitude,
    geometry_point_view_gitlbv.latitude AS pointchoiceposition_latitude,
    geometry_point_view_gitlbv.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_iatytj on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_iatytj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gokwki on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gokwki.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_syycdt on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_syycdt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_puwczb on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_puwczb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_diqncw on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_diqncw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bkwfxx on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_bkwfxx.id
left join geometry.point_view geometry_point_view_gitlbv on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_gitlbv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gduxjn.*) AS annotation
  from master_join master_join_uumpig
  join notes.note_view notes_note_view_gduxjn on master_join_uumpig.target_id = notes_note_view_gduxjn.id
  where master_join_uumpig.source_id = navaids_points.distanceindication_ts.id
) as lat_annotation on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_lfbbzk.geom AS location_geom,
    geometry_elevatedpoint_view_lfbbzk.longitude AS location_longitude,
    geometry_elevatedpoint_view_lfbbzk.latitude AS location_latitude,
    geometry_elevatedpoint_view_lfbbzk.elevation AS location_elevation,
    geometry_elevatedpoint_view_lfbbzk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lfbbzk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lfbbzk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lfbbzk.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lfbbzk on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_lfbbzk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_ammymi.id) as lat_authority
  from master_join master_join_wubdfv
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_ammymi on master_join_wubdfv.target_id = navaids_points_authorityfornavaidequipment_view_ammymi.id
  where master_join_wubdfv.source_id = navaids_points.dme_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_kiddhx.id) as lat_monitoring
  from master_join master_join_urhzen
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_kiddhx on master_join_urhzen.target_id = navaids_points_navaidequipmentmonitoring_view_kiddhx.id
  where master_join_urhzen.source_id = navaids_points.dme_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_qolhtj.id) as lat_availability
  from master_join master_join_ywwrpp
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_qolhtj on master_join_ywwrpp.target_id = navaids_points_navaidoperationalstatus_view_qolhtj.id
  where master_join_ywwrpp.source_id = navaids_points.dme_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_apaqpu.*) AS annotation
  from master_join master_join_zhteti
  join notes.note_view notes_note_view_apaqpu on master_join_zhteti.target_id = notes_note_view_apaqpu.id
  where master_join_zhteti.source_id = navaids_points.dme_ts.id
) as lat_annotation on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_pqmycx.geom AS location_geom,
    geometry_elevatedpoint_view_pqmycx.longitude AS location_longitude,
    geometry_elevatedpoint_view_pqmycx.latitude AS location_latitude,
    geometry_elevatedpoint_view_pqmycx.elevation AS location_elevation,
    geometry_elevatedpoint_view_pqmycx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pqmycx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pqmycx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pqmycx.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pqmycx on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_pqmycx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_amsdkb.id) as lat_authority
  from master_join master_join_wrrayd
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_amsdkb on master_join_wrrayd.target_id = navaids_points_authorityfornavaidequipment_view_amsdkb.id
  where master_join_wrrayd.source_id = navaids_points.elevation_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_vzmqin.id) as lat_monitoring
  from master_join master_join_nlilbs
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_vzmqin on master_join_nlilbs.target_id = navaids_points_navaidequipmentmonitoring_view_vzmqin.id
  where master_join_nlilbs.source_id = navaids_points.elevation_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_koxceb.id) as lat_availability
  from master_join master_join_dbscyu
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_koxceb on master_join_dbscyu.target_id = navaids_points_navaidoperationalstatus_view_koxceb.id
  where master_join_dbscyu.source_id = navaids_points.elevation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xiilws.*) AS annotation
  from master_join master_join_qvecdp
  join notes.note_view notes_note_view_xiilws on master_join_qvecdp.target_id = notes_note_view_xiilws.id
  where master_join_qvecdp.source_id = navaids_points.elevation_ts.id
) as lat_annotation on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'public.fasdatablock_view', 'geometry.point_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    navaids_points_terminalsegmentpoint_view_sasuhe.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_sdttie.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_axmmlx.id AS arccentre,
    navaids_points_terminalsegmentpoint_view_fftmkd.id AS visualdescentpoint,
    geometry_curve_view_ckaoyh.geom AS trajectory_geom,
    geometry_curve_view_ckaoyh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_kkccyr.title as varchar), '(' || navaids_points_angleindication_pt_kkccyr.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_kkccyr.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_owkdxu.title as varchar), '(' || navaids_points_distanceindication_pt_owkdxu.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_owkdxu.href AS distance_href,
    procedure_holdinguse_view_dqkdxz.id AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_cpzxkf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_cpzxkf.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_cpzxkf.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_oyoprg.title as varchar), '(' || navaids_points_designatedpoint_pt_oyoprg.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_oyoprg.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_buxkts.title as varchar), '(' || navaids_points_navaid_pt_buxkts.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_buxkts.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zagvry.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zagvry.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_zagvry.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ccntob.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ccntob.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ccntob.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uoqxym.title as varchar), '(' || airport_heliport_airportheliport_pt_uoqxym.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_uoqxym.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_uvcdcj.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_uvcdcj.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_uvcdcj.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_uvcdcj.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    public_fasdatablock_view_rmeykv.id AS fasdata,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sasuhe on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_sasuhe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sdttie on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_sdttie.id
left join geometry.curve_view geometry_curve_view_ckaoyh on procedure.finalleg_ts.trajectory_id = geometry_curve_view_ckaoyh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_axmmlx on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_axmmlx.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_kkccyr on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_kkccyr.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_owkdxu on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_owkdxu.id
left join procedure.holdinguse_view procedure_holdinguse_view_dqkdxz on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_dqkdxz.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_cpzxkf on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_cpzxkf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_oyoprg on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_oyoprg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_buxkts on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_buxkts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zagvry on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zagvry.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ccntob on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ccntob.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uoqxym on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_uoqxym.id
left join geometry.point_view geometry_point_view_uvcdcj on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_uvcdcj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fftmkd on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_fftmkd.id
left join public.fasdatablock_view public_fasdatablock_view_rmeykv on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_rmeykv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_qcajju.id) as lat_aircraftcategory
  from master_join master_join_joxiyj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_qcajju on master_join_joxiyj.target_id = shared_aircraftcharacteristic_view_qcajju.id
  where master_join_joxiyj.source_id = procedure.finalleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_tqusoj.id) as lat_designsurface
  from master_join master_join_zacrzb
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_tqusoj on master_join_zacrzb.target_id = shared_obstacleassessmentarea_view_tqusoj.id
  where master_join_zacrzb.source_id = procedure.finalleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dytpge.*) AS annotation
  from master_join master_join_ubtokt
  join notes.note_view notes_note_view_dytpge on master_join_ubtokt.target_id = notes_note_view_dytpge.id
  where master_join_ubtokt.source_id = procedure.finalleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_hfzpkw.id) as lat_condition
  from master_join master_join_skfkeg
  join procedure.approachcondition_pt procedure_approachcondition_view_hfzpkw on master_join_skfkeg.target_id = procedure_approachcondition_view_hfzpkw.id
  where master_join_skfkeg.source_id = procedure.finalleg_ts.id
) as lat_condition on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_iblluj.geom AS location_geom,
    geometry_elevatedpoint_view_iblluj.longitude AS location_longitude,
    geometry_elevatedpoint_view_iblluj.latitude AS location_latitude,
    geometry_elevatedpoint_view_iblluj.elevation AS location_elevation,
    geometry_elevatedpoint_view_iblluj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iblluj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iblluj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iblluj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jubfoc.title as varchar), '(' || organisation_unit_pt_jubfoc.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_jubfoc.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iblluj on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_iblluj.id
left join organisation.unit_pt organisation_unit_pt_jubfoc on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_jubfoc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_aklrax.id) as lat_callsign
  from master_join master_join_xgqygu
  join service.callsigndetail_pt service_callsigndetail_view_aklrax on master_join_xgqygu.target_id = service_callsigndetail_view_aklrax.id
  where master_join_xgqygu.source_id = service.firefightingservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_wtnalg.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_wtnalg.title AS varchar), '(' || service_radiocommunicationchannel_pt_wtnalg.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_wtnalg.href
  )) as lat_radiocommunication  from master_join master_join_sdhfsc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_wtnalg on master_join_sdhfsc.target_id = service_radiocommunicationchannel_pt_wtnalg.id
  where master_join_sdhfsc.source_id = service.firefightingservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_mayerq
  join shared.contactinformation_view shared_contactinformation_view_ytqtzg on master_join_mayerq.target_id = shared_contactinformation_view_ytqtzg.id
  where master_join_mayerq.source_id = service.firefightingservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_qrebsz.id) as lat_availability
  from master_join master_join_vamxis
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_qrebsz on master_join_vamxis.target_id = service_serviceoperationalstatus_view_qrebsz.id
  where master_join_vamxis.source_id = service.firefightingservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wrqjsi.*) AS annotation
  from master_join master_join_idnggt
  join notes.note_view notes_note_view_wrqjsi on master_join_idnggt.target_id = notes_note_view_wrqjsi.id
  where master_join_idnggt.source_id = service.firefightingservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_gcawmb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_gcawmb.title AS varchar), '(' || airport_heliport_airportheliport_pt_gcawmb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_gcawmb.href
  )) as lat_airportheliport  from master_join master_join_drctxv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gcawmb on master_join_drctxv.target_id = airport_heliport_airportheliport_pt_gcawmb.id
  where master_join_drctxv.source_id = service.firefightingservice_ts.id
) as lat_airportheliport on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['notes.note_view', 'routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    routes_flightconditioncombination_view_nvcjeg.id AS flight,
    lat_regulatedroute.lat_regulatedroute as regulatedroute,
    lat_annotation.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_nvcjeg on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_nvcjeg.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_view_gzttbe.id) as lat_regulatedroute
  from master_join master_join_yqrvpz
  join routes.flightrestrictionroute_pt routes_flightrestrictionroute_view_gzttbe on master_join_yqrvpz.target_id = routes_flightrestrictionroute_view_gzttbe.id
  where master_join_yqrvpz.source_id = routes.flightrestriction_ts.id
) as lat_regulatedroute on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qvjwwq.*) AS annotation
  from master_join master_join_xftyra
  join notes.note_view notes_note_view_qvjwwq on master_join_xftyra.target_id = notes_note_view_qvjwwq.id
  where master_join_xftyra.source_id = routes.flightrestriction_ts.id
) as lat_annotation on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_fwwyku.geom AS extent_geom,
    geometry_elevatedsurface_view_fwwyku.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fwwyku.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fwwyku.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fwwyku.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fwwyku.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fwwyku on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_fwwyku.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_euzvmq.*) AS annotation
  from master_join master_join_bowynt
  join notes.note_view notes_note_view_euzvmq on master_join_bowynt.target_id = notes_note_view_euzvmq.id
  where master_join_bowynt.source_id = airport_heliport.floatingdocksite_ts.id
) as lat_annotation on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_jusizj.geom AS border_geom,
    geometry_curve_view_jusizj.horizontalAccuracy as border_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_jusizj on airspace.geoborder_ts.border_id = geometry_curve_view_jusizj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sczwni.*) AS annotation
  from master_join master_join_mefwsx
  join notes.note_view notes_note_view_sczwni on master_join_mefwsx.target_id = notes_note_view_sczwni.id
  where master_join_mefwsx.source_id = airspace.geoborder_ts.id
) as lat_annotation on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_dwbdeg.geom AS location_geom,
    geometry_elevatedpoint_view_dwbdeg.longitude AS location_longitude,
    geometry_elevatedpoint_view_dwbdeg.latitude AS location_latitude,
    geometry_elevatedpoint_view_dwbdeg.elevation AS location_elevation,
    geometry_elevatedpoint_view_dwbdeg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dwbdeg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dwbdeg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dwbdeg.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dwbdeg on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_dwbdeg.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_keeptw.id) as lat_authority
  from master_join master_join_urhznc
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_keeptw on master_join_urhznc.target_id = navaids_points_authorityfornavaidequipment_view_keeptw.id
  where master_join_urhznc.source_id = navaids_points.glidepath_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_hdckyf.id) as lat_monitoring
  from master_join master_join_pvysni
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_hdckyf on master_join_pvysni.target_id = navaids_points_navaidequipmentmonitoring_view_hdckyf.id
  where master_join_pvysni.source_id = navaids_points.glidepath_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_ybjlaa.id) as lat_availability
  from master_join master_join_toidoe
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_ybjlaa on master_join_toidoe.target_id = navaids_points_navaidoperationalstatus_view_ybjlaa.id
  where master_join_toidoe.source_id = navaids_points.glidepath_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ldknon.*) AS annotation
  from master_join master_join_xttsuy
  join notes.note_view notes_note_view_ldknon on master_join_xttsuy.target_id = notes_note_view_ldknon.id
  where master_join_xttsuy.source_id = navaids_points.glidepath_ts.id
) as lat_annotation on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_ugusgk.geom AS location_geom,
    geometry_elevatedpoint_view_ugusgk.longitude AS location_longitude,
    geometry_elevatedpoint_view_ugusgk.latitude AS location_latitude,
    geometry_elevatedpoint_view_ugusgk.elevation AS location_elevation,
    geometry_elevatedpoint_view_ugusgk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ugusgk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ugusgk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ugusgk.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wfcbsi.title as varchar), '(' || organisation_unit_pt_wfcbsi.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_wfcbsi.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aekiik.title as varchar), '(' || airport_heliport_airportheliport_pt_aekiik.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_aekiik.href AS clientairport_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ugusgk on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ugusgk.id
left join organisation.unit_pt organisation_unit_pt_wfcbsi on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_wfcbsi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aekiik on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_aekiik.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_ahytbd.id) as lat_callsign
  from master_join master_join_vkfepz
  join service.callsigndetail_pt service_callsigndetail_view_ahytbd on master_join_vkfepz.target_id = service_callsigndetail_view_ahytbd.id
  where master_join_vkfepz.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_plkbnv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_plkbnv.title AS varchar), '(' || service_radiocommunicationchannel_pt_plkbnv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_plkbnv.href
  )) as lat_radiocommunication  from master_join master_join_udqrcl
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_plkbnv on master_join_udqrcl.target_id = service_radiocommunicationchannel_pt_plkbnv.id
  where master_join_udqrcl.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_nuczfq
  join shared.contactinformation_view shared_contactinformation_view_gglwed on master_join_nuczfq.target_id = shared_contactinformation_view_gglwed.id
  where master_join_nuczfq.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_wjimet.id) as lat_availability
  from master_join master_join_rcolbh
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_wjimet on master_join_rcolbh.target_id = service_serviceoperationalstatus_view_wjimet.id
  where master_join_rcolbh.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jjwzhx.*) AS annotation
  from master_join master_join_htjyem
  join notes.note_view notes_note_view_jjwzhx on master_join_htjyem.target_id = notes_note_view_jjwzhx.id
  where master_join_htjyem.source_id = service.groundtrafficcontrolservice_ts.id
) as lat_annotation on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_jqcumc.title as varchar), '(' || airport_heliport_guidanceline_pt_jqcumc.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_jqcumc.href AS lightedguidanceline_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jqcumc on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_jqcumc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_wpzitx.id) as lat_element
  from master_join master_join_mpdiol
  join shared.lightelement_pt shared_lightelement_view_wpzitx on master_join_mpdiol.target_id = shared_lightelement_view_wpzitx.id
  where master_join_mpdiol.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_odrtcd.id) as lat_availability
  from master_join master_join_scblqd
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_odrtcd on master_join_scblqd.target_id = airport_heliport_groundlightingavailability_view_odrtcd.id
  where master_join_scblqd.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jdkyqe.*) AS annotation
  from master_join master_join_oybewg
  join notes.note_view notes_note_view_jdkyqe on master_join_oybewg.target_id = notes_note_view_jdkyqe.id
  where master_join_oybewg.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_vqocsa.title as varchar), '(' || airport_heliport_guidanceline_pt_vqocsa.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_vqocsa.href AS markedguidanceline_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_vqocsa on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_vqocsa.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_jxwrmt.id) as lat_element
  from master_join master_join_kumciv
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_jxwrmt on master_join_kumciv.target_id = airport_heliport_markingelement_view_jxwrmt.id
  where master_join_kumciv.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qfdmmj.*) AS annotation
  from master_join master_join_blzsva
  join notes.note_view notes_note_view_qfdmmj on master_join_blzsva.target_id = notes_note_view_qfdmmj.id
  where master_join_blzsva.source_id = airport_heliport.guidancelinemarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_fdmovx.geom AS extent_geom,
    geometry_elevatedcurve_view_fdmovx.elevation AS extent_elevation,
    geometry_elevatedcurve_view_fdmovx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_fdmovx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_fdmovx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_fdmovx.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_connectedtouchdownliftoff.lat_connectedtouchdownliftoff as connectedtouchdownliftoff,
    lat_connectedrunwaycentrelinepoint.lat_connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    lat_connectedapron.lat_connectedapron as connectedapron,
    lat_connectedstand.lat_connectedstand as connectedstand,
    lat_connectedtaxiway.lat_connectedtaxiway as connectedtaxiway,
    lat_annotation.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_fdmovx on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_fdmovx.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_wrbknc.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_wrbknc.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_wrbknc.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_wrbknc.href
  )) as lat_connectedtouchdownliftoff  from master_join master_join_clmmzt
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wrbknc on master_join_clmmzt.target_id = airport_heliport_touchdownliftoff_pt_wrbknc.id
  where master_join_clmmzt.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtouchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_pt_epxlen.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_epxlen.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_epxlen.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_pt_epxlen.href
  )) as lat_connectedrunwaycentrelinepoint  from master_join master_join_ilharo
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_epxlen on master_join_ilharo.target_id = airport_heliport_runwaycentrelinepoint_pt_epxlen.id
  where master_join_ilharo.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedrunwaycentrelinepoint on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_pt_bmwddd.id,
      'title', coalesce(cast(airport_heliport_apron_pt_bmwddd.title AS varchar), '(' || airport_heliport_apron_pt_bmwddd.nilreason[1] || ')'),
      'href', airport_heliport_apron_pt_bmwddd.href
  )) as lat_connectedapron  from master_join master_join_cmqkqw
  join airport_heliport.apron_pt airport_heliport_apron_pt_bmwddd on master_join_cmqkqw.target_id = airport_heliport_apron_pt_bmwddd.id
  where master_join_cmqkqw.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedapron on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_abdcuq.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_abdcuq.title AS varchar), '(' || airport_heliport_aircraftstand_pt_abdcuq.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_abdcuq.href
  )) as lat_connectedstand  from master_join master_join_vxsdrs
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_abdcuq on master_join_vxsdrs.target_id = airport_heliport_aircraftstand_pt_abdcuq.id
  where master_join_vxsdrs.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedstand on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_pt_gqxyvu.id,
      'title', coalesce(cast(airport_heliport_taxiway_pt_gqxyvu.title AS varchar), '(' || airport_heliport_taxiway_pt_gqxyvu.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_pt_gqxyvu.href
  )) as lat_connectedtaxiway  from master_join master_join_ebxreb
  join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_gqxyvu on master_join_ebxreb.target_id = airport_heliport_taxiway_pt_gqxyvu.id
  where master_join_ebxreb.source_id = airport_heliport.guidanceline_ts.id
) as lat_connectedtaxiway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gxkzbm.*) AS annotation
  from master_join master_join_zrtive
  join notes.note_view notes_note_view_gxkzbm on master_join_zrtive.target_id = notes_note_view_gxkzbm.id
  where master_join_zrtive.source_id = airport_heliport.guidanceline_ts.id
) as lat_annotation on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_yxysdc.title as varchar), '(' || holding_unplannedholding_pt_yxysdc.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_yxysdc.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_qhcgur.title as varchar), '(' || holding_holdingpattern_pt_qhcgur.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_qhcgur.href AS assessedholdingpattern_href,
    lat_obstacleassessment.lat_obstacleassessment as obstacleassessment,
    lat_annotation.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_yxysdc on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_yxysdc.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_qhcgur on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_qhcgur.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_jxovsk.id) as lat_obstacleassessment
  from master_join master_join_kfqveb
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_jxovsk on master_join_kfqveb.target_id = shared_obstacleassessmentarea_view_jxovsk.id
  where master_join_kfqveb.source_id = shared.holdingassessment_ts.id
) as lat_obstacleassessment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_anspbu.*) AS annotation
  from master_join master_join_xypiuq
  join notes.note_view notes_note_view_anspbu on master_join_xypiuq.target_id = notes_note_view_anspbu.id
  where master_join_xypiuq.source_id = shared.holdingassessment_ts.id
) as lat_annotation on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['notes.note_view', 'geometry.curve_view', 'holding.holdingpatterndistance_view', 'holding.holdingpatternduration_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    holding_holdingpatternduration_view_yeehct.id AS outboundlegspanendtime,
    holding_holdingpatterndistance_view_szvlsj.id AS outboundlegspanenddistance,
    geometry_curve_view_mdnxer.geom AS extent_geom,
    geometry_curve_view_mdnxer.horizontalAccuracy as extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_yeehct on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_yeehct.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_szvlsj on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_szvlsj.id
left join geometry.curve_view geometry_curve_view_mdnxer on holding.holdingpattern_ts.extent_id = geometry_curve_view_mdnxer.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_clavvh.*) AS annotation
  from master_join master_join_idpmgu
  join notes.note_view notes_note_view_clavvh on master_join_idpmgu.target_id = notes_note_view_clavvh.id
  where master_join_idpmgu.source_id = holding.holdingpattern_ts.id
) as lat_annotation on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_nntcqf.geom AS location_geom,
    geometry_elevatedpoint_view_nntcqf.longitude AS location_longitude,
    geometry_elevatedpoint_view_nntcqf.latitude AS location_latitude,
    geometry_elevatedpoint_view_nntcqf.elevation AS location_elevation,
    geometry_elevatedpoint_view_nntcqf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nntcqf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nntcqf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nntcqf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_lfmumv.title as varchar), '(' || organisation_unit_pt_lfmumv.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_lfmumv.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_navaidbroadcast.lat_navaidbroadcast as navaidbroadcast,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientairport.lat_clientairport as clientairport,
    lat_clientroute.lat_clientroute as clientroute,
    lat_clientholding.lat_clientholding as clientholding,
    lat_clientaerialrefuelling.lat_clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nntcqf on service.informationservice_ts.location_id = geometry_elevatedpoint_view_nntcqf.id
left join organisation.unit_pt organisation_unit_pt_lfmumv on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_lfmumv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_hseuft.id) as lat_callsign
  from master_join master_join_jofite
  join service.callsigndetail_pt service_callsigndetail_view_hseuft on master_join_jofite.target_id = service_callsigndetail_view_hseuft.id
  where master_join_jofite.source_id = service.informationservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_uesfnu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_uesfnu.title AS varchar), '(' || service_radiocommunicationchannel_pt_uesfnu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_uesfnu.href
  )) as lat_radiocommunication  from master_join master_join_qxostt
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_uesfnu on master_join_qxostt.target_id = service_radiocommunicationchannel_pt_uesfnu.id
  where master_join_qxostt.source_id = service.informationservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_vjfrcz
  join shared.contactinformation_view shared_contactinformation_view_orkora on master_join_vjfrcz.target_id = shared_contactinformation_view_orkora.id
  where master_join_vjfrcz.source_id = service.informationservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_wldhlp.id) as lat_availability
  from master_join master_join_mphghz
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_wldhlp on master_join_mphghz.target_id = service_serviceoperationalstatus_view_wldhlp.id
  where master_join_mphghz.source_id = service.informationservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wggpom.*) AS annotation
  from master_join master_join_hjbwnp
  join notes.note_view notes_note_view_wggpom on master_join_hjbwnp.target_id = notes_note_view_wggpom.id
  where master_join_hjbwnp.source_id = service.informationservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_pt_mdpzwv.id,
      'title', coalesce(cast(navaids_points_vor_pt_mdpzwv.title AS varchar), '(' || navaids_points_vor_pt_mdpzwv.nilreason[1] || ')'),
      'href', navaids_points_vor_pt_mdpzwv.href
  )) as lat_navaidbroadcast  from master_join master_join_uzdiik
  join navaids_points.vor_pt navaids_points_vor_pt_mdpzwv on master_join_uzdiik.target_id = navaids_points_vor_pt_mdpzwv.id
  where master_join_uzdiik.source_id = service.informationservice_ts.id
) as lat_navaidbroadcast on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_xofqgm.id,
      'title', coalesce(cast(airspace_airspace_pt_xofqgm.title AS varchar), '(' || airspace_airspace_pt_xofqgm.nilreason[1] || ')'),
      'href', airspace_airspace_pt_xofqgm.href
  )) as lat_clientairspace  from master_join master_join_kixckt
  join airspace.airspace_pt airspace_airspace_pt_xofqgm on master_join_kixckt.target_id = airspace_airspace_pt_xofqgm.id
  where master_join_kixckt.source_id = service.informationservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_bpwpgl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_bpwpgl.title AS varchar), '(' || airport_heliport_airportheliport_pt_bpwpgl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_bpwpgl.href
  )) as lat_clientairport  from master_join master_join_elgbip
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bpwpgl on master_join_elgbip.target_id = airport_heliport_airportheliport_pt_bpwpgl.id
  where master_join_elgbip.source_id = service.informationservice_ts.id
) as lat_clientairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_kwaipg.id) as lat_clientroute
  from master_join master_join_ddopmf
  join routes.routeportion_pt routes_routeportion_view_kwaipg on master_join_ddopmf.target_id = routes_routeportion_view_kwaipg.id
  where master_join_ddopmf.source_id = service.informationservice_ts.id
) as lat_clientroute on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_pt_dcyuup.id,
      'title', coalesce(cast(holding_holdingpattern_pt_dcyuup.title AS varchar), '(' || holding_holdingpattern_pt_dcyuup.nilreason[1] || ')'),
      'href', holding_holdingpattern_pt_dcyuup.href
  )) as lat_clientholding  from master_join master_join_iyzkzx
  join holding.holdingpattern_pt holding_holdingpattern_pt_dcyuup on master_join_iyzkzx.target_id = holding_holdingpattern_pt_dcyuup.id
  where master_join_iyzkzx.source_id = service.informationservice_ts.id
) as lat_clientholding on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_pt_nnsufd.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_pt_nnsufd.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_pt_nnsufd.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_pt_nnsufd.href
  )) as lat_clientaerialrefuelling  from master_join master_join_idkmeb
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_nnsufd on master_join_idkmeb.target_id = aerial_refuelling_aerialrefuelling_pt_nnsufd.id
  where master_join_idkmeb.source_id = service.informationservice_ts.id
) as lat_clientaerialrefuelling on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    navaids_points_terminalsegmentpoint_view_qgrncm.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_bmirdz.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_nruiez.id AS arccentre,
    geometry_curve_view_owjuzm.geom AS trajectory_geom,
    geometry_curve_view_owjuzm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_sibwcc.title as varchar), '(' || navaids_points_angleindication_pt_sibwcc.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_sibwcc.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_bmzgvl.title as varchar), '(' || navaids_points_distanceindication_pt_bmzgvl.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_bmzgvl.href AS distance_href,
    procedure_holdinguse_view_wdigyr.id AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lefiqj.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lefiqj.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_lefiqj.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qgrncm on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_qgrncm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bmirdz on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_bmirdz.id
left join geometry.curve_view geometry_curve_view_owjuzm on procedure.initialleg_ts.trajectory_id = geometry_curve_view_owjuzm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nruiez on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_nruiez.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_sibwcc on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_sibwcc.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_bmzgvl on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_bmzgvl.id
left join procedure.holdinguse_view procedure_holdinguse_view_wdigyr on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_wdigyr.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lefiqj on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_lefiqj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_hmbhse.id) as lat_aircraftcategory
  from master_join master_join_zvhykv
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_hmbhse on master_join_zvhykv.target_id = shared_aircraftcharacteristic_view_hmbhse.id
  where master_join_zvhykv.source_id = procedure.initialleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_vbfxgw.id) as lat_designsurface
  from master_join master_join_bjnrlb
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_vbfxgw on master_join_bjnrlb.target_id = shared_obstacleassessmentarea_view_vbfxgw.id
  where master_join_bjnrlb.source_id = procedure.initialleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_uosypa.*) AS annotation
  from master_join master_join_biqedg
  join notes.note_view notes_note_view_uosypa on master_join_biqedg.target_id = notes_note_view_uosypa.id
  where master_join_biqedg.source_id = procedure.initialleg_ts.id
) as lat_annotation on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.finalprofile_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'procedure.missedapproachgroup_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_pjjthp.title as varchar), '(' || navaids_points_navaid_pt_pjjthp.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_pjjthp.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ofuojq.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ofuojq.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ofuojq.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_iyevij.title as varchar), '(' || surveillance_radarsystem_pt_iyevij.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_iyevij.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_fbwlaq.title as varchar), '(' || procedure_safealtitudearea_pt_fbwlaq.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_fbwlaq.href AS safealtitude_href,
    procedure_landingtakeoffareacollection_view_bffzuq.id AS landing,
    procedure_finalprofile_view_tzqkbx.id AS finalprofile,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation,
    lat_missedinstruction.lat_missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pjjthp on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_pjjthp.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ofuojq on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ofuojq.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_iyevij on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_iyevij.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_fbwlaq on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_fbwlaq.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_bffzuq on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_bffzuq.id
left join procedure.finalprofile_view procedure_finalprofile_view_tzqkbx on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_tzqkbx.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_ehjbof.id) as lat_availability
  from master_join master_join_vwgczf
  join procedure.procedureavailability_pt procedure_procedureavailability_view_ehjbof on master_join_vwgczf.target_id = procedure_procedureavailability_view_ehjbof.id
  where master_join_vwgczf.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_trwaxl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_trwaxl.title AS varchar), '(' || airport_heliport_airportheliport_pt_trwaxl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_trwaxl.href
  )) as lat_airportheliport  from master_join master_join_usnqhq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_trwaxl on master_join_usnqhq.target_id = airport_heliport_airportheliport_pt_trwaxl.id
  where master_join_usnqhq.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_pplzud.id) as lat_aircraftcharacteristic
  from master_join master_join_oqpsho
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_pplzud on master_join_oqpsho.target_id = shared_aircraftcharacteristic_view_pplzud.id
  where master_join_oqpsho.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_rwgutr.id) as lat_flighttransition
  from master_join master_join_ppublt
  join procedure.proceduretransition_pt procedure_proceduretransition_view_rwgutr on master_join_ppublt.target_id = procedure_proceduretransition_view_rwgutr.id
  where master_join_ppublt.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_evucze.*) AS annotation
  from master_join master_join_xvtxkw
  join notes.note_view notes_note_view_evucze on master_join_xvtxkw.target_id = notes_note_view_evucze.id
  where master_join_xvtxkw.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_view_sznizn.id) as lat_missedinstruction
  from master_join master_join_iinbxz
  join procedure.missedapproachgroup_pt procedure_missedapproachgroup_view_sznizn on master_join_iinbxz.target_id = procedure_missedapproachgroup_view_sznizn.id
  where master_join_iinbxz.source_id = procedure.instrumentapproachprocedure_ts.id
) as lat_missedinstruction on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    navaids_points_terminalsegmentpoint_view_zgylpj.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_pxjuge.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_mlvxka.id AS arccentre,
    geometry_curve_view_qibicc.geom AS trajectory_geom,
    geometry_curve_view_qibicc.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_mohnfk.title as varchar), '(' || navaids_points_angleindication_pt_mohnfk.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_mohnfk.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_mhvnoc.title as varchar), '(' || navaids_points_distanceindication_pt_mhvnoc.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_mhvnoc.href AS distance_href,
    procedure_holdinguse_view_nezrbp.id AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_fojret.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_fojret.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_fojret.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zgylpj on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_zgylpj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pxjuge on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_pxjuge.id
left join geometry.curve_view geometry_curve_view_qibicc on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_qibicc.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mlvxka on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_mlvxka.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mohnfk on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_mohnfk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_mhvnoc on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_mhvnoc.id
left join procedure.holdinguse_view procedure_holdinguse_view_nezrbp on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_nezrbp.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_fojret on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_fojret.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_tscrfu.id) as lat_aircraftcategory
  from master_join master_join_ibcmry
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_tscrfu on master_join_ibcmry.target_id = shared_aircraftcharacteristic_view_tscrfu.id
  where master_join_ibcmry.source_id = procedure.intermediateleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_nqwntc.id) as lat_designsurface
  from master_join master_join_xrcqjc
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_nqwntc on master_join_xrcqjc.target_id = shared_obstacleassessmentarea_view_nqwntc.id
  where master_join_xrcqjc.source_id = procedure.intermediateleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_szvrvk.*) AS annotation
  from master_join master_join_khngzn
  join notes.note_view notes_note_view_szvrvk on master_join_khngzn.target_id = notes_note_view_szvrvk.id
  where master_join_khngzn.source_id = procedure.intermediateleg_ts.id
) as lat_annotation on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_glmacm.geom AS location_geom,
    geometry_elevatedpoint_view_glmacm.longitude AS location_longitude,
    geometry_elevatedpoint_view_glmacm.latitude AS location_latitude,
    geometry_elevatedpoint_view_glmacm.elevation AS location_elevation,
    geometry_elevatedpoint_view_glmacm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_glmacm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_glmacm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_glmacm.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_glmacm on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_glmacm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_ouscrc.id) as lat_authority
  from master_join master_join_ujailp
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_ouscrc on master_join_ujailp.target_id = navaids_points_authorityfornavaidequipment_view_ouscrc.id
  where master_join_ujailp.source_id = navaids_points.localizer_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_hpoctr.id) as lat_monitoring
  from master_join master_join_mnwsbu
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_hpoctr on master_join_mnwsbu.target_id = navaids_points_navaidequipmentmonitoring_view_hpoctr.id
  where master_join_mnwsbu.source_id = navaids_points.localizer_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_pomqwd.id) as lat_availability
  from master_join master_join_ixxawa
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_pomqwd on master_join_ixxawa.target_id = navaids_points_navaidoperationalstatus_view_pomqwd.id
  where master_join_ixxawa.source_id = navaids_points.localizer_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kpzezc.*) AS annotation
  from master_join master_join_enrfet
  join notes.note_view notes_note_view_kpzezc on master_join_enrfet.target_id = notes_note_view_kpzezc.id
  where master_join_enrfet.source_id = navaids_points.localizer_ts.id
) as lat_annotation on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_yqauol.geom AS location_geom,
    geometry_elevatedpoint_view_yqauol.longitude AS location_longitude,
    geometry_elevatedpoint_view_yqauol.latitude AS location_latitude,
    geometry_elevatedpoint_view_yqauol.elevation AS location_elevation,
    geometry_elevatedpoint_view_yqauol.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yqauol.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yqauol.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yqauol.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yqauol on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_yqauol.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_ncspyc.id) as lat_authority
  from master_join master_join_ugamvo
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_ncspyc on master_join_ugamvo.target_id = navaids_points_authorityfornavaidequipment_view_ncspyc.id
  where master_join_ugamvo.source_id = navaids_points.markerbeacon_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_pqcyhu.id) as lat_monitoring
  from master_join master_join_rbpwkm
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_pqcyhu on master_join_rbpwkm.target_id = navaids_points_navaidequipmentmonitoring_view_pqcyhu.id
  where master_join_rbpwkm.source_id = navaids_points.markerbeacon_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_yfdniv.id) as lat_availability
  from master_join master_join_xbbpel
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_yfdniv on master_join_xbbpel.target_id = navaids_points_navaidoperationalstatus_view_yfdniv.id
  where master_join_xbbpel.source_id = navaids_points.markerbeacon_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pmhonl.*) AS annotation
  from master_join master_join_zzohob
  join notes.note_view notes_note_view_pmhonl on master_join_zzohob.target_id = notes_note_view_pmhonl.id
  where master_join_zzohob.source_id = navaids_points.markerbeacon_ts.id
) as lat_annotation on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_rswcls.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_rswcls.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_rswcls.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_bpfwjl.geom AS location_geom,
    geometry_elevatedpoint_view_bpfwjl.longitude AS location_longitude,
    geometry_elevatedpoint_view_bpfwjl.latitude AS location_latitude,
    geometry_elevatedpoint_view_bpfwjl.elevation AS location_elevation,
    geometry_elevatedpoint_view_bpfwjl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bpfwjl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bpfwjl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bpfwjl.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_rswcls on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_rswcls.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bpfwjl on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_bpfwjl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dqkibr.*) AS annotation
  from master_join master_join_xgjvwy
  join notes.note_view notes_note_view_dqkibr on master_join_xgjvwy.target_id = notes_note_view_dqkibr.id
  where master_join_xgjvwy.source_id = airport_heliport.markingbuoy_ts.id
) as lat_annotation on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    navaids_points_terminalsegmentpoint_view_orrtzy.id AS startpoint,
    navaids_points_terminalsegmentpoint_view_sylatc.id AS endpoint,
    navaids_points_terminalsegmentpoint_view_iwaenn.id AS arccentre,
    geometry_curve_view_lqnrjc.geom AS trajectory_geom,
    geometry_curve_view_lqnrjc.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_sbdzaq.title as varchar), '(' || navaids_points_angleindication_pt_sbdzaq.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_sbdzaq.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_inteby.title as varchar), '(' || navaids_points_distanceindication_pt_inteby.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_inteby.href AS distance_href,
    procedure_holdinguse_view_kxoafy.id AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_qcztoz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_qcztoz.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_qcztoz.href AS approach_href,
    lat_aircraftcategory.lat_aircraftcategory as aircraftcategory,
    lat_designsurface.lat_designsurface as designsurface,
    lat_annotation.annotation as annotation,
    lat_condition.lat_condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_orrtzy on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_orrtzy.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sylatc on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_sylatc.id
left join geometry.curve_view geometry_curve_view_lqnrjc on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_lqnrjc.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_iwaenn on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_iwaenn.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_sbdzaq on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_sbdzaq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_inteby on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_inteby.id
left join procedure.holdinguse_view procedure_holdinguse_view_kxoafy on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_kxoafy.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_qcztoz on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_qcztoz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_bjobbe.id) as lat_aircraftcategory
  from master_join master_join_qrwhis
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_bjobbe on master_join_qrwhis.target_id = shared_aircraftcharacteristic_view_bjobbe.id
  where master_join_qrwhis.source_id = procedure.missedapproachleg_ts.id
) as lat_aircraftcategory on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_view_cdykur.id) as lat_designsurface
  from master_join master_join_eucczr
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_view_cdykur on master_join_eucczr.target_id = shared_obstacleassessmentarea_view_cdykur.id
  where master_join_eucczr.source_id = procedure.missedapproachleg_ts.id
) as lat_designsurface on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_cheobb.*) AS annotation
  from master_join master_join_daukkf
  join notes.note_view notes_note_view_cheobb on master_join_daukkf.target_id = notes_note_view_cheobb.id
  where master_join_daukkf.source_id = procedure.missedapproachleg_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_view_qyaqij.id) as lat_condition
  from master_join master_join_pjjloq
  join procedure.approachcondition_pt procedure_approachcondition_view_qyaqij on master_join_pjjloq.target_id = procedure_approachcondition_view_qyaqij.id
  where master_join_pjjloq.source_id = procedure.missedapproachleg_ts.id
) as lat_condition on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.navaidcomponent_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_kjrphi.geom AS location_geom,
    geometry_elevatedpoint_view_kjrphi.longitude AS location_longitude,
    geometry_elevatedpoint_view_kjrphi.latitude AS location_latitude,
    geometry_elevatedpoint_view_kjrphi.elevation AS location_elevation,
    geometry_elevatedpoint_view_kjrphi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kjrphi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kjrphi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kjrphi.horizontalAccuracy AS location_horizontalaccuracy,
    lat_touchdownliftoff.lat_touchdownliftoff as touchdownliftoff,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_runwaydirection.lat_runwaydirection as runwaydirection,
    lat_servedairport.lat_servedairport as servedairport,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kjrphi on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_kjrphi.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_pt_qzsndl.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_pt_qzsndl.title AS varchar), '(' || airport_heliport_touchdownliftoff_pt_qzsndl.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_pt_qzsndl.href
  )) as lat_touchdownliftoff  from master_join master_join_oaefyk
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qzsndl on master_join_oaefyk.target_id = airport_heliport_touchdownliftoff_pt_qzsndl.id
  where master_join_oaefyk.source_id = navaids_points.navaid_ts.id
) as lat_touchdownliftoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_view_jigbuj.id) as lat_navaidequipment
  from master_join master_join_bckgbj
  join navaids_points.navaidcomponent_pt navaids_points_navaidcomponent_view_jigbuj on master_join_bckgbj.target_id = navaids_points_navaidcomponent_view_jigbuj.id
  where master_join_bckgbj.source_id = navaids_points.navaid_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_aadijr.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_aadijr.title AS varchar), '(' || airport_heliport_runwaydirection_pt_aadijr.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_aadijr.href
  )) as lat_runwaydirection  from master_join master_join_lkmeec
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_aadijr on master_join_lkmeec.target_id = airport_heliport_runwaydirection_pt_aadijr.id
  where master_join_lkmeec.source_id = navaids_points.navaid_ts.id
) as lat_runwaydirection on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_gzmebj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_gzmebj.title AS varchar), '(' || airport_heliport_airportheliport_pt_gzmebj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_gzmebj.href
  )) as lat_servedairport  from master_join master_join_nlooeq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gzmebj on master_join_nlooeq.target_id = airport_heliport_airportheliport_pt_gzmebj.id
  where master_join_nlooeq.source_id = navaids_points.navaid_ts.id
) as lat_servedairport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_nvxvxt.id) as lat_availability
  from master_join master_join_zplogj
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_nvxvxt on master_join_zplogj.target_id = navaids_points_navaidoperationalstatus_view_nvxvxt.id
  where master_join_zplogj.source_id = navaids_points.navaid_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pqcdej.*) AS annotation
  from master_join master_join_wcdbns
  join notes.note_view notes_note_view_pqcdej on master_join_wcdbns.target_id = notes_note_view_pqcdej.id
  where master_join_wcdbns.source_id = navaids_points.navaid_ts.id
) as lat_annotation on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.circlesector_view', 'shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    shared_obstacleassessmentarea_view_cdekvy.id AS designsurface,
    shared_circlesector_view_kmhuiw.id AS sectordefinition,
    lat_annotation.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_cdekvy on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_cdekvy.id
left join shared.circlesector_view shared_circlesector_view_kmhuiw on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_kmhuiw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fdeaoe.*) AS annotation
  from master_join master_join_isfbyh
  join notes.note_view notes_note_view_fdeaoe on master_join_isfbyh.target_id = notes_note_view_fdeaoe.id
  where master_join_isfbyh.source_id = procedure.navigationarearestriction_ts.id
) as lat_annotation on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['geometry.point_view', 'notes.note_view', 'procedure.navigationareasector_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_vxdzkj.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_vxdzkj.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_vxdzkj.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vikpsr.title as varchar), '(' || navaids_points_designatedpoint_pt_vikpsr.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vikpsr.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ufshjw.title as varchar), '(' || navaids_points_navaid_pt_ufshjw.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_ufshjw.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_srkoko.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_srkoko.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_srkoko.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kaofng.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kaofng.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kaofng.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zqmenp.title as varchar), '(' || airport_heliport_airportheliport_pt_zqmenp.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_zqmenp.href AS centrepointairportreferencepoint_href,
    geometry_point_view_cuybsc.geom AS centrepointposition_geom,
    geometry_point_view_cuybsc.longitude AS centrepointposition_longitude,
    geometry_point_view_cuybsc.latitude AS centrepointposition_latitude,
    geometry_point_view_cuybsc.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_vxdzkj on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_vxdzkj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vikpsr on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vikpsr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ufshjw on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_ufshjw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_srkoko on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_srkoko.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kaofng on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kaofng.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqmenp on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zqmenp.id
left join geometry.point_view geometry_point_view_cuybsc on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_cuybsc.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_view_ydzfaf.id) as lat_sector
  from master_join master_join_wvxvoe
  join procedure.navigationareasector_pt procedure_navigationareasector_view_ydzfaf on master_join_wvxvoe.target_id = procedure_navigationareasector_view_ydzfaf.id
  where master_join_wvxvoe.source_id = procedure.navigationarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ybmfag.*) AS annotation
  from master_join master_join_uwtdvp
  join notes.note_view notes_note_view_ybmfag on master_join_uwtdvp.target_id = notes_note_view_ybmfag.id
  where master_join_uwtdvp.source_id = procedure.navigationarea_ts.id
) as lat_annotation on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_bwwnyf.geom AS location_geom,
    geometry_elevatedpoint_view_bwwnyf.longitude AS location_longitude,
    geometry_elevatedpoint_view_bwwnyf.latitude AS location_latitude,
    geometry_elevatedpoint_view_bwwnyf.elevation AS location_elevation,
    geometry_elevatedpoint_view_bwwnyf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bwwnyf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bwwnyf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bwwnyf.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bwwnyf on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_bwwnyf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_zrxgoa.id) as lat_authority
  from master_join master_join_icnbyu
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_zrxgoa on master_join_icnbyu.target_id = navaids_points_authorityfornavaidequipment_view_zrxgoa.id
  where master_join_icnbyu.source_id = navaids_points.ndb_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_wctrfi.id) as lat_monitoring
  from master_join master_join_swvftb
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_wctrfi on master_join_swvftb.target_id = navaids_points_navaidequipmentmonitoring_view_wctrfi.id
  where master_join_swvftb.source_id = navaids_points.ndb_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_zkxwew.id) as lat_availability
  from master_join master_join_cnepor
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_zkxwew on master_join_cnepor.target_id = navaids_points_navaidoperationalstatus_view_zkxwew.id
  where master_join_cnepor.source_id = navaids_points.ndb_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hiqsdy.*) AS annotation
  from master_join master_join_sywcct
  join notes.note_view notes_note_view_hiqsdy on master_join_sywcct.target_id = notes_note_view_hiqsdy.id
  where master_join_sywcct.source_id = navaids_points.ndb_ts.id
) as lat_annotation on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_yymxkc.title as varchar), '(' || airport_heliport_airportheliport_pt_yymxkc.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_yymxkc.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_xjvexr.geom AS extent_geom,
    geometry_elevatedsurface_view_xjvexr.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xjvexr.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xjvexr.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xjvexr.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xjvexr.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yymxkc on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_yymxkc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xjvexr on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_xjvexr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qncnux.*) AS annotation
  from master_join master_join_eljiol
  join notes.note_view notes_note_view_qncnux on master_join_eljiol.target_id = notes_note_view_qncnux.id
  where master_join_eljiol.source_id = airport_heliport.nonmovementarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_iqzabp.title as varchar), '(' || airport_heliport_airportheliport_pt_iqzabp.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_iqzabp.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_kvgmvf.title as varchar), '(' || airport_heliport_runwaydirection_pt_kvgmvf.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_kvgmvf.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_butuep.title as varchar), '(' || organisation_organisationauthority_pt_butuep.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_butuep.href AS referenceownerorganisation_href,
    geometry_surface_view_uyrnfy.geom AS surfaceextent_geom,
    geometry_surface_view_uyrnfy.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    lat_obstacle.lat_obstacle as obstacle,
    lat_annotation.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iqzabp on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_iqzabp.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_kvgmvf on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_kvgmvf.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_butuep on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_butuep.id
left join geometry.surface_view geometry_surface_view_uyrnfy on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_uyrnfy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_pt_vcgirz.id,
      'title', coalesce(cast(obstacles_verticalstructure_pt_vcgirz.title AS varchar), '(' || obstacles_verticalstructure_pt_vcgirz.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_pt_vcgirz.href
  )) as lat_obstacle  from master_join master_join_semipj
  join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_vcgirz on master_join_semipj.target_id = obstacles_verticalstructure_pt_vcgirz.id
  where master_join_semipj.source_id = obstacles.obstaclearea_ts.id
) as lat_obstacle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zvtthd.*) AS annotation
  from master_join master_join_aeowdp
  join notes.note_view notes_note_view_zvtthd on master_join_aeowdp.target_id = notes_note_view_zvtthd.id
  where master_join_aeowdp.source_id = obstacles.obstaclearea_ts.id
) as lat_annotation on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    lat_relatedorganisationauthority.lat_relatedorganisationauthority as relatedorganisationauthority,
    lat_annotation.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_tyftyd
  join shared.contactinformation_view shared_contactinformation_view_xjzddr on master_join_tyftyd.target_id = shared_contactinformation_view_xjzddr.id
  where master_join_tyftyd.source_id = organisation.organisationauthority_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_view_fdslvt.id) as lat_relatedorganisationauthority
  from master_join master_join_gfjsci
  join organisation.organisationauthorityassociation_pt organisation_organisationauthorityassociation_view_fdslvt on master_join_gfjsci.target_id = organisation_organisationauthorityassociation_view_fdslvt.id
  where master_join_gfjsci.source_id = organisation.organisationauthority_ts.id
) as lat_relatedorganisationauthority on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xkvcnp.*) AS annotation
  from master_join master_join_vcelfw
  join notes.note_view notes_note_view_xkvcnp on master_join_vcelfw.target_id = notes_note_view_xkvcnp.id
  where master_join_vcelfw.source_id = organisation.organisationauthority_ts.id
) as lat_annotation on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_syszjo.geom AS extent_geom,
    geometry_elevatedsurface_view_syszjo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_syszjo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_syszjo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_syszjo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_syszjo.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedstand.lat_associatedstand as associatedstand,
    lat_annotation.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_syszjo on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_syszjo.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_gylxnb.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_gylxnb.title AS varchar), '(' || airport_heliport_aircraftstand_pt_gylxnb.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_gylxnb.href
  )) as lat_associatedstand  from master_join master_join_lnfxxc
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_gylxnb on master_join_lnfxxc.target_id = airport_heliport_aircraftstand_pt_gylxnb.id
  where master_join_lnfxxc.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_associatedstand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nvodsw.*) AS annotation
  from master_join master_join_mudlut
  join notes.note_view notes_note_view_nvodsw on master_join_mudlut.target_id = notes_note_view_nvodsw.id
  where master_join_mudlut.source_id = airport_heliport.passengerloadingbridge_ts.id
) as lat_annotation on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_cdwacj.geom AS location_geom,
    geometry_elevatedpoint_view_cdwacj.longitude AS location_longitude,
    geometry_elevatedpoint_view_cdwacj.latitude AS location_latitude,
    geometry_elevatedpoint_view_cdwacj.elevation AS location_elevation,
    geometry_elevatedpoint_view_cdwacj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cdwacj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cdwacj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cdwacj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_cyfdnw.title as varchar), '(' || organisation_unit_pt_cyfdnw.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_cyfdnw.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_airportheliport.lat_airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cdwacj on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_cdwacj.id
left join organisation.unit_pt organisation_unit_pt_cyfdnw on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_cyfdnw.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_affack.id) as lat_callsign
  from master_join master_join_mrdlbt
  join service.callsigndetail_pt service_callsigndetail_view_affack on master_join_mrdlbt.target_id = service_callsigndetail_view_affack.id
  where master_join_mrdlbt.source_id = service.passengerservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_urdapw.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_urdapw.title AS varchar), '(' || service_radiocommunicationchannel_pt_urdapw.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_urdapw.href
  )) as lat_radiocommunication  from master_join master_join_ietrag
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_urdapw on master_join_ietrag.target_id = service_radiocommunicationchannel_pt_urdapw.id
  where master_join_ietrag.source_id = service.passengerservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_dnoupd
  join shared.contactinformation_view shared_contactinformation_view_roimxq on master_join_dnoupd.target_id = shared_contactinformation_view_roimxq.id
  where master_join_dnoupd.source_id = service.passengerservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_bwdojj.id) as lat_availability
  from master_join master_join_omlcgl
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_bwdojj on master_join_omlcgl.target_id = service_serviceoperationalstatus_view_bwdojj.id
  where master_join_omlcgl.source_id = service.passengerservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_knmsel.*) AS annotation
  from master_join master_join_vlerau
  join notes.note_view notes_note_view_knmsel on master_join_vlerau.target_id = notes_note_view_knmsel.id
  where master_join_vlerau.source_id = service.passengerservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_yuxmmn.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_yuxmmn.title AS varchar), '(' || airport_heliport_airportheliport_pt_yuxmmn.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_yuxmmn.href
  )) as lat_airportheliport  from master_join master_join_vmsmce
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yuxmmn on master_join_vmsmce.target_id = airport_heliport_airportheliport_pt_yuxmmn.id
  where master_join_vmsmce.source_id = service.passengerservice_ts.id
) as lat_airportheliport on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    lat_controlledlightintensity.lat_controlledlightintensity as controlledlightintensity,
    lat_annotation.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_view_kalmha.id) as lat_controlledlightintensity
  from master_join master_join_xaomzo
  join airport_heliport.lightactivation_pt airport_heliport_lightactivation_view_kalmha on master_join_xaomzo.target_id = airport_heliport_lightactivation_view_kalmha.id
  where master_join_xaomzo.source_id = service.pilotcontrolledlighting_ts.id
) as lat_controlledlightintensity on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_lxnnuo.*) AS annotation
  from master_join master_join_mgrilk
  join notes.note_view notes_note_view_lxnnuo on master_join_mgrilk.target_id = notes_note_view_lxnnuo.id
  where master_join_mgrilk.source_id = service.pilotcontrolledlighting_ts.id
) as lat_annotation on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.reflector_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_fgsxtw.geom AS location_geom,
    geometry_elevatedpoint_view_fgsxtw.longitude AS location_longitude,
    geometry_elevatedpoint_view_fgsxtw.latitude AS location_latitude,
    geometry_elevatedpoint_view_fgsxtw.elevation AS location_elevation,
    geometry_elevatedpoint_view_fgsxtw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fgsxtw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fgsxtw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fgsxtw.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_reflector.lat_reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fgsxtw on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_fgsxtw.id
left join lateral(
  select
  from master_join master_join_howjcf
  join shared.contactinformation_view shared_contactinformation_view_puflnv on master_join_howjcf.target_id = shared_contactinformation_view_puflnv.id
  where master_join_howjcf.source_id = surveillance.precisionapproachradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_kvgsrg.*) AS annotation
  from master_join master_join_ivvcua
  join notes.note_view notes_note_view_kvgsrg on master_join_ivvcua.target_id = notes_note_view_kvgsrg.id
  where master_join_ivvcua.source_id = surveillance.precisionapproachradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_view_ynykzz.id) as lat_reflector
  from master_join master_join_auvjwr
  join surveillance.reflector_pt surveillance_reflector_view_ynykzz on master_join_auvjwr.target_id = surveillance_reflector_view_ynykzz.id
  where master_join_auvjwr.source_id = surveillance.precisionapproachradar_ts.id
) as lat_reflector on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_nfqfjc.geom AS location_geom,
    geometry_elevatedpoint_view_nfqfjc.longitude AS location_longitude,
    geometry_elevatedpoint_view_nfqfjc.latitude AS location_latitude,
    geometry_elevatedpoint_view_nfqfjc.elevation AS location_elevation,
    geometry_elevatedpoint_view_nfqfjc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nfqfjc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nfqfjc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nfqfjc.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nfqfjc on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_nfqfjc.id
left join lateral(
  select
  from master_join master_join_icrqzp
  join shared.contactinformation_view shared_contactinformation_view_aukqrk on master_join_icrqzp.target_id = shared_contactinformation_view_aukqrk.id
  where master_join_icrqzp.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xswwxh.*) AS annotation
  from master_join master_join_chfupq
  join notes.note_view notes_note_view_xswwxh on master_join_chfupq.target_id = notes_note_view_xswwxh.id
  where master_join_chfupq.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_dkrqsq.id) as lat_groundstation
  from master_join master_join_fbnyja
  join surveillance.surveillancegroundstation_pt surveillance_surveillancegroundstation_view_dkrqsq on master_join_fbnyja.target_id = surveillance_surveillancegroundstation_view_dkrqsq.id
  where master_join_fbnyja.source_id = surveillance.primarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_lvmpwc.title as varchar), '(' || navaids_points_dme_pt_lvmpwc.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_lvmpwc.href AS dme_href,
    lat_annotation.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_lvmpwc on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_lvmpwc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yvvetn.*) AS annotation
  from master_join master_join_cbdovp
  join notes.note_view notes_note_view_yvvetn on master_join_cbdovp.target_id = notes_note_view_yvvetn.id
  where master_join_cbdovp.source_id = procedure.proceduredme_ts.id
) as lat_annotation on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.radarcomponent_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_dqusuv.title as varchar), '(' || airport_heliport_airportheliport_pt_dqusuv.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_dqusuv.href AS airportheliport_href,
    geometry_elevatedpoint_view_fwhksz.geom AS location_geom,
    geometry_elevatedpoint_view_fwhksz.longitude AS location_longitude,
    geometry_elevatedpoint_view_fwhksz.latitude AS location_latitude,
    geometry_elevatedpoint_view_fwhksz.elevation AS location_elevation,
    geometry_elevatedpoint_view_fwhksz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fwhksz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fwhksz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fwhksz.horizontalAccuracy AS location_horizontalaccuracy,
    lat_radarequipment.lat_radarequipment as radarequipment,
    lat_office.lat_office as office,
    lat_parrunway.lat_parrunway as parrunway,
    lat_annotation.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dqusuv on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_dqusuv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fwhksz on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_fwhksz.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_view_waqumg.id) as lat_radarequipment
  from master_join master_join_hczqzl
  join surveillance.radarcomponent_pt surveillance_radarcomponent_view_waqumg on master_join_hczqzl.target_id = surveillance_radarcomponent_view_waqumg.id
  where master_join_hczqzl.source_id = surveillance.radarsystem_ts.id
) as lat_radarequipment on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_zvdjkl.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_zvdjkl.title AS varchar), '(' || organisation_organisationauthority_pt_zvdjkl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_zvdjkl.href
  )) as lat_office  from master_join master_join_hjbltp
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_zvdjkl on master_join_hjbltp.target_id = organisation_organisationauthority_pt_zvdjkl.id
  where master_join_hjbltp.source_id = surveillance.radarsystem_ts.id
) as lat_office on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_sirtkj.id,
      'title', coalesce(cast(airport_heliport_runway_pt_sirtkj.title AS varchar), '(' || airport_heliport_runway_pt_sirtkj.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_sirtkj.href
  )) as lat_parrunway  from master_join master_join_uajenx
  join airport_heliport.runway_pt airport_heliport_runway_pt_sirtkj on master_join_uajenx.target_id = airport_heliport_runway_pt_sirtkj.id
  where master_join_uajenx.source_id = surveillance.radarsystem_ts.id
) as lat_parrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_apddks.*) AS annotation
  from master_join master_join_lowmof
  join notes.note_view notes_note_view_apddks on master_join_lowmof.target_id = notes_note_view_apddks.id
  where master_join_lowmof.source_id = surveillance.radarsystem_ts.id
) as lat_annotation on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    lat_location.geom as location_geom,
    lat_location.attr as location,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_view_uamdty.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_view_uamdty.id,
      'longitude', geometry_elevatedpoint_view_uamdty.longitude,
      'latitude', geometry_elevatedpoint_view_uamdty.latitude,
      'elevation', geometry_elevatedpoint_view_uamdty.elevation,
      'geoidUndulation', geometry_elevatedpoint_view_uamdty.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_view_uamdty.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_view_uamdty.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_view_uamdty.horizontalAccuracy
    )) AS attr
  from master_join master_join_hkudrj
  join geometry.elevatedpoint_view geometry_elevatedpoint_view_uamdty on master_join_hkudrj.target_id = geometry_elevatedpoint_view_uamdty.id
  where master_join_hkudrj.source_id = service.radiocommunicationchannel_ts.id
) as lat_location on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_view_rqpgrf.id) as lat_availability
  from master_join master_join_wbsgfz
  join service.radiocommunicationoperationalstatus_pt service_radiocommunicationoperationalstatus_view_rqpgrf on master_join_wbsgfz.target_id = service_radiocommunicationoperationalstatus_view_rqpgrf.id
  where master_join_wbsgfz.source_id = service.radiocommunicationchannel_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nlqdmk.*) AS annotation
  from master_join master_join_fqntdd
  join notes.note_view notes_note_view_nlqdmk on master_join_fqntdd.target_id = notes_note_view_nlqdmk.id
  where master_join_fqntdd.source_id = service.radiocommunicationchannel_ts.id
) as lat_annotation on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_jpjhin.title as varchar), '(' || service_radiocommunicationchannel_pt_jpjhin.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_jpjhin.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_gyasuf.title as varchar), '(' || navaids_points_specialnavigationstation_pt_gyasuf.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_gyasuf.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_ebllwj.title as varchar), '(' || surveillance_precisionapproachradar_pt_ebllwj.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_ebllwj.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_eynjow.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_eynjow.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_eynjow.href AS equipmentradar_href,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jpjhin on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_jpjhin.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_gyasuf on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_gyasuf.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_ebllwj on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_ebllwj.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_eynjow on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_eynjow.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_view_idxoaw.id) as lat_sector
  from master_join master_join_ppmuvh
  join shared.circlesector_pt shared_circlesector_view_idxoaw on master_join_ppmuvh.target_id = shared_circlesector_view_idxoaw.id
  where master_join_ppmuvh.source_id = shared.radiofrequencyarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
  from master_join master_join_ziwppl
  join geometry.surface_view geometry_surface_view_uvaagj on master_join_ziwppl.target_id = geometry_surface_view_uvaagj.id
  where master_join_ziwppl.source_id = shared.radiofrequencyarea_ts.id
) as lat_extent on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eqzhyu.*) AS annotation
  from master_join master_join_gctmqj
  join notes.note_view notes_note_view_eqzhyu on master_join_gctmqj.target_id = notes_note_view_eqzhyu.id
  where master_join_gctmqj.source_id = shared.radiofrequencyarea_ts.id
) as lat_annotation on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_myhdna.title as varchar), '(' || airport_heliport_airportheliport_pt_myhdna.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_myhdna.href AS associatedairport_href,
    airport_heliport_surfacecharacteristics_view_bkvusb.id AS surfaceproperties,
    geometry_elevatedsurface_view_bdfgvj.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_bdfgvj.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_bdfgvj.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_bdfgvj.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_bdfgvj.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_bdfgvj.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    lat_accessiblestand.lat_accessiblestand as accessiblestand,
    lat_annotation.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_myhdna on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_myhdna.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bkvusb on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bkvusb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bdfgvj on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_bdfgvj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_pt_grlpxw.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_pt_grlpxw.title AS varchar), '(' || airport_heliport_aircraftstand_pt_grlpxw.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_pt_grlpxw.href
  )) as lat_accessiblestand  from master_join master_join_fbefov
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_grlpxw on master_join_fbefov.target_id = airport_heliport_aircraftstand_pt_grlpxw.id
  where master_join_fbefov.source_id = airport_heliport.road_ts.id
) as lat_accessiblestand on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pyaipo.*) AS annotation
  from master_join master_join_bugghy
  join notes.note_view notes_note_view_pyaipo on master_join_bugghy.target_id = notes_note_view_pyaipo.id
  where master_join_bugghy.source_id = airport_heliport.road_ts.id
) as lat_annotation on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_gbxgvt.title as varchar), '(' || navaids_points_dme_pt_gbxgvt.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_gbxgvt.href AS referenceddme_href,
    routes_routeportion_view_wpttzt.id AS applicablerouteportion,
    lat_annotation.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_gbxgvt on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_gbxgvt.id
left join routes.routeportion_view routes_routeportion_view_wpttzt on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_wpttzt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_usaitd.*) AS annotation
  from master_join master_join_rxtcrt
  join notes.note_view notes_note_view_usaitd on master_join_rxtcrt.target_id = notes_note_view_usaitd.id
  where master_join_rxtcrt.source_id = routes.routedme_ts.id
) as lat_annotation on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['navaids_points.enroutesegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    navaids_points_enroutesegmentpoint_view_qsrkcd.id AS start,
    navaids_points_enroutesegmentpoint_view_taibzd.id AS end,
    coalesce(cast(routes_route_pt_wneyah.title as varchar), '(' || routes_route_pt_wneyah.nilreason[1] || ')') AS routeformed,
    routes_route_pt_wneyah.href AS routeformed_href,
    shared_obstacleassessmentarea_view_bpiaax.id AS evaluationarea,
    geometry_curve_view_bivzeo.geom AS curveextent_geom,
    geometry_curve_view_bivzeo.horizontalAccuracy as curveextent_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_qsrkcd on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_qsrkcd.id
left join routes.route_pt routes_route_pt_wneyah on routes.routesegment_ts.routeformed_id = routes_route_pt_wneyah.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_bpiaax on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_bpiaax.id
left join geometry.curve_view geometry_curve_view_bivzeo on routes.routesegment_ts.curveextent_id = geometry_curve_view_bivzeo.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_taibzd on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_taibzd.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_view_getokd.id) as lat_availability
  from master_join master_join_xronol
  join routes.routeavailability_pt routes_routeavailability_view_getokd on master_join_xronol.target_id = routes_routeavailability_view_getokd.id
  where master_join_xronol.source_id = routes.routesegment_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_sxqagm.*) AS annotation
  from master_join master_join_afgwre
  join notes.note_view notes_note_view_sxqagm on master_join_afgwre.target_id = notes_note_view_sxqagm.id
  where master_join_afgwre.source_id = routes.routesegment_ts.id
) as lat_annotation on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_xivjzh.title as varchar), '(' || organisation_organisationauthority_pt_xivjzh.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_xivjzh.href AS userorganisation_href,
    lat_annotation.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xivjzh on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_xivjzh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nyzxyl.*) AS annotation
  from master_join master_join_owndau
  join notes.note_view notes_note_view_nyzxyl on master_join_owndau.target_id = notes_note_view_nyzxyl.id
  where master_join_owndau.source_id = routes.route_ts.id
) as lat_annotation on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    lat_affectedlocation.lat_affectedlocation as affectedlocation,
    lat_affectedarea.lat_affectedarea as affectedarea,
    lat_annotation.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_zrixjc.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_zrixjc.title AS varchar), '(' || airport_heliport_airportheliport_pt_zrixjc.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_zrixjc.href
  )) as lat_affectedlocation  from master_join master_join_ngkipb
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zrixjc on master_join_ngkipb.target_id = airport_heliport_airportheliport_pt_zrixjc.id
  where master_join_ngkipb.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedlocation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_pkipfw.id,
      'title', coalesce(cast(airspace_airspace_pt_pkipfw.title AS varchar), '(' || airspace_airspace_pt_pkipfw.nilreason[1] || ')'),
      'href', airspace_airspace_pt_pkipfw.href
  )) as lat_affectedarea  from master_join master_join_itryda
  join airspace.airspace_pt airspace_airspace_pt_pkipfw on master_join_itryda.target_id = airspace_airspace_pt_pkipfw.id
  where master_join_itryda.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_affectedarea on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_krvynh.*) AS annotation
  from master_join master_join_roabgm
  join notes.note_view notes_note_view_krvynh on master_join_roabgm.target_id = notes_note_view_krvynh.id
  where master_join_roabgm.source_id = rules_procedures.rulesprocedures_ts.id
) as lat_annotation on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_pktbjj.title as varchar), '(' || airport_heliport_runwaydirection_pt_pktbjj.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_pktbjj.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_yorifk.geom AS extent_geom,
    geometry_elevatedsurface_view_yorifk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_yorifk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_yorifk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_yorifk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_yorifk.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_surfacecharacteristics_view_ubwlop.id AS surfaceproperties,
    lat_annotation.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_pktbjj on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_pktbjj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yorifk on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_yorifk.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ubwlop on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ubwlop.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qexiui.*) AS annotation
  from master_join master_join_mzqfzv
  join notes.note_view notes_note_view_qexiui on master_join_mzqfzv.target_id = notes_note_view_qexiui.id
  where master_join_mzqfzv.source_id = airport_heliport.runwayblastpad_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.runwaydeclareddistance_view', 'airport_heliport.navaidequipmentdistance_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_rikrqk.geom AS location_geom,
    geometry_elevatedpoint_view_rikrqk.longitude AS location_longitude,
    geometry_elevatedpoint_view_rikrqk.latitude AS location_latitude,
    geometry_elevatedpoint_view_rikrqk.elevation AS location_elevation,
    geometry_elevatedpoint_view_rikrqk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rikrqk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rikrqk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rikrqk.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_txgeya.title as varchar), '(' || airport_heliport_runwaydirection_pt_txgeya.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_txgeya.href AS onrunway_href,
    lat_associateddeclareddistance.lat_associateddeclareddistance as associateddeclareddistance,
    lat_navaidequipment.lat_navaidequipment as navaidequipment,
    lat_annotation.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rikrqk on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_rikrqk.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_txgeya on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_txgeya.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_view_rbpkov.id) as lat_associateddeclareddistance
  from master_join master_join_vdjtvd
  join airport_heliport.runwaydeclareddistance_pt airport_heliport_runwaydeclareddistance_view_rbpkov on master_join_vdjtvd.target_id = airport_heliport_runwaydeclareddistance_view_rbpkov.id
  where master_join_vdjtvd.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_associateddeclareddistance on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_view_sihkjt.id) as lat_navaidequipment
  from master_join master_join_vaghez
  join airport_heliport.navaidequipmentdistance_pt airport_heliport_navaidequipmentdistance_view_sihkjt on master_join_vaghez.target_id = airport_heliport_navaidequipmentdistance_view_sihkjt.id
  where master_join_vaghez.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_navaidequipment on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_bznjpp.*) AS annotation
  from master_join master_join_czdilg
  join notes.note_view notes_note_view_bznjpp on master_join_czdilg.target_id = notes_note_view_bznjpp.id
  where master_join_czdilg.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_mksuqm.title as varchar), '(' || airport_heliport_runwaydirection_pt_mksuqm.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_mksuqm.href AS associatedrunwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_mksuqm on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_mksuqm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_lfmjhg.id) as lat_element
  from master_join master_join_ufareq
  join shared.lightelement_pt shared_lightelement_view_lfmjhg on master_join_ufareq.target_id = shared_lightelement_view_lfmjhg.id
  where master_join_ufareq.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_ssdnqd.id) as lat_availability
  from master_join master_join_piziha
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_ssdnqd on master_join_piziha.target_id = airport_heliport_groundlightingavailability_view_ssdnqd.id
  where master_join_piziha.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_oobmxv.*) AS annotation
  from master_join master_join_uyapeh
  join notes.note_view notes_note_view_oobmxv on master_join_uyapeh.target_id = notes_note_view_oobmxv.id
  where master_join_uyapeh.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_lzvftq.title as varchar), '(' || airport_heliport_runway_pt_lzvftq.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_lzvftq.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_qqdkpi.title as varchar), '(' || airport_heliport_runwayelement_pt_qqdkpi.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_qqdkpi.href AS startingelement_href,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_lzvftq on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_lzvftq.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_qqdkpi on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_qqdkpi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_xcqqjc.*) AS annotation
  from master_join master_join_xslfow
  join notes.note_view notes_note_view_xcqqjc on master_join_xslfow.target_id = notes_note_view_xcqqjc.id
  where master_join_xslfow.source_id = airport_heliport.runwaydirection_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_skltji.id) as lat_availability
  from master_join master_join_gisydt
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_skltji on master_join_gisydt.target_id = airport_heliport_manoeuvringareaavailability_view_skltji.id
  where master_join_gisydt.source_id = airport_heliport.runwaydirection_ts.id
) as lat_availability on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    airport_heliport_surfacecharacteristics_view_hapuau.id AS surfaceproperties,
    geometry_elevatedsurface_view_dswmur.geom AS extent_geom,
    geometry_elevatedsurface_view_dswmur.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dswmur.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dswmur.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dswmur.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dswmur.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_associatedrunway.lat_associatedrunway as associatedrunway,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hapuau on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hapuau.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dswmur on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_dswmur.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_mwqpzq.id,
      'title', coalesce(cast(airport_heliport_runway_pt_mwqpzq.title AS varchar), '(' || airport_heliport_runway_pt_mwqpzq.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_mwqpzq.href
  )) as lat_associatedrunway  from master_join master_join_zummxc
  join airport_heliport.runway_pt airport_heliport_runway_pt_mwqpzq on master_join_zummxc.target_id = airport_heliport_runway_pt_mwqpzq.id
  where master_join_zummxc.source_id = airport_heliport.runwayelement_ts.id
) as lat_associatedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wzwdia.*) AS annotation
  from master_join master_join_uhxgsy
  join notes.note_view notes_note_view_wzwdia on master_join_uhxgsy.target_id = notes_note_view_wzwdia.id
  where master_join_uhxgsy.source_id = airport_heliport.runwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_kpnwbo.id) as lat_availability
  from master_join master_join_nrpryt
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_kpnwbo on master_join_nrpryt.target_id = airport_heliport_manoeuvringareaavailability_view_kpnwbo.id
  where master_join_nrpryt.source_id = airport_heliport.runwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_bnwina.title as varchar), '(' || airport_heliport_runway_pt_bnwina.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_bnwina.href AS markedrunway_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_bnwina on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_bnwina.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_dlbyqa.id) as lat_element
  from master_join master_join_qpcaba
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_dlbyqa on master_join_qpcaba.target_id = airport_heliport_markingelement_view_dlbyqa.id
  where master_join_qpcaba.source_id = airport_heliport.runwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zxzgay.*) AS annotation
  from master_join master_join_vgpvri
  join notes.note_view notes_note_view_zxzgay on master_join_vgpvri.target_id = notes_note_view_zxzgay.id
  where master_join_vgpvri.source_id = airport_heliport.runwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_utuudl.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_utuudl.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_utuudl.href AS lightedarea_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_utuudl on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_utuudl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_trjfbz.id) as lat_element
  from master_join master_join_rmwxdq
  join shared.lightelement_pt shared_lightelement_view_trjfbz on master_join_rmwxdq.target_id = shared_lightelement_view_trjfbz.id
  where master_join_rmwxdq.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_rqhctb.id) as lat_availability
  from master_join master_join_ievrme
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_rqhctb on master_join_ievrme.target_id = airport_heliport_groundlightingavailability_view_rqhctb.id
  where master_join_ievrme.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_rhjbgm.*) AS annotation
  from master_join master_join_xlmdsb
  join notes.note_view notes_note_view_rhjbgm on master_join_xlmdsb.target_id = notes_note_view_rhjbgm.id
  where master_join_xlmdsb.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    airport_heliport_surfacecharacteristics_view_dunmpq.id AS surfaceproperties,
    geometry_elevatedsurface_view_pjwbua.geom AS extent_geom,
    geometry_elevatedsurface_view_pjwbua.elevation AS extent_elevation,
    geometry_elevatedsurface_view_pjwbua.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_pjwbua.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_pjwbua.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_pjwbua.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_icmlgp.title as varchar), '(' || airport_heliport_runwaydirection_pt_icmlgp.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_icmlgp.href AS protectedrunwaydirection_href,
    lat_annotation.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_dunmpq on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_dunmpq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pjwbua on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_pjwbua.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_icmlgp on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_icmlgp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_eytgob.*) AS annotation
  from master_join master_join_zouaey
  join notes.note_view notes_note_view_eytgob on master_join_zouaey.target_id = notes_note_view_eytgob.id
  where master_join_zouaey.source_id = airport_heliport.runwayprotectarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.runwaysectioncontamination_view', 'notes.note_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    airport_heliport_surfacecharacteristics_view_ktwcff.id AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_kmdglz.title as varchar), '(' || airport_heliport_airportheliport_pt_kmdglz.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_kmdglz.href AS associatedairportheliport_href,
    lat_overallcontaminant.lat_overallcontaminant as overallcontaminant,
    lat_annotation.annotation as annotation,
    lat_areacontaminant.lat_areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ktwcff on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ktwcff.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kmdglz on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_kmdglz.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_view_kemzxv.id) as lat_overallcontaminant
  from master_join master_join_qdmxnk
  join airport_heliport.runwaycontamination_pt airport_heliport_runwaycontamination_view_kemzxv on master_join_qdmxnk.target_id = airport_heliport_runwaycontamination_view_kemzxv.id
  where master_join_qdmxnk.source_id = airport_heliport.runway_ts.id
) as lat_overallcontaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_temtoj.*) AS annotation
  from master_join master_join_xrhzfq
  join notes.note_view notes_note_view_temtoj on master_join_xrhzfq.target_id = notes_note_view_temtoj.id
  where master_join_xrhzfq.source_id = airport_heliport.runway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_view_fbrhmm.id) as lat_areacontaminant
  from master_join master_join_hxgiry
  join airport_heliport.runwaysectioncontamination_pt airport_heliport_runwaysectioncontamination_view_fbrhmm on master_join_hxgiry.target_id = airport_heliport_runwaysectioncontamination_view_fbrhmm.id
  where master_join_hxgiry.source_id = airport_heliport.runway_ts.id
) as lat_areacontaminant on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_cyaduy.geom AS location_geom,
    geometry_elevatedpoint_view_cyaduy.longitude AS location_longitude,
    geometry_elevatedpoint_view_cyaduy.latitude AS location_latitude,
    geometry_elevatedpoint_view_cyaduy.elevation AS location_elevation,
    geometry_elevatedpoint_view_cyaduy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cyaduy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cyaduy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cyaduy.horizontalAccuracy AS location_horizontalaccuracy,
    lat_associatedrunwaydirection.lat_associatedrunwaydirection as associatedrunwaydirection,
    lat_annotation.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cyaduy on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_cyaduy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_pt_dcfudf.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_pt_dcfudf.title AS varchar), '(' || airport_heliport_runwaydirection_pt_dcfudf.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_pt_dcfudf.href
  )) as lat_associatedrunwaydirection  from master_join master_join_egohzi
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dcfudf on master_join_egohzi.target_id = airport_heliport_runwaydirection_pt_dcfudf.id
  where master_join_egohzi.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_associatedrunwaydirection on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_danfmh.*) AS annotation
  from master_join master_join_peeqxv
  join notes.note_view notes_note_view_danfmh on master_join_peeqxv.target_id = notes_note_view_danfmh.id
  where master_join_peeqxv.source_id = airport_heliport.runwayvisualrange_ts.id
) as lat_annotation on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['geometry.point_view', 'notes.note_view', 'procedure.safealtitudeareasector_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_nbabdy.title as varchar), '(' || navaids_points_designatedpoint_pt_nbabdy.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nbabdy.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dnmstq.title as varchar), '(' || navaids_points_navaid_pt_dnmstq.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_dnmstq.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ehutuh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ehutuh.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_ehutuh.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_isgsah.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_isgsah.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_isgsah.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_clmcfn.title as varchar), '(' || airport_heliport_airportheliport_pt_clmcfn.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_clmcfn.href AS centrepointairportreferencepoint_href,
    lat_location.lat_location as location,
    geometry_point_view_wkxwsc.geom AS centrepointposition_geom,
    geometry_point_view_wkxwsc.longitude AS centrepointposition_longitude,
    geometry_point_view_wkxwsc.latitude AS centrepointposition_latitude,
    geometry_point_view_wkxwsc.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nbabdy on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nbabdy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dnmstq on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_dnmstq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ehutuh on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ehutuh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_isgsah on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_isgsah.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_clmcfn on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_clmcfn.id
left join geometry.point_view geometry_point_view_wkxwsc on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_wkxwsc.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_view_isbsyl.id) as lat_sector
  from master_join master_join_seiuvx
  join procedure.safealtitudeareasector_pt procedure_safealtitudeareasector_view_isbsyl on master_join_seiuvx.target_id = procedure_safealtitudeareasector_view_isbsyl.id
  where master_join_seiuvx.source_id = procedure.safealtitudearea_ts.id
) as lat_sector on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_sfslpk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_sfslpk.title AS varchar), '(' || airport_heliport_airportheliport_pt_sfslpk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_sfslpk.href
  )) as lat_location  from master_join master_join_kdztdb
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sfslpk on master_join_kdztdb.target_id = airport_heliport_airportheliport_pt_sfslpk.id
  where master_join_kdztdb.source_id = procedure.safealtitudearea_ts.id
) as lat_location on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ctjico.*) AS annotation
  from master_join master_join_hfzgbj
  join notes.note_view notes_note_view_ctjico on master_join_hfzgbj.target_id = notes_note_view_ctjico.id
  where master_join_hfzgbj.source_id = procedure.safealtitudearea_ts.id
) as lat_annotation on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_lmywjq.geom AS location_geom,
    geometry_elevatedpoint_view_lmywjq.longitude AS location_longitude,
    geometry_elevatedpoint_view_lmywjq.latitude AS location_latitude,
    geometry_elevatedpoint_view_lmywjq.elevation AS location_elevation,
    geometry_elevatedpoint_view_lmywjq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lmywjq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lmywjq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lmywjq.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lmywjq on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_lmywjq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_edpnhe.id) as lat_authority
  from master_join master_join_iuazcj
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_edpnhe on master_join_iuazcj.target_id = navaids_points_authorityfornavaidequipment_view_edpnhe.id
  where master_join_iuazcj.source_id = navaids_points.sdf_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_yyxquf.id) as lat_monitoring
  from master_join master_join_ylwnxh
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_yyxquf on master_join_ylwnxh.target_id = navaids_points_navaidequipmentmonitoring_view_yyxquf.id
  where master_join_ylwnxh.source_id = navaids_points.sdf_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_dxifci.id) as lat_availability
  from master_join master_join_wdzwgb
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_dxifci on master_join_wdzwgb.target_id = navaids_points_navaidoperationalstatus_view_dxifci.id
  where master_join_wdzwgb.source_id = navaids_points.sdf_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hjfodm.*) AS annotation
  from master_join master_join_jxajha
  join notes.note_view notes_note_view_hjfodm on master_join_jxajha.target_id = notes_note_view_hjfodm.id
  where master_join_jxajha.source_id = navaids_points.sdf_ts.id
) as lat_annotation on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_qgjugp.geom AS extent_geom,
    geometry_elevatedsurface_view_qgjugp.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qgjugp.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qgjugp.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qgjugp.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qgjugp.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_rampsite.lat_rampsite as rampsite,
    lat_docksite.lat_docksite as docksite,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qgjugp on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_qgjugp.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_pt_yozrix.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_pt_yozrix.title AS varchar), '(' || airport_heliport_seaplanerampsite_pt_yozrix.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_pt_yozrix.href
  )) as lat_rampsite  from master_join master_join_jcwqkx
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_pt_yozrix on master_join_jcwqkx.target_id = airport_heliport_seaplanerampsite_pt_yozrix.id
  where master_join_jcwqkx.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_rampsite on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_pt_yswzsz.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_pt_yswzsz.title AS varchar), '(' || airport_heliport_floatingdocksite_pt_yswzsz.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_pt_yswzsz.href
  )) as lat_docksite  from master_join master_join_ydphxl
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_pt_yswzsz on master_join_ydphxl.target_id = airport_heliport_floatingdocksite_pt_yswzsz.id
  where master_join_ydphxl.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_docksite on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_odixty.*) AS annotation
  from master_join master_join_dylzvz
  join notes.note_view notes_note_view_odixty on master_join_dylzvz.target_id = notes_note_view_odixty.id
  where master_join_dylzvz.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_dboyiw.id) as lat_availability
  from master_join master_join_stqtsy
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_dboyiw on master_join_stqtsy.target_id = airport_heliport_manoeuvringareaavailability_view_dboyiw.id
  where master_join_stqtsy.source_id = airport_heliport.seaplanelandingarea_ts.id
) as lat_availability on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_enbfny.geom AS extent_geom,
    geometry_elevatedsurface_view_enbfny.elevation AS extent_elevation,
    geometry_elevatedsurface_view_enbfny.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_enbfny.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_enbfny.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_enbfny.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_kbgurl.geom AS centreline_geom,
    geometry_elevatedcurve_view_kbgurl.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_kbgurl.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_kbgurl.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_kbgurl.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_kbgurl.horizontalAccuracy AS centreline_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_enbfny on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_enbfny.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_kbgurl on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_kbgurl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_htecal.*) AS annotation
  from master_join master_join_acqmlk
  join notes.note_view notes_note_view_htecal on master_join_acqmlk.target_id = notes_note_view_htecal.id
  where master_join_acqmlk.source_id = airport_heliport.seaplanerampsite_ts.id
) as lat_annotation on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'notes.note_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_rimbqb.geom AS location_geom,
    geometry_elevatedpoint_view_rimbqb.longitude AS location_longitude,
    geometry_elevatedpoint_view_rimbqb.latitude AS location_latitude,
    geometry_elevatedpoint_view_rimbqb.elevation AS location_elevation,
    geometry_elevatedpoint_view_rimbqb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rimbqb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rimbqb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rimbqb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_xjpaiz.title as varchar), '(' || organisation_unit_pt_xjpaiz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_xjpaiz.href AS serviceprovider_href,
    lat_callsign.lat_callsign as callsign,
    lat_radiocommunication.lat_radiocommunication as radiocommunication,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation,
    lat_clientairspace.lat_clientairspace as clientairspace,
    lat_clientroute.lat_clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rimbqb on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_rimbqb.id
left join organisation.unit_pt organisation_unit_pt_xjpaiz on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_xjpaiz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_view_egnepv.id) as lat_callsign
  from master_join master_join_wcsfsa
  join service.callsigndetail_pt service_callsigndetail_view_egnepv on master_join_wcsfsa.target_id = service_callsigndetail_view_egnepv.id
  where master_join_wcsfsa.source_id = service.searchrescueservice_ts.id
) as lat_callsign on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_pt_fzpevu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_pt_fzpevu.title AS varchar), '(' || service_radiocommunicationchannel_pt_fzpevu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_pt_fzpevu.href
  )) as lat_radiocommunication  from master_join master_join_nbzspn
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_fzpevu on master_join_nbzspn.target_id = service_radiocommunicationchannel_pt_fzpevu.id
  where master_join_nbzspn.source_id = service.searchrescueservice_ts.id
) as lat_radiocommunication on TRUE
left join lateral(
  select
  from master_join master_join_uglgfe
  join shared.contactinformation_view shared_contactinformation_view_psreig on master_join_uglgfe.target_id = shared_contactinformation_view_psreig.id
  where master_join_uglgfe.source_id = service.searchrescueservice_ts.id
) as lat_groundcommunication on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_view_ntouhy.id) as lat_availability
  from master_join master_join_nulrdt
  join service.serviceoperationalstatus_pt service_serviceoperationalstatus_view_ntouhy on master_join_nulrdt.target_id = service_serviceoperationalstatus_view_ntouhy.id
  where master_join_nulrdt.source_id = service.searchrescueservice_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dvzatm.*) AS annotation
  from master_join master_join_aqwboi
  join notes.note_view notes_note_view_dvzatm on master_join_aqwboi.target_id = notes_note_view_dvzatm.id
  where master_join_aqwboi.source_id = service.searchrescueservice_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_zxilet.id,
      'title', coalesce(cast(airspace_airspace_pt_zxilet.title AS varchar), '(' || airspace_airspace_pt_zxilet.nilreason[1] || ')'),
      'href', airspace_airspace_pt_zxilet.href
  )) as lat_clientairspace  from master_join master_join_vjfvec
  join airspace.airspace_pt airspace_airspace_pt_zxilet on master_join_vjfvec.target_id = airspace_airspace_pt_zxilet.id
  where master_join_vjfvec.source_id = service.searchrescueservice_ts.id
) as lat_clientairspace on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_view_ftmrhd.id) as lat_clientroute
  from master_join master_join_bsqvvv
  join routes.routeportion_pt routes_routeportion_view_ftmrhd on master_join_bsqvvv.target_id = routes_routeportion_view_ftmrhd.id
  where master_join_bsqvvv.source_id = service.searchrescueservice_ts.id
) as lat_clientroute on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_esoxyn.geom AS location_geom,
    geometry_elevatedpoint_view_esoxyn.longitude AS location_longitude,
    geometry_elevatedpoint_view_esoxyn.latitude AS location_latitude,
    geometry_elevatedpoint_view_esoxyn.elevation AS location_elevation,
    geometry_elevatedpoint_view_esoxyn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_esoxyn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_esoxyn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_esoxyn.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_groundstation.lat_groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_esoxyn on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_esoxyn.id
left join lateral(
  select
  from master_join master_join_aehiyc
  join shared.contactinformation_view shared_contactinformation_view_rlsbok on master_join_aehiyc.target_id = shared_contactinformation_view_rlsbok.id
  where master_join_aehiyc.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_contact on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ueusfw.*) AS annotation
  from master_join master_join_faxrju
  join notes.note_view notes_note_view_ueusfw on master_join_faxrju.target_id = notes_note_view_ueusfw.id
  where master_join_faxrju.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_view_nxyvkc.id) as lat_groundstation
  from master_join master_join_chnqcb
  join surveillance.surveillancegroundstation_pt surveillance_surveillancegroundstation_view_nxyvkc on master_join_chnqcb.target_id = surveillance_surveillancegroundstation_view_nxyvkc.id
  where master_join_chnqcb.source_id = surveillance.secondarysurveillanceradar_ts.id
) as lat_groundstation on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_rrfcyt.title as varchar), '(' || airspace_airspace_pt_rrfcyt.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_rrfcyt.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cgrzcs.title as varchar), '(' || navaids_points_designatedpoint_pt_cgrzcs.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_cgrzcs.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_douqre.title as varchar), '(' || navaids_points_navaid_pt_douqre.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_douqre.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_camldo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_camldo.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_camldo.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_malrfc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_malrfc.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_malrfc.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_chjayb.title as varchar), '(' || airport_heliport_airportheliport_pt_chjayb.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_chjayb.href AS locationairportreferencepoint_href,
    geometry_point_view_zbiopp.geom AS locationposition_geom,
    geometry_point_view_zbiopp.longitude AS locationposition_longitude,
    geometry_point_view_zbiopp.latitude AS locationposition_latitude,
    geometry_point_view_zbiopp.horizontalAccuracy AS locationposition_horizontalaccuracy,
    lat_annotation.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_rrfcyt on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_rrfcyt.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cgrzcs on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cgrzcs.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_douqre on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_douqre.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_camldo on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_camldo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_malrfc on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_malrfc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_chjayb on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_chjayb.id
left join geometry.point_view geometry_point_view_zbiopp on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_zbiopp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yuhowt.*) AS annotation
  from master_join master_join_ctrijn
  join notes.note_view notes_note_view_yuhowt on master_join_ctrijn.target_id = notes_note_view_yuhowt.id
  where master_join_ctrijn.source_id = navaids_points.significantpointinairspace_ts.id
) as lat_annotation on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_lufitk.title as varchar), '(' || organisation_organisationauthority_pt_lufitk.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_lufitk.href AS authority_href,
    lat_annotation.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_lufitk on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_lufitk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_qthekh.*) AS annotation
  from master_join master_join_bfoibt
  join notes.note_view notes_note_view_qthekh on master_join_bfoibt.target_id = notes_note_view_qthekh.id
  where master_join_bfoibt.source_id = shared.specialdate_ts.id
) as lat_annotation on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_hrwcwa.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_hrwcwa.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_hrwcwa.href AS systemchain_href,
    navaids_points_authorityforspecialnavigationstation_view_wihxwz.id AS responsibleorganisation,
    geometry_elevatedpoint_view_yrppnj.geom AS position_geom,
    geometry_elevatedpoint_view_yrppnj.longitude AS position_longitude,
    geometry_elevatedpoint_view_yrppnj.latitude AS position_latitude,
    geometry_elevatedpoint_view_yrppnj.elevation AS position_elevation,
    geometry_elevatedpoint_view_yrppnj.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_yrppnj.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_yrppnj.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_yrppnj.horizontalAccuracy AS position_horizontalaccuracy,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_hrwcwa on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_hrwcwa.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_wihxwz on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_wihxwz.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yrppnj on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_yrppnj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_view_pckwyt.id) as lat_availability
  from master_join master_join_ekuyrk
  join navaids_points.specialnavigationstationstatus_pt navaids_points_specialnavigationstationstatus_view_pckwyt on master_join_ekuyrk.target_id = navaids_points_specialnavigationstationstatus_view_pckwyt.id
  where master_join_ekuyrk.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_hgalkv.*) AS annotation
  from master_join master_join_pxhvvs
  join notes.note_view notes_note_view_hgalkv on master_join_pxhvvs.target_id = notes_note_view_hgalkv.id
  where master_join_pxhvvs.source_id = navaids_points.specialnavigationstation_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    navaids_points_authorityforspecialnavigationsystem_view_eiiwog.id AS responsibleorganisation,
    lat_annotation.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_eiiwog on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_eiiwog.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_pxcocx.*) AS annotation
  from master_join master_join_edppyz
  join notes.note_view notes_note_view_pxcocx on master_join_edppyz.target_id = notes_note_view_pxcocx.id
  where master_join_edppyz.source_id = navaids_points.specialnavigationsystem_ts.id
) as lat_annotation on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_fbldcg.title as varchar), '(' || navaids_points_navaid_pt_fbldcg.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_fbldcg.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_vvccxl.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_vvccxl.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_vvccxl.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_awnkdh.title as varchar), '(' || surveillance_radarsystem_pt_awnkdh.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_awnkdh.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_yejana.title as varchar), '(' || procedure_safealtitudearea_pt_yejana.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_yejana.href AS safealtitude_href,
    procedure_landingtakeoffareacollection_view_bxkbqh.id AS arrival,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fbldcg on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_fbldcg.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_vvccxl on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_vvccxl.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_awnkdh on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_awnkdh.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_yejana on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_yejana.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_bxkbqh on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_bxkbqh.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_iypxpm.id) as lat_availability
  from master_join master_join_jgkael
  join procedure.procedureavailability_pt procedure_procedureavailability_view_iypxpm on master_join_jgkael.target_id = procedure_procedureavailability_view_iypxpm.id
  where master_join_jgkael.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_qvuepy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_qvuepy.title AS varchar), '(' || airport_heliport_airportheliport_pt_qvuepy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_qvuepy.href
  )) as lat_airportheliport  from master_join master_join_iteimd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qvuepy on master_join_iteimd.target_id = airport_heliport_airportheliport_pt_qvuepy.id
  where master_join_iteimd.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_ptrblx.id) as lat_aircraftcharacteristic
  from master_join master_join_cwndtp
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_ptrblx on master_join_cwndtp.target_id = shared_aircraftcharacteristic_view_ptrblx.id
  where master_join_cwndtp.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_ihucpp.id) as lat_flighttransition
  from master_join master_join_rdmnyx
  join procedure.proceduretransition_pt procedure_proceduretransition_view_ihucpp on master_join_rdmnyx.target_id = procedure_proceduretransition_view_ihucpp.id
  where master_join_rdmnyx.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dxnkii.*) AS annotation
  from master_join master_join_lpmigm
  join notes.note_view notes_note_view_dxnkii on master_join_lpmigm.target_id = notes_note_view_dxnkii.id
  where master_join_lpmigm.source_id = procedure.standardinstrumentarrival_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_ozaczc.title as varchar), '(' || navaids_points_navaid_pt_ozaczc.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ozaczc.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_klvtad.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_klvtad.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_klvtad.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_bcsmrk.title as varchar), '(' || surveillance_radarsystem_pt_bcsmrk.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_bcsmrk.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_bjmytd.title as varchar), '(' || procedure_safealtitudearea_pt_bjmytd.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_bjmytd.href AS safealtitude_href,
    procedure_landingtakeoffareacollection_view_ixkgsz.id AS takeoff,
    lat_availability.lat_availability as availability,
    lat_airportheliport.lat_airportheliport as airportheliport,
    lat_aircraftcharacteristic.lat_aircraftcharacteristic as aircraftcharacteristic,
    lat_flighttransition.lat_flighttransition as flighttransition,
    lat_annotation.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ozaczc on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ozaczc.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_klvtad on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_klvtad.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_bcsmrk on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_bcsmrk.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_bjmytd on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_bjmytd.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ixkgsz on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_ixkgsz.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_view_eibxpw.id) as lat_availability
  from master_join master_join_rjjllg
  join procedure.procedureavailability_pt procedure_procedureavailability_view_eibxpw on master_join_rjjllg.target_id = procedure_procedureavailability_view_eibxpw.id
  where master_join_rjjllg.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_availability on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_pt_mbsjvs.id,
      'title', coalesce(cast(airport_heliport_airportheliport_pt_mbsjvs.title AS varchar), '(' || airport_heliport_airportheliport_pt_mbsjvs.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_pt_mbsjvs.href
  )) as lat_airportheliport  from master_join master_join_yfklfp
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mbsjvs on master_join_yfklfp.target_id = airport_heliport_airportheliport_pt_mbsjvs.id
  where master_join_yfklfp.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_airportheliport on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_view_jkfbwo.id) as lat_aircraftcharacteristic
  from master_join master_join_mvjnaq
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_view_jkfbwo on master_join_mvjnaq.target_id = shared_aircraftcharacteristic_view_jkfbwo.id
  where master_join_mvjnaq.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_aircraftcharacteristic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_view_pgmymw.id) as lat_flighttransition
  from master_join master_join_kjompy
  join procedure.proceduretransition_pt procedure_proceduretransition_view_pgmymw on master_join_kjompy.target_id = procedure_proceduretransition_view_pgmymw.id
  where master_join_kjompy.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_flighttransition on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dxbmqc.*) AS annotation
  from master_join master_join_czdhld
  join notes.note_view notes_note_view_dxbmqc on master_join_czdhld.target_id = notes_note_view_dxbmqc.id
  where master_join_czdhld.source_id = procedure.standardinstrumentdeparture_ts.id
) as lat_annotation on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_rkzlol.title as varchar), '(' || shared_standardleveltable_pt_rkzlol.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_rkzlol.href AS leveltable_href,
    lat_level.lat_level as level,
    lat_annotation.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_rkzlol on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_rkzlol.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_view_bnabya.id) as lat_level
  from master_join master_join_zkabut
  join shared.standardlevel_pt shared_standardlevel_view_bnabya on master_join_zkabut.target_id = shared_standardlevel_view_bnabya.id
  where master_join_zkabut.source_id = shared.standardlevelcolumn_ts.id
) as lat_level on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ymnfyb.*) AS annotation
  from master_join master_join_stqvfa
  join notes.note_view notes_note_view_ymnfyb on master_join_stqvfa.target_id = notes_note_view_ymnfyb.id
  where master_join_stqvfa.source_id = shared.standardlevelcolumn_ts.id
) as lat_annotation on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_fsybss.title as varchar), '(' || shared_standardlevelcolumn_pt_fsybss.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_fsybss.href AS applicablelevelcolumn_href,
    lat_applicableairspace.lat_applicableairspace as applicableairspace,
    lat_annotation.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_fsybss on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_fsybss.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_pt_kliscu.id,
      'title', coalesce(cast(airspace_airspace_pt_kliscu.title AS varchar), '(' || airspace_airspace_pt_kliscu.nilreason[1] || ')'),
      'href', airspace_airspace_pt_kliscu.href
  )) as lat_applicableairspace  from master_join master_join_imkair
  join airspace.airspace_pt airspace_airspace_pt_kliscu on master_join_imkair.target_id = airspace_airspace_pt_kliscu.id
  where master_join_imkair.source_id = shared.standardlevelsector_ts.id
) as lat_applicableairspace on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tgirpm.*) AS annotation
  from master_join master_join_yymdiq
  join notes.note_view notes_note_view_tgirpm on master_join_yymdiq.target_id = notes_note_view_tgirpm.id
  where master_join_yymdiq.source_id = shared.standardlevelsector_ts.id
) as lat_annotation on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    lat_annotation.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gxhlgg.*) AS annotation
  from master_join master_join_tuvjqe
  join notes.note_view notes_note_view_gxhlgg on master_join_tuvjqe.target_id = notes_note_view_gxhlgg.id
  where master_join_tuvjqe.source_id = shared.standardleveltable_ts.id
) as lat_annotation on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_aojtyo.title as varchar), '(' || airport_heliport_aircraftstand_pt_aojtyo.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_aojtyo.href AS markedstand_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_aojtyo on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_aojtyo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_qpkswp.id) as lat_element
  from master_join master_join_qkzjmn
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_qpkswp on master_join_qkzjmn.target_id = airport_heliport_markingelement_view_qpkswp.id
  where master_join_qkzjmn.source_id = airport_heliport.standmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_abqlgc.*) AS annotation
  from master_join master_join_iwdzbf
  join notes.note_view notes_note_view_abqlgc on master_join_iwdzbf.target_id = notes_note_view_abqlgc.id
  where master_join_iwdzbf.source_id = airport_heliport.standmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_mbcglt.title as varchar), '(' || airport_heliport_airportheliport_pt_mbcglt.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mbcglt.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_pxftfw.geom AS location_geom,
    geometry_elevatedpoint_view_pxftfw.longitude AS location_longitude,
    geometry_elevatedpoint_view_pxftfw.latitude AS location_latitude,
    geometry_elevatedpoint_view_pxftfw.elevation AS location_elevation,
    geometry_elevatedpoint_view_pxftfw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pxftfw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pxftfw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pxftfw.horizontalAccuracy AS location_horizontalaccuracy,
    lat_annotation.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mbcglt on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mbcglt.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pxftfw on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_pxftfw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_jbakkx.*) AS annotation
  from master_join master_join_hxkwjq
  join notes.note_view notes_note_view_jbakkx on master_join_hxkwjq.target_id = notes_note_view_jbakkx.id
  where master_join_hxkwjq.source_id = airport_heliport.surveycontrolpoint_ts.id
) as lat_annotation on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_qgxuqj.geom AS location_geom,
    geometry_elevatedpoint_view_qgxuqj.longitude AS location_longitude,
    geometry_elevatedpoint_view_qgxuqj.latitude AS location_latitude,
    geometry_elevatedpoint_view_qgxuqj.elevation AS location_elevation,
    geometry_elevatedpoint_view_qgxuqj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qgxuqj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qgxuqj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qgxuqj.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qgxuqj on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_qgxuqj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_jdmchb.id) as lat_authority
  from master_join master_join_prdbla
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_jdmchb on master_join_prdbla.target_id = navaids_points_authorityfornavaidequipment_view_jdmchb.id
  where master_join_prdbla.source_id = navaids_points.tacan_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_ufntyc.id) as lat_monitoring
  from master_join master_join_plbxpt
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_ufntyc on master_join_plbxpt.target_id = navaids_points_navaidequipmentmonitoring_view_ufntyc.id
  where master_join_plbxpt.source_id = navaids_points.tacan_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_tevish.id) as lat_availability
  from master_join master_join_fytbgg
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_tevish on master_join_fytbgg.target_id = navaids_points_navaidoperationalstatus_view_tevish.id
  where master_join_fytbgg.source_id = navaids_points.tacan_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_nmfnyu.*) AS annotation
  from master_join master_join_fgptct
  join notes.note_view notes_note_view_nmfnyu on master_join_fgptct.target_id = notes_note_view_nmfnyu.id
  where master_join_fgptct.source_id = navaids_points.tacan_ts.id
) as lat_annotation on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_tsnlsh.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_tsnlsh.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_tsnlsh.href AS taxiholding_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_tsnlsh on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_tsnlsh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_xzrsqi.id) as lat_element
  from master_join master_join_mjjcsb
  join shared.lightelement_pt shared_lightelement_view_xzrsqi on master_join_mjjcsb.target_id = shared_lightelement_view_xzrsqi.id
  where master_join_mjjcsb.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_avqxqu.id) as lat_availability
  from master_join master_join_cfqfti
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_avqxqu on master_join_cfqfti.target_id = airport_heliport_groundlightingavailability_view_avqxqu.id
  where master_join_cfqfti.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_skefth.*) AS annotation
  from master_join master_join_mmwfvi
  join notes.note_view notes_note_view_skefth on master_join_mmwfvi.target_id = notes_note_view_skefth.id
  where master_join_mmwfvi.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_kytwqv.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_kytwqv.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_kytwqv.href AS markedtaxihold_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_kytwqv on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_kytwqv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_gdapnt.id) as lat_element
  from master_join master_join_ufhajk
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_gdapnt on master_join_ufhajk.target_id = airport_heliport_markingelement_view_gdapnt.id
  where master_join_ufhajk.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ywsavf.*) AS annotation
  from master_join master_join_ehgpio
  join notes.note_view notes_note_view_ywsavf on master_join_ehgpio.target_id = notes_note_view_ywsavf.id
  where master_join_ehgpio.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_cgukkr.title as varchar), '(' || airport_heliport_guidanceline_pt_cgukkr.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_cgukkr.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_lhcfda.geom AS location_geom,
    geometry_elevatedpoint_view_lhcfda.longitude AS location_longitude,
    geometry_elevatedpoint_view_lhcfda.latitude AS location_latitude,
    geometry_elevatedpoint_view_lhcfda.elevation AS location_elevation,
    geometry_elevatedpoint_view_lhcfda.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lhcfda.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lhcfda.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lhcfda.horizontalAccuracy AS location_horizontalaccuracy,
    lat_protectedrunway.lat_protectedrunway as protectedrunway,
    lat_annotation.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_cgukkr on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_cgukkr.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lhcfda on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_lhcfda.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_pt_zqkuzl.id,
      'title', coalesce(cast(airport_heliport_runway_pt_zqkuzl.title AS varchar), '(' || airport_heliport_runway_pt_zqkuzl.nilreason[1] || ')'),
      'href', airport_heliport_runway_pt_zqkuzl.href
  )) as lat_protectedrunway  from master_join master_join_jkgzkr
  join airport_heliport.runway_pt airport_heliport_runway_pt_zqkuzl on master_join_jkgzkr.target_id = airport_heliport_runway_pt_zqkuzl.id
  where master_join_jkgzkr.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_protectedrunway on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yongfx.*) AS annotation
  from master_join master_join_ruyocr
  join notes.note_view notes_note_view_yongfx on master_join_ruyocr.target_id = notes_note_view_yongfx.id
  where master_join_ruyocr.source_id = airport_heliport.taxiholdingposition_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    airport_heliport_surfacecharacteristics_view_xxexma.id AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_xqtnsu.title as varchar), '(' || airport_heliport_taxiway_pt_xqtnsu.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_xqtnsu.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_hahuih.geom AS extent_geom,
    geometry_elevatedsurface_view_hahuih.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hahuih.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hahuih.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hahuih.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hahuih.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xxexma on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xxexma.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_xqtnsu on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_xqtnsu.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hahuih on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_hahuih.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_dejkxq.*) AS annotation
  from master_join master_join_hxzycr
  join notes.note_view notes_note_view_dejkxq on master_join_hxzycr.target_id = notes_note_view_dejkxq.id
  where master_join_hxzycr.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_hkvbzy.id) as lat_availability
  from master_join master_join_hdmrnq
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_hkvbzy on master_join_hdmrnq.target_id = airport_heliport_manoeuvringareaavailability_view_hkvbzy.id
  where master_join_hdmrnq.source_id = airport_heliport.taxiwayelement_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_nwbqtw.title as varchar), '(' || airport_heliport_taxiway_pt_nwbqtw.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_nwbqtw.href AS lightedtaxiway_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_nwbqtw on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_nwbqtw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_yawmda.id) as lat_element
  from master_join master_join_utpezj
  join shared.lightelement_pt shared_lightelement_view_yawmda on master_join_utpezj.target_id = shared_lightelement_view_yawmda.id
  where master_join_utpezj.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_zhpugg.id) as lat_availability
  from master_join master_join_olvrlx
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_zhpugg on master_join_olvrlx.target_id = airport_heliport_groundlightingavailability_view_zhpugg.id
  where master_join_olvrlx.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_gyarmb.*) AS annotation
  from master_join master_join_ybrktk
  join notes.note_view notes_note_view_gyarmb on master_join_ybrktk.target_id = notes_note_view_gyarmb.id
  where master_join_ybrktk.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_jvhwmt.title as varchar), '(' || airport_heliport_taxiway_pt_jvhwmt.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_jvhwmt.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_elrjyf.title as varchar), '(' || airport_heliport_taxiwayelement_pt_elrjyf.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_elrjyf.href AS markedelement_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_jvhwmt on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_jvhwmt.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_elrjyf on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_elrjyf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_ujymip.id) as lat_element
  from master_join master_join_jgugrt
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_ujymip on master_join_jgugrt.target_id = airport_heliport_markingelement_view_ujymip.id
  where master_join_jgugrt.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_yrfeec.*) AS annotation
  from master_join master_join_yryalp
  join notes.note_view notes_note_view_yrfeec on master_join_yryalp.target_id = notes_note_view_yrfeec.id
  where master_join_yryalp.source_id = airport_heliport.taxiwaymarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    airport_heliport_surfacecharacteristics_view_kkzwzb.id AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_limwbm.title as varchar), '(' || airport_heliport_airportheliport_pt_limwbm.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_limwbm.href AS associatedairportheliport_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kkzwzb on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kkzwzb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_limwbm on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_limwbm.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_view_yyfwvr.id) as lat_contaminant
  from master_join master_join_vfaiut
  join airport_heliport.taxiwaycontamination_pt airport_heliport_taxiwaycontamination_view_yyfwvr on master_join_vfaiut.target_id = airport_heliport_taxiwaycontamination_view_yyfwvr.id
  where master_join_vfaiut.source_id = airport_heliport.taxiway_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ujgdgw.*) AS annotation
  from master_join master_join_mkewin
  join notes.note_view notes_note_view_ujgdgw on master_join_mkewin.target_id = notes_note_view_ujgdgw.id
  where master_join_mkewin.source_id = airport_heliport.taxiway_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_zprpxi.id) as lat_availability
  from master_join master_join_hhxjqx
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_zprpxi on master_join_hhxjqx.target_id = airport_heliport_manoeuvringareaavailability_view_zprpxi.id
  where master_join_hhxjqx.source_id = airport_heliport.taxiway_ts.id
) as lat_availability on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.point_view', 'geometry.surface_view', 'notes.note_view', 'procedure.terminalarrivalareasector_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_oqausd.title as varchar), '(' || navaids_points_designatedpoint_pt_oqausd.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_oqausd.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ttahrp.title as varchar), '(' || navaids_points_designatedpoint_pt_ttahrp.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ttahrp.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_egekgs.title as varchar), '(' || navaids_points_navaid_pt_egekgs.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_egekgs.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_risfgq.title as varchar), '(' || navaids_points_navaid_pt_risfgq.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_risfgq.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gvztov.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gvztov.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_gvztov.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sjkrjv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sjkrjv.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_sjkrjv.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_gwmivj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_gwmivj.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_gwmivj.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_alfhiz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_alfhiz.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_alfhiz.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pheutm.title as varchar), '(' || airport_heliport_airportheliport_pt_pheutm.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_pheutm.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xuehkk.title as varchar), '(' || airport_heliport_airportheliport_pt_xuehkk.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_xuehkk.href AS iafairportreferencepoint_href,
    geometry_point_view_evthfj.geom AS ifposition_geom,
    geometry_point_view_evthfj.longitude AS ifposition_longitude,
    geometry_point_view_evthfj.latitude AS ifposition_latitude,
    geometry_point_view_evthfj.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_swifvx.geom AS iafposition_geom,
    geometry_point_view_swifvx.longitude AS iafposition_longitude,
    geometry_point_view_swifvx.latitude AS iafposition_latitude,
    geometry_point_view_swifvx.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_ciubqt.geom AS buffer_geom,
    geometry_surface_view_ciubqt.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lbqsqs.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lbqsqs.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_lbqsqs.href AS approachrnav_href,
    lat_sector.lat_sector as sector,
    lat_annotation.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_oqausd on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_oqausd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_egekgs on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_egekgs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gvztov on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gvztov.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_gwmivj on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_gwmivj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pheutm on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_pheutm.id
left join geometry.point_view geometry_point_view_evthfj on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_evthfj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ttahrp on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ttahrp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_risfgq on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_risfgq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sjkrjv on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sjkrjv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_alfhiz on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_alfhiz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xuehkk on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_xuehkk.id
left join geometry.point_view geometry_point_view_swifvx on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_swifvx.id
left join geometry.surface_view geometry_surface_view_ciubqt on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_ciubqt.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lbqsqs on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_lbqsqs.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_view_vyhbbb.id) as lat_sector
  from master_join master_join_wceqvg
  join procedure.terminalarrivalareasector_pt procedure_terminalarrivalareasector_view_vyhbbb on master_join_wceqvg.target_id = procedure_terminalarrivalareasector_view_vyhbbb.id
  where master_join_wceqvg.source_id = procedure.terminalarrivalarea_ts.id
) as lat_sector on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ylguvf.*) AS annotation
  from master_join master_join_avpxqh
  join notes.note_view notes_note_view_ylguvf on master_join_avpxqh.target_id = notes_note_view_ylguvf.id
  where master_join_avpxqh.source_id = procedure.terminalarrivalarea_ts.id
) as lat_annotation on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zepchz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zepchz.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_zepchz.href AS lightedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zepchz on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_zepchz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_anjfby.id) as lat_element
  from master_join master_join_toarsj
  join shared.lightelement_pt shared_lightelement_view_anjfby on master_join_toarsj.target_id = shared_lightelement_view_anjfby.id
  where master_join_toarsj.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_mjznoy.id) as lat_availability
  from master_join master_join_puzvmx
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_mjznoy on master_join_puzvmx.target_id = airport_heliport_groundlightingavailability_view_mjznoy.id
  where master_join_puzvmx.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_tzdkof.*) AS annotation
  from master_join master_join_coyzqk
  join notes.note_view notes_note_view_tzdkof on master_join_coyzqk.target_id = notes_note_view_tzdkof.id
  where master_join_coyzqk.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hxdkah.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hxdkah.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_hxdkah.href AS markedtouchdownliftoff_href,
    lat_element.lat_element as element,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hxdkah on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_hxdkah.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_view_elezih.id) as lat_element
  from master_join master_join_xlcnid
  join airport_heliport.markingelement_pt airport_heliport_markingelement_view_elezih on master_join_xlcnid.target_id = airport_heliport_markingelement_view_elezih.id
  where master_join_xlcnid.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_element on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wnnget.*) AS annotation
  from master_join master_join_upanqv
  join notes.note_view notes_note_view_wnnget on master_join_upanqv.target_id = notes_note_view_wnnget.id
  where master_join_upanqv.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    airport_heliport_surfacecharacteristics_view_crlver.id AS surfaceproperties,
    geometry_elevatedsurface_view_vdedkh.geom AS extent_geom,
    geometry_elevatedsurface_view_vdedkh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vdedkh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vdedkh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vdedkh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vdedkh.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ezkjoc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ezkjoc.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ezkjoc.href AS protectedtouchdownliftoff_href,
    lat_annotation.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_crlver on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_crlver.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vdedkh on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_vdedkh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ezkjoc on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ezkjoc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_spxoqr.*) AS annotation
  from master_join master_join_tbaetr
  join notes.note_view notes_note_view_spxoqr on master_join_tbaetr.target_id = notes_note_view_spxoqr.id
  where master_join_tbaetr.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as lat_annotation on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.touchdownliftoffcontamination_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_bkqfxz.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_bkqfxz.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_bkqfxz.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_bkqfxz.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_bkqfxz.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_bkqfxz.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_bkqfxz.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_bkqfxz.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_tqneyq.geom AS extent_geom,
    geometry_elevatedsurface_view_tqneyq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tqneyq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tqneyq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tqneyq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tqneyq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_surfacecharacteristics_view_xuikho.id AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_hrkkhu.title as varchar), '(' || airport_heliport_airportheliport_pt_hrkkhu.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hrkkhu.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_vjcabc.title as varchar), '(' || airport_heliport_runway_pt_vjcabc.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_vjcabc.href AS approachtakeoffarea_href,
    lat_contaminant.lat_contaminant as contaminant,
    lat_annotation.annotation as annotation,
    lat_availability.lat_availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bkqfxz on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_bkqfxz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tqneyq on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_tqneyq.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xuikho on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xuikho.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hrkkhu on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hrkkhu.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_vjcabc on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_vjcabc.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_view_wrkrku.id) as lat_contaminant
  from master_join master_join_nqrxde
  join airport_heliport.touchdownliftoffcontamination_pt airport_heliport_touchdownliftoffcontamination_view_wrkrku on master_join_nqrxde.target_id = airport_heliport_touchdownliftoffcontamination_view_wrkrku.id
  where master_join_nqrxde.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_contaminant on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_ppujlj.*) AS annotation
  from master_join master_join_ydczfv
  join notes.note_view notes_note_view_ppujlj on master_join_ydczfv.target_id = notes_note_view_ppujlj.id
  where master_join_ydczfv.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_view_tslgiu.id) as lat_availability
  from master_join master_join_xekcjc
  join airport_heliport.manoeuvringareaavailability_pt airport_heliport_manoeuvringareaavailability_view_tslgiu on master_join_xekcjc.target_id = airport_heliport_manoeuvringareaavailability_view_tslgiu.id
  where master_join_xekcjc.source_id = airport_heliport.touchdownliftoff_ts.id
) as lat_availability on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['shared.contactinformation_view', 'organisation.unitavailability_view', 'organisation.unitdependency_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_qwneql.geom AS position_geom,
    geometry_elevatedpoint_view_qwneql.longitude AS position_longitude,
    geometry_elevatedpoint_view_qwneql.latitude AS position_latitude,
    geometry_elevatedpoint_view_qwneql.elevation AS position_elevation,
    geometry_elevatedpoint_view_qwneql.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_qwneql.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_qwneql.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_qwneql.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_hvrjwu.title as varchar), '(' || airport_heliport_airportheliport_pt_hvrjwu.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_hvrjwu.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_pjfuik.title as varchar), '(' || organisation_organisationauthority_pt_pjfuik.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_pjfuik.href AS ownerorganisation_href,
    lat_relatedunit.lat_relatedunit as relatedunit,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qwneql on organisation.unit_ts.position_id = geometry_elevatedpoint_view_qwneql.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hvrjwu on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_hvrjwu.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pjfuik on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_pjfuik.id
left join lateral(
  select
  from master_join master_join_pwupsn
  join shared.contactinformation_view shared_contactinformation_view_jgujqv on master_join_pwupsn.target_id = shared_contactinformation_view_jgujqv.id
  where master_join_pwupsn.source_id = organisation.unit_ts.id
) as lat_contact on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_view_hwfecj.id) as lat_relatedunit
  from master_join master_join_fmefzb
  join organisation.unitdependency_pt organisation_unitdependency_view_hwfecj on master_join_fmefzb.target_id = organisation_unitdependency_view_hwfecj.id
  where master_join_fmefzb.source_id = organisation.unit_ts.id
) as lat_relatedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_view_hbpkkb.id) as lat_availability
  from master_join master_join_dpbofp
  join organisation.unitavailability_pt organisation_unitavailability_view_hbpkkb on master_join_dpbofp.target_id = organisation_unitavailability_view_hbpkkb.id
  where master_join_dpbofp.source_id = organisation.unit_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_wxlzux.*) AS annotation
  from master_join master_join_bueqdj
  join notes.note_view notes_note_view_wxlzux on master_join_bueqdj.target_id = notes_note_view_wxlzux.id
  where master_join_bueqdj.source_id = organisation.unit_ts.id
) as lat_annotation on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    lat_annotation.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zdyivy.*) AS annotation
  from master_join master_join_nvvvoi
  join notes.note_view notes_note_view_zdyivy on master_join_nvvvoi.target_id = notes_note_view_zdyivy.id
  where master_join_nvvvoi.source_id = holding.unplannedholding_ts.id
) as lat_annotation on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurelightingstatus_view', 'notes.note_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_czrqhc.title as varchar), '(' || navaids_points_markerbeacon_pt_czrqhc.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_czrqhc.href AS marker_href,
    lat_part.lat_part as part,
    lat_hostedpassengerservice.lat_hostedpassengerservice as hostedpassengerservice,
    lat_hostedspecialnavstation.lat_hostedspecialnavstation as hostedspecialnavstation,
    lat_hostedunit.lat_hostedunit as hostedunit,
    lat_hostedorganisation.lat_hostedorganisation as hostedorganisation,
    lat_annotation.annotation as annotation,
    lat_lightingavailability.lat_lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_czrqhc on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_czrqhc.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_view_vozghb.id) as lat_part
  from master_join master_join_zzmmtw
  join obstacles.verticalstructurepart_pt obstacles_verticalstructurepart_view_vozghb on master_join_zzmmtw.target_id = obstacles_verticalstructurepart_view_vozghb.id
  where master_join_zzmmtw.source_id = obstacles.verticalstructure_ts.id
) as lat_part on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_pt_ahatdw.id,
      'title', coalesce(cast(service_passengerservice_pt_ahatdw.title AS varchar), '(' || service_passengerservice_pt_ahatdw.nilreason[1] || ')'),
      'href', service_passengerservice_pt_ahatdw.href
  )) as lat_hostedpassengerservice  from master_join master_join_aqyszt
  join service.passengerservice_pt service_passengerservice_pt_ahatdw on master_join_aqyszt.target_id = service_passengerservice_pt_ahatdw.id
  where master_join_aqyszt.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedpassengerservice on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_pt_dzxqtc.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_pt_dzxqtc.title AS varchar), '(' || navaids_points_specialnavigationstation_pt_dzxqtc.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_pt_dzxqtc.href
  )) as lat_hostedspecialnavstation  from master_join master_join_poewbh
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_dzxqtc on master_join_poewbh.target_id = navaids_points_specialnavigationstation_pt_dzxqtc.id
  where master_join_poewbh.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedspecialnavstation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_pt_pmtulq.id,
      'title', coalesce(cast(organisation_unit_pt_pmtulq.title AS varchar), '(' || organisation_unit_pt_pmtulq.nilreason[1] || ')'),
      'href', organisation_unit_pt_pmtulq.href
  )) as lat_hostedunit  from master_join master_join_cszkxs
  join organisation.unit_pt organisation_unit_pt_pmtulq on master_join_cszkxs.target_id = organisation_unit_pt_pmtulq.id
  where master_join_cszkxs.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedunit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_pt_yelpst.id,
      'title', coalesce(cast(organisation_organisationauthority_pt_yelpst.title AS varchar), '(' || organisation_organisationauthority_pt_yelpst.nilreason[1] || ')'),
      'href', organisation_organisationauthority_pt_yelpst.href
  )) as lat_hostedorganisation  from master_join master_join_erukvg
  join organisation.organisationauthority_pt organisation_organisationauthority_pt_yelpst on master_join_erukvg.target_id = organisation_organisationauthority_pt_yelpst.id
  where master_join_erukvg.source_id = obstacles.verticalstructure_ts.id
) as lat_hostedorganisation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_zlfyme.*) AS annotation
  from master_join master_join_uytsee
  join notes.note_view notes_note_view_zlfyme on master_join_uytsee.target_id = notes_note_view_zlfyme.id
  where master_join_uytsee.source_id = obstacles.verticalstructure_ts.id
) as lat_annotation on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_view_jxgxme.id) as lat_lightingavailability
  from master_join master_join_crqpkp
  join obstacles.verticalstructurelightingstatus_pt obstacles_verticalstructurelightingstatus_view_jxgxme on master_join_crqpkp.target_id = obstacles_verticalstructurelightingstatus_view_jxgxme.id
  where master_join_crqpkp.source_id = obstacles.verticalstructure_ts.id
) as lat_lightingavailability on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_ceijfs.title as varchar), '(' || airport_heliport_runwaydirection_pt_ceijfs.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_ceijfs.href AS runwaydirection_href,
    lat_element.lat_element as element,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ceijfs on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_ceijfs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_view_lfqyip.id) as lat_element
  from master_join master_join_pkwcdn
  join shared.lightelement_pt shared_lightelement_view_lfqyip on master_join_pkwcdn.target_id = shared_lightelement_view_lfqyip.id
  where master_join_pkwcdn.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_element on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_view_pjmjad.id) as lat_availability
  from master_join master_join_jpxtpo
  join airport_heliport.groundlightingavailability_pt airport_heliport_groundlightingavailability_view_pjmjad on master_join_jpxtpo.target_id = airport_heliport_groundlightingavailability_view_pjmjad.id
  where master_join_jpxtpo.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_fbffqj.*) AS annotation
  from master_join master_join_jrbjlo
  join notes.note_view notes_note_view_fbffqj on master_join_jrbjlo.target_id = notes_note_view_fbffqj.id
  where master_join_jrbjlo.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as lat_annotation on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_hnmowm.geom AS location_geom,
    geometry_elevatedpoint_view_hnmowm.longitude AS location_longitude,
    geometry_elevatedpoint_view_hnmowm.latitude AS location_latitude,
    geometry_elevatedpoint_view_hnmowm.elevation AS location_elevation,
    geometry_elevatedpoint_view_hnmowm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hnmowm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hnmowm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hnmowm.horizontalAccuracy AS location_horizontalaccuracy,
    lat_authority.lat_authority as authority,
    lat_monitoring.lat_monitoring as monitoring,
    lat_availability.lat_availability as availability,
    lat_annotation.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hnmowm on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_hnmowm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_view_wlqszw.id) as lat_authority
  from master_join master_join_ndjqhf
  join navaids_points.authorityfornavaidequipment_pt navaids_points_authorityfornavaidequipment_view_wlqszw on master_join_ndjqhf.target_id = navaids_points_authorityfornavaidequipment_view_wlqszw.id
  where master_join_ndjqhf.source_id = navaids_points.vor_ts.id
) as lat_authority on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_view_exqjol.id) as lat_monitoring
  from master_join master_join_viqzwz
  join navaids_points.navaidequipmentmonitoring_pt navaids_points_navaidequipmentmonitoring_view_exqjol on master_join_viqzwz.target_id = navaids_points_navaidequipmentmonitoring_view_exqjol.id
  where master_join_viqzwz.source_id = navaids_points.vor_ts.id
) as lat_monitoring on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_view_gephug.id) as lat_availability
  from master_join master_join_rjtcvy
  join navaids_points.navaidoperationalstatus_pt navaids_points_navaidoperationalstatus_view_gephug on master_join_rjtcvy.target_id = navaids_points_navaidoperationalstatus_view_gephug.id
  where master_join_rjtcvy.source_id = navaids_points.vor_ts.id
) as lat_availability on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_iqhcys.*) AS annotation
  from master_join master_join_uplvmg
  join notes.note_view notes_note_view_iqhcys on master_join_uplvmg.target_id = notes_note_view_iqhcys.id
  where master_join_uplvmg.source_id = navaids_points.vor_ts.id
) as lat_annotation on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_fbbnjn.title as varchar), '(' || airport_heliport_airportheliport_pt_fbbnjn.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_fbbnjn.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_gpbxfr.geom AS extent_geom,
    geometry_elevatedsurface_view_gpbxfr.elevation AS extent_elevation,
    geometry_elevatedsurface_view_gpbxfr.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_gpbxfr.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_gpbxfr.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_gpbxfr.horizontalAccuracy AS extent_horizontalaccuracy,
    lat_activation.lat_activation as activation,
    lat_annotation.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fbbnjn on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_fbbnjn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gpbxfr on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_gpbxfr.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_view_lgvlop.id) as lat_activation
  from master_join master_join_wzkuwg
  join airport_heliport.workareaactivity_pt airport_heliport_workareaactivity_view_lgvlop on master_join_wzkuwg.target_id = airport_heliport_workareaactivity_view_lgvlop.id
  where master_join_wzkuwg.source_id = airport_heliport.workarea_ts.id
) as lat_activation on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_view_buyykw.*) AS annotation
  from master_join master_join_sytzis
  join notes.note_view notes_note_view_buyykw on master_join_sytzis.target_id = notes_note_view_buyykw.id
  where master_join_sytzis.source_id = airport_heliport.workarea_ts.id
) as lat_annotation on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
