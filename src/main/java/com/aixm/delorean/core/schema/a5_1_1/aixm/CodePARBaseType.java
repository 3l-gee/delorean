//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package com.aixm.delorean.core.schema.a5_1_1.aixm;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * 
 * 
 * <p>Java class for CodePARBaseType</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * <pre>{@code
 * <simpleType name="CodePARBaseType">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     <enumeration value="FPN16"/>
 *     <enumeration value="FPN62"/>
 *     <enumeration value="GPN22"/>
 *     <enumeration value="GPN25"/>
 *     <enumeration value="MPN14K"/>
 *     <enumeration value="TPN19"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "CodePARBaseType")
@XmlEnum
public enum CodePARBaseType {

    @XmlEnumValue("FPN16")
    FPN_16("FPN16"),
    @XmlEnumValue("FPN62")
    FPN_62("FPN62"),
    @XmlEnumValue("GPN22")
    GPN_22("GPN22"),
    @XmlEnumValue("GPN25")
    GPN_25("GPN25"),
    @XmlEnumValue("MPN14K")
    MPN_14_K("MPN14K"),
    @XmlEnumValue("TPN19")
    TPN_19("TPN19");
    private final String value;

    CodePARBaseType(String v) {
        value = v;
    }

    /**
     * Gets the value associated to the enum constant.
     * 
     * @return
     *     The value linked to the enum.
     */
    public String value() {
        return value;
    }

    /**
     * Gets the enum associated to the value passed as parameter.
     * 
     * @param v
     *     The value to get the enum from.
     * @return
     *     The enum which corresponds to the value, if it exists.
     * @throws IllegalArgumentException
     *     If no value matches in the enum declaration.
     */
    public static CodePARBaseType fromValue(String v) {
        for (CodePARBaseType c: CodePARBaseType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
