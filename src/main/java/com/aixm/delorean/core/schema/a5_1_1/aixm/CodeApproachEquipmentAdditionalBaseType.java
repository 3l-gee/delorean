//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package com.aixm.delorean.core.schema.a5_1_1.aixm;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * 
 * 
 * <p>Java class for CodeApproachEquipmentAdditionalBaseType</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * <pre>{@code
 * <simpleType name="CodeApproachEquipmentAdditionalBaseType">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     <enumeration value="ADF"/>
 *     <enumeration value="DME"/>
 *     <enumeration value="RADAR"/>
 *     <enumeration value="RADARDME"/>
 *     <enumeration value="VORLOC"/>
 *     <enumeration value="DUALVORDME"/>
 *     <enumeration value="DUALADF"/>
 *     <enumeration value="ADFMA"/>
 *     <enumeration value="SPECIAL"/>
 *     <enumeration value="DUALVHF"/>
 *     <enumeration value="GPSRNP3"/>
 *     <enumeration value="ADFILS"/>
 *     <enumeration value="DUALADF_DME"/>
 *     <enumeration value="RADAR_RNAV"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "CodeApproachEquipmentAdditionalBaseType")
@XmlEnum
public enum CodeApproachEquipmentAdditionalBaseType {

    ADF("ADF"),
    DME("DME"),
    RADAR("RADAR"),
    RADARDME("RADARDME"),
    VORLOC("VORLOC"),
    DUALVORDME("DUALVORDME"),
    DUALADF("DUALADF"),
    ADFMA("ADFMA"),
    SPECIAL("SPECIAL"),
    DUALVHF("DUALVHF"),
    @XmlEnumValue("GPSRNP3")
    GPSRNP_3("GPSRNP3"),
    ADFILS("ADFILS"),
    DUALADF_DME("DUALADF_DME"),
    RADAR_RNAV("RADAR_RNAV");
    private final String value;

    CodeApproachEquipmentAdditionalBaseType(String v) {
        value = v;
    }

    /**
     * Gets the value associated to the enum constant.
     * 
     * @return
     *     The value linked to the enum.
     */
    public String value() {
        return value;
    }

    /**
     * Gets the enum associated to the value passed as parameter.
     * 
     * @param v
     *     The value to get the enum from.
     * @return
     *     The enum which corresponds to the value, if it exists.
     * @throws IllegalArgumentException
     *     If no value matches in the enum declaration.
     */
    public static CodeApproachEquipmentAdditionalBaseType fromValue(String v) {
        for (CodeApproachEquipmentAdditionalBaseType c: CodeApproachEquipmentAdditionalBaseType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
