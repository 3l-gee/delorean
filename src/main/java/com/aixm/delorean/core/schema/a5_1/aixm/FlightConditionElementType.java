//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package com.aixm.delorean.core.schema.a5_1.aixm;

import java.util.ArrayList;
import java.util.List;
import jakarta.persistence.AttributeOverride;
import jakarta.persistence.AttributeOverrides;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FlightConditionElementType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="FlightConditionElementType">
 *   <complexContent>
 *     <extension base="{http://www.aixm.aero/schema/5.1}AbstractAIXMObjectType">
 *       <sequence>
 *         <group ref="{http://www.aixm.aero/schema/5.1}FlightConditionElementPropertyGroup"/>
 *         <element name="extension" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <sequence>
 *                   <element ref="{http://www.aixm.aero/schema/5.1}AbstractFlightConditionElementExtension"/>
 *                 </sequence>
 *                 <attGroup ref="{http://www.opengis.net/gml/3.2}OwnershipAttributeGroup"/>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightConditionElementType", propOrder = {
    "index",
    "flightConditionAirportHeliportCondition",
    "flightConditionStandardInstrumentDepartureCondition",
    "flightConditionRoutePortionCondition",
    "flightConditionOrganisationCondition",
    "significantPointConditionFixDesignatedPoint",
    "significantPointConditionNavaidSystem",
    "significantPointConditionAimingPoint",
    "significantPointConditionRunwayPoint",
    "significantPointConditionAirportReferencePoint",
    "significantPointConditionPosition",
    "flightConditionDirectFlightCondition",
    "flightConditionAircraft",
    "flightConditionBorderCrossingCondition",
    "flightConditionAirspaceCondition",
    "flightConditionFlight",
    "flightConditionStandardInstrumentArrivalCondition",
    "flightConditionOperand",
    "flightConditionWeather",
    "flightConditionAerialRefuellingCondition",
    "operationalCondition",
    "flightLevel",
    "annotation",
    "extension"
})
@Entity
@Table(name = "flightconditionelement", schema = "routes")
public class FlightConditionElementType
    extends AbstractAIXMObjectType
{

    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "value", column = @Column(name = "index_value", length = 255, nullable = true, unique = false)),
        @AttributeOverride(name = "nilReason", column = @Column(name = "index_nilreason", length = 255, nullable = true, unique = false))
    })
    protected NoSequenceType index;
    @XmlElement(name = "flightCondition_airportHeliportCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_airportheliportcondition_id", referencedColumnName = "id")
    protected AirportHeliportPropertyType flightConditionAirportHeliportCondition;
    @XmlElement(name = "flightCondition_standardInstrumentDepartureCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_standardinstrumentdeparturecondition_id", referencedColumnName = "id")
    protected StandardInstrumentDeparturePropertyType flightConditionStandardInstrumentDepartureCondition;
    @XmlElement(name = "flightCondition_routePortionCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_routeportioncondition_id", referencedColumnName = "id")
    protected RoutePortionPropertyType flightConditionRoutePortionCondition;
    @XmlElement(name = "flightCondition_organisationCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_organisationcondition_id", referencedColumnName = "id")
    protected OrganisationAuthorityPropertyType flightConditionOrganisationCondition;
    @XmlElement(name = "significantPointCondition_fixDesignatedPoint")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_fixdesignatedpoint_id", referencedColumnName = "id")
    protected DesignatedPointPropertyType significantPointConditionFixDesignatedPoint;
    @XmlElement(name = "significantPointCondition_navaidSystem")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_navaidsystem_id", referencedColumnName = "id")
    protected NavaidPropertyType significantPointConditionNavaidSystem;
    @XmlElement(name = "significantPointCondition_aimingPoint")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_aimingpoint_id", referencedColumnName = "id")
    protected TouchDownLiftOffPropertyType significantPointConditionAimingPoint;
    @XmlElement(name = "significantPointCondition_runwayPoint")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_runwaypoint_id", referencedColumnName = "id")
    protected RunwayCentrelinePointPropertyType significantPointConditionRunwayPoint;
    @XmlElement(name = "significantPointCondition_airportReferencePoint")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_airportreferencepoint_id", referencedColumnName = "id")
    protected AirportHeliportPropertyType significantPointConditionAirportReferencePoint;
    @XmlElement(name = "significantPointCondition_position")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "significantpointcondition_position_id", referencedColumnName = "id")
    protected PointPropertyType significantPointConditionPosition;
    @XmlElement(name = "flightCondition_directFlightCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_directflightcondition_id", referencedColumnName = "id")
    protected DirectFlightPropertyType flightConditionDirectFlightCondition;
    @XmlElement(name = "flightCondition_aircraft")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_aircraft_id", referencedColumnName = "id")
    protected AircraftCharacteristicPropertyType flightConditionAircraft;
    @XmlElement(name = "flightCondition_borderCrossingCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_bordercrossingcondition_id", referencedColumnName = "id")
    protected AirspaceBorderCrossingPropertyType flightConditionBorderCrossingCondition;
    @XmlElement(name = "flightCondition_airspaceCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_airspacecondition_id", referencedColumnName = "id")
    protected AirspacePropertyType flightConditionAirspaceCondition;
    @XmlElement(name = "flightCondition_flight")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_flight_id", referencedColumnName = "id")
    protected FlightCharacteristicPropertyType flightConditionFlight;
    @XmlElement(name = "flightCondition_standardInstrumentArrivalCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_standardinstrumentarrivalcondition_id", referencedColumnName = "id")
    protected StandardInstrumentArrivalPropertyType flightConditionStandardInstrumentArrivalCondition;
    @XmlElement(name = "flightCondition_operand")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_operand_id", referencedColumnName = "id")
    protected FlightConditionCombinationPropertyType flightConditionOperand;
    @XmlElement(name = "flightCondition_weather")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_weather_id", referencedColumnName = "id")
    protected MeteorologyPropertyType flightConditionWeather;
    @XmlElement(name = "flightCondition_aerialRefuellingCondition")
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "flightcondition_aerialrefuellingcondition_id", referencedColumnName = "id")
    protected AerialRefuellingPropertyType flightConditionAerialRefuellingCondition;
    @OneToOne(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinColumn(name = "operationalcondition_id", referencedColumnName = "id")
    protected FlightConditionCircumstancePropertyType operationalCondition;
    @OneToMany(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinTable(name = "master_join", joinColumns = {
        @JoinColumn(name = "source_id")
    }, inverseJoinColumns = {
        @JoinColumn(name = "target_id")
    })
    protected List<FlightRestrictionLevelPropertyType> flightLevel;
    @OneToMany(cascade = {
        CascadeType.ALL
    }, fetch = FetchType.EAGER)
    @JoinTable(name = "master_join", joinColumns = {
        @JoinColumn(name = "source_id")
    }, inverseJoinColumns = {
        @JoinColumn(name = "target_id")
    })
    protected List<NotePropertyType> annotation;
    @Transient
    protected List<FlightConditionElementType.Extension> extension;

    /**
     * Gets the value of the index property.
     * 
     * @return
     *     possible object is
     *     {@link NoSequenceType }
     *     
     */
    public NoSequenceType getIndex() {
        return index;
    }

    /**
     * Sets the value of the index property.
     * 
     * @param value
     *     allowed object is
     *     {@link NoSequenceType }
     *     
     */
    public void setIndex(NoSequenceType value) {
        this.index = value;
    }

    public boolean isSetIndex() {
        return (this.index!= null);
    }

    /**
     * Gets the value of the flightConditionAirportHeliportCondition property.
     * 
     * @return
     *     possible object is
     *     {@link AirportHeliportPropertyType }
     *     
     */
    public AirportHeliportPropertyType getFlightConditionAirportHeliportCondition() {
        return flightConditionAirportHeliportCondition;
    }

    /**
     * Sets the value of the flightConditionAirportHeliportCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirportHeliportPropertyType }
     *     
     */
    public void setFlightConditionAirportHeliportCondition(AirportHeliportPropertyType value) {
        this.flightConditionAirportHeliportCondition = value;
    }

    public boolean isSetFlightConditionAirportHeliportCondition() {
        return (this.flightConditionAirportHeliportCondition!= null);
    }

    /**
     * Gets the value of the flightConditionStandardInstrumentDepartureCondition property.
     * 
     * @return
     *     possible object is
     *     {@link StandardInstrumentDeparturePropertyType }
     *     
     */
    public StandardInstrumentDeparturePropertyType getFlightConditionStandardInstrumentDepartureCondition() {
        return flightConditionStandardInstrumentDepartureCondition;
    }

    /**
     * Sets the value of the flightConditionStandardInstrumentDepartureCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link StandardInstrumentDeparturePropertyType }
     *     
     */
    public void setFlightConditionStandardInstrumentDepartureCondition(StandardInstrumentDeparturePropertyType value) {
        this.flightConditionStandardInstrumentDepartureCondition = value;
    }

    public boolean isSetFlightConditionStandardInstrumentDepartureCondition() {
        return (this.flightConditionStandardInstrumentDepartureCondition!= null);
    }

    /**
     * Gets the value of the flightConditionRoutePortionCondition property.
     * 
     * @return
     *     possible object is
     *     {@link RoutePortionPropertyType }
     *     
     */
    public RoutePortionPropertyType getFlightConditionRoutePortionCondition() {
        return flightConditionRoutePortionCondition;
    }

    /**
     * Sets the value of the flightConditionRoutePortionCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link RoutePortionPropertyType }
     *     
     */
    public void setFlightConditionRoutePortionCondition(RoutePortionPropertyType value) {
        this.flightConditionRoutePortionCondition = value;
    }

    public boolean isSetFlightConditionRoutePortionCondition() {
        return (this.flightConditionRoutePortionCondition!= null);
    }

    /**
     * Gets the value of the flightConditionOrganisationCondition property.
     * 
     * @return
     *     possible object is
     *     {@link OrganisationAuthorityPropertyType }
     *     
     */
    public OrganisationAuthorityPropertyType getFlightConditionOrganisationCondition() {
        return flightConditionOrganisationCondition;
    }

    /**
     * Sets the value of the flightConditionOrganisationCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link OrganisationAuthorityPropertyType }
     *     
     */
    public void setFlightConditionOrganisationCondition(OrganisationAuthorityPropertyType value) {
        this.flightConditionOrganisationCondition = value;
    }

    public boolean isSetFlightConditionOrganisationCondition() {
        return (this.flightConditionOrganisationCondition!= null);
    }

    /**
     * Gets the value of the significantPointConditionFixDesignatedPoint property.
     * 
     * @return
     *     possible object is
     *     {@link DesignatedPointPropertyType }
     *     
     */
    public DesignatedPointPropertyType getSignificantPointConditionFixDesignatedPoint() {
        return significantPointConditionFixDesignatedPoint;
    }

    /**
     * Sets the value of the significantPointConditionFixDesignatedPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignatedPointPropertyType }
     *     
     */
    public void setSignificantPointConditionFixDesignatedPoint(DesignatedPointPropertyType value) {
        this.significantPointConditionFixDesignatedPoint = value;
    }

    public boolean isSetSignificantPointConditionFixDesignatedPoint() {
        return (this.significantPointConditionFixDesignatedPoint!= null);
    }

    /**
     * Gets the value of the significantPointConditionNavaidSystem property.
     * 
     * @return
     *     possible object is
     *     {@link NavaidPropertyType }
     *     
     */
    public NavaidPropertyType getSignificantPointConditionNavaidSystem() {
        return significantPointConditionNavaidSystem;
    }

    /**
     * Sets the value of the significantPointConditionNavaidSystem property.
     * 
     * @param value
     *     allowed object is
     *     {@link NavaidPropertyType }
     *     
     */
    public void setSignificantPointConditionNavaidSystem(NavaidPropertyType value) {
        this.significantPointConditionNavaidSystem = value;
    }

    public boolean isSetSignificantPointConditionNavaidSystem() {
        return (this.significantPointConditionNavaidSystem!= null);
    }

    /**
     * Gets the value of the significantPointConditionAimingPoint property.
     * 
     * @return
     *     possible object is
     *     {@link TouchDownLiftOffPropertyType }
     *     
     */
    public TouchDownLiftOffPropertyType getSignificantPointConditionAimingPoint() {
        return significantPointConditionAimingPoint;
    }

    /**
     * Sets the value of the significantPointConditionAimingPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link TouchDownLiftOffPropertyType }
     *     
     */
    public void setSignificantPointConditionAimingPoint(TouchDownLiftOffPropertyType value) {
        this.significantPointConditionAimingPoint = value;
    }

    public boolean isSetSignificantPointConditionAimingPoint() {
        return (this.significantPointConditionAimingPoint!= null);
    }

    /**
     * Gets the value of the significantPointConditionRunwayPoint property.
     * 
     * @return
     *     possible object is
     *     {@link RunwayCentrelinePointPropertyType }
     *     
     */
    public RunwayCentrelinePointPropertyType getSignificantPointConditionRunwayPoint() {
        return significantPointConditionRunwayPoint;
    }

    /**
     * Sets the value of the significantPointConditionRunwayPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link RunwayCentrelinePointPropertyType }
     *     
     */
    public void setSignificantPointConditionRunwayPoint(RunwayCentrelinePointPropertyType value) {
        this.significantPointConditionRunwayPoint = value;
    }

    public boolean isSetSignificantPointConditionRunwayPoint() {
        return (this.significantPointConditionRunwayPoint!= null);
    }

    /**
     * Gets the value of the significantPointConditionAirportReferencePoint property.
     * 
     * @return
     *     possible object is
     *     {@link AirportHeliportPropertyType }
     *     
     */
    public AirportHeliportPropertyType getSignificantPointConditionAirportReferencePoint() {
        return significantPointConditionAirportReferencePoint;
    }

    /**
     * Sets the value of the significantPointConditionAirportReferencePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirportHeliportPropertyType }
     *     
     */
    public void setSignificantPointConditionAirportReferencePoint(AirportHeliportPropertyType value) {
        this.significantPointConditionAirportReferencePoint = value;
    }

    public boolean isSetSignificantPointConditionAirportReferencePoint() {
        return (this.significantPointConditionAirportReferencePoint!= null);
    }

    /**
     * Gets the value of the significantPointConditionPosition property.
     * 
     * @return
     *     possible object is
     *     {@link PointPropertyType }
     *     
     */
    public PointPropertyType getSignificantPointConditionPosition() {
        return significantPointConditionPosition;
    }

    /**
     * Sets the value of the significantPointConditionPosition property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointPropertyType }
     *     
     */
    public void setSignificantPointConditionPosition(PointPropertyType value) {
        this.significantPointConditionPosition = value;
    }

    public boolean isSetSignificantPointConditionPosition() {
        return (this.significantPointConditionPosition!= null);
    }

    /**
     * Gets the value of the flightConditionDirectFlightCondition property.
     * 
     * @return
     *     possible object is
     *     {@link DirectFlightPropertyType }
     *     
     */
    public DirectFlightPropertyType getFlightConditionDirectFlightCondition() {
        return flightConditionDirectFlightCondition;
    }

    /**
     * Sets the value of the flightConditionDirectFlightCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link DirectFlightPropertyType }
     *     
     */
    public void setFlightConditionDirectFlightCondition(DirectFlightPropertyType value) {
        this.flightConditionDirectFlightCondition = value;
    }

    public boolean isSetFlightConditionDirectFlightCondition() {
        return (this.flightConditionDirectFlightCondition!= null);
    }

    /**
     * Gets the value of the flightConditionAircraft property.
     * 
     * @return
     *     possible object is
     *     {@link AircraftCharacteristicPropertyType }
     *     
     */
    public AircraftCharacteristicPropertyType getFlightConditionAircraft() {
        return flightConditionAircraft;
    }

    /**
     * Sets the value of the flightConditionAircraft property.
     * 
     * @param value
     *     allowed object is
     *     {@link AircraftCharacteristicPropertyType }
     *     
     */
    public void setFlightConditionAircraft(AircraftCharacteristicPropertyType value) {
        this.flightConditionAircraft = value;
    }

    public boolean isSetFlightConditionAircraft() {
        return (this.flightConditionAircraft!= null);
    }

    /**
     * Gets the value of the flightConditionBorderCrossingCondition property.
     * 
     * @return
     *     possible object is
     *     {@link AirspaceBorderCrossingPropertyType }
     *     
     */
    public AirspaceBorderCrossingPropertyType getFlightConditionBorderCrossingCondition() {
        return flightConditionBorderCrossingCondition;
    }

    /**
     * Sets the value of the flightConditionBorderCrossingCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirspaceBorderCrossingPropertyType }
     *     
     */
    public void setFlightConditionBorderCrossingCondition(AirspaceBorderCrossingPropertyType value) {
        this.flightConditionBorderCrossingCondition = value;
    }

    public boolean isSetFlightConditionBorderCrossingCondition() {
        return (this.flightConditionBorderCrossingCondition!= null);
    }

    /**
     * Gets the value of the flightConditionAirspaceCondition property.
     * 
     * @return
     *     possible object is
     *     {@link AirspacePropertyType }
     *     
     */
    public AirspacePropertyType getFlightConditionAirspaceCondition() {
        return flightConditionAirspaceCondition;
    }

    /**
     * Sets the value of the flightConditionAirspaceCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirspacePropertyType }
     *     
     */
    public void setFlightConditionAirspaceCondition(AirspacePropertyType value) {
        this.flightConditionAirspaceCondition = value;
    }

    public boolean isSetFlightConditionAirspaceCondition() {
        return (this.flightConditionAirspaceCondition!= null);
    }

    /**
     * Gets the value of the flightConditionFlight property.
     * 
     * @return
     *     possible object is
     *     {@link FlightCharacteristicPropertyType }
     *     
     */
    public FlightCharacteristicPropertyType getFlightConditionFlight() {
        return flightConditionFlight;
    }

    /**
     * Sets the value of the flightConditionFlight property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightCharacteristicPropertyType }
     *     
     */
    public void setFlightConditionFlight(FlightCharacteristicPropertyType value) {
        this.flightConditionFlight = value;
    }

    public boolean isSetFlightConditionFlight() {
        return (this.flightConditionFlight!= null);
    }

    /**
     * Gets the value of the flightConditionStandardInstrumentArrivalCondition property.
     * 
     * @return
     *     possible object is
     *     {@link StandardInstrumentArrivalPropertyType }
     *     
     */
    public StandardInstrumentArrivalPropertyType getFlightConditionStandardInstrumentArrivalCondition() {
        return flightConditionStandardInstrumentArrivalCondition;
    }

    /**
     * Sets the value of the flightConditionStandardInstrumentArrivalCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link StandardInstrumentArrivalPropertyType }
     *     
     */
    public void setFlightConditionStandardInstrumentArrivalCondition(StandardInstrumentArrivalPropertyType value) {
        this.flightConditionStandardInstrumentArrivalCondition = value;
    }

    public boolean isSetFlightConditionStandardInstrumentArrivalCondition() {
        return (this.flightConditionStandardInstrumentArrivalCondition!= null);
    }

    /**
     * Gets the value of the flightConditionOperand property.
     * 
     * @return
     *     possible object is
     *     {@link FlightConditionCombinationPropertyType }
     *     
     */
    public FlightConditionCombinationPropertyType getFlightConditionOperand() {
        return flightConditionOperand;
    }

    /**
     * Sets the value of the flightConditionOperand property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightConditionCombinationPropertyType }
     *     
     */
    public void setFlightConditionOperand(FlightConditionCombinationPropertyType value) {
        this.flightConditionOperand = value;
    }

    public boolean isSetFlightConditionOperand() {
        return (this.flightConditionOperand!= null);
    }

    /**
     * Gets the value of the flightConditionWeather property.
     * 
     * @return
     *     possible object is
     *     {@link MeteorologyPropertyType }
     *     
     */
    public MeteorologyPropertyType getFlightConditionWeather() {
        return flightConditionWeather;
    }

    /**
     * Sets the value of the flightConditionWeather property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeteorologyPropertyType }
     *     
     */
    public void setFlightConditionWeather(MeteorologyPropertyType value) {
        this.flightConditionWeather = value;
    }

    public boolean isSetFlightConditionWeather() {
        return (this.flightConditionWeather!= null);
    }

    /**
     * Gets the value of the flightConditionAerialRefuellingCondition property.
     * 
     * @return
     *     possible object is
     *     {@link AerialRefuellingPropertyType }
     *     
     */
    public AerialRefuellingPropertyType getFlightConditionAerialRefuellingCondition() {
        return flightConditionAerialRefuellingCondition;
    }

    /**
     * Sets the value of the flightConditionAerialRefuellingCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link AerialRefuellingPropertyType }
     *     
     */
    public void setFlightConditionAerialRefuellingCondition(AerialRefuellingPropertyType value) {
        this.flightConditionAerialRefuellingCondition = value;
    }

    public boolean isSetFlightConditionAerialRefuellingCondition() {
        return (this.flightConditionAerialRefuellingCondition!= null);
    }

    /**
     * Gets the value of the operationalCondition property.
     * 
     * @return
     *     possible object is
     *     {@link FlightConditionCircumstancePropertyType }
     *     
     */
    public FlightConditionCircumstancePropertyType getOperationalCondition() {
        return operationalCondition;
    }

    /**
     * Sets the value of the operationalCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightConditionCircumstancePropertyType }
     *     
     */
    public void setOperationalCondition(FlightConditionCircumstancePropertyType value) {
        this.operationalCondition = value;
    }

    public boolean isSetOperationalCondition() {
        return (this.operationalCondition!= null);
    }

    /**
     * Gets the value of the flightLevel property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the flightLevel property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getFlightLevel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FlightRestrictionLevelPropertyType }
     * </p>
     * 
     * 
     * @return
     *     The value of the flightLevel property.
     */
    public List<FlightRestrictionLevelPropertyType> getFlightLevel() {
        if (flightLevel == null) {
            flightLevel = new ArrayList<>();
        }
        return this.flightLevel;
    }

    public boolean isSetFlightLevel() {
        return ((this.flightLevel!= null)&&(!this.flightLevel.isEmpty()));
    }

    public void unsetFlightLevel() {
        this.flightLevel = null;
    }

    /**
     * Gets the value of the annotation property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the annotation property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getAnnotation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NotePropertyType }
     * </p>
     * 
     * 
     * @return
     *     The value of the annotation property.
     */
    public List<NotePropertyType> getAnnotation() {
        if (annotation == null) {
            annotation = new ArrayList<>();
        }
        return this.annotation;
    }

    public boolean isSetAnnotation() {
        return ((this.annotation!= null)&&(!this.annotation.isEmpty()));
    }

    public void unsetAnnotation() {
        this.annotation = null;
    }

    /**
     * Gets the value of the extension property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extension property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getExtension().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FlightConditionElementType.Extension }
     * </p>
     * 
     * 
     * @return
     *     The value of the extension property.
     */
    public List<FlightConditionElementType.Extension> getExtension() {
        if (extension == null) {
            extension = new ArrayList<>();
        }
        return this.extension;
    }

    public boolean isSetExtension() {
        return ((this.extension!= null)&&(!this.extension.isEmpty()));
    }

    public void unsetExtension() {
        this.extension = null;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <sequence>
     *         <element ref="{http://www.aixm.aero/schema/5.1}AbstractFlightConditionElementExtension"/>
     *       </sequence>
     *       <attGroup ref="{http://www.opengis.net/gml/3.2}OwnershipAttributeGroup"/>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "abstractFlightConditionElementExtension"
    })
    public static class Extension {

        @XmlElement(name = "AbstractFlightConditionElementExtension", required = true)
        @OneToOne(cascade = {
            CascadeType.ALL
        }, fetch = FetchType.EAGER)
        @JoinColumn(name = "abstractflightconditionelementextension_id", referencedColumnName = "id")
        protected AbstractExtensionType abstractFlightConditionElementExtension;
        @XmlAttribute(name = "owns")
        @Transient
        protected Boolean owns;

        /**
         * Gets the value of the abstractFlightConditionElementExtension property.
         * 
         * @return
         *     possible object is
         *     {@link AbstractExtensionType }
         *     
         */
        public AbstractExtensionType getAbstractFlightConditionElementExtension() {
            return abstractFlightConditionElementExtension;
        }

        /**
         * Sets the value of the abstractFlightConditionElementExtension property.
         * 
         * @param value
         *     allowed object is
         *     {@link AbstractExtensionType }
         *     
         */
        public void setAbstractFlightConditionElementExtension(AbstractExtensionType value) {
            this.abstractFlightConditionElementExtension = value;
        }

        public boolean isSetAbstractFlightConditionElementExtension() {
            return (this.abstractFlightConditionElementExtension!= null);
        }

        /**
         * Gets the value of the owns property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isOwns() {
            if (owns == null) {
                return false;
            } else {
                return owns;
            }
        }

        /**
         * Sets the value of the owns property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setOwns(boolean value) {
            this.owns = value;
        }

        public boolean isSetOwns() {
            return (this.owns!= null);
        }

        public void unsetOwns() {
            this.owns = null;
        }

    }

}
