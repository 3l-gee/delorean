-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_nbvvgp.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_caaytb.*) AS annotation
  from master_join master_join_qtbbsg
  join notes.note_view notes_note_lat_caaytb on master_join_qtbbsg.target_id = notes_note_lat_caaytb.id
  where master_join_qtbbsg.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_nbvvgp on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_uxhkyp.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ynwkei.layer::jsonb as layer,
    notes_note_view_lvpjqz.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_zuadvr.id) as criticalridge
  from master_join master_join_xvybzf
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_zuadvr on master_join_xvybzf.target_id = airport_heliport_ridge_lat_zuadvr.id
  where master_join_xvybzf.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_uxhkyp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_stzxbb.id) as layer
  from master_join master_join_yxurrb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_stzxbb on master_join_yxurrb.target_id = airport_heliport_surfacecontaminationlayer_lat_stzxbb.id
  where master_join_yxurrb.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ynwkei on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gvrluj.*) AS annotation
  from master_join master_join_iyacgw
  join notes.note_view notes_note_lat_gvrluj on master_join_iyacgw.target_id = notes_note_lat_gvrluj.id
  where master_join_iyacgw.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_lvpjqz on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_waypqx.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_qtekug.layer::jsonb as layer,
    notes_note_view_mcvgkq.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_rvyxra.id) as criticalridge
  from master_join master_join_bplhvp
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_rvyxra on master_join_bplhvp.target_id = airport_heliport_ridge_lat_rvyxra.id
  where master_join_bplhvp.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_waypqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_gckhfo.id) as layer
  from master_join master_join_efhvhs
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_gckhfo on master_join_efhvhs.target_id = airport_heliport_surfacecontaminationlayer_lat_gckhfo.id
  where master_join_efhvhs.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_qtekug on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uosxnk.*) AS annotation
  from master_join master_join_zoeayq
  join notes.note_view notes_note_lat_uosxnk on master_join_zoeayq.target_id = notes_note_lat_uosxnk.id
  where master_join_zoeayq.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_mcvgkq on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_lnkxis.id)::jsonb AS theairspacevolume,
    notes_note_view_zvkpbn.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_lnkxis on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_lnkxis.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hhqcdu.*) AS annotation
  from master_join master_join_vqpyva
  join notes.note_view notes_note_lat_hhqcdu on master_join_vqpyva.target_id = notes_note_lat_hhqcdu.id
  where master_join_vqpyva.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_zvkpbn on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_quimwn.title as varchar), '(' || shared_standardlevelcolumn_pt_quimwn.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_quimwn.href::text AS discretelevelseries_href,
    notes_note_view_chiidx.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_quimwn on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_quimwn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yadcdi.*) AS annotation
  from master_join master_join_egkssb
  join notes.note_view notes_note_lat_yadcdi on master_join_egkssb.target_id = notes_note_lat_yadcdi.id
  where master_join_egkssb.source_id = shared.airspacelayer.id
) as notes_note_view_chiidx on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_qphjvx.title as varchar), '(' || airspace_airspace_pt_qphjvx.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_qphjvx.href::text AS theairspace_href,
    notes_note_view_kvwkuj.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_qphjvx on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_qphjvx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwdiwq.*) AS annotation
  from master_join master_join_blgyci
  join notes.note_view notes_note_lat_nwdiwq on master_join_blgyci.target_id = notes_note_lat_nwdiwq.id
  where master_join_blgyci.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_kvwkuj on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_iozdev.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hkevov.*) AS annotation
  from master_join master_join_ubiadw
  join notes.note_view notes_note_lat_hkevov on master_join_ubiadw.target_id = notes_note_lat_hkevov.id
  where master_join_ubiadw.source_id = shared.altitudeadjustment.id
) as notes_note_view_iozdev on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_dtwseq.title as varchar), '(' || navaids_points_angleindication_pt_dtwseq.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_dtwseq.href::text AS theangleindication_href,
    notes_note_view_psgztl.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_dtwseq on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_dtwseq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ipmayy.*) AS annotation
  from master_join master_join_mcxxiy
  join notes.note_view notes_note_lat_ipmayy on master_join_mcxxiy.target_id = notes_note_lat_ipmayy.id
  where master_join_mcxxiy.source_id = navaids_points.angleuse.id
) as notes_note_view_psgztl on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_kgifgx.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_owczzn.*) AS annotation
  from master_join master_join_zbswuu
  join notes.note_view notes_note_lat_owczzn on master_join_zbswuu.target_id = notes_note_lat_owczzn.id
  where master_join_zbswuu.source_id = procedure.approachaltitudetable.id
) as notes_note_view_kgifgx on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_wjzabq.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_mhwqag.title as varchar), '(' || airport_heliport_altimetersource_pt_mhwqag.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_mhwqag.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_hpiykc.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_tblfad.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_gfxscz.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_efbjyv.designsurface::jsonb as designsurface,
    notes_note_view_ibxear.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_wjzabq on procedure.approachcondition.minimumset_id = procedure_minima_pt_wjzabq.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_mhwqag on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_mhwqag.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_sgbjqr.id) as circlingrestriction
  from master_join master_join_pftlzf
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_sgbjqr on master_join_pftlzf.target_id = procedure_circlingrestriction_lat_sgbjqr.id
  where master_join_pftlzf.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_hpiykc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zrzbsl.id) as aircraftcategory
  from master_join master_join_duvcxd
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_zrzbsl on master_join_duvcxd.target_id = shared_aircraftcharacteristic_lat_zrzbsl.id
  where master_join_duvcxd.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_tblfad on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_ztuphc.id) as landingarea
  from master_join master_join_nljuxu
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_ztuphc on master_join_nljuxu.target_id = procedure_landingtakeoffareacollection_lat_ztuphc.id
  where master_join_nljuxu.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_gfxscz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_jvrrpv.id) as designsurface
  from master_join master_join_hxvhcp
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_jvrrpv on master_join_hxvhcp.target_id = shared_obstacleassessmentarea_lat_jvrrpv.id
  where master_join_hxvhcp.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_efbjyv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tjpcwl.*) AS annotation
  from master_join master_join_scbdwp
  join notes.note_view notes_note_lat_tjpcwl on master_join_scbdwp.target_id = notes_note_lat_tjpcwl.id
  where master_join_scbdwp.source_id = procedure.approachcondition.id
) as notes_note_view_ibxear on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_duzida.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ufywja.*) AS annotation
  from master_join master_join_oxzobu
  join notes.note_view notes_note_lat_ufywja on master_join_oxzobu.target_id = notes_note_lat_ufywja.id
  where master_join_oxzobu.source_id = procedure.approachdistancetable.id
) as notes_note_view_duzida on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_pnzxtm.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aiefya.*) AS annotation
  from master_join master_join_wliqce
  join notes.note_view notes_note_lat_aiefya on master_join_wliqce.target_id = notes_note_lat_aiefya.id
  where master_join_wliqce.source_id = procedure.approachtimingtable.id
) as notes_note_view_pnzxtm on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_skrpyn.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_pjevys.layer::jsonb as layer,
    notes_note_view_bwilya.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_tsmnnq.id) as criticalridge
  from master_join master_join_sefgzz
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_tsmnnq on master_join_sefgzz.target_id = airport_heliport_ridge_lat_tsmnnq.id
  where master_join_sefgzz.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_skrpyn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_mlirjv.id) as layer
  from master_join master_join_mflped
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_mlirjv on master_join_mflped.target_id = airport_heliport_surfacecontaminationlayer_lat_mlirjv.id
  where master_join_mflped.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_pjevys on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sxovlw.*) AS annotation
  from master_join master_join_ivfrqj
  join notes.note_view notes_note_lat_sxovlw on master_join_ivfrqj.target_id = notes_note_lat_sxovlw.id
  where master_join_ivfrqj.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_bwilya on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_pnuikr.title as varchar), '(' || organisation_organisationauthority_pt_pnuikr.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_pnuikr.href::text AS theorganisationauthority_href,
    notes_note_view_qdmuga.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pnuikr on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_pnuikr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vdhpte.*) AS annotation
  from master_join master_join_yyeavm
  join notes.note_view notes_note_lat_vdhpte on master_join_yyeavm.target_id = notes_note_lat_vdhpte.id
  where master_join_yyeavm.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_qdmuga on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_snyxgb.title as varchar), '(' || organisation_organisationauthority_pt_snyxgb.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_snyxgb.href::text AS theorganisationauthority_href,
    notes_note_view_jwqpkb.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_snyxgb on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_snyxgb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xuhddl.*) AS annotation
  from master_join master_join_naxkts
  join notes.note_view notes_note_lat_xuhddl on master_join_naxkts.target_id = notes_note_lat_xuhddl.id
  where master_join_naxkts.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_jwqpkb on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ubxajz.title as varchar), '(' || organisation_organisationauthority_pt_ubxajz.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ubxajz.href::text AS theorganisationauthority_href,
    notes_note_view_bfqspt.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ubxajz on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_ubxajz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ycrunc.*) AS annotation
  from master_join master_join_wpglkf
  join notes.note_view notes_note_lat_ycrunc on master_join_wpglkf.target_id = notes_note_lat_ycrunc.id
  where master_join_wpglkf.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_bfqspt on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_owiirn.title as varchar), '(' || organisation_organisationauthority_pt_owiirn.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_owiirn.href::text AS theorganisationauthority_href,
    notes_note_view_cvwygc.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_owiirn on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_owiirn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cuduic.*) AS annotation
  from master_join master_join_obytbt
  join notes.note_view notes_note_lat_cuduic on master_join_obytbt.target_id = notes_note_lat_cuduic.id
  where master_join_obytbt.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_cvwygc on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_hcvuqu.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_juvewp.*) AS annotation
  from master_join master_join_ewmvdu
  join notes.note_view notes_note_lat_juvewp on master_join_ewmvdu.target_id = notes_note_lat_juvewp.id
  where master_join_ewmvdu.source_id = service.callsigndetail.id
) as notes_note_view_hcvuqu on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_htgjuh.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xrrscd.*) AS annotation
  from master_join master_join_dvuloe
  join notes.note_view notes_note_lat_xrrscd on master_join_dvuloe.target_id = notes_note_lat_xrrscd.id
  where master_join_dvuloe.source_id = shared.circlesector.id
) as notes_note_view_htgjuh on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as name,
    notes_note_view_lbslkm.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhgmii.*) AS annotation
  from master_join master_join_iemwbv
  join notes.note_view notes_note_lat_qhgmii on master_join_iemwbv.target_id = notes_note_lat_qhgmii.id
  where master_join_iemwbv.source_id = airport_heliport.city.id
) as notes_note_view_lbslkm on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_jvcaff.id)::jsonb AS enginetype,
    notes_note_view_zpansv.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_jvcaff on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_jvcaff.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvwutj.*) AS annotation
  from master_join master_join_uwmkeu
  join notes.note_view notes_note_lat_cvwutj on master_join_uwmkeu.target_id = notes_note_lat_cvwutj.id
  where master_join_uwmkeu.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_zpansv on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_hzcsxn.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zsthad.*) AS annotation
  from master_join master_join_zfeehn
  join notes.note_view notes_note_lat_zsthad on master_join_zfeehn.target_id = notes_note_lat_zsthad.id
  where master_join_zfeehn.source_id = routes.directflightclass.id
) as notes_note_view_hzcsxn on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_xgtijk.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsiflm.*) AS annotation
  from master_join master_join_mntqut
  join notes.note_view notes_note_lat_bsiflm on master_join_mntqut.target_id = notes_note_lat_bsiflm.id
  where master_join_mntqut.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_xgtijk on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_tjzkcm.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_vdpokn.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_zoqvgd.id) as adjustmentinopcol
  from master_join master_join_wwuzyn
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_zoqvgd on master_join_wwuzyn.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_zoqvgd.id
  where master_join_wwuzyn.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_tjzkcm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bxmchp.*) AS annotation
  from master_join master_join_uurugm
  join notes.note_view notes_note_lat_bxmchp on master_join_uurugm.target_id = notes_note_lat_bxmchp.id
  where master_join_uurugm.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_vdpokn on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_vucsly.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_recxlo.*) AS annotation
  from master_join master_join_cfuyjd
  join notes.note_view notes_note_lat_recxlo on master_join_cfuyjd.target_id = notes_note_lat_recxlo.id
  where master_join_cfuyjd.source_id = public.fasdatablock.id
) as notes_note_view_vucsly on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_nrjkdh.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_fuxqjt.distance::jsonb as distance,
    procedure_approachtimingtable_pt_dasmcn.timing::jsonb as timing,
    notes_note_view_zthvex.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_ovltvh.id) as altitude
  from master_join master_join_ldbqvm
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_ovltvh on master_join_ldbqvm.target_id = procedure_approachaltitudetable_lat_ovltvh.id
  where master_join_ldbqvm.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_nrjkdh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_vyuzim.id) as distance
  from master_join master_join_drwvri
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_vyuzim on master_join_drwvri.target_id = procedure_approachdistancetable_lat_vyuzim.id
  where master_join_drwvri.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_fuxqjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_puanrq.id) as timing
  from master_join master_join_xypdja
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_puanrq on master_join_xypdja.target_id = procedure_approachtimingtable_lat_puanrq.id
  where master_join_xypdja.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_dasmcn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hhpnnf.*) AS annotation
  from master_join master_join_dtzqqz
  join notes.note_view notes_note_lat_hhpnnf on master_join_dtzqqz.target_id = notes_note_lat_hhpnnf.id
  where master_join_dtzqqz.source_id = procedure.finalprofile.id
) as notes_note_view_zthvex on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_tsxmrj.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jcucnu.*) AS annotation
  from master_join master_join_puboxm
  join notes.note_view notes_note_lat_jcucnu on master_join_puboxm.target_id = notes_note_lat_jcucnu.id
  where master_join_puboxm.source_id = shared.flightcharacteristic.id
) as notes_note_view_tsxmrj on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_gqlrzh.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukatgx.*) AS annotation
  from master_join master_join_mldrdf
  join notes.note_view notes_note_lat_ukatgx on master_join_mldrdf.target_id = notes_note_lat_ukatgx.id
  where master_join_mldrdf.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_gqlrzh on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_hwrfgv.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hvbbwd.*) AS annotation
  from master_join master_join_ujbdkp
  join notes.note_view notes_note_lat_hvbbwd on master_join_ujbdkp.target_id = notes_note_lat_hvbbwd.id
  where master_join_ujbdkp.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_hwrfgv on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_cuuhqu.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfnzfo.*) AS annotation
  from master_join master_join_noiwwf
  join notes.note_view notes_note_lat_rfnzfo on master_join_noiwwf.target_id = notes_note_lat_rfnzfo.id
  where master_join_noiwwf.source_id = service.fuel.id
) as notes_note_view_cuuhqu on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_justqd.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_enqjji.*) AS annotation
  from master_join master_join_qfjvat
  join notes.note_view notes_note_lat_enqjji on master_join_qfjvat.target_id = notes_note_lat_enqjji.id
  where master_join_qfjvat.source_id = holding.holdingpatterndistance.id
) as notes_note_view_justqd on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_hquppo.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ftihuy.*) AS annotation
  from master_join master_join_wjonxf
  join notes.note_view notes_note_lat_ftihuy on master_join_wjonxf.target_id = notes_note_lat_ftihuy.id
  where master_join_wjonxf.source_id = holding.holdingpatternduration.id
) as notes_note_view_hquppo on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_sdzssp.title as varchar), '(' || holding_holdingpattern_pt_sdzssp.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_sdzssp.href::text AS theholdingpattern_href,
    notes_note_view_isewqv.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_sdzssp on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_sdzssp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_igrpmw.*) AS annotation
  from master_join master_join_fuujwy
  join notes.note_view notes_note_lat_igrpmw on master_join_fuujwy.target_id = notes_note_lat_igrpmw.id
  where master_join_fuujwy.source_id = procedure.holdinguse.id
) as notes_note_view_isewqv on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_cebjgz.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_ppszoq.tlof::jsonb as tlof,
    notes_note_view_mjreqt.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ydcmwv.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ydcmwv.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ydcmwv.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ydcmwv.href
  )) as runway  from master_join master_join_kqyyex
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ydcmwv on master_join_kqyyex.target_id = airport_heliport_runwaydirection_lat_ydcmwv.id
  where master_join_kqyyex.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_cebjgz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_aeysbs.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_aeysbs.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_aeysbs.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_aeysbs.href
  )) as tlof  from master_join master_join_tevwmx
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_aeysbs on master_join_tevwmx.target_id = airport_heliport_touchdownliftoff_lat_aeysbs.id
  where master_join_tevwmx.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_ppszoq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgllfi.*) AS annotation
  from master_join master_join_ybmwbf
  join notes.note_view notes_note_lat_bgllfi on master_join_ybmwbf.target_id = notes_note_lat_bgllfi.id
  where master_join_ybmwbf.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_mjreqt on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_mycadf.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pnabkw.*) AS annotation
  from master_join master_join_nsytys
  join notes.note_view notes_note_lat_pnabkw on master_join_nsytys.target_id = notes_note_lat_pnabkw.id
  where master_join_nsytys.source_id = airport_heliport.lightactivation.id
) as notes_note_view_mycadf on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_zfoeza.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wheybq.*) AS annotation
  from master_join master_join_cjsgla
  join notes.note_view notes_note_lat_wheybq on master_join_cjsgla.target_id = notes_note_lat_wheybq.id
  where master_join_cjsgla.source_id = shared.meteorology.id
) as notes_note_view_zfoeza on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_kuffbi.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_ukqtet.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_xaglbl.id) as adjustmentinop
  from master_join master_join_nzgnxz
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_xaglbl on master_join_nzgnxz.target_id = procedure_equipmentunavailableadjustment_lat_xaglbl.id
  where master_join_nzgnxz.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_kuffbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ksofvi.*) AS annotation
  from master_join master_join_zntgpt
  join notes.note_view notes_note_lat_ksofvi on master_join_zntgpt.target_id = notes_note_lat_ksofvi.id
  where master_join_zntgpt.source_id = procedure.minima.id
) as notes_note_view_ukqtet on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_wyuutl.altimeter::jsonb as altimeter,
    notes_note_view_fsyyhj.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_geriou.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_geriou.title AS varchar), '(' || airport_heliport_altimetersource_lat_geriou.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_geriou.href
  )) as altimeter  from master_join master_join_sxixlh
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_geriou on master_join_sxixlh.target_id = airport_heliport_altimetersource_lat_geriou.id
  where master_join_sxixlh.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_wyuutl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brgdww.*) AS annotation
  from master_join master_join_ubfbcm
  join notes.note_view notes_note_lat_brgdww on master_join_ubfbcm.target_id = notes_note_lat_brgdww.id
  where master_join_ubfbcm.source_id = procedure.missedapproachgroup.id
) as notes_note_view_fsyyhj on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    notes_note_view_rwpifa.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ctidxf.*) AS annotation
  from master_join master_join_piwgod
  join notes.note_view notes_note_lat_ctidxf on master_join_piwgod.target_id = notes_note_lat_ctidxf.id
  where master_join_piwgod.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_rwpifa on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    notes_note_view_skbvlf.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_imhcle.*) AS annotation
  from master_join master_join_ttpirz
  join notes.note_view notes_note_lat_imhcle on master_join_ttpirz.target_id = notes_note_lat_imhcle.id
  where master_join_ttpirz.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_skbvlf on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_iwwkdz.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fgydcx.*) AS annotation
  from master_join master_join_mekbwx
  join notes.note_view notes_note_lat_fgydcx on master_join_mekbwx.target_id = notes_note_lat_fgydcx.id
  where master_join_mekbwx.source_id = service.nitrogen.id
) as notes_note_view_iwwkdz on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_vfohdb.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_azzvut.*) AS annotation
  from master_join master_join_lynbop
  join notes.note_view notes_note_lat_azzvut on master_join_lynbop.target_id = notes_note_lat_azzvut.id
  where master_join_lynbop.source_id = shared.obstacleplacement.id
) as notes_note_view_vfohdb on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_keickc.title as varchar), '(' || obstacles_verticalstructure_pt_keickc.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_keickc.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_ljdjsy.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_mvuvca.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_nijarf.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_keickc on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_keickc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_hukbqq.id) as adjustment
  from master_join master_join_ctzafo
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_hukbqq on master_join_ctzafo.target_id = shared_altitudeadjustment_lat_hukbqq.id
  where master_join_ctzafo.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_ljdjsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_bcmvho.id) as obstacleplacement
  from master_join master_join_hmvfas
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_bcmvho on master_join_hmvfas.target_id = shared_obstacleplacement_lat_bcmvho.id
  where master_join_hmvfas.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_mvuvca on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbkkjl.*) AS annotation
  from master_join master_join_mlqpyu
  join notes.note_view notes_note_lat_rbkkjl on master_join_mlqpyu.target_id = notes_note_lat_rbkkjl.id
  where master_join_mlqpyu.source_id = shared.obstruction.id
) as notes_note_view_nijarf on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_nbmucs.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqzkfr.*) AS annotation
  from master_join master_join_msokjv
  join notes.note_view notes_note_lat_kqzkfr on master_join_msokjv.target_id = notes_note_lat_kqzkfr.id
  where master_join_msokjv.source_id = service.oil.id
) as notes_note_view_nbmucs on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_eegbtk.title as varchar), '(' || organisation_organisationauthority_pt_eegbtk.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_eegbtk.href::text AS theorganisationauthority_href,
    notes_note_view_rdaraw.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_eegbtk on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_eegbtk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_othewo.*) AS annotation
  from master_join master_join_uguydt
  join notes.note_view notes_note_lat_othewo on master_join_uguydt.target_id = notes_note_lat_othewo.id
  where master_join_uguydt.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_rdaraw on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_radqhp.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klygjj.*) AS annotation
  from master_join master_join_nkjcuz
  join notes.note_view notes_note_lat_klygjj on master_join_nkjcuz.target_id = notes_note_lat_klygjj.id
  where master_join_nkjcuz.source_id = service.oxygen.id
) as notes_note_view_radqhp on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    notes_note_view_hxqftf.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uoytvp.*) AS annotation
  from master_join master_join_heaisg
  join notes.note_view notes_note_lat_uoytvp on master_join_heaisg.target_id = notes_note_lat_uoytvp.id
  where master_join_heaisg.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_hxqftf on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    notes_note_view_golpqa.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mhqnca.*) AS annotation
  from master_join master_join_fvkhpe
  join notes.note_view notes_note_lat_mhqnca on master_join_fvkhpe.target_id = notes_note_lat_mhqnca.id
  where master_join_fvkhpe.source_id = surveillance.radarcomponent.id
) as notes_note_view_golpqa on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_odtjsb.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqytva.*) AS annotation
  from master_join master_join_zybyls
  join notes.note_view notes_note_lat_lqytva on master_join_zybyls.target_id = notes_note_lat_lqytva.id
  where master_join_zybyls.source_id = airport_heliport.ridge.id
) as notes_note_view_odtjsb on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_axinkk.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jcamrw.layer::jsonb as layer,
    notes_note_view_hccjxk.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_dvulxv.id) as criticalridge
  from master_join master_join_gipffe
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_dvulxv on master_join_gipffe.target_id = airport_heliport_ridge_lat_dvulxv.id
  where master_join_gipffe.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_axinkk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_tgthhj.id) as layer
  from master_join master_join_wlfgsf
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_tgthhj on master_join_wlfgsf.target_id = airport_heliport_surfacecontaminationlayer_lat_tgthhj.id
  where master_join_wlfgsf.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jcamrw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cnvtnd.*) AS annotation
  from master_join master_join_tuewqo
  join notes.note_view notes_note_lat_cnvtnd on master_join_tuewqo.target_id = notes_note_lat_cnvtnd.id
  where master_join_tuewqo.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_hccjxk on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_ivlphs.declaredvalue::jsonb as declaredvalue,
    notes_note_view_shlxty.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_vefhcg.id) as declaredvalue
  from master_join master_join_qprdpm
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_vefhcg on master_join_qprdpm.target_id = airport_heliport_runwaydeclareddistancevalue_lat_vefhcg.id
  where master_join_qprdpm.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_ivlphs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uulmhi.*) AS annotation
  from master_join master_join_fgmvgr
  join notes.note_view notes_note_lat_uulmhi on master_join_fgmvgr.target_id = notes_note_lat_uulmhi.id
  where master_join_fgmvgr.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_shlxty on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_cizilw.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_rgxmaw.layer::jsonb as layer,
    notes_note_view_fwnpgy.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_skvrar.id) as criticalridge
  from master_join master_join_xzwbub
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_skvrar on master_join_xzwbub.target_id = airport_heliport_ridge_lat_skvrar.id
  where master_join_xzwbub.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_cizilw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_dwwvve.id) as layer
  from master_join master_join_cdpmdt
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_dwwvve on master_join_cdpmdt.target_id = airport_heliport_surfacecontaminationlayer_lat_dwwvve.id
  where master_join_cdpmdt.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_rgxmaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nkysmz.*) AS annotation
  from master_join master_join_mhzelm
  join notes.note_view notes_note_lat_nkysmz on master_join_mhzelm.target_id = notes_note_lat_nkysmz.id
  where master_join_mhzelm.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_fwnpgy on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_ypatij.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fxlttu.*) AS annotation
  from master_join master_join_nbxmzn
  join notes.note_view notes_note_lat_fxlttu on master_join_nbxmzn.target_id = notes_note_lat_fxlttu.id
  where master_join_nbxmzn.source_id = procedure.sectordesign.id
) as notes_note_view_ypatij on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_lgjiwz.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vnpxoo.*) AS annotation
  from master_join master_join_xfjcrx
  join notes.note_view notes_note_lat_vnpxoo on master_join_xfjcrx.target_id = notes_note_lat_vnpxoo.id
  where master_join_xfjcrx.source_id = shared.standardlevel.id
) as notes_note_view_lgjiwz on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_urlrzb.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_upiswi.*) AS annotation
  from master_join master_join_fvqrhj
  join notes.note_view notes_note_lat_upiswi on master_join_fvqrhj.target_id = notes_note_lat_upiswi.id
  where master_join_fvqrhj.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_urlrzb on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_imvjcx.title as varchar), '(' || organisation_unit_pt_imvjcx.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_imvjcx.href::text AS theunit_href,
    notes_note_view_sigsiu.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_imvjcx on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_imvjcx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nvjvsb.*) AS annotation
  from master_join master_join_wyiibc
  join notes.note_view notes_note_lat_nvjvsb on master_join_wyiibc.target_id = notes_note_lat_nvjvsb.id
  where master_join_wyiibc.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_sigsiu on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_qemsac.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_lledwi.layer::jsonb as layer,
    notes_note_view_uassfa.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_rcyloe.id) as criticalridge
  from master_join master_join_bbugam
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_rcyloe on master_join_bbugam.target_id = airport_heliport_ridge_lat_rcyloe.id
  where master_join_bbugam.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_qemsac on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_jdabct.id) as layer
  from master_join master_join_pjdloo
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_jdabct on master_join_pjdloo.target_id = airport_heliport_surfacecontaminationlayer_lat_jdabct.id
  where master_join_pjdloo.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_lledwi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xlnita.*) AS annotation
  from master_join master_join_ogtfjd
  join notes.note_view notes_note_lat_xlnita on master_join_ogtfjd.target_id = notes_note_lat_xlnita.id
  where master_join_ogtfjd.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_uassfa on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_nbbeoe.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_fnfhns.layer::jsonb as layer,
    notes_note_view_ravlbw.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ttoaes.id) as criticalridge
  from master_join master_join_yatecd
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ttoaes on master_join_yatecd.target_id = airport_heliport_ridge_lat_ttoaes.id
  where master_join_yatecd.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_nbbeoe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_aptfit.id) as layer
  from master_join master_join_rkuuwf
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_aptfit on master_join_rkuuwf.target_id = airport_heliport_surfacecontaminationlayer_lat_aptfit.id
  where master_join_rkuuwf.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_fnfhns on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_atughz.*) AS annotation
  from master_join master_join_tidkfx
  join notes.note_view notes_note_lat_atughz on master_join_tidkfx.target_id = notes_note_lat_atughz.id
  where master_join_tidkfx.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_ravlbw on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_ytkrle.title as varchar), '(' || organisation_unit_pt_ytkrle.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_ytkrle.href::text AS theunit_href,
    notes_note_view_dpzuoy.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_ytkrle on organisation.unitdependency.theunit_id = organisation_unit_pt_ytkrle.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_irwkhz.*) AS annotation
  from master_join master_join_iqyilt
  join notes.note_view notes_note_lat_irwkhz on master_join_iqyilt.target_id = notes_note_lat_irwkhz.id
  where master_join_iqyilt.source_id = organisation.unitdependency.id
) as notes_note_view_dpzuoy on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_odjgbv.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_odjgbv.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_hunzeu.point::jsonb as point,
    shared_airspacelayer_pt_fidhej.verticalextent::jsonb as verticalextent,
    notes_note_view_vvzxxf.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_odjgbv on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_odjgbv.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_vfzbbx.id) as point
  from master_join master_join_sgenyq
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_vfzbbx on master_join_sgenyq.target_id = aerial_refuelling_aerialrefuellingpoint_lat_vfzbbx.id
  where master_join_sgenyq.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_hunzeu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_stanjq.id) as verticalextent
  from master_join master_join_inlpur
  join shared.airspacelayer_pt shared_airspacelayer_lat_stanjq on master_join_inlpur.target_id = shared_airspacelayer_lat_stanjq.id
  where master_join_inlpur.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_fidhej on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cdiujt.*) AS annotation
  from master_join master_join_sfewlv
  join notes.note_view notes_note_lat_cdiujt on master_join_sfewlv.target_id = notes_note_lat_cdiujt.id
  where master_join_sfewlv.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_vvzxxf on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_ejkbcb.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_bjqzcy.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_bjqzcy.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_uvxmny.transitionleg::jsonb as transitionleg,
    notes_note_view_xsajjy.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_ejkbcb on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_ejkbcb.id
left join geometry.curve_view geometry_curve_view_bjqzcy on procedure.proceduretransition.trajectory_id = geometry_curve_view_bjqzcy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_dntvdp.id) as transitionleg
  from master_join master_join_niunwn
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_dntvdp on master_join_niunwn.target_id = procedure_proceduretransitionleg_lat_dntvdp.id
  where master_join_niunwn.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_uvxmny on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_arzysz.*) AS annotation
  from master_join master_join_ytozmk
  join notes.note_view notes_note_lat_arzysz on master_join_ytozmk.target_id = notes_note_lat_arzysz.id
  where master_join_ytozmk.source_id = procedure.proceduretransition.id
) as notes_note_view_xsajjy on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_ngvwqx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ngvwqx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ngvwqx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ngvwqx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ngvwqx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ngvwqx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ngvwqx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ngvwqx.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_uppttu.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_jxdrcl.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ngvwqx on shared.lightelement.location_id = geometry_elevatedpoint_view_ngvwqx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjzczl.*) AS annotation
  from master_join master_join_fwsava
  join notes.note_view notes_note_lat_qjzczl on master_join_fwsava.target_id = notes_note_lat_qjzczl.id
  where master_join_fwsava.source_id = shared.lightelement.id
) as notes_note_view_uppttu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_dzpxta.id) as availability
  from master_join master_join_vkjhgm
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_dzpxta on master_join_vkjhgm.target_id = shared_lightelementstatus_lat_dzpxta.id
  where master_join_vkjhgm.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_jxdrcl on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ffbhip.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_ffbhip.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_ffbhip.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_ffbhip.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_ffbhip.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_ffbhip.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_ffbhip.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_ffbhip.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_eboqwt.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ffbhip on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_ffbhip.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvexfn.*) AS annotation
  from master_join master_join_nfflqf
  join notes.note_view notes_note_lat_cvexfn on master_join_nfflqf.target_id = notes_note_lat_cvexfn.id
  where master_join_nfflqf.source_id = surveillance.reflector.id
) as notes_note_view_eboqwt on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_wdeees.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_wdeees.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_wdeees.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_wdeees.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_wdeees.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_wdeees.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_dxlogx.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_dxlogx.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_dxlogx.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_dxlogx.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_dxlogx.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_dxlogx.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_lzkfhv.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_lzkfhv.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_lzkfhv.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_lzkfhv.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_lzkfhv.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_lzkfhv.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_lzkfhv.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_lzkfhv.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_porylv.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wdeees on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_wdeees.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_dxlogx on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_dxlogx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lzkfhv on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_lzkfhv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vxlycn.*) AS annotation
  from master_join master_join_xjgeok
  join notes.note_view notes_note_lat_vxlycn on master_join_xjgeok.target_id = notes_note_lat_vxlycn.id
  where master_join_xjgeok.source_id = airport_heliport.markingelement.id
) as notes_note_view_porylv on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_qhkbec.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_qhkbec.attr::jsonb  as extent,
    notes_note_view_typqgd.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_hwuaby.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_hwuaby.id,
      'elevation', geometry_elevatedsurface_lat_hwuaby.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_hwuaby.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_hwuaby.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_hwuaby.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_hwuaby.horizontalAccuracy
    )) AS attr
  from master_join master_join_jmrisk
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_hwuaby on master_join_jmrisk.target_id = geometry_elevatedsurface_lat_hwuaby.id
  where master_join_jmrisk.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_qhkbec on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujtgen.*) AS annotation
  from master_join master_join_hyuulm
  join notes.note_view notes_note_lat_ujtgen on master_join_hyuulm.target_id = notes_note_lat_ujtgen.id
  where master_join_hyuulm.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_typqgd on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_cifhsd.title as varchar), '(' || navaids_points_designatedpoint_pt_cifhsd.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_cifhsd.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jtokim.title as varchar), '(' || navaids_points_navaid_pt_jtokim.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jtokim.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vadwjl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vadwjl.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_vadwjl.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_llmwlz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_llmwlz.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_llmwlz.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_oeewpn.title as varchar), '(' || airport_heliport_airportheliport_pt_oeewpn.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_oeewpn.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_rombjx.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_rombjx.longitude AS pointchoiceposition_longitude,
    geometry_point_view_rombjx.latitude AS pointchoiceposition_latitude,
    geometry_point_view_rombjx.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_muahzj.title as varchar), '(' || shared_radiofrequencyarea_pt_muahzj.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_muahzj.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_lqftwr.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_nbunxh.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cifhsd on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cifhsd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jtokim on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_jtokim.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vadwjl on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vadwjl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_llmwlz on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_llmwlz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oeewpn on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_oeewpn.id
left join geometry.point_view geometry_point_view_rombjx on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_rombjx.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_muahzj on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_muahzj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_cmczce.id) as facilitymakeup
  from master_join master_join_myhypz
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_cmczce on master_join_myhypz.target_id = navaids_points_pointreference_lat_cmczce.id
  where master_join_myhypz.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_lqftwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_guomhi.*) AS annotation
  from master_join master_join_hkuqzv
  join notes.note_view notes_note_lat_guomhi on master_join_hkuqzv.target_id = notes_note_lat_guomhi.id
  where master_join_hkuqzv.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_nbunxh on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_iwbeqq.title as varchar), '(' || navaids_points_designatedpoint_pt_iwbeqq.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_iwbeqq.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_aeupco.title as varchar), '(' || navaids_points_designatedpoint_pt_aeupco.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_aeupco.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lmngwe.title as varchar), '(' || navaids_points_navaid_pt_lmngwe.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_lmngwe.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_tqrdqt.title as varchar), '(' || navaids_points_navaid_pt_tqrdqt.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_tqrdqt.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ojhzoc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ojhzoc.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_ojhzoc.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_dlxpjo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_dlxpjo.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_dlxpjo.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hyxtmc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hyxtmc.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hyxtmc.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kqhxxm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kqhxxm.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kqhxxm.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pzgaeq.title as varchar), '(' || airport_heliport_airportheliport_pt_pzgaeq.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_pzgaeq.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pldoyq.title as varchar), '(' || airport_heliport_airportheliport_pt_pldoyq.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_pldoyq.href::text AS startairportreferencepoint_href,
    geometry_point_view_kpraka.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_kpraka.longitude AS endposition_longitude,
    geometry_point_view_kpraka.latitude AS endposition_latitude,
    geometry_point_view_kpraka.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_rkgfdf.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_rkgfdf.longitude AS startposition_longitude,
    geometry_point_view_rkgfdf.latitude AS startposition_latitude,
    geometry_point_view_rkgfdf.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_qnsfre.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_iwbeqq on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_iwbeqq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lmngwe on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_lmngwe.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ojhzoc on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ojhzoc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hyxtmc on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hyxtmc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pzgaeq on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_pzgaeq.id
left join geometry.point_view geometry_point_view_kpraka on routes.directflightsegment.end_position_id = geometry_point_view_kpraka.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_aeupco on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_aeupco.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tqrdqt on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_tqrdqt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_dlxpjo on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_dlxpjo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kqhxxm on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kqhxxm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pldoyq on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_pldoyq.id
left join geometry.point_view geometry_point_view_rkgfdf on routes.directflightsegment.start_position_id = geometry_point_view_rkgfdf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vtabyr.*) AS annotation
  from master_join master_join_hzskjj
  join notes.note_view notes_note_lat_vtabyr on master_join_hzskjj.target_id = notes_note_lat_vtabyr.id
  where master_join_hzskjj.source_id = routes.directflightsegment.id
) as notes_note_view_qnsfre on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_qnmvds.title as varchar), '(' || navaids_points_designatedpoint_pt_qnmvds.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_qnmvds.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ufylzw.title as varchar), '(' || navaids_points_navaid_pt_ufylzw.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ufylzw.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wufwhm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wufwhm.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_wufwhm.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vlbsjp.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vlbsjp.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vlbsjp.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_onlshi.title as varchar), '(' || airport_heliport_airportheliport_pt_onlshi.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_onlshi.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bqkeka.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_bqkeka.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bqkeka.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bqkeka.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_mqkgee.title as varchar), '(' || shared_radiofrequencyarea_pt_mqkgee.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_mqkgee.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_qbrtoz.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_sngcmi.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qnmvds on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qnmvds.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ufylzw on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ufylzw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wufwhm on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wufwhm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vlbsjp on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vlbsjp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_onlshi on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_onlshi.id
left join geometry.point_view geometry_point_view_bqkeka on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_bqkeka.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_mqkgee on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_mqkgee.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_nkwmwy.id) as facilitymakeup
  from master_join master_join_dqbnvt
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_nkwmwy on master_join_dqbnvt.target_id = navaids_points_pointreference_lat_nkwmwy.id
  where master_join_dqbnvt.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_qbrtoz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drcnpn.*) AS annotation
  from master_join master_join_gmmzsl
  join notes.note_view notes_note_lat_drcnpn on master_join_gmmzsl.target_id = notes_note_lat_drcnpn.id
  where master_join_gmmzsl.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_sngcmi on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_aapvak.title as varchar), '(' || airport_heliport_airportheliport_pt_aapvak.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_aapvak.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bcbitz.title as varchar), '(' || airport_heliport_airportheliport_pt_bcbitz.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_bcbitz.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_qhicuo.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_qhicuo.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_qhicuo.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_xrdltg.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_plvgfn.title as varchar), '(' || organisation_organisationauthority_pt_plvgfn.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_plvgfn.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_kgekmi.title as varchar), '(' || navaids_points_designatedpoint_pt_kgekmi.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_kgekmi.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nucpwv.title as varchar), '(' || navaids_points_navaid_pt_nucpwv.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_nucpwv.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_cyiiid.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_cyiiid.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_cyiiid.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_utxsgi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_utxsgi.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_utxsgi.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_lquthr.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_lquthr.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_lquthr.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_lquthr.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_jomvmk.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_bxucgn.title as varchar), '(' || routes_airspacebordercrossing_pt_bxucgn.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_bxucgn.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_lbaugn.title as varchar), '(' || airspace_airspace_pt_lbaugn.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_lbaugn.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_mcwahw.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_iqgvad.title as varchar), '(' || procedure_standardinstrumentarrival_pt_iqgvad.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_iqgvad.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_ncfmkm.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_frzcqe.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_esfojj.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_esfojj.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_esfojj.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_ltyzkd.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_mmlcgl.flightlevel::jsonb as flightlevel,
    notes_note_view_kggekv.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aapvak on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_aapvak.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_qhicuo on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_qhicuo.id
left join routes.routeportion_pt routes_routeportion_pt_xrdltg on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_xrdltg.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_plvgfn on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_plvgfn.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_kgekmi on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_kgekmi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nucpwv on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_nucpwv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_cyiiid on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_cyiiid.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_utxsgi on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_utxsgi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bcbitz on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_bcbitz.id
left join geometry.point_view geometry_point_view_lquthr on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_lquthr.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_jomvmk on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_jomvmk.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_bxucgn on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_bxucgn.id
left join airspace.airspace_pt airspace_airspace_pt_lbaugn on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_lbaugn.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_mcwahw on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_mcwahw.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_iqgvad on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_iqgvad.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_ncfmkm on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_ncfmkm.id
left join shared.meteorology_pt shared_meteorology_pt_frzcqe on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_frzcqe.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_esfojj on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_esfojj.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_ltyzkd on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_ltyzkd.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_oybyas.id) as flightlevel
  from master_join master_join_wmfacr
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_oybyas on master_join_wmfacr.target_id = routes_flightrestrictionlevel_lat_oybyas.id
  where master_join_wmfacr.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_mmlcgl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eamnoy.*) AS annotation
  from master_join master_join_klnpaq
  join notes.note_view notes_note_lat_eamnoy on master_join_klnpaq.target_id = notes_note_lat_eamnoy.id
  where master_join_klnpaq.source_id = routes.flightconditionelement.id
) as notes_note_view_kggekv on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_jubbrb.title as varchar), '(' || procedure_standardinstrumentarrival_pt_jubbrb.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_jubbrb.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_nlcobz.title as varchar), '(' || airspace_airspace_pt_nlcobz.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_nlcobz.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_eqnbmg.title as varchar), '(' || navaids_points_designatedpoint_pt_eqnbmg.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_eqnbmg.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_tcerck.title as varchar), '(' || navaids_points_navaid_pt_tcerck.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_tcerck.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bwkbfl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bwkbfl.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_bwkbfl.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uztpys.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uztpys.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uztpys.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_awmxgk.title as varchar), '(' || airport_heliport_airportheliport_pt_awmxgk.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_awmxgk.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_felkjo.title as varchar), '(' || airport_heliport_airportheliport_pt_felkjo.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_felkjo.href::text AS elementairportheliportelement_href,
    geometry_point_view_kpglvg.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_kpglvg.longitude AS pointelementposition_longitude,
    geometry_point_view_kpglvg.latitude AS pointelementposition_latitude,
    geometry_point_view_kpglvg.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_oaejqa.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_nmbrvw.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_nmbrvw.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_nmbrvw.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_xsdcns.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_wjnubs.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_wjnubs.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_wjnubs.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_ctolib.flightlevel::jsonb as flightlevel,
    notes_note_view_apoxkv.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_jubbrb on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_jubbrb.id
left join airspace.airspace_pt airspace_airspace_pt_nlcobz on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_nlcobz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_eqnbmg on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_eqnbmg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tcerck on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_tcerck.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bwkbfl on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bwkbfl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uztpys on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uztpys.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_awmxgk on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_awmxgk.id
left join geometry.point_view geometry_point_view_kpglvg on routes.flightroutingelement.pointelement_position_id = geometry_point_view_kpglvg.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_oaejqa on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_oaejqa.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_nmbrvw on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_nmbrvw.id
left join routes.routeportion_pt routes_routeportion_pt_xsdcns on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_xsdcns.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_felkjo on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_felkjo.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_wjnubs on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_wjnubs.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_mgwrhq.id) as flightlevel
  from master_join master_join_uyqvtc
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_mgwrhq on master_join_uyqvtc.target_id = routes_flightrestrictionlevel_lat_mgwrhq.id
  where master_join_uyqvtc.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_ctolib on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lmhdbc.*) AS annotation
  from master_join master_join_hnzhll
  join notes.note_view notes_note_lat_lmhdbc on master_join_hnzhll.target_id = notes_note_lat_lmhdbc.id
  where master_join_hnzhll.source_id = routes.flightroutingelement.id
) as notes_note_view_apoxkv on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_uonhch.title as varchar), '(' || navaids_points_designatedpoint_pt_uonhch.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_uonhch.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_encjyg.title as varchar), '(' || navaids_points_designatedpoint_pt_encjyg.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_encjyg.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vonovu.title as varchar), '(' || navaids_points_designatedpoint_pt_vonovu.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vonovu.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gfqwyj.title as varchar), '(' || navaids_points_navaid_pt_gfqwyj.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_gfqwyj.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_aevfub.title as varchar), '(' || navaids_points_navaid_pt_aevfub.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_aevfub.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_vaubkq.title as varchar), '(' || navaids_points_navaid_pt_vaubkq.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_vaubkq.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_atwedv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_atwedv.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_atwedv.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jdsskt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jdsskt.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jdsskt.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ybzmrn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ybzmrn.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_ybzmrn.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fqbrfe.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fqbrfe.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fqbrfe.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wiemoe.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wiemoe.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wiemoe.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wnozyi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wnozyi.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wnozyi.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bbfkeb.title as varchar), '(' || airport_heliport_airportheliport_pt_bbfkeb.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_bbfkeb.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_eqaifa.title as varchar), '(' || airport_heliport_airportheliport_pt_eqaifa.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_eqaifa.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mtimrq.title as varchar), '(' || airport_heliport_airportheliport_pt_mtimrq.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_mtimrq.href::text AS endairportreferencepoint_href,
    geometry_point_view_etbwha.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_etbwha.longitude AS startposition_longitude,
    geometry_point_view_etbwha.latitude AS startposition_latitude,
    geometry_point_view_etbwha.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_crdsvf.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_crdsvf.longitude AS intermediatepointposition_longitude,
    geometry_point_view_crdsvf.latitude AS intermediatepointposition_latitude,
    geometry_point_view_crdsvf.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_htdmxr.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_htdmxr.longitude AS endposition_longitude,
    geometry_point_view_htdmxr.latitude AS endposition_latitude,
    geometry_point_view_htdmxr.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_clgobm.title as varchar), '(' || routes_route_pt_clgobm.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_clgobm.href::text AS referencedroute_href,
    notes_note_view_qiyogc.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uonhch on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uonhch.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gfqwyj on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_gfqwyj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_atwedv on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_atwedv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fqbrfe on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fqbrfe.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bbfkeb on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_bbfkeb.id
left join geometry.point_view geometry_point_view_etbwha on routes.routeportion.start_position_id = geometry_point_view_etbwha.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_encjyg on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_encjyg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_aevfub on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_aevfub.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jdsskt on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jdsskt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wiemoe on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wiemoe.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eqaifa on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_eqaifa.id
left join geometry.point_view geometry_point_view_crdsvf on routes.routeportion.intermediatepoint_position_id = geometry_point_view_crdsvf.id
left join routes.route_pt routes_route_pt_clgobm on routes.routeportion.referencedroute_id = routes_route_pt_clgobm.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vonovu on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vonovu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vaubkq on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_vaubkq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ybzmrn on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ybzmrn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wnozyi on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wnozyi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mtimrq on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_mtimrq.id
left join geometry.point_view geometry_point_view_htdmxr on routes.routeportion.end_position_id = geometry_point_view_htdmxr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wxcwdo.*) AS annotation
  from master_join master_join_dqtvyw
  join notes.note_view notes_note_lat_wxcwdo on master_join_dqtvyw.target_id = notes_note_lat_wxcwdo.id
  where master_join_dqtvyw.source_id = routes.routeportion.id
) as notes_note_view_qiyogc on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_stnlzy.title as varchar), '(' || navaids_points_designatedpoint_pt_stnlzy.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_stnlzy.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ljqykl.title as varchar), '(' || navaids_points_navaid_pt_ljqykl.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ljqykl.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tfmgyw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tfmgyw.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_tfmgyw.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dudnjj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dudnjj.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dudnjj.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rrsoto.title as varchar), '(' || airport_heliport_airportheliport_pt_rrsoto.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_rrsoto.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_eakoqv.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_eakoqv.longitude AS pointchoiceposition_longitude,
    geometry_point_view_eakoqv.latitude AS pointchoiceposition_latitude,
    geometry_point_view_eakoqv.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_rzbsoz.title as varchar), '(' || shared_radiofrequencyarea_pt_rzbsoz.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_rzbsoz.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_dgxoec.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_mbeauc.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_stnlzy on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_stnlzy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ljqykl on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ljqykl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tfmgyw on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tfmgyw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dudnjj on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dudnjj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rrsoto on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_rrsoto.id
left join geometry.point_view geometry_point_view_eakoqv on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_eakoqv.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_rzbsoz on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_rzbsoz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_odjjfa.id) as facilitymakeup
  from master_join master_join_kssdjr
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_odjjfa on master_join_kssdjr.target_id = navaids_points_pointreference_lat_odjjfa.id
  where master_join_kssdjr.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_dgxoec on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_atezsg.*) AS annotation
  from master_join master_join_noahjt
  join notes.note_view notes_note_lat_atezsg on master_join_noahjt.target_id = notes_note_lat_atezsg.id
  where master_join_noahjt.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_mbeauc on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_gdvpze.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_gdvpze.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_bwowwm.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_cwecsm.point::jsonb as point,
    notes_note_view_ijeqxs.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_gdvpze on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_gdvpze.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_mcuqxb.id) as verticalextent
  from master_join master_join_ctpkfk
  join shared.airspacelayer_pt shared_airspacelayer_lat_mcuqxb on master_join_ctpkfk.target_id = shared_airspacelayer_lat_mcuqxb.id
  where master_join_ctpkfk.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_bwowwm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_rswmfb.id) as point
  from master_join master_join_tdvbyp
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_rswmfb on master_join_tdvbyp.target_id = aerial_refuelling_aerialrefuellingpoint_lat_rswmfb.id
  where master_join_tdvbyp.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_cwecsm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fctuhv.*) AS annotation
  from master_join master_join_zsmwhr
  join notes.note_view notes_note_lat_fctuhv on master_join_zsmwhr.target_id = notes_note_lat_fctuhv.id
  where master_join_zsmwhr.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_ijeqxs on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_onbqnw.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_onbqnw.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_jgajxj.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_jgajxj.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_ujoozv.id)::jsonb AS contributorairspace,
    notes_note_view_qvoxrn.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_onbqnw on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_onbqnw.id
left join geometry.curve_view geometry_curve_view_jgajxj on airspace.airspacevolume.centreline_id = geometry_curve_view_jgajxj.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_ujoozv on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_ujoozv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cnhuov.*) AS annotation
  from master_join master_join_lfdali
  join notes.note_view notes_note_lat_cnhuov on master_join_lfdali.target_id = notes_note_lat_cnhuov.id
  where master_join_lfdali.source_id = airspace.airspacevolume.id
) as notes_note_view_qvoxrn on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_eyrqpp.id)::jsonb AS sectordefinition,
    geometry_surface_view_kcveeh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_kcveeh.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_xomgcx.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_ajgkzv.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_jmdcff.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_eyrqpp on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_eyrqpp.id
left join geometry.surface_view geometry_surface_view_kcveeh on procedure.navigationareasector.extent_id = geometry_surface_view_kcveeh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_coiikv.id) as significantobstacle
  from master_join master_join_mvjybt
  join shared.obstruction_pt shared_obstruction_lat_coiikv on master_join_mvjybt.target_id = shared_obstruction_lat_coiikv.id
  where master_join_mvjybt.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_xomgcx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_bsygap.id) as sectorcriteria
  from master_join master_join_cqduxu
  join procedure.sectordesign_pt procedure_sectordesign_lat_bsygap on master_join_cqduxu.target_id = procedure_sectordesign_lat_bsygap.id
  where master_join_cqduxu.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_ajgkzv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hcldvd.*) AS annotation
  from master_join master_join_yvqnmq
  join notes.note_view notes_note_lat_hcldvd on master_join_yvqnmq.target_id = notes_note_lat_hcldvd.id
  where master_join_yvqnmq.source_id = procedure.navigationareasector.id
) as notes_note_view_jmdcff on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_cmazyg.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_cmazyg.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_oowxwh.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_oowxwh.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_ppnygu.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_nxfhqd.significantobstacle::jsonb as significantobstacle,
    notes_note_view_glpeoj.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_cmazyg on shared.obstacleassessmentarea.surface_id = geometry_surface_view_cmazyg.id
left join geometry.curve_view geometry_curve_view_oowxwh on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_oowxwh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bfcugo.id) as aircraftcategory
  from master_join master_join_pfycbi
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_bfcugo on master_join_pfycbi.target_id = shared_aircraftcharacteristic_lat_bfcugo.id
  where master_join_pfycbi.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_ppnygu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_nlugae.id) as significantobstacle
  from master_join master_join_drzbnf
  join shared.obstruction_pt shared_obstruction_lat_nlugae on master_join_drzbnf.target_id = shared_obstruction_lat_nlugae.id
  where master_join_drzbnf.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_nxfhqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pdpxxp.*) AS annotation
  from master_join master_join_klmtek
  join notes.note_view notes_note_lat_pdpxxp on master_join_klmtek.target_id = notes_note_lat_pdpxxp.id
  where master_join_klmtek.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_glpeoj on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_ekffrg.title as varchar), '(' || navaids_points_designatedpoint_pt_ekffrg.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_ekffrg.href::text AS point_href,
    geometry_surface_view_cbnarx.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_cbnarx.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_anmwbf.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_yiefeg.facilitydistance::jsonb as facilitydistance,
    notes_note_view_onynij.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ekffrg on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_ekffrg.id
left join geometry.surface_view geometry_surface_view_cbnarx on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_cbnarx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_koytcz.id) as facilityangle
  from master_join master_join_efbaab
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_koytcz on master_join_efbaab.target_id = navaids_points_angleuse_lat_koytcz.id
  where master_join_efbaab.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_anmwbf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_adsgvk.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_adsgvk.title AS varchar), '(' || navaids_points_distanceindication_lat_adsgvk.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_adsgvk.href
  )) as facilitydistance  from master_join master_join_yddkwx
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_adsgvk on master_join_yddkwx.target_id = navaids_points_distanceindication_lat_adsgvk.id
  where master_join_yddkwx.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_yiefeg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kstmjo.*) AS annotation
  from master_join master_join_hwedjy
  join notes.note_view notes_note_lat_kstmjo on master_join_hwedjy.target_id = notes_note_lat_kstmjo.id
  where master_join_hwedjy.source_id = navaids_points.pointreference.id
) as notes_note_view_onynij on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_wgyyig.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_wgyyig.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_ksgdho.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_rqxaou.significantobstacle::jsonb as significantobstacle,
    notes_note_view_lxyivm.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_wgyyig on procedure.safealtitudeareasector.extent_id = geometry_surface_view_wgyyig.id
left join shared.circlesector_pt shared_circlesector_pt_ksgdho on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_ksgdho.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_bfdisp.id) as significantobstacle
  from master_join master_join_bfhuri
  join shared.obstruction_pt shared_obstruction_lat_bfdisp on master_join_bfhuri.target_id = shared_obstruction_lat_bfdisp.id
  where master_join_bfhuri.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_rqxaou on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mxxuel.*) AS annotation
  from master_join master_join_iygdkx
  join notes.note_view notes_note_lat_mxxuel on master_join_iygdkx.target_id = notes_note_lat_mxxuel.id
  where master_join_iygdkx.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_lxyivm on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_fdicnh.id)::jsonb AS sectordefinition,
    geometry_surface_view_knswih.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_knswih.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_ftunno.significantobstacle::jsonb as significantobstacle,
    notes_note_view_rhnvrp.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_fdicnh on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_fdicnh.id
left join geometry.surface_view geometry_surface_view_knswih on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_knswih.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_jpvhex.id) as significantobstacle
  from master_join master_join_sesatt
  join shared.obstruction_pt shared_obstruction_lat_jpvhex on master_join_sesatt.target_id = shared_obstruction_lat_jpvhex.id
  where master_join_sesatt.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_ftunno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nbqklb.*) AS annotation
  from master_join master_join_wtoune
  join notes.note_view notes_note_lat_nbqklb on master_join_wtoune.target_id = notes_note_lat_nbqklb.id
  where master_join_wtoune.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_rhnvrp on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_yanpqj.timeinterval::jsonb as timeinterval,
    notes_note_view_ednxaf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_wdvzge.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_ahwzju.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wysmea.*) AS timeinterval
  from master_join master_join_nbiejf
  join shared.timesheet_view shared_timesheet_lat_wysmea on master_join_nbiejf.target_id = shared_timesheet_lat_wysmea.id
  where master_join_nbiejf.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_yanpqj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jyuuhv.*) AS annotation
  from master_join master_join_qpyrjj
  join notes.note_view notes_note_lat_jyuuhv on master_join_qpyrjj.target_id = notes_note_lat_jyuuhv.id
  where master_join_qpyrjj.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_ednxaf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vozbel.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vozbel.title AS varchar), '(' || organisation_organisationauthority_lat_vozbel.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vozbel.href
  )) as specialdateauthority  from master_join master_join_bdnlyh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vozbel on master_join_bdnlyh.target_id = organisation_organisationauthority_lat_vozbel.id
  where master_join_bdnlyh.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_wdvzge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_qylwkq.id) as usage
  from master_join master_join_yloqmd
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_qylwkq on master_join_yloqmd.target_id = airport_heliport_airportheliportusage_lat_qylwkq.id
  where master_join_yloqmd.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_ahwzju on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_jvbnqc.title as varchar), '(' || organisation_organisationauthority_pt_jvbnqc.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_jvbnqc.href::text AS theorganisationauthority_href,
    organisation_organisationauthority_pt_yqczlm.specialdateauthority::jsonb as specialdateauthority,
    shared_timesheet_view_zepaes.timeinterval::jsonb as timeinterval,
    notes_note_view_srfodu.annotation::jsonb as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jvbnqc on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_jvbnqc.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jrbqgl.*) AS timeinterval
  from master_join master_join_dbttvo
  join shared.timesheet_view shared_timesheet_lat_jrbqgl on master_join_dbttvo.target_id = shared_timesheet_lat_jrbqgl.id
  where master_join_dbttvo.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_zepaes on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjergr.*) AS annotation
  from master_join master_join_gniwyp
  join notes.note_view notes_note_lat_bjergr on master_join_gniwyp.target_id = notes_note_lat_bjergr.id
  where master_join_gniwyp.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_srfodu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ahdscj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ahdscj.title AS varchar), '(' || organisation_organisationauthority_lat_ahdscj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ahdscj.href
  )) as specialdateauthority  from master_join master_join_expgkq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ahdscj on master_join_expgkq.target_id = organisation_organisationauthority_lat_ahdscj.id
  where master_join_expgkq.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_yqczlm on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_akisan.timeinterval::jsonb as timeinterval,
    notes_note_view_ergfno.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hqbhia.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_dqxwlh.user::jsonb as user,
    shared_airspacelayer_pt_qrasxx.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_enerpb.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_diakfy.*) AS timeinterval
  from master_join master_join_bygbkx
  join shared.timesheet_view shared_timesheet_lat_diakfy on master_join_bygbkx.target_id = shared_timesheet_lat_diakfy.id
  where master_join_bygbkx.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_akisan on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wsyxol.*) AS annotation
  from master_join master_join_eddffv
  join notes.note_view notes_note_lat_wsyxol on master_join_eddffv.target_id = notes_note_lat_wsyxol.id
  where master_join_eddffv.source_id = airspace.airspaceactivation.id
) as notes_note_view_ergfno on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vukarb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vukarb.title AS varchar), '(' || organisation_organisationauthority_lat_vukarb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vukarb.href
  )) as specialdateauthority  from master_join master_join_tpimrh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vukarb on master_join_tpimrh.target_id = organisation_organisationauthority_lat_vukarb.id
  where master_join_tpimrh.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_hqbhia on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_vtgana.id) as levels
  from master_join master_join_ailiim
  join shared.airspacelayer_pt shared_airspacelayer_lat_vtgana on master_join_ailiim.target_id = shared_airspacelayer_lat_vtgana.id
  where master_join_ailiim.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_qrasxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qeoset.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qeoset.title AS varchar), '(' || organisation_organisationauthority_lat_qeoset.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qeoset.href
  )) as user  from master_join master_join_kkukde
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qeoset on master_join_kkukde.target_id = organisation_organisationauthority_lat_qeoset.id
  where master_join_kkukde.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_dqxwlh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ijhrhe.id) as aircraft
  from master_join master_join_clfzcd
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_ijhrhe on master_join_clfzcd.target_id = shared_aircraftcharacteristic_lat_ijhrhe.id
  where master_join_clfzcd.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_enerpb on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_jkslvk.timeinterval::jsonb as timeinterval,
    notes_note_view_ntunxq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tfwwuq.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_rsdxyk.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mgrwmo.*) AS timeinterval
  from master_join master_join_ykukcg
  join shared.timesheet_view shared_timesheet_lat_mgrwmo on master_join_ykukcg.target_id = shared_timesheet_lat_mgrwmo.id
  where master_join_ykukcg.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_jkslvk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_waqqii.*) AS annotation
  from master_join master_join_oykyej
  join notes.note_view notes_note_lat_waqqii on master_join_oykyej.target_id = notes_note_lat_waqqii.id
  where master_join_oykyej.source_id = airspace.airspacelayerclass.id
) as notes_note_view_ntunxq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dljzzq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dljzzq.title AS varchar), '(' || organisation_organisationauthority_lat_dljzzq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dljzzq.href
  )) as specialdateauthority  from master_join master_join_xjgiud
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dljzzq on master_join_xjgiud.target_id = organisation_organisationauthority_lat_dljzzq.id
  where master_join_xjgiud.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_tfwwuq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_qjella.id) as associatedlevels
  from master_join master_join_wdqijw
  join shared.airspacelayer_pt shared_airspacelayer_lat_qjella on master_join_wdqijw.target_id = shared_airspacelayer_lat_qjella.id
  where master_join_wdqijw.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_rsdxyk on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_hziiap.timeinterval::jsonb as timeinterval,
    notes_note_view_vxcvhv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cpanfl.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yvrzat.*) AS timeinterval
  from master_join master_join_fzchso
  join shared.timesheet_view shared_timesheet_lat_yvrzat on master_join_fzchso.target_id = shared_timesheet_lat_yvrzat.id
  where master_join_fzchso.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_hziiap on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wnbvgo.*) AS annotation
  from master_join master_join_wifwdt
  join notes.note_view notes_note_lat_wnbvgo on master_join_wifwdt.target_id = notes_note_lat_wnbvgo.id
  where master_join_wifwdt.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_vxcvhv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_phfkts.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_phfkts.title AS varchar), '(' || organisation_organisationauthority_lat_phfkts.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_phfkts.href
  )) as specialdateauthority  from master_join master_join_bpyrbt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_phfkts on master_join_bpyrbt.target_id = organisation_organisationauthority_lat_phfkts.id
  where master_join_bpyrbt.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_cpanfl on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_oxxfva.timeinterval::jsonb as timeinterval,
    notes_note_view_nltldt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_eyvbah.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_lpoqtj.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_oofypq.*) AS timeinterval
  from master_join master_join_wpwenm
  join shared.timesheet_view shared_timesheet_lat_oofypq on master_join_wpwenm.target_id = shared_timesheet_lat_oofypq.id
  where master_join_wpwenm.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_oxxfva on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gvweez.*) AS annotation
  from master_join master_join_bcapzs
  join notes.note_view notes_note_lat_gvweez on master_join_bcapzs.target_id = notes_note_lat_gvweez.id
  where master_join_bcapzs.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_nltldt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jntfaq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jntfaq.title AS varchar), '(' || organisation_organisationauthority_lat_jntfaq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jntfaq.href
  )) as specialdateauthority  from master_join master_join_kyvgtb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jntfaq on master_join_kyvgtb.target_id = organisation_organisationauthority_lat_jntfaq.id
  where master_join_kyvgtb.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_eyvbah on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_zpilyc.id) as usage
  from master_join master_join_yeghzi
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_zpilyc on master_join_yeghzi.target_id = airport_heliport_apronareausage_lat_zpilyc.id
  where master_join_yeghzi.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_lpoqtj on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['geometry.surface_view', 'notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_jgcgbr.id)::jsonb AS sectordescription,
    geometry_surface_view_vxtsui.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_vxtsui.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_djdpuv.timeinterval::jsonb as timeinterval,
    notes_note_view_wjbydh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tiklrw.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_jgcgbr on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_jgcgbr.id
left join geometry.surface_view geometry_surface_view_vxtsui on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_vxtsui.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nhhafr.*) AS timeinterval
  from master_join master_join_ayoeri
  join shared.timesheet_view shared_timesheet_lat_nhhafr on master_join_ayoeri.target_id = shared_timesheet_lat_nhhafr.id
  where master_join_ayoeri.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_djdpuv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pqpytf.*) AS annotation
  from master_join master_join_uzsgbj
  join notes.note_view notes_note_lat_pqpytf on master_join_uzsgbj.target_id = notes_note_lat_pqpytf.id
  where master_join_uzsgbj.source_id = procedure.circlingrestriction.id
) as notes_note_view_wjbydh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tlgngv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tlgngv.title AS varchar), '(' || organisation_organisationauthority_lat_tlgngv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tlgngv.href
  )) as specialdateauthority  from master_join master_join_wslpfg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tlgngv on master_join_wslpfg.target_id = organisation_organisationauthority_lat_tlgngv.id
  where master_join_wslpfg.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_tiklrw on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_xbnucp.timeinterval::jsonb as timeinterval,
    notes_note_view_fmpigr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cqymey.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_cwdewp.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_ayiidq.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_cnnjbo.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_mdhokx.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_whdiau.*) AS timeinterval
  from master_join master_join_jjecnr
  join shared.timesheet_view shared_timesheet_lat_whdiau on master_join_jjecnr.target_id = shared_timesheet_lat_whdiau.id
  where master_join_jjecnr.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_xbnucp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tazxtx.*) AS annotation
  from master_join master_join_aevwnc
  join notes.note_view notes_note_lat_tazxtx on master_join_aevwnc.target_id = notes_note_lat_tazxtx.id
  where master_join_aevwnc.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_fmpigr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fhcioe.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fhcioe.title AS varchar), '(' || organisation_organisationauthority_lat_fhcioe.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fhcioe.href
  )) as specialdateauthority  from master_join master_join_kuadwg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fhcioe on master_join_kuadwg.target_id = organisation_organisationauthority_lat_fhcioe.id
  where master_join_kuadwg.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_cqymey on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_vopufg.id) as weather
  from master_join master_join_riiake
  join shared.meteorology_pt shared_meteorology_lat_vopufg on master_join_riiake.target_id = shared_meteorology_lat_vopufg.id
  where master_join_riiake.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_cwdewp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xpcjzm.id) as aircraft
  from master_join master_join_fxbnst
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_xpcjzm on master_join_fxbnst.target_id = shared_aircraftcharacteristic_lat_xpcjzm.id
  where master_join_fxbnst.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_ayiidq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_lybwar.id) as flight
  from master_join master_join_zhwhgg
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_lybwar on master_join_zhwhgg.target_id = shared_flightcharacteristic_lat_lybwar.id
  where master_join_zhwhgg.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_cnnjbo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_mfvjue.id) as subcondition
  from master_join master_join_tungpw
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_mfvjue on master_join_tungpw.target_id = airport_heliport_conditioncombination_lat_mfvjue.id
  where master_join_tungpw.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_mdhokx on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_eivicd.timeinterval::jsonb as timeinterval,
    notes_note_view_mxrtst.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ihlzbt.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_ufrscf.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ncftic.*) AS timeinterval
  from master_join master_join_ibngbn
  join shared.timesheet_view shared_timesheet_lat_ncftic on master_join_ibngbn.target_id = shared_timesheet_lat_ncftic.id
  where master_join_ibngbn.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_eivicd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nytdei.*) AS annotation
  from master_join master_join_pjqprp
  join notes.note_view notes_note_lat_nytdei on master_join_pjqprp.target_id = notes_note_lat_nytdei.id
  where master_join_pjqprp.source_id = routes.flightconditioncombination.id
) as notes_note_view_mxrtst on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_swdnjc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_swdnjc.title AS varchar), '(' || organisation_organisationauthority_lat_swdnjc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_swdnjc.href
  )) as specialdateauthority  from master_join master_join_owxrud
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_swdnjc on master_join_owxrud.target_id = organisation_organisationauthority_lat_swdnjc.id
  where master_join_owxrud.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_ihlzbt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_njefxv.id) as element
  from master_join master_join_abswrw
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_njefxv on master_join_abswrw.target_id = routes_flightconditionelement_lat_njefxv.id
  where master_join_abswrw.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_ufrscf on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_wruwgo.timeinterval::jsonb as timeinterval,
    notes_note_view_hlhcvb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lovafa.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ecojue.*) AS timeinterval
  from master_join master_join_kaxjxa
  join shared.timesheet_view shared_timesheet_lat_ecojue on master_join_kaxjxa.target_id = shared_timesheet_lat_ecojue.id
  where master_join_kaxjxa.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_wruwgo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osvacl.*) AS annotation
  from master_join master_join_nbztfx
  join notes.note_view notes_note_lat_osvacl on master_join_nbztfx.target_id = notes_note_lat_osvacl.id
  where master_join_nbztfx.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_hlhcvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_frqntu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_frqntu.title AS varchar), '(' || organisation_organisationauthority_lat_frqntu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_frqntu.href
  )) as specialdateauthority  from master_join master_join_kamzmc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_frqntu on master_join_kamzmc.target_id = organisation_organisationauthority_lat_frqntu.id
  where master_join_kamzmc.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_lovafa on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_vwiidg.timeinterval::jsonb as timeinterval,
    notes_note_view_amxwec.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pzclef.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yycdha.*) AS timeinterval
  from master_join master_join_oehoti
  join shared.timesheet_view shared_timesheet_lat_yycdha on master_join_oehoti.target_id = shared_timesheet_lat_yycdha.id
  where master_join_oehoti.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_vwiidg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hlunwv.*) AS annotation
  from master_join master_join_tfezyf
  join notes.note_view notes_note_lat_hlunwv on master_join_tfezyf.target_id = notes_note_lat_hlunwv.id
  where master_join_tfezyf.source_id = shared.lightelementstatus.id
) as notes_note_view_amxwec on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yvuzln.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yvuzln.title AS varchar), '(' || organisation_organisationauthority_lat_yvuzln.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yvuzln.href
  )) as specialdateauthority  from master_join master_join_xluopr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yvuzln on master_join_xluopr.target_id = organisation_organisationauthority_lat_yvuzln.id
  where master_join_xluopr.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_pzclef on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_bhbwog.timeinterval::jsonb as timeinterval,
    notes_note_view_ctsfow.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sjtmyx.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_gzdnuk.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bubybr.*) AS timeinterval
  from master_join master_join_wtnmqj
  join shared.timesheet_view shared_timesheet_lat_bubybr on master_join_wtnmqj.target_id = shared_timesheet_lat_bubybr.id
  where master_join_wtnmqj.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_bhbwog on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kuxnhf.*) AS annotation
  from master_join master_join_jrwarw
  join notes.note_view notes_note_lat_kuxnhf on master_join_jrwarw.target_id = notes_note_lat_kuxnhf.id
  where master_join_jrwarw.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_ctsfow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_cayyfj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_cayyfj.title AS varchar), '(' || organisation_organisationauthority_lat_cayyfj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_cayyfj.href
  )) as specialdateauthority  from master_join master_join_nojfjq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_cayyfj on master_join_nojfjq.target_id = organisation_organisationauthority_lat_cayyfj.id
  where master_join_nojfjq.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_sjtmyx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_epzckv.id) as usage
  from master_join master_join_rjeutg
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_epzckv on master_join_rjeutg.target_id = airport_heliport_manoeuvringareausage_lat_epzckv.id
  where master_join_rjeutg.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_gzdnuk on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_wlmffu.timeinterval::jsonb as timeinterval,
    notes_note_view_wqwsjq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sidsxk.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_udfuvu.*) AS timeinterval
  from master_join master_join_faqvcl
  join shared.timesheet_view shared_timesheet_lat_udfuvu on master_join_faqvcl.target_id = shared_timesheet_lat_udfuvu.id
  where master_join_faqvcl.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_wlmffu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dffjgy.*) AS annotation
  from master_join master_join_igpjwu
  join notes.note_view notes_note_lat_dffjgy on master_join_igpjwu.target_id = notes_note_lat_dffjgy.id
  where master_join_igpjwu.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_wqwsjq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ybiiyz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ybiiyz.title AS varchar), '(' || organisation_organisationauthority_lat_ybiiyz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ybiiyz.href
  )) as specialdateauthority  from master_join master_join_ikfupe
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ybiiyz on master_join_ikfupe.target_id = organisation_organisationauthority_lat_ybiiyz.id
  where master_join_ikfupe.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_sidsxk on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_pitqme.timeinterval::jsonb as timeinterval,
    notes_note_view_jtpsxv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ujjfwr.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zxqfpz.*) AS timeinterval
  from master_join master_join_egmixp
  join shared.timesheet_view shared_timesheet_lat_zxqfpz on master_join_egmixp.target_id = shared_timesheet_lat_zxqfpz.id
  where master_join_egmixp.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_pitqme on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_upzppv.*) AS annotation
  from master_join master_join_fkecce
  join notes.note_view notes_note_lat_upzppv on master_join_fkecce.target_id = notes_note_lat_upzppv.id
  where master_join_fkecce.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_jtpsxv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zfemlo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zfemlo.title AS varchar), '(' || organisation_organisationauthority_lat_zfemlo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zfemlo.href
  )) as specialdateauthority  from master_join master_join_wsuvvu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zfemlo on master_join_wsuvvu.target_id = organisation_organisationauthority_lat_zfemlo.id
  where master_join_wsuvvu.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_ujjfwr on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_zkhrlz.timeinterval::jsonb as timeinterval,
    notes_note_view_tjarvn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_wrvuyq.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uvvkmw.*) AS timeinterval
  from master_join master_join_cvyaci
  join shared.timesheet_view shared_timesheet_lat_uvvkmw on master_join_cvyaci.target_id = shared_timesheet_lat_uvvkmw.id
  where master_join_cvyaci.source_id = shared.onlinecontact.id
) as shared_timesheet_view_zkhrlz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqdtrl.*) AS annotation
  from master_join master_join_ascchv
  join notes.note_view notes_note_lat_kqdtrl on master_join_ascchv.target_id = notes_note_lat_kqdtrl.id
  where master_join_ascchv.source_id = shared.onlinecontact.id
) as notes_note_view_tjarvn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jrxaof.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jrxaof.title AS varchar), '(' || organisation_organisationauthority_lat_jrxaof.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jrxaof.href
  )) as specialdateauthority  from master_join master_join_hcesnv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jrxaof on master_join_hcesnv.target_id = organisation_organisationauthority_lat_jrxaof.id
  where master_join_hcesnv.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_wrvuyq on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_szvvdw.timeinterval::jsonb as timeinterval,
    notes_note_view_qhenny.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_oahhkk.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dhdfgj.*) AS timeinterval
  from master_join master_join_inqnhf
  join shared.timesheet_view shared_timesheet_lat_dhdfgj on master_join_inqnhf.target_id = shared_timesheet_lat_dhdfgj.id
  where master_join_inqnhf.source_id = shared.postaladdress.id
) as shared_timesheet_view_szvvdw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_caajhp.*) AS annotation
  from master_join master_join_qzkxti
  join notes.note_view notes_note_lat_caajhp on master_join_qzkxti.target_id = notes_note_lat_caajhp.id
  where master_join_qzkxti.source_id = shared.postaladdress.id
) as notes_note_view_qhenny on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xekhup.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xekhup.title AS varchar), '(' || organisation_organisationauthority_lat_xekhup.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xekhup.href
  )) as specialdateauthority  from master_join master_join_ljhgky
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xekhup on master_join_ljhgky.target_id = organisation_organisationauthority_lat_xekhup.id
  where master_join_ljhgky.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_oahhkk on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_kcvgru.timeinterval::jsonb as timeinterval,
    notes_note_view_lquujj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ntghyr.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ooidzk.*) AS timeinterval
  from master_join master_join_avsyqi
  join shared.timesheet_view shared_timesheet_lat_ooidzk on master_join_avsyqi.target_id = shared_timesheet_lat_ooidzk.id
  where master_join_avsyqi.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_kcvgru on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xlpheu.*) AS annotation
  from master_join master_join_buxpuq
  join notes.note_view notes_note_lat_xlpheu on master_join_buxpuq.target_id = notes_note_lat_xlpheu.id
  where master_join_buxpuq.source_id = procedure.procedureavailability.id
) as notes_note_view_lquujj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ubsdte.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ubsdte.title AS varchar), '(' || organisation_organisationauthority_lat_ubsdte.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ubsdte.href
  )) as specialdateauthority  from master_join master_join_xmsbci
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ubsdte on master_join_xmsbci.target_id = organisation_organisationauthority_lat_ubsdte.id
  where master_join_xmsbci.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_ntghyr on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_hlyknv.timeinterval::jsonb as timeinterval,
    notes_note_view_fraswf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yerkao.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uzwbww.*) AS timeinterval
  from master_join master_join_xyxapn
  join shared.timesheet_view shared_timesheet_lat_uzwbww on master_join_xyxapn.target_id = shared_timesheet_lat_uzwbww.id
  where master_join_xyxapn.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_hlyknv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jkeyrd.*) AS annotation
  from master_join master_join_nzdyoq
  join notes.note_view notes_note_lat_jkeyrd on master_join_nzdyoq.target_id = notes_note_lat_jkeyrd.id
  where master_join_nzdyoq.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_fraswf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_avttqd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_avttqd.title AS varchar), '(' || organisation_organisationauthority_lat_avttqd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_avttqd.href
  )) as specialdateauthority  from master_join master_join_vniwtr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_avttqd on master_join_vniwtr.target_id = organisation_organisationauthority_lat_avttqd.id
  where master_join_vniwtr.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_yerkao on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_dmgvwb.timeinterval::jsonb as timeinterval,
    notes_note_view_eftwag.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pirjol.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_xuipnm.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yocmcb.*) AS timeinterval
  from master_join master_join_fomevb
  join shared.timesheet_view shared_timesheet_lat_yocmcb on master_join_fomevb.target_id = shared_timesheet_lat_yocmcb.id
  where master_join_fomevb.source_id = routes.routeavailability.id
) as shared_timesheet_view_dmgvwb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njnssr.*) AS annotation
  from master_join master_join_tidrky
  join notes.note_view notes_note_lat_njnssr on master_join_tidrky.target_id = notes_note_lat_njnssr.id
  where master_join_tidrky.source_id = routes.routeavailability.id
) as notes_note_view_eftwag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vvrles.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vvrles.title AS varchar), '(' || organisation_organisationauthority_lat_vvrles.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vvrles.href
  )) as specialdateauthority  from master_join master_join_chtoxq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vvrles on master_join_chtoxq.target_id = organisation_organisationauthority_lat_vvrles.id
  where master_join_chtoxq.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_pirjol on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_eykvmo.id) as levels
  from master_join master_join_lwjuxj
  join shared.airspacelayer_pt shared_airspacelayer_lat_eykvmo on master_join_lwjuxj.target_id = shared_airspacelayer_lat_eykvmo.id
  where master_join_lwjuxj.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_xuipnm on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_albhtz.timeinterval::jsonb as timeinterval,
    notes_note_view_effcyg.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_viwdpj.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wkybur.*) AS timeinterval
  from master_join master_join_whihtd
  join shared.timesheet_view shared_timesheet_lat_wkybur on master_join_whihtd.target_id = shared_timesheet_lat_wkybur.id
  where master_join_whihtd.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_albhtz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydmult.*) AS annotation
  from master_join master_join_edkvxu
  join notes.note_view notes_note_lat_ydmult on master_join_edkvxu.target_id = notes_note_lat_ydmult.id
  where master_join_edkvxu.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_effcyg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dgqqtb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dgqqtb.title AS varchar), '(' || organisation_organisationauthority_lat_dgqqtb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dgqqtb.href
  )) as specialdateauthority  from master_join master_join_jrjwsj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dgqqtb on master_join_jrjwsj.target_id = organisation_organisationauthority_lat_dgqqtb.id
  where master_join_jrjwsj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_viwdpj on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_eblshe.timeinterval::jsonb as timeinterval,
    notes_note_view_cbedqg.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vboeqd.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lsyiyt.*) AS timeinterval
  from master_join master_join_iqatyj
  join shared.timesheet_view shared_timesheet_lat_lsyiyt on master_join_iqatyj.target_id = shared_timesheet_lat_lsyiyt.id
  where master_join_iqatyj.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_eblshe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpttdx.*) AS annotation
  from master_join master_join_oldnni
  join notes.note_view notes_note_lat_gpttdx on master_join_oldnni.target_id = notes_note_lat_gpttdx.id
  where master_join_oldnni.source_id = service.serviceoperationalstatus.id
) as notes_note_view_cbedqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rvfewi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rvfewi.title AS varchar), '(' || organisation_organisationauthority_lat_rvfewi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rvfewi.href
  )) as specialdateauthority  from master_join master_join_yepsal
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rvfewi on master_join_yepsal.target_id = organisation_organisationauthority_lat_rvfewi.id
  where master_join_yepsal.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_vboeqd on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_iztepl.timeinterval::jsonb as timeinterval,
    notes_note_view_lzfyov.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kpensl.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wdfwei.*) AS timeinterval
  from master_join master_join_zundds
  join shared.timesheet_view shared_timesheet_lat_wdfwei on master_join_zundds.target_id = shared_timesheet_lat_wdfwei.id
  where master_join_zundds.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_iztepl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yoslzk.*) AS annotation
  from master_join master_join_qhgfbz
  join notes.note_view notes_note_lat_yoslzk on master_join_qhgfbz.target_id = notes_note_lat_yoslzk.id
  where master_join_qhgfbz.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_lzfyov on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vajwqt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vajwqt.title AS varchar), '(' || organisation_organisationauthority_lat_vajwqt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vajwqt.href
  )) as specialdateauthority  from master_join master_join_llstbt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vajwqt on master_join_llstbt.target_id = organisation_organisationauthority_lat_vajwqt.id
  where master_join_llstbt.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_kpensl on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_rlfcds.timeinterval::jsonb as timeinterval,
    notes_note_view_mnrvee.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xyuftt.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ilcizj.*) AS timeinterval
  from master_join master_join_pfhzei
  join shared.timesheet_view shared_timesheet_lat_ilcizj on master_join_pfhzei.target_id = shared_timesheet_lat_ilcizj.id
  where master_join_pfhzei.source_id = shared.telephonecontact.id
) as shared_timesheet_view_rlfcds on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fksgun.*) AS annotation
  from master_join master_join_kwdzvy
  join notes.note_view notes_note_lat_fksgun on master_join_kwdzvy.target_id = notes_note_lat_fksgun.id
  where master_join_kwdzvy.source_id = shared.telephonecontact.id
) as notes_note_view_mnrvee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ryzyam.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ryzyam.title AS varchar), '(' || organisation_organisationauthority_lat_ryzyam.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ryzyam.href
  )) as specialdateauthority  from master_join master_join_rljdve
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ryzyam on master_join_rljdve.target_id = organisation_organisationauthority_lat_ryzyam.id
  where master_join_rljdve.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_xyuftt on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_gwqlho.timeinterval::jsonb as timeinterval,
    notes_note_view_vnvhas.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_uzufiz.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ymxqjf.*) AS timeinterval
  from master_join master_join_esyukv
  join shared.timesheet_view shared_timesheet_lat_ymxqjf on master_join_esyukv.target_id = shared_timesheet_lat_ymxqjf.id
  where master_join_esyukv.source_id = organisation.unitavailability.id
) as shared_timesheet_view_gwqlho on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gurnvt.*) AS annotation
  from master_join master_join_yjefpp
  join notes.note_view notes_note_lat_gurnvt on master_join_yjefpp.target_id = notes_note_lat_gurnvt.id
  where master_join_yjefpp.source_id = organisation.unitavailability.id
) as notes_note_view_vnvhas on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nkfjer.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nkfjer.title AS varchar), '(' || organisation_organisationauthority_lat_nkfjer.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nkfjer.href
  )) as specialdateauthority  from master_join master_join_pxujmh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nkfjer on master_join_pxujmh.target_id = organisation_organisationauthority_lat_nkfjer.id
  where master_join_pxujmh.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_uzufiz on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_yzwoep.timeinterval::jsonb as timeinterval,
    notes_note_view_ipajop.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_oioiye.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lcnvhz.*) AS timeinterval
  from master_join master_join_agrbgo
  join shared.timesheet_view shared_timesheet_lat_lcnvhz on master_join_agrbgo.target_id = shared_timesheet_lat_lcnvhz.id
  where master_join_agrbgo.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_yzwoep on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jloeuc.*) AS annotation
  from master_join master_join_ncvgfz
  join notes.note_view notes_note_lat_jloeuc on master_join_ncvgfz.target_id = notes_note_lat_jloeuc.id
  where master_join_ncvgfz.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_ipajop on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_snpjfk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_snpjfk.title AS varchar), '(' || organisation_organisationauthority_lat_snpjfk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_snpjfk.href
  )) as specialdateauthority  from master_join master_join_zvnbtq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_snpjfk on master_join_zvnbtq.target_id = organisation_organisationauthority_lat_snpjfk.id
  where master_join_zvnbtq.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_oioiye on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'notes.note_view', 'geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_vdszvt.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_vdszvt.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_vdszvt.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_vdszvt.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_vdszvt.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_vdszvt.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_vdszvt.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_vdszvt.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_wobynv.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_wobynv.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_wobynv.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_wobynv.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_wobynv.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_wobynv.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_mxhrqe.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_mxhrqe.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_mxhrqe.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_mxhrqe.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_mxhrqe.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_mxhrqe.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_sjqtbh.timeinterval::jsonb as timeinterval,
    notes_note_view_gemlag.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zdjydh.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_ntetyh.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vdszvt on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_vdszvt.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_wobynv on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_wobynv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mxhrqe on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_mxhrqe.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vfklwk.*) AS timeinterval
  from master_join master_join_lcybhw
  join shared.timesheet_view shared_timesheet_lat_vfklwk on master_join_lcybhw.target_id = shared_timesheet_lat_vfklwk.id
  where master_join_lcybhw.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_sjqtbh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pzhsap.*) AS annotation
  from master_join master_join_scvqve
  join notes.note_view notes_note_lat_pzhsap on master_join_scvqve.target_id = notes_note_lat_pzhsap.id
  where master_join_scvqve.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_gemlag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_teephv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_teephv.title AS varchar), '(' || organisation_organisationauthority_lat_teephv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_teephv.href
  )) as specialdateauthority  from master_join master_join_nwuwdw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_teephv on master_join_nwuwdw.target_id = organisation_organisationauthority_lat_teephv.id
  where master_join_nwuwdw.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_zdjydh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_sfruzc.id) as lighting
  from master_join master_join_addetg
  join shared.lightelement_pt shared_lightelement_lat_sfruzc on master_join_addetg.target_id = shared_lightelement_lat_sfruzc.id
  where master_join_addetg.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_ntetyh on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_ckjyml.timeinterval::jsonb as timeinterval,
    notes_note_view_jfiief.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yggdwr.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_oabsvd.*) AS timeinterval
  from master_join master_join_wbfvdn
  join shared.timesheet_view shared_timesheet_lat_oabsvd on master_join_wbfvdn.target_id = shared_timesheet_lat_oabsvd.id
  where master_join_wbfvdn.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_ckjyml on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwkupw.*) AS annotation
  from master_join master_join_zouvxy
  join notes.note_view notes_note_lat_qwkupw on master_join_zouvxy.target_id = notes_note_lat_qwkupw.id
  where master_join_zouvxy.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_jfiief on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lmerqa.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lmerqa.title AS varchar), '(' || organisation_organisationauthority_lat_lmerqa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lmerqa.href
  )) as specialdateauthority  from master_join master_join_qofwwp
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lmerqa on master_join_qofwwp.target_id = organisation_organisationauthority_lat_lmerqa.id
  where master_join_qofwwp.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_yggdwr on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.telephonecontact_view', 'shared.onlinecontact_view', 'notes.note_view', 'shared.postaladdress_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_mbcvzk.id)::jsonb AS selection,
    notes_note_view_efbyeo.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_mbcvzk on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_mbcvzk.id
left join lateral(
  select
  from master_join master_join_wmmeby
  join shared.contactinformation_view shared_contactinformation_lat_tbmahs on master_join_wmmeby.target_id = shared_contactinformation_lat_tbmahs.id
  where master_join_wmmeby.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_glpapy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ucxwog.*) AS annotation
  from master_join master_join_nstfgz
  join notes.note_view notes_note_lat_ucxwog on master_join_nstfgz.target_id = notes_note_lat_ucxwog.id
  where master_join_nstfgz.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_efbyeo on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_nozrkx.id)::jsonb AS selection,
    notes_note_view_rgvcce.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_nozrkx on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_nozrkx.id
left join lateral(
  select
  from master_join master_join_akkkmg
  join shared.contactinformation_view shared_contactinformation_lat_lqgqfr on master_join_akkkmg.target_id = shared_contactinformation_lat_lqgqfr.id
  where master_join_akkkmg.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_krhefd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gehevy.*) AS annotation
  from master_join master_join_jcazax
  join notes.note_view notes_note_lat_gehevy on master_join_jcazax.target_id = notes_note_lat_gehevy.id
  where master_join_jcazax.source_id = airport_heliport.apronareausage.id
) as notes_note_view_rgvcce on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_cjxjdd.routeelement::jsonb as routeelement,
    notes_note_view_qnfdmd.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_ruxarm.id) as routeelement
  from master_join master_join_czuupx
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_ruxarm on master_join_czuupx.target_id = routes_flightroutingelement_lat_ruxarm.id
  where master_join_czuupx.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_cjxjdd on TRUE
left join lateral(
  select
  from master_join master_join_vossuq
  join shared.contactinformation_view shared_contactinformation_lat_uklffq on master_join_vossuq.target_id = shared_contactinformation_lat_uklffq.id
  where master_join_vossuq.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_itgjwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_udtdhi.*) AS annotation
  from master_join master_join_mzbwpy
  join notes.note_view notes_note_lat_udtdhi on master_join_mzbwpy.target_id = notes_note_lat_udtdhi.id
  where master_join_mzbwpy.source_id = routes.flightrestrictionroute.id
) as notes_note_view_qnfdmd on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_hecaol.id)::jsonb AS selection,
    notes_note_view_ibjfqk.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_hecaol on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_hecaol.id
left join lateral(
  select
  from master_join master_join_nuhbmm
  join shared.contactinformation_view shared_contactinformation_lat_jcfyrs on master_join_nuhbmm.target_id = shared_contactinformation_lat_jcfyrs.id
  where master_join_nuhbmm.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_eegjox on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_biurdx.*) AS annotation
  from master_join master_join_spoypk
  join notes.note_view notes_note_lat_biurdx on master_join_spoypk.target_id = notes_note_lat_biurdx.id
  where master_join_spoypk.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_ibjfqk on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'notes.note_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'routes.routeavailability_view', 'aerial_refuelling.authorityforaerialrefuelling_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as id,
    aerial_refuelling.aerialrefuelling.id::integer as f_id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_qhwcfp.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_qhwcfp.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_qhwcfp.href::text AS oppositetrack_href,
    routes_routeavailability_view_jjmulf.availability::jsonb as availability,
    airspace_airspace_pt_cszqoy.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_ftzgcb.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_evxiju.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_xodtqd.managingorganisation::jsonb as managingorganisation,
    notes_note_view_jwrpyq.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_qhwcfp on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_qhwcfp.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_wegxwf.*) as availability
  from master_join master_join_ytldwx
  join routes.routeavailability_view routes_routeavailability_lat_wegxwf on master_join_ytldwx.target_id = routes_routeavailability_lat_wegxwf.id
  where master_join_ytldwx.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_jjmulf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_lhescn.id,
      'title', coalesce(cast(airspace_airspace_lat_lhescn.title AS varchar), '(' || airspace_airspace_lat_lhescn.nilreason[1] || ')'),
      'href', airspace_airspace_lat_lhescn.href
  )) as protectingairspace  from master_join master_join_aqzfui
  join airspace.airspace_pt airspace_airspace_lat_lhescn on master_join_aqzfui.target_id = airspace_airspace_lat_lhescn.id
  where master_join_aqzfui.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_cszqoy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_qwyyfv.*) as track
  from master_join master_join_ohqyrg
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_qwyyfv on master_join_ohqyrg.target_id = aerial_refuelling_aerialrefuellingtrack_lat_qwyyfv.id
  where master_join_ohqyrg.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_ftzgcb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_gmsmgo.*) as anchor
  from master_join master_join_smeesq
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_gmsmgo on master_join_smeesq.target_id = aerial_refuelling_aerialrefuellinganchor_lat_gmsmgo.id
  where master_join_smeesq.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_evxiju on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_gyefdz.*) as managingorganisation
  from master_join master_join_vsebpa
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_gyefdz on master_join_vsebpa.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_gyefdz.id
  where master_join_vsebpa.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_xodtqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgbwiz.*) AS annotation
  from master_join master_join_cnxevn
  join notes.note_view notes_note_lat_wgbwiz on master_join_cnxevn.target_id = notes_note_lat_wgbwiz.id
  where master_join_cnxevn.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_jwrpyq on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.aeronauticalgroundlight.id::integer as f_id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_alqmba.title as varchar), '(' || obstacles_verticalstructure_pt_alqmba.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_alqmba.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ugqmkl.title as varchar), '(' || airport_heliport_airportheliport_pt_ugqmkl.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_ugqmkl.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_ldjlpx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ldjlpx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ldjlpx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ldjlpx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ldjlpx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ldjlpx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ldjlpx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ldjlpx.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_trytmd.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_alqmba on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_alqmba.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ugqmkl on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_ugqmkl.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ldjlpx on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_ldjlpx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xcvces.*) AS annotation
  from master_join master_join_luuyoz
  join notes.note_view notes_note_lat_xcvces on master_join_luuyoz.target_id = notes_note_lat_xcvces.id
  where master_join_luuyoz.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_trytmd on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.aircraftgroundservice.id::integer as f_id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_zsanmg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zsanmg.longitude AS location_longitude,
    geometry_elevatedpoint_view_zsanmg.latitude AS location_latitude,
    geometry_elevatedpoint_view_zsanmg.elevation AS location_elevation,
    geometry_elevatedpoint_view_zsanmg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zsanmg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zsanmg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zsanmg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qtulkz.title as varchar), '(' || organisation_unit_pt_qtulkz.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_qtulkz.href::text AS serviceprovider_href,
    service_callsigndetail_view_twezzw.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_dbhixd.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_eytgmn.availability::jsonb as availability,
    notes_note_view_cokaje.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_dmnlbl.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zsanmg on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_zsanmg.id
left join organisation.unit_pt organisation_unit_pt_qtulkz on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_qtulkz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_uqlzza.*) as callsign
  from master_join master_join_btrpmx
  join service.callsigndetail_view service_callsigndetail_lat_uqlzza on master_join_btrpmx.target_id = service_callsigndetail_lat_uqlzza.id
  where master_join_btrpmx.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_twezzw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xwbijk.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xwbijk.title AS varchar), '(' || service_radiocommunicationchannel_lat_xwbijk.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xwbijk.href
  )) as radiocommunication  from master_join master_join_erzpyg
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xwbijk on master_join_erzpyg.target_id = service_radiocommunicationchannel_lat_xwbijk.id
  where master_join_erzpyg.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_dbhixd on TRUE
left join lateral(
  select
  from master_join master_join_xupobh
  join shared.contactinformation_view shared_contactinformation_lat_xouiwq on master_join_xupobh.target_id = shared_contactinformation_lat_xouiwq.id
  where master_join_xupobh.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_ztkmrk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_mvacna.*) as availability
  from master_join master_join_vnputf
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_mvacna on master_join_vnputf.target_id = service_serviceoperationalstatus_lat_mvacna.id
  where master_join_vnputf.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_eytgmn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvrntq.*) AS annotation
  from master_join master_join_osbenu
  join notes.note_view notes_note_lat_xvrntq on master_join_osbenu.target_id = notes_note_lat_xvrntq.id
  where master_join_osbenu.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_cokaje on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_sbkuwa.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_sbkuwa.title AS varchar), '(' || airport_heliport_airportheliport_lat_sbkuwa.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_sbkuwa.href
  )) as airportheliport  from master_join master_join_vveaxj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_sbkuwa on master_join_vveaxj.target_id = airport_heliport_airportheliport_lat_sbkuwa.id
  where master_join_vveaxj.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_dmnlbl on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.aircraftstandcontamination_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.aircraftstand.id::integer as f_id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_pzlaik.*)::jsonb AS surfaceproperties,
    geometry_elevatedpoint_view_gixzao.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gixzao.longitude AS location_longitude,
    geometry_elevatedpoint_view_gixzao.latitude AS location_latitude,
    geometry_elevatedpoint_view_gixzao.elevation AS location_elevation,
    geometry_elevatedpoint_view_gixzao.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gixzao.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gixzao.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gixzao.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_bubvib.title as varchar), '(' || airport_heliport_apronelement_pt_bubvib.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_bubvib.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_nrcrmf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_nrcrmf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_nrcrmf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_nrcrmf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_nrcrmf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_nrcrmf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_banlhb.contaminant::jsonb as contaminant,
    notes_note_view_eqpxbp.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_ngrevy.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_pzlaik on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_pzlaik.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gixzao on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_gixzao.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_bubvib on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_bubvib.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nrcrmf on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_nrcrmf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_osrugi.*) as contaminant
  from master_join master_join_ngzedc
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_osrugi on master_join_ngzedc.target_id = airport_heliport_aircraftstandcontamination_lat_osrugi.id
  where master_join_ngzedc.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_banlhb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ckcbll.*) AS annotation
  from master_join master_join_vpzdpt
  join notes.note_view notes_note_lat_ckcbll on master_join_vpzdpt.target_id = notes_note_lat_ckcbll.id
  where master_join_vpzdpt.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_eqpxbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_gpsezr.*) as availability
  from master_join master_join_kncqzh
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_gpsezr on master_join_kncqzh.target_id = airport_heliport_apronareaavailability_lat_gpsezr.id
  where master_join_kncqzh.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_ngrevy on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airportclearanceservice.id::integer as f_id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_kgsjcu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kgsjcu.longitude AS location_longitude,
    geometry_elevatedpoint_view_kgsjcu.latitude AS location_latitude,
    geometry_elevatedpoint_view_kgsjcu.elevation AS location_elevation,
    geometry_elevatedpoint_view_kgsjcu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kgsjcu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kgsjcu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kgsjcu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_tjyini.title as varchar), '(' || organisation_unit_pt_tjyini.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_tjyini.href::text AS serviceprovider_href,
    service_callsigndetail_view_ytanxe.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_bnizrs.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_hiicmx.availability::jsonb as availability,
    notes_note_view_clujrc.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_glmmjs.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kgsjcu on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_kgsjcu.id
left join organisation.unit_pt organisation_unit_pt_tjyini on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_tjyini.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_kfuwjz.*) as callsign
  from master_join master_join_krbhpz
  join service.callsigndetail_view service_callsigndetail_lat_kfuwjz on master_join_krbhpz.target_id = service_callsigndetail_lat_kfuwjz.id
  where master_join_krbhpz.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_ytanxe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qugkmi.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qugkmi.title AS varchar), '(' || service_radiocommunicationchannel_lat_qugkmi.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qugkmi.href
  )) as radiocommunication  from master_join master_join_qywdet
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qugkmi on master_join_qywdet.target_id = service_radiocommunicationchannel_lat_qugkmi.id
  where master_join_qywdet.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_bnizrs on TRUE
left join lateral(
  select
  from master_join master_join_tsicti
  join shared.contactinformation_view shared_contactinformation_lat_astqum on master_join_tsicti.target_id = shared_contactinformation_lat_astqum.id
  where master_join_tsicti.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_txjnah on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_llmwel.*) as availability
  from master_join master_join_tceskv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_llmwel on master_join_tceskv.target_id = service_serviceoperationalstatus_lat_llmwel.id
  where master_join_tceskv.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_hiicmx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwtgzt.*) AS annotation
  from master_join master_join_tzccgc
  join notes.note_view notes_note_lat_kwtgzt on master_join_tzccgc.target_id = notes_note_lat_kwtgzt.id
  where master_join_tzccgc.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_clujrc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_utvifc.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_utvifc.title AS varchar), '(' || airport_heliport_airportheliport_lat_utvifc.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_utvifc.href
  )) as airportheliport  from master_join master_join_ewtgvi
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_utvifc on master_join_ewtgvi.target_id = airport_heliport_airportheliport_lat_utvifc.id
  where master_join_ewtgvi.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_glmmjs on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportheliportcollocation.id::integer as f_id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_niceov.title as varchar), '(' || airport_heliport_airportheliport_pt_niceov.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_niceov.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hksxgb.title as varchar), '(' || airport_heliport_airportheliport_pt_hksxgb.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_hksxgb.href::text AS dependentairport_href,
    notes_note_view_syxdtg.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_niceov on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_niceov.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hksxgb on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_hksxgb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zzmuys.*) AS annotation
  from master_join master_join_jdelrz
  join notes.note_view notes_note_lat_zzmuys on master_join_jdelrz.target_id = notes_note_lat_zzmuys.id
  where master_join_jdelrz.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_syxdtg on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['airport_heliport.airportheliportavailability_view', 'shared.contactinformation_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'airport_heliport.city_view', 'notes.note_view', 'airport_heliport.airportheliportcontamination_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportheliport.id::integer as f_id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_cwcsuc.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_stuutg.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_stuutg.longitude AS arp_longitude,
    geometry_elevatedpoint_view_stuutg.latitude AS arp_latitude,
    geometry_elevatedpoint_view_stuutg.elevation AS arp_elevation,
    geometry_elevatedpoint_view_stuutg.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_stuutg.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_stuutg.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_stuutg.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_iopetk.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_iopetk.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_iopetk.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_iopetk.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_iopetk.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_iopetk.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_ygayea.contaminant::jsonb as contaminant,
    airport_heliport_city_view_bswrnv.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_uypfbh.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_thpwuq.availability::jsonb as availability,
    notes_note_view_gepwjb.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_cwcsuc on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_cwcsuc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_stuutg on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_stuutg.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_iopetk on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_iopetk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_jawvtj.*) as contaminant
  from master_join master_join_ornxms
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_jawvtj on master_join_ornxms.target_id = airport_heliport_airportheliportcontamination_lat_jawvtj.id
  where master_join_ornxms.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_ygayea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_ckejcg.*) as servedcity
  from master_join master_join_ydehky
  join airport_heliport.city_view airport_heliport_city_lat_ckejcg on master_join_ydehky.target_id = airport_heliport_city_lat_ckejcg.id
  where master_join_ydehky.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_bswrnv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_lojeah.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_lojeah.title AS varchar), '(' || airport_heliport_altimetersource_lat_lojeah.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_lojeah.href
  )) as altimetersource  from master_join master_join_qdiunv
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_lojeah on master_join_qdiunv.target_id = airport_heliport_altimetersource_lat_lojeah.id
  where master_join_qdiunv.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_uypfbh on TRUE
left join lateral(
  select
  from master_join master_join_tyquvh
  join shared.contactinformation_view shared_contactinformation_lat_uykdtw on master_join_tyquvh.target_id = shared_contactinformation_lat_uykdtw.id
  where master_join_tyquvh.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_ujprty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_cerlca.*) as availability
  from master_join master_join_zxuvpu
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_cerlca on master_join_zxuvpu.target_id = airport_heliport_airportheliportavailability_lat_cerlca.id
  where master_join_zxuvpu.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_thpwuq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkiqfw.*) AS annotation
  from master_join master_join_rzgvll
  join notes.note_view notes_note_lat_rkiqfw on master_join_rzgvll.target_id = notes_note_lat_rkiqfw.id
  where master_join_rzgvll.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_gepwjb on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airporthotspot.id::integer as f_id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_lyltzh.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_lyltzh.elevation AS area_elevation,
    geometry_elevatedsurface_view_lyltzh.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_lyltzh.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_lyltzh.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_lyltzh.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_ogyyqp.title as varchar), '(' || airport_heliport_airportheliport_pt_ogyyqp.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_ogyyqp.href::text AS affectedairport_href,
    notes_note_view_zksluq.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lyltzh on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_lyltzh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ogyyqp on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_ogyyqp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hjgnma.*) AS annotation
  from master_join master_join_bnojlw
  join notes.note_view notes_note_lat_hjgnma on master_join_bnojlw.target_id = notes_note_lat_hjgnma.id
  where master_join_bnojlw.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_zksluq on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportprotectionareamarking.id::integer as f_id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    airport_heliport_markingelement_view_sohidy.element::jsonb as element,
    notes_note_view_ldsvlu.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ieqbta.*) as element
  from master_join master_join_eufoof
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ieqbta on master_join_eufoof.target_id = airport_heliport_markingelement_lat_ieqbta.id
  where master_join_eufoof.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_sohidy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_axnqca.*) AS annotation
  from master_join master_join_rgnimu
  join notes.note_view notes_note_lat_axnqca on master_join_rgnimu.target_id = notes_note_lat_axnqca.id
  where master_join_rgnimu.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_ldsvlu on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.nitrogen_view', 'service.callsigndetail_view', 'service.oil_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.oxygen_view', 'service.fuel_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airportsuppliesservice.id::integer as f_id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as name,
    geometry_elevatedpoint_view_exwjix.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_exwjix.longitude AS location_longitude,
    geometry_elevatedpoint_view_exwjix.latitude AS location_latitude,
    geometry_elevatedpoint_view_exwjix.elevation AS location_elevation,
    geometry_elevatedpoint_view_exwjix.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_exwjix.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_exwjix.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_exwjix.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_lvljox.title as varchar), '(' || organisation_unit_pt_lvljox.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_lvljox.href::text AS serviceprovider_href,
    service_callsigndetail_view_ovamnv.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_saazax.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_taoifa.availability::jsonb as availability,
    notes_note_view_uezclz.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_nkypoy.airportheliport::jsonb as airportheliport,
    service_fuel_view_wfpkxi.fuelsupply::jsonb as fuelsupply,
    service_oil_view_plropu.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_khuzsf.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_snypke.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_exwjix on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_exwjix.id
left join organisation.unit_pt organisation_unit_pt_lvljox on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_lvljox.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_wmpbfh.*) as callsign
  from master_join master_join_rvzxvr
  join service.callsigndetail_view service_callsigndetail_lat_wmpbfh on master_join_rvzxvr.target_id = service_callsigndetail_lat_wmpbfh.id
  where master_join_rvzxvr.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_ovamnv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_celikg.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_celikg.title AS varchar), '(' || service_radiocommunicationchannel_lat_celikg.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_celikg.href
  )) as radiocommunication  from master_join master_join_girone
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_celikg on master_join_girone.target_id = service_radiocommunicationchannel_lat_celikg.id
  where master_join_girone.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_saazax on TRUE
left join lateral(
  select
  from master_join master_join_akpdot
  join shared.contactinformation_view shared_contactinformation_lat_ksdshd on master_join_akpdot.target_id = shared_contactinformation_lat_ksdshd.id
  where master_join_akpdot.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_uyoknn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hfjbpb.*) as availability
  from master_join master_join_arsrbi
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hfjbpb on master_join_arsrbi.target_id = service_serviceoperationalstatus_lat_hfjbpb.id
  where master_join_arsrbi.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_taoifa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_diefqn.*) AS annotation
  from master_join master_join_zctlmx
  join notes.note_view notes_note_lat_diefqn on master_join_zctlmx.target_id = notes_note_lat_diefqn.id
  where master_join_zctlmx.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_uezclz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_dgdrrq.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_dgdrrq.title AS varchar), '(' || airport_heliport_airportheliport_lat_dgdrrq.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_dgdrrq.href
  )) as airportheliport  from master_join master_join_rwhuua
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_dgdrrq on master_join_rwhuua.target_id = airport_heliport_airportheliport_lat_dgdrrq.id
  where master_join_rwhuua.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_nkypoy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_bgwmra.*) as fuelsupply
  from master_join master_join_ngqgwb
  join service.fuel_view service_fuel_lat_bgwmra on master_join_ngqgwb.target_id = service_fuel_lat_bgwmra.id
  where master_join_ngqgwb.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_wfpkxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_pznjjw.*) as oilsupply
  from master_join master_join_ytmxzq
  join service.oil_view service_oil_lat_pznjjw on master_join_ytmxzq.target_id = service_oil_lat_pznjjw.id
  where master_join_ytmxzq.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_plropu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_wydgor.*) as nitrogensupply
  from master_join master_join_wjmahl
  join service.nitrogen_view service_nitrogen_lat_wydgor on master_join_wjmahl.target_id = service_nitrogen_lat_wydgor.id
  where master_join_wjmahl.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_khuzsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_dxukqv.*) as oxygensupply
  from master_join master_join_ugnrkq
  join service.oxygen_view service_oxygen_lat_dxukqv on master_join_ugnrkq.target_id = service_oxygen_lat_dxukqv.id
  where master_join_ugnrkq.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_snypke on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.airspacebordercrossing.id::integer as f_id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_qhwqzs.title as varchar), '(' || airspace_airspace_pt_qhwqzs.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_qhwqzs.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_uxsbzw.title as varchar), '(' || airspace_airspace_pt_uxsbzw.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_uxsbzw.href::text AS enteredairspace_href,
    notes_note_view_nfvxra.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_qhwqzs on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_qhwqzs.id
left join airspace.airspace_pt airspace_airspace_pt_uxsbzw on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_uxsbzw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqhhxu.*) AS annotation
  from master_join master_join_ahnxla
  join notes.note_view notes_note_lat_lqhhxu on master_join_ahnxla.target_id = notes_note_lat_lqhhxu.id
  where master_join_ahnxla.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_nfvxra on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspaceactivation_view', 'airspace.airspacelayerclass_view', 'notes.note_view', 'airspace.airspacegeometrycomponent_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.airspace.id::integer as f_id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_hdhkxg.title as varchar), '(' || routes_route_pt_hdhkxg.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_hdhkxg.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_ioudzp.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_vyjlal.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_mfsabt.activation::jsonb as activation,
    notes_note_view_sxlfzt.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_hdhkxg on airspace.airspace_ts.protectedroute_id = routes_route_pt_hdhkxg.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_okrelx.*) as clazz
  from master_join master_join_dvtjxi
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_okrelx on master_join_dvtjxi.target_id = airspace_airspacelayerclass_lat_okrelx.id
  where master_join_dvtjxi.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_ioudzp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_vilsux.*) as geometrycomponent
  from master_join master_join_uczwfb
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_vilsux on master_join_uczwfb.target_id = airspace_airspacegeometrycomponent_lat_vilsux.id
  where master_join_uczwfb.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_vyjlal on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_pampka.*) as activation
  from master_join master_join_ksalkl
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_pampka on master_join_ksalkl.target_id = airspace_airspaceactivation_lat_pampka.id
  where master_join_ksalkl.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_mfsabt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hpawiv.*) AS annotation
  from master_join master_join_eforyq
  join notes.note_view notes_note_lat_hpawiv on master_join_eforyq.target_id = notes_note_lat_hpawiv.id
  where master_join_eforyq.source_id = airspace.airspace_ts.id
) as notes_note_view_sxlfzt on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airtrafficcontrolservice.id::integer as f_id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lxbimu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lxbimu.longitude AS location_longitude,
    geometry_elevatedpoint_view_lxbimu.latitude AS location_latitude,
    geometry_elevatedpoint_view_lxbimu.elevation AS location_elevation,
    geometry_elevatedpoint_view_lxbimu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lxbimu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lxbimu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lxbimu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ewlzlr.title as varchar), '(' || organisation_unit_pt_ewlzlr.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ewlzlr.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_fingdo.title as varchar), '(' || navaids_points_directionfinder_pt_fingdo.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_fingdo.href::text AS aircraftlocator_href,
    service_callsigndetail_view_rmwooy.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_hdmloc.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_tfwgid.availability::jsonb as availability,
    notes_note_view_qzzrku.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_inaxyh.clientairport::jsonb as clientairport,
    airspace_airspace_pt_xdyhod.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_flvvjj.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_accnvk.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_gsrwrp.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lxbimu on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_lxbimu.id
left join organisation.unit_pt organisation_unit_pt_ewlzlr on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ewlzlr.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_fingdo on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_fingdo.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_bmhzoj.*) as callsign
  from master_join master_join_hbykkn
  join service.callsigndetail_view service_callsigndetail_lat_bmhzoj on master_join_hbykkn.target_id = service_callsigndetail_lat_bmhzoj.id
  where master_join_hbykkn.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_rmwooy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_harudw.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_harudw.title AS varchar), '(' || service_radiocommunicationchannel_lat_harudw.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_harudw.href
  )) as radiocommunication  from master_join master_join_bvwulx
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_harudw on master_join_bvwulx.target_id = service_radiocommunicationchannel_lat_harudw.id
  where master_join_bvwulx.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_hdmloc on TRUE
left join lateral(
  select
  from master_join master_join_anrski
  join shared.contactinformation_view shared_contactinformation_lat_usazve on master_join_anrski.target_id = shared_contactinformation_lat_usazve.id
  where master_join_anrski.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_kvnmiv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_thosxm.*) as availability
  from master_join master_join_kjwpyd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_thosxm on master_join_kjwpyd.target_id = service_serviceoperationalstatus_lat_thosxm.id
  where master_join_kjwpyd.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_tfwgid on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kzgmjl.*) AS annotation
  from master_join master_join_ihsuxg
  join notes.note_view notes_note_lat_kzgmjl on master_join_ihsuxg.target_id = notes_note_lat_kzgmjl.id
  where master_join_ihsuxg.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_qzzrku on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_kqwxpm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_kqwxpm.title AS varchar), '(' || airport_heliport_airportheliport_lat_kqwxpm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_kqwxpm.href
  )) as clientairport  from master_join master_join_gqlzlo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_kqwxpm on master_join_gqlzlo.target_id = airport_heliport_airportheliport_lat_kqwxpm.id
  where master_join_gqlzlo.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_inaxyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_tiakgm.id,
      'title', coalesce(cast(airspace_airspace_lat_tiakgm.title AS varchar), '(' || airspace_airspace_lat_tiakgm.nilreason[1] || ')'),
      'href', airspace_airspace_lat_tiakgm.href
  )) as clientairspace  from master_join master_join_mrufgy
  join airspace.airspace_pt airspace_airspace_lat_tiakgm on master_join_mrufgy.target_id = airspace_airspace_lat_tiakgm.id
  where master_join_mrufgy.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_xdyhod on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_ookeij.*) as clientroute
  from master_join master_join_hglixn
  join routes.routeportion_view routes_routeportion_lat_ookeij on master_join_hglixn.target_id = routes_routeportion_lat_ookeij.id
  where master_join_hglixn.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_flvvjj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ymrsew.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ymrsew.title AS varchar), '(' || holding_holdingpattern_lat_ymrsew.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ymrsew.href
  )) as clientholding  from master_join master_join_vuxsmd
  join holding.holdingpattern_pt holding_holdingpattern_lat_ymrsew on master_join_vuxsmd.target_id = holding_holdingpattern_lat_ymrsew.id
  where master_join_vuxsmd.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_accnvk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_nqlcww.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_nqlcww.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_nqlcww.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_nqlcww.href
  )) as clientaerialrefuelling  from master_join master_join_uvjwrw
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_nqlcww on master_join_uvjwrw.target_id = aerial_refuelling_aerialrefuelling_lat_nqlcww.id
  where master_join_uvjwrw.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_gsrwrp on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airtrafficmanagementservice.id::integer as f_id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_eyjsmz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_eyjsmz.longitude AS location_longitude,
    geometry_elevatedpoint_view_eyjsmz.latitude AS location_latitude,
    geometry_elevatedpoint_view_eyjsmz.elevation AS location_elevation,
    geometry_elevatedpoint_view_eyjsmz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_eyjsmz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_eyjsmz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_eyjsmz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_oqnzyt.title as varchar), '(' || organisation_unit_pt_oqnzyt.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_oqnzyt.href::text AS serviceprovider_href,
    service_callsigndetail_view_xjauuf.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_bawiee.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rlkjkc.availability::jsonb as availability,
    notes_note_view_hbpdcl.annotation::jsonb as annotation,
    airspace_airspace_pt_xqlmwc.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_kzpfjb.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_mhhfhk.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_eyjsmz on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_eyjsmz.id
left join organisation.unit_pt organisation_unit_pt_oqnzyt on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_oqnzyt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_qocapf.*) as callsign
  from master_join master_join_xlpgub
  join service.callsigndetail_view service_callsigndetail_lat_qocapf on master_join_xlpgub.target_id = service_callsigndetail_lat_qocapf.id
  where master_join_xlpgub.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_xjauuf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_sxuhgu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_sxuhgu.title AS varchar), '(' || service_radiocommunicationchannel_lat_sxuhgu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_sxuhgu.href
  )) as radiocommunication  from master_join master_join_jlqfht
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_sxuhgu on master_join_jlqfht.target_id = service_radiocommunicationchannel_lat_sxuhgu.id
  where master_join_jlqfht.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_bawiee on TRUE
left join lateral(
  select
  from master_join master_join_vdgugq
  join shared.contactinformation_view shared_contactinformation_lat_ykkjgg on master_join_vdgugq.target_id = shared_contactinformation_lat_ykkjgg.id
  where master_join_vdgugq.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_jbqant on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_pryuzc.*) as availability
  from master_join master_join_plzcze
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_pryuzc on master_join_plzcze.target_id = service_serviceoperationalstatus_lat_pryuzc.id
  where master_join_plzcze.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_rlkjkc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ayzioy.*) AS annotation
  from master_join master_join_symuox
  join notes.note_view notes_note_lat_ayzioy on master_join_symuox.target_id = notes_note_lat_ayzioy.id
  where master_join_symuox.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_hbpdcl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_dmfbiu.id,
      'title', coalesce(cast(airspace_airspace_lat_dmfbiu.title AS varchar), '(' || airspace_airspace_lat_dmfbiu.nilreason[1] || ')'),
      'href', airspace_airspace_lat_dmfbiu.href
  )) as clientairspace  from master_join master_join_mbkudc
  join airspace.airspace_pt airspace_airspace_lat_dmfbiu on master_join_mbkudc.target_id = airspace_airspace_lat_dmfbiu.id
  where master_join_mbkudc.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_xqlmwc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_djbsoy.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_djbsoy.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_djbsoy.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_djbsoy.href
  )) as clientaerialrefuelling  from master_join master_join_ebrjlb
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_djbsoy on master_join_ebrjlb.target_id = aerial_refuelling_aerialrefuelling_lat_djbsoy.id
  where master_join_ebrjlb.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_kzpfjb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_mvsico.*) as clientroute
  from master_join master_join_rjjrlg
  join routes.routeportion_view routes_routeportion_lat_mvsico on master_join_rjjrlg.target_id = routes_routeportion_lat_mvsico.id
  where master_join_rjjrlg.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_mhhfhk on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['notes.note_view', 'airport_heliport.altimetersourcestatus_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.altimetersource.id::integer as f_id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_hnnjqw.availability::jsonb as availability,
    notes_note_view_ygsfss.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_rrbsch.*) as availability
  from master_join master_join_uphwjl
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_rrbsch on master_join_uphwjl.target_id = airport_heliport_altimetersourcestatus_lat_rrbsch.id
  where master_join_uphwjl.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_hnnjqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xcraog.*) AS annotation
  from master_join master_join_xvkncr
  join notes.note_view notes_note_lat_xcraog on master_join_xvkncr.target_id = notes_note_lat_xcraog.id
  where master_join_xvkncr.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_ygsfss on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.angleindication.id::integer as f_id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_hhqxac.title as varchar), '(' || navaids_points_designatedpoint_pt_hhqxac.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_hhqxac.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nkdgls.title as varchar), '(' || navaids_points_designatedpoint_pt_nkdgls.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_nkdgls.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_bxrbic.title as varchar), '(' || navaids_points_navaid_pt_bxrbic.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_bxrbic.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_dxvptn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_dxvptn.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_dxvptn.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_emrvso.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_emrvso.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_emrvso.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ttzyhg.title as varchar), '(' || airport_heliport_airportheliport_pt_ttzyhg.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ttzyhg.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ztifko.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_ztifko.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ztifko.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ztifko.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_dpdkvz.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hhqxac on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_hhqxac.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nkdgls on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nkdgls.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bxrbic on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_bxrbic.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_dxvptn on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_dxvptn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_emrvso on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_emrvso.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ttzyhg on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_ttzyhg.id
left join geometry.point_view geometry_point_view_ztifko on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_ztifko.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqitzi.*) AS annotation
  from master_join master_join_dwfmih
  join notes.note_view notes_note_lat_aqitzi on master_join_dwfmih.target_id = notes_note_lat_aqitzi.id
  where master_join_dwfmih.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_dpdkvz on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.approachlightingsystem.id::integer as f_id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_vlneos.title as varchar), '(' || airport_heliport_runwaydirection_pt_vlneos.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_vlneos.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_ekvihe.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_dbztsg.availability::jsonb as availability,
    notes_note_view_xtmwbf.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vlneos on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_vlneos.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vwtsbt.*) as element
  from master_join master_join_glwpwx
  join shared.lightelement_view shared_lightelement_lat_vwtsbt on master_join_glwpwx.target_id = shared_lightelement_lat_vwtsbt.id
  where master_join_glwpwx.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_ekvihe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vozbuw.*) as availability
  from master_join master_join_opkvnr
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_vozbuw on master_join_opkvnr.target_id = airport_heliport_groundlightingavailability_lat_vozbuw.id
  where master_join_opkvnr.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_dbztsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hqandh.*) AS annotation
  from master_join master_join_uotzqc
  join notes.note_view notes_note_lat_hqandh on master_join_uotzqc.target_id = notes_note_lat_hqandh.id
  where master_join_uotzqc.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_xtmwbf on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronelement.id::integer as f_id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_ofgksn.title as varchar), '(' || airport_heliport_apron_pt_ofgksn.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_ofgksn.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_dwcgfl.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_jzrdsx.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jzrdsx.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jzrdsx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jzrdsx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jzrdsx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jzrdsx.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_cajqfw.supplyservice::jsonb as supplyservice,
    notes_note_view_zwodzp.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_cqgtnu.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ofgksn on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_ofgksn.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_dwcgfl on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_dwcgfl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jzrdsx on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_jzrdsx.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_gjufgr.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_gjufgr.title AS varchar), '(' || service_airportsuppliesservice_lat_gjufgr.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_gjufgr.href
  )) as supplyservice  from master_join master_join_dtcqqh
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_gjufgr on master_join_dtcqqh.target_id = service_airportsuppliesservice_lat_gjufgr.id
  where master_join_dtcqqh.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_cajqfw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bpkjkz.*) AS annotation
  from master_join master_join_sogenh
  join notes.note_view notes_note_lat_bpkjkz on master_join_sogenh.target_id = notes_note_lat_bpkjkz.id
  where master_join_sogenh.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_zwodzp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_lyjzbp.*) as availability
  from master_join master_join_dfneos
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_lyjzbp on master_join_dfneos.target_id = airport_heliport_apronareaavailability_lat_lyjzbp.id
  where master_join_dfneos.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_cqgtnu on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronlightsystem.id::integer as f_id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_yactgh.title as varchar), '(' || airport_heliport_apron_pt_yactgh.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_yactgh.href::text AS lightedapron_href,
    shared_lightelement_view_ceylfp.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_vutzmr.availability::jsonb as availability,
    notes_note_view_dzvqxk.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_yactgh on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_yactgh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_almqva.*) as element
  from master_join master_join_zlhlkm
  join shared.lightelement_view shared_lightelement_lat_almqva on master_join_zlhlkm.target_id = shared_lightelement_lat_almqva.id
  where master_join_zlhlkm.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_ceylfp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ihzbnm.*) as availability
  from master_join master_join_pzufte
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ihzbnm on master_join_pzufte.target_id = airport_heliport_groundlightingavailability_lat_ihzbnm.id
  where master_join_pzufte.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_vutzmr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hfivpa.*) AS annotation
  from master_join master_join_ggibse
  join notes.note_view notes_note_lat_hfivpa on master_join_ggibse.target_id = notes_note_lat_hfivpa.id
  where master_join_ggibse.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_dzvqxk on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronmarking.id::integer as f_id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_hyvxbg.title as varchar), '(' || airport_heliport_apron_pt_hyvxbg.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_hyvxbg.href::text AS markedapron_href,
    airport_heliport_markingelement_view_cdfymx.element::jsonb as element,
    notes_note_view_pacpnz.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_hyvxbg on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_hyvxbg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_litznj.*) as element
  from master_join master_join_zxgqrl
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_litznj on master_join_zxgqrl.target_id = airport_heliport_markingelement_lat_litznj.id
  where master_join_zxgqrl.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_cdfymx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xcfbza.*) AS annotation
  from master_join master_join_qmalst
  join notes.note_view notes_note_lat_xcfbza on master_join_qmalst.target_id = notes_note_lat_xcfbza.id
  where master_join_qmalst.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_pacpnz on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.aproncontamination_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apron.id::integer as f_id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_frxljf.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_uohumd.title as varchar), '(' || airport_heliport_airportheliport_pt_uohumd.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_uohumd.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_swmuzc.contaminant::jsonb as contaminant,
    notes_note_view_olysqo.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_cnfzmh.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_frxljf on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_frxljf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uohumd on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_uohumd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_qumwvs.*) as contaminant
  from master_join master_join_fgxyxn
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_qumwvs on master_join_fgxyxn.target_id = airport_heliport_aproncontamination_lat_qumwvs.id
  where master_join_fgxyxn.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_swmuzc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tomnil.*) AS annotation
  from master_join master_join_redypk
  join notes.note_view notes_note_lat_tomnil on master_join_redypk.target_id = notes_note_lat_tomnil.id
  where master_join_redypk.source_id = airport_heliport.apron_ts.id
) as notes_note_view_olysqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_bvsycr.*) as availability
  from master_join master_join_ttofbk
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_bvsycr on master_join_ttofbk.target_id = airport_heliport_apronareaavailability_lat_bvsycr.id
  where master_join_ttofbk.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_cnfzmh on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['notes.note_view', 'geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.arrestinggear.id::integer as f_id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bcqjag.*)::jsonb AS surfaceproperties,
    geometry_elevatedcurve_view_nqhdag.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_nqhdag.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_nqhdag.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_nqhdag.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_nqhdag.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_nqhdag.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_ttgihp.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_ttgihp.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_ttgihp.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_ttgihp.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_ttgihp.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_ttgihp.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_fuzjag.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_fuzjag.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_fuzjag.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_fuzjag.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_fuzjag.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_fuzjag.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_fuzjag.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_fuzjag.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_ypskev.runwaydirection::jsonb as runwaydirection,
    notes_note_view_jvlwwd.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bcqjag on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bcqjag.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_nqhdag on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_nqhdag.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ttgihp on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_ttgihp.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fuzjag on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_fuzjag.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_zjjwiv.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_zjjwiv.title AS varchar), '(' || airport_heliport_runwaydirection_lat_zjjwiv.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_zjjwiv.href
  )) as runwaydirection  from master_join master_join_yhmwcu
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_zjjwiv on master_join_yhmwcu.target_id = airport_heliport_runwaydirection_lat_zjjwiv.id
  where master_join_yhmwcu.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_ypskev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_afywkr.*) AS annotation
  from master_join master_join_qpplkt
  join notes.note_view notes_note_lat_afywkr on master_join_qpplkt.target_id = notes_note_lat_afywkr.id
  where master_join_qpplkt.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_jvlwwd on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.arrivalfeederleg.id::integer as f_id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fktcxn.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eapclx.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ogmdpn.*)::jsonb AS arccentre,
    geometry_curve_view_bzqefq.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_bzqefq.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_uohzlz.title as varchar), '(' || navaids_points_angleindication_pt_uohzlz.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_uohzlz.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_kubfix.title as varchar), '(' || navaids_points_distanceindication_pt_kubfix.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_kubfix.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_hperyx.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zmotcs.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zmotcs.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_zmotcs.href::text AS approach_href,
    shared_aircraftcharacteristic_view_egbnyv.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_ofmmhb.designsurface::jsonb as designsurface,
    notes_note_view_ckkkiw.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fktcxn on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_fktcxn.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eapclx on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_eapclx.id
left join geometry.curve_view geometry_curve_view_bzqefq on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_bzqefq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ogmdpn on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ogmdpn.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_uohzlz on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_uohzlz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_kubfix on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_kubfix.id
left join procedure.holdinguse_view procedure_holdinguse_view_hperyx on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_hperyx.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zmotcs on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_zmotcs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_tgltnv.*) as aircraftcategory
  from master_join master_join_janhyb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_tgltnv on master_join_janhyb.target_id = shared_aircraftcharacteristic_lat_tgltnv.id
  where master_join_janhyb.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_egbnyv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_nyiupa.*) as designsurface
  from master_join master_join_lwpkgz
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_nyiupa on master_join_lwpkgz.target_id = shared_obstacleassessmentarea_lat_nyiupa.id
  where master_join_lwpkgz.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_ofmmhb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fdyxvw.*) AS annotation
  from master_join master_join_mbbumf
  join notes.note_view notes_note_lat_fdyxvw on master_join_mbbumf.target_id = notes_note_lat_fdyxvw.id
  where master_join_mbbumf.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_ckkkiw on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.arrivalleg.id::integer as f_id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lbvgwz.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hyzfky.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qnfjvb.*)::jsonb AS arccentre,
    geometry_curve_view_gteewz.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_gteewz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_xiilno.title as varchar), '(' || navaids_points_angleindication_pt_xiilno.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_xiilno.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_empcky.title as varchar), '(' || navaids_points_distanceindication_pt_empcky.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_empcky.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_tadsdu.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_jxussw.title as varchar), '(' || procedure_standardinstrumentarrival_pt_jxussw.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_jxussw.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_wkgjie.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_dqxlav.designsurface::jsonb as designsurface,
    notes_note_view_recbkg.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lbvgwz on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_lbvgwz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hyzfky on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_hyzfky.id
left join geometry.curve_view geometry_curve_view_gteewz on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_gteewz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qnfjvb on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_qnfjvb.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_xiilno on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_xiilno.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_empcky on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_empcky.id
left join procedure.holdinguse_view procedure_holdinguse_view_tadsdu on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_tadsdu.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_jxussw on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_jxussw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_cykzee.*) as aircraftcategory
  from master_join master_join_zmkndj
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_cykzee on master_join_zmkndj.target_id = shared_aircraftcharacteristic_lat_cykzee.id
  where master_join_zmkndj.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_wkgjie on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_nrzbeb.*) as designsurface
  from master_join master_join_ltukhw
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_nrzbeb on master_join_ltukhw.target_id = shared_obstacleassessmentarea_lat_nrzbeb.id
  where master_join_ltukhw.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_dqxlav on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jnlogr.*) AS annotation
  from master_join master_join_rrpkuu
  join notes.note_view notes_note_lat_jnlogr on master_join_rrpkuu.target_id = notes_note_lat_jnlogr.id
  where master_join_rrpkuu.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_recbkg on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.authorityforairspace.id::integer as f_id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_dykchy.title as varchar), '(' || organisation_organisationauthority_pt_dykchy.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_dykchy.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_eywnpy.title as varchar), '(' || airspace_airspace_pt_eywnpy.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_eywnpy.href::text AS assignedairspace_href,
    notes_note_view_hogzis.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_dykchy on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_dykchy.id
left join airspace.airspace_pt airspace_airspace_pt_eywnpy on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_eywnpy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rhzaqj.*) AS annotation
  from master_join master_join_szsodc
  join notes.note_view notes_note_lat_rhzaqj on master_join_szsodc.target_id = notes_note_lat_rhzaqj.id
  where master_join_szsodc.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_hogzis on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.azimuth.id::integer as f_id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_enwkkh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_enwkkh.longitude AS location_longitude,
    geometry_elevatedpoint_view_enwkkh.latitude AS location_latitude,
    geometry_elevatedpoint_view_enwkkh.elevation AS location_elevation,
    geometry_elevatedpoint_view_enwkkh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_enwkkh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_enwkkh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_enwkkh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lcdjxc.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_gyngdh.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_gsiyye.availability::jsonb as availability,
    notes_note_view_vzvzhm.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_enwkkh on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_enwkkh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_anxowd.*) as authority
  from master_join master_join_ayevop
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_anxowd on master_join_ayevop.target_id = navaids_points_authorityfornavaidequipment_lat_anxowd.id
  where master_join_ayevop.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_lcdjxc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_sbucpb.*) as monitoring
  from master_join master_join_badrbn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_sbucpb on master_join_badrbn.target_id = navaids_points_navaidequipmentmonitoring_lat_sbucpb.id
  where master_join_badrbn.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_gyngdh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_admhqa.*) as availability
  from master_join master_join_ldhnhb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_admhqa on master_join_ldhnhb.target_id = navaids_points_navaidoperationalstatus_lat_admhqa.id
  where master_join_ldhnhb.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_gsiyye on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvkfyf.*) AS annotation
  from master_join master_join_zxtxjl
  join notes.note_view notes_note_lat_cvkfyf on master_join_zxtxjl.target_id = notes_note_lat_cvkfyf.id
  where master_join_zxtxjl.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_vzvzhm on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.changeoverpoint.id::integer as f_id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_pxpgdi.title as varchar), '(' || navaids_points_designatedpoint_pt_pxpgdi.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pxpgdi.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_odthre.title as varchar), '(' || navaids_points_navaid_pt_odthre.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_odthre.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vqupin.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vqupin.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_vqupin.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hxseyy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hxseyy.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hxseyy.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ifxtjc.title as varchar), '(' || airport_heliport_airportheliport_pt_ifxtjc.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_ifxtjc.href::text AS locationairportreferencepoint_href,
    geometry_point_view_jkwfwy.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_jkwfwy.longitude AS locationposition_longitude,
    geometry_point_view_jkwfwy.latitude AS locationposition_latitude,
    geometry_point_view_jkwfwy.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_wxdhtq.*)::jsonb AS applicablerouteportion,
    notes_note_view_ckeelx.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pxpgdi on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pxpgdi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_odthre on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_odthre.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vqupin on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vqupin.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hxseyy on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hxseyy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ifxtjc on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_ifxtjc.id
left join geometry.point_view geometry_point_view_jkwfwy on routes.changeoverpoint_ts.location_position_id = geometry_point_view_jkwfwy.id
left join routes.routeportion_view routes_routeportion_view_wxdhtq on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_wxdhtq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_albgci.*) AS annotation
  from master_join master_join_gqyivd
  join notes.note_view notes_note_lat_albgci on master_join_gqyivd.target_id = notes_note_lat_albgci.id
  where master_join_gqyivd.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_ckeelx on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.checkpointins.id::integer as f_id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_drlwyt.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_drlwyt.longitude AS position_longitude,
    geometry_elevatedpoint_view_drlwyt.latitude AS position_latitude,
    geometry_elevatedpoint_view_drlwyt.elevation AS position_elevation,
    geometry_elevatedpoint_view_drlwyt.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_drlwyt.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_drlwyt.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_drlwyt.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_tirapz.title as varchar), '(' || airport_heliport_airportheliport_pt_tirapz.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_tirapz.href::text AS airportheliport_href,
    notes_note_view_wkwqer.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_drlwyt on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_drlwyt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tirapz on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_tirapz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ildnpm.*) AS annotation
  from master_join master_join_ldnxyu
  join notes.note_view notes_note_lat_ildnpm on master_join_ldnxyu.target_id = notes_note_lat_ildnpm.id
  where master_join_ldnxyu.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_wkwqer on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.checkpointvor.id::integer as f_id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_wrxfws.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_wrxfws.longitude AS position_longitude,
    geometry_elevatedpoint_view_wrxfws.latitude AS position_latitude,
    geometry_elevatedpoint_view_wrxfws.elevation AS position_elevation,
    geometry_elevatedpoint_view_wrxfws.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_wrxfws.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_wrxfws.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_wrxfws.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_qyfalg.title as varchar), '(' || airport_heliport_airportheliport_pt_qyfalg.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_qyfalg.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_vmisgm.title as varchar), '(' || navaids_points_vor_pt_vmisgm.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_vmisgm.href::text AS checkpointfacility_href,
    notes_note_view_awumgr.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wrxfws on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_wrxfws.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qyfalg on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_qyfalg.id
left join navaids_points.vor_pt navaids_points_vor_pt_vmisgm on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_vmisgm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fwbrky.*) AS annotation
  from master_join master_join_ektzch
  join notes.note_view notes_note_lat_fwbrky on master_join_ektzch.target_id = notes_note_lat_fwbrky.id
  where master_join_ektzch.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_awumgr on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    public.circlingarea.id::integer as f_id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_wovair.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_wovair.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_xujbya.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_xujbya.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_xujbya.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_elukth.*)::jsonb AS aircraftcategory,
    procedure_approachcondition_view_hwzomp.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_ilnxjd.designsurface::jsonb as designsurface,
    notes_note_view_eqhhxr.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_wovair on public.circlingarea_ts.extent_id = geometry_surface_view_wovair.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_xujbya on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_xujbya.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_elukth on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_elukth.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_lwhalq.*) as condition
  from master_join master_join_gkggoh
  join procedure.approachcondition_view procedure_approachcondition_lat_lwhalq on master_join_gkggoh.target_id = procedure_approachcondition_lat_lwhalq.id
  where master_join_gkggoh.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_hwzomp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_kmmxta.*) as designsurface
  from master_join master_join_pmzttc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_kmmxta on master_join_pmzttc.target_id = shared_obstacleassessmentarea_lat_kmmxta.id
  where master_join_pmzttc.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_ilnxjd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qfiyid.*) AS annotation
  from master_join master_join_psktys
  join notes.note_view notes_note_lat_qfiyid on master_join_psktys.target_id = notes_note_lat_qfiyid.id
  where master_join_psktys.source_id = public.circlingarea_ts.id
) as notes_note_view_eqhhxr on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.deicingareamarking.id::integer as f_id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_oytmcv.title as varchar), '(' || airport_heliport_deicingarea_pt_oytmcv.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_oytmcv.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_iybfei.element::jsonb as element,
    notes_note_view_rssvnq.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_oytmcv on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_oytmcv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_amjgns.*) as element
  from master_join master_join_zdymho
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_amjgns on master_join_zdymho.target_id = airport_heliport_markingelement_lat_amjgns.id
  where master_join_zdymho.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_iybfei on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zgrmdc.*) AS annotation
  from master_join master_join_iovajp
  join notes.note_view notes_note_lat_zgrmdc on master_join_iovajp.target_id = notes_note_lat_zgrmdc.id
  where master_join_iovajp.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_rssvnq on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.deicingarea.id::integer as f_id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_scdugb.title as varchar), '(' || airport_heliport_apron_pt_scdugb.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_scdugb.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_lqcmej.title as varchar), '(' || airport_heliport_taxiway_pt_lqcmej.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_lqcmej.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_jpqdho.title as varchar), '(' || airport_heliport_aircraftstand_pt_jpqdho.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_jpqdho.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qjjznp.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_vccwxc.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vccwxc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vccwxc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vccwxc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vccwxc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vccwxc.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ppwxur.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_zsbikx.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_scdugb on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_scdugb.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_lqcmej on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_lqcmej.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_jpqdho on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_jpqdho.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qjjznp on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qjjznp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vccwxc on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_vccwxc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rzonlz.*) AS annotation
  from master_join master_join_spkogs
  join notes.note_view notes_note_lat_rzonlz on master_join_spkogs.target_id = notes_note_lat_rzonlz.id
  where master_join_spkogs.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_ppwxur on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_vcliqt.*) as availability
  from master_join master_join_vowqxg
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_vcliqt on master_join_vowqxg.target_id = airport_heliport_apronareaavailability_lat_vcliqt.id
  where master_join_vowqxg.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_zsbikx on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'procedure.departurearrivalcondition_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.departureleg.id::integer as f_id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tmqbpf.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nbrhcq.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ydvamq.*)::jsonb AS arccentre,
    geometry_curve_view_xeqmkj.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_xeqmkj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_hhettq.title as varchar), '(' || navaids_points_angleindication_pt_hhettq.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_hhettq.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_toxqpf.title as varchar), '(' || navaids_points_distanceindication_pt_toxqpf.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_toxqpf.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qtevdf.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_qetazu.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_qetazu.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_qetazu.href::text AS departure_href,
    shared_aircraftcharacteristic_view_htfttw.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_npzhpw.designsurface::jsonb as designsurface,
    notes_note_view_cqawdq.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_sjvhcv.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tmqbpf on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_tmqbpf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nbrhcq on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_nbrhcq.id
left join geometry.curve_view geometry_curve_view_xeqmkj on procedure.departureleg_ts.trajectory_id = geometry_curve_view_xeqmkj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ydvamq on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ydvamq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_hhettq on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_hhettq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_toxqpf on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_toxqpf.id
left join procedure.holdinguse_view procedure_holdinguse_view_qtevdf on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_qtevdf.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_qetazu on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_qetazu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_gdswgo.*) as aircraftcategory
  from master_join master_join_vyamyf
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_gdswgo on master_join_vyamyf.target_id = shared_aircraftcharacteristic_lat_gdswgo.id
  where master_join_vyamyf.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_htfttw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_biunic.*) as designsurface
  from master_join master_join_eixiix
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_biunic on master_join_eixiix.target_id = shared_obstacleassessmentarea_lat_biunic.id
  where master_join_eixiix.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_npzhpw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hirrvx.*) AS annotation
  from master_join master_join_wzxozc
  join notes.note_view notes_note_lat_hirrvx on master_join_wzxozc.target_id = notes_note_lat_hirrvx.id
  where master_join_wzxozc.source_id = procedure.departureleg_ts.id
) as notes_note_view_cqawdq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_joqguc.*) as condition
  from master_join master_join_eajubi
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_joqguc on master_join_eajubi.target_id = procedure_departurearrivalcondition_lat_joqguc.id
  where master_join_eajubi.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_sjvhcv on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.designatedpoint.id::integer as f_id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as name,
    geometry_point_view_yfeumh.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_yfeumh.longitude AS location_longitude,
    geometry_point_view_yfeumh.latitude AS location_latitude,
    geometry_point_view_yfeumh.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wyunbw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wyunbw.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_wyunbw.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_naokis.title as varchar), '(' || airport_heliport_airportheliport_pt_naokis.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_naokis.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ngszgw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ngszgw.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ngszgw.href::text AS runwaypoint_href,
    notes_note_view_qtoxlb.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_yfeumh on navaids_points.designatedpoint_ts.location_id = geometry_point_view_yfeumh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wyunbw on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_wyunbw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_naokis on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_naokis.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ngszgw on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ngszgw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujyhan.*) AS annotation
  from master_join master_join_nnqcas
  join notes.note_view notes_note_lat_ujyhan on master_join_nnqcas.target_id = notes_note_lat_ujyhan.id
  where master_join_nnqcas.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_qtoxlb on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.directionfinder.id::integer as f_id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_ztbthj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ztbthj.longitude AS location_longitude,
    geometry_elevatedpoint_view_ztbthj.latitude AS location_latitude,
    geometry_elevatedpoint_view_ztbthj.elevation AS location_elevation,
    geometry_elevatedpoint_view_ztbthj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ztbthj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ztbthj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ztbthj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hfgmgy.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jnqqwq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qcuzjb.availability::jsonb as availability,
    notes_note_view_lydxda.annotation::jsonb as annotation,
    service_informationservice_pt_svkjpr.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ztbthj on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_ztbthj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zqtxqm.*) as authority
  from master_join master_join_zwbmbi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zqtxqm on master_join_zwbmbi.target_id = navaids_points_authorityfornavaidequipment_lat_zqtxqm.id
  where master_join_zwbmbi.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_hfgmgy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ntljic.*) as monitoring
  from master_join master_join_ldnpbx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ntljic on master_join_ldnpbx.target_id = navaids_points_navaidequipmentmonitoring_lat_ntljic.id
  where master_join_ldnpbx.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jnqqwq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xftvzc.*) as availability
  from master_join master_join_aykosr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xftvzc on master_join_aykosr.target_id = navaids_points_navaidoperationalstatus_lat_xftvzc.id
  where master_join_aykosr.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_qcuzjb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mgcrkx.*) AS annotation
  from master_join master_join_suwtpa
  join notes.note_view notes_note_lat_mgcrkx on master_join_suwtpa.target_id = notes_note_lat_mgcrkx.id
  where master_join_suwtpa.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_lydxda on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_lyxfus.id,
      'title', coalesce(cast(service_informationservice_lat_lyxfus.title AS varchar), '(' || service_informationservice_lat_lyxfus.nilreason[1] || ')'),
      'href', service_informationservice_lat_lyxfus.href
  )) as informationprovision  from master_join master_join_nwoigy
  join service.informationservice_pt service_informationservice_lat_lyxfus on master_join_nwoigy.target_id = service_informationservice_lat_lyxfus.id
  where master_join_nwoigy.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_svkjpr on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.distanceindication.id::integer as f_id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_mzpoyr.title as varchar), '(' || navaids_points_designatedpoint_pt_mzpoyr.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_mzpoyr.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_lmxtpc.title as varchar), '(' || navaids_points_designatedpoint_pt_lmxtpc.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_lmxtpc.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_cionfd.title as varchar), '(' || navaids_points_navaid_pt_cionfd.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_cionfd.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_dswpjx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_dswpjx.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_dswpjx.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bqpxiz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bqpxiz.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bqpxiz.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rtmdhw.title as varchar), '(' || airport_heliport_airportheliport_pt_rtmdhw.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_rtmdhw.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ylzfdw.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_ylzfdw.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ylzfdw.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ylzfdw.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_zfhzvf.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mzpoyr on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_mzpoyr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lmxtpc on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lmxtpc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cionfd on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_cionfd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_dswpjx on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_dswpjx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bqpxiz on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bqpxiz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rtmdhw on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_rtmdhw.id
left join geometry.point_view geometry_point_view_ylzfdw on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_ylzfdw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gkuhth.*) AS annotation
  from master_join master_join_virgof
  join notes.note_view notes_note_lat_gkuhth on master_join_virgof.target_id = notes_note_lat_gkuhth.id
  where master_join_virgof.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_zfhzvf on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.dme.id::integer as f_id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_nlevdv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nlevdv.longitude AS location_longitude,
    geometry_elevatedpoint_view_nlevdv.latitude AS location_latitude,
    geometry_elevatedpoint_view_nlevdv.elevation AS location_elevation,
    geometry_elevatedpoint_view_nlevdv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nlevdv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nlevdv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nlevdv.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_asbyti.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_frndbm.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_kmajms.availability::jsonb as availability,
    notes_note_view_acuapv.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nlevdv on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_nlevdv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fjgqxl.*) as authority
  from master_join master_join_bulgde
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fjgqxl on master_join_bulgde.target_id = navaids_points_authorityfornavaidequipment_lat_fjgqxl.id
  where master_join_bulgde.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_asbyti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_coykfr.*) as monitoring
  from master_join master_join_feobim
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_coykfr on master_join_feobim.target_id = navaids_points_navaidequipmentmonitoring_lat_coykfr.id
  where master_join_feobim.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_frndbm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ccccvn.*) as availability
  from master_join master_join_pvxuhl
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ccccvn on master_join_pvxuhl.target_id = navaids_points_navaidoperationalstatus_lat_ccccvn.id
  where master_join_pvxuhl.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_kmajms on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cmlnqo.*) AS annotation
  from master_join master_join_tmliwg
  join notes.note_view notes_note_lat_cmlnqo on master_join_tmliwg.target_id = notes_note_lat_cmlnqo.id
  where master_join_tmliwg.source_id = navaids_points.dme_ts.id
) as notes_note_view_acuapv on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.elevation.id::integer as f_id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_lgkjpb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lgkjpb.longitude AS location_longitude,
    geometry_elevatedpoint_view_lgkjpb.latitude AS location_latitude,
    geometry_elevatedpoint_view_lgkjpb.elevation AS location_elevation,
    geometry_elevatedpoint_view_lgkjpb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lgkjpb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lgkjpb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lgkjpb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lubgqs.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_ppsbxq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qegptl.availability::jsonb as availability,
    notes_note_view_inglbd.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lgkjpb on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_lgkjpb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dfzmfp.*) as authority
  from master_join master_join_dedpop
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dfzmfp on master_join_dedpop.target_id = navaids_points_authorityfornavaidequipment_lat_dfzmfp.id
  where master_join_dedpop.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_lubgqs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kgalyt.*) as monitoring
  from master_join master_join_odstfx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kgalyt on master_join_odstfx.target_id = navaids_points_navaidequipmentmonitoring_lat_kgalyt.id
  where master_join_odstfx.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ppsbxq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_nhnslv.*) as availability
  from master_join master_join_ixfpuc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_nhnslv on master_join_ixfpuc.target_id = navaids_points_navaidoperationalstatus_lat_nhnslv.id
  where master_join_ixfpuc.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_qegptl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqfkej.*) AS annotation
  from master_join master_join_gpgxmq
  join notes.note_view notes_note_lat_oqfkej on master_join_gpgxmq.target_id = notes_note_lat_oqfkej.id
  where master_join_gpgxmq.source_id = navaids_points.elevation_ts.id
) as notes_note_view_inglbd on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['geometry.point_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'public.fasdatablock_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'procedure.approachcondition_view', 'geometry.curve_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.finalleg.id::integer as f_id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hvomvu.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ixcjxh.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_opvovy.*)::jsonb AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ixdwry.*)::jsonb AS visualdescentpoint,
    geometry_curve_view_ygyrvm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ygyrvm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_fmgucu.title as varchar), '(' || navaids_points_angleindication_pt_fmgucu.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_fmgucu.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tenxij.title as varchar), '(' || navaids_points_distanceindication_pt_tenxij.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_tenxij.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_lnwgid.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_umwoph.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_umwoph.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_umwoph.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_mzyhkc.title as varchar), '(' || navaids_points_designatedpoint_pt_mzyhkc.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_mzyhkc.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_snvghf.title as varchar), '(' || navaids_points_navaid_pt_snvghf.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_snvghf.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nwlomc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nwlomc.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_nwlomc.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_gjhihc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_gjhihc.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_gjhihc.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zlxvrx.title as varchar), '(' || airport_heliport_airportheliport_pt_zlxvrx.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_zlxvrx.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_arxxrs.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_arxxrs.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_arxxrs.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_arxxrs.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_uvwxsn.*)::jsonb AS fasdata,
    shared_aircraftcharacteristic_view_gmqljg.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_kzlrmt.designsurface::jsonb as designsurface,
    notes_note_view_famexi.annotation::jsonb as annotation,
    procedure_approachcondition_view_joorqa.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hvomvu on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hvomvu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ixcjxh on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ixcjxh.id
left join geometry.curve_view geometry_curve_view_ygyrvm on procedure.finalleg_ts.trajectory_id = geometry_curve_view_ygyrvm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_opvovy on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_opvovy.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_fmgucu on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_fmgucu.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tenxij on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_tenxij.id
left join procedure.holdinguse_view procedure_holdinguse_view_lnwgid on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_lnwgid.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_umwoph on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_umwoph.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mzyhkc on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mzyhkc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_snvghf on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_snvghf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nwlomc on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nwlomc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_gjhihc on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_gjhihc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zlxvrx on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zlxvrx.id
left join geometry.point_view geometry_point_view_arxxrs on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_arxxrs.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ixdwry on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_ixdwry.id
left join public.fasdatablock_view public_fasdatablock_view_uvwxsn on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_uvwxsn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ohkjux.*) as aircraftcategory
  from master_join master_join_nrbnzt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ohkjux on master_join_nrbnzt.target_id = shared_aircraftcharacteristic_lat_ohkjux.id
  where master_join_nrbnzt.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_gmqljg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_wgcqzm.*) as designsurface
  from master_join master_join_ssfevu
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_wgcqzm on master_join_ssfevu.target_id = shared_obstacleassessmentarea_lat_wgcqzm.id
  where master_join_ssfevu.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_kzlrmt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brqzit.*) AS annotation
  from master_join master_join_mobtwi
  join notes.note_view notes_note_lat_brqzit on master_join_mobtwi.target_id = notes_note_lat_brqzit.id
  where master_join_mobtwi.source_id = procedure.finalleg_ts.id
) as notes_note_view_famexi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_cqapva.*) as condition
  from master_join master_join_qaervi
  join procedure.approachcondition_view procedure_approachcondition_lat_cqapva on master_join_qaervi.target_id = procedure_approachcondition_lat_cqapva.id
  where master_join_qaervi.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_joorqa on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.firefightingservice.id::integer as f_id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_pspjsn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pspjsn.longitude AS location_longitude,
    geometry_elevatedpoint_view_pspjsn.latitude AS location_latitude,
    geometry_elevatedpoint_view_pspjsn.elevation AS location_elevation,
    geometry_elevatedpoint_view_pspjsn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pspjsn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pspjsn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pspjsn.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_eqlbuy.title as varchar), '(' || organisation_unit_pt_eqlbuy.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_eqlbuy.href::text AS serviceprovider_href,
    service_callsigndetail_view_kifnrj.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_kzsoou.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rxlumc.availability::jsonb as availability,
    notes_note_view_bybvbn.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_iqyavd.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pspjsn on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_pspjsn.id
left join organisation.unit_pt organisation_unit_pt_eqlbuy on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_eqlbuy.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_plpwul.*) as callsign
  from master_join master_join_rolkzf
  join service.callsigndetail_view service_callsigndetail_lat_plpwul on master_join_rolkzf.target_id = service_callsigndetail_lat_plpwul.id
  where master_join_rolkzf.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_kifnrj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_lxcoqp.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_lxcoqp.title AS varchar), '(' || service_radiocommunicationchannel_lat_lxcoqp.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_lxcoqp.href
  )) as radiocommunication  from master_join master_join_ktzkna
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_lxcoqp on master_join_ktzkna.target_id = service_radiocommunicationchannel_lat_lxcoqp.id
  where master_join_ktzkna.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_kzsoou on TRUE
left join lateral(
  select
  from master_join master_join_xmuoyj
  join shared.contactinformation_view shared_contactinformation_lat_qlpoqt on master_join_xmuoyj.target_id = shared_contactinformation_lat_qlpoqt.id
  where master_join_xmuoyj.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_keafmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ipzugm.*) as availability
  from master_join master_join_qozjgy
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ipzugm on master_join_qozjgy.target_id = service_serviceoperationalstatus_lat_ipzugm.id
  where master_join_qozjgy.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_rxlumc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ajvrhd.*) AS annotation
  from master_join master_join_csrxga
  join notes.note_view notes_note_lat_ajvrhd on master_join_csrxga.target_id = notes_note_lat_ajvrhd.id
  where master_join_csrxga.source_id = service.firefightingservice_ts.id
) as notes_note_view_bybvbn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_codxum.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_codxum.title AS varchar), '(' || airport_heliport_airportheliport_lat_codxum.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_codxum.href
  )) as airportheliport  from master_join master_join_zupolj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_codxum on master_join_zupolj.target_id = airport_heliport_airportheliport_lat_codxum.id
  where master_join_zupolj.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_iqyavd on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.flightrestriction.id::integer as f_id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_obhknm.*)::jsonb AS flight,
    routes_flightrestrictionroute_view_difldv.regulatedroute::jsonb as regulatedroute,
    notes_note_view_ighkau.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_obhknm on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_obhknm.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_ikyvru.*) as regulatedroute
  from master_join master_join_usitoz
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_ikyvru on master_join_usitoz.target_id = routes_flightrestrictionroute_lat_ikyvru.id
  where master_join_usitoz.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_difldv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xfleln.*) AS annotation
  from master_join master_join_excbxn
  join notes.note_view notes_note_lat_xfleln on master_join_excbxn.target_id = notes_note_lat_xfleln.id
  where master_join_excbxn.source_id = routes.flightrestriction_ts.id
) as notes_note_view_ighkau on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.floatingdocksite.id::integer as f_id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_myajfz.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_myajfz.elevation AS extent_elevation,
    geometry_elevatedsurface_view_myajfz.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_myajfz.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_myajfz.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_myajfz.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_sfcuym.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_myajfz on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_myajfz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obzzrt.*) AS annotation
  from master_join master_join_pedjqe
  join notes.note_view notes_note_lat_obzzrt on master_join_pedjqe.target_id = notes_note_lat_obzzrt.id
  where master_join_pedjqe.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_sfcuym on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.geoborder.id::integer as f_id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_mzfkrk.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_mzfkrk.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_cweavz.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_mzfkrk on airspace.geoborder_ts.border_id = geometry_curve_view_mzfkrk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_icscip.*) AS annotation
  from master_join master_join_veqfsw
  join notes.note_view notes_note_lat_icscip on master_join_veqfsw.target_id = notes_note_lat_icscip.id
  where master_join_veqfsw.source_id = airspace.geoborder_ts.id
) as notes_note_view_cweavz on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.glidepath.id::integer as f_id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_xmeowm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xmeowm.longitude AS location_longitude,
    geometry_elevatedpoint_view_xmeowm.latitude AS location_latitude,
    geometry_elevatedpoint_view_xmeowm.elevation AS location_elevation,
    geometry_elevatedpoint_view_xmeowm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xmeowm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xmeowm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xmeowm.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_djfmxl.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_nerycp.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qxdqry.availability::jsonb as availability,
    notes_note_view_zltjpo.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xmeowm on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_xmeowm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_euqztk.*) as authority
  from master_join master_join_oyrlkk
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_euqztk on master_join_oyrlkk.target_id = navaids_points_authorityfornavaidequipment_lat_euqztk.id
  where master_join_oyrlkk.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_djfmxl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pwqzvf.*) as monitoring
  from master_join master_join_ghdwov
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pwqzvf on master_join_ghdwov.target_id = navaids_points_navaidequipmentmonitoring_lat_pwqzvf.id
  where master_join_ghdwov.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_nerycp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_rktehg.*) as availability
  from master_join master_join_ewqzno
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_rktehg on master_join_ewqzno.target_id = navaids_points_navaidoperationalstatus_lat_rktehg.id
  where master_join_ewqzno.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_qxdqry on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wanuxm.*) AS annotation
  from master_join master_join_kwxtcg
  join notes.note_view notes_note_lat_wanuxm on master_join_kwxtcg.target_id = notes_note_lat_wanuxm.id
  where master_join_kwxtcg.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_zltjpo on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.groundtrafficcontrolservice.id::integer as f_id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_gwjxpy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gwjxpy.longitude AS location_longitude,
    geometry_elevatedpoint_view_gwjxpy.latitude AS location_latitude,
    geometry_elevatedpoint_view_gwjxpy.elevation AS location_elevation,
    geometry_elevatedpoint_view_gwjxpy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gwjxpy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gwjxpy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gwjxpy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kkcxnw.title as varchar), '(' || organisation_unit_pt_kkcxnw.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_kkcxnw.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_twvjsb.title as varchar), '(' || airport_heliport_airportheliport_pt_twvjsb.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_twvjsb.href::text AS clientairport_href,
    service_callsigndetail_view_pammae.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_cavlzc.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_fvtmyy.availability::jsonb as availability,
    notes_note_view_glylrq.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gwjxpy on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_gwjxpy.id
left join organisation.unit_pt organisation_unit_pt_kkcxnw on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_kkcxnw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_twvjsb on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_twvjsb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_cfyitn.*) as callsign
  from master_join master_join_lryatv
  join service.callsigndetail_view service_callsigndetail_lat_cfyitn on master_join_lryatv.target_id = service_callsigndetail_lat_cfyitn.id
  where master_join_lryatv.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_pammae on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_hwvcah.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_hwvcah.title AS varchar), '(' || service_radiocommunicationchannel_lat_hwvcah.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_hwvcah.href
  )) as radiocommunication  from master_join master_join_efpkwh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_hwvcah on master_join_efpkwh.target_id = service_radiocommunicationchannel_lat_hwvcah.id
  where master_join_efpkwh.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_cavlzc on TRUE
left join lateral(
  select
  from master_join master_join_btnmdw
  join shared.contactinformation_view shared_contactinformation_lat_xstrmh on master_join_btnmdw.target_id = shared_contactinformation_lat_xstrmh.id
  where master_join_btnmdw.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_mubqbt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_mkmkkq.*) as availability
  from master_join master_join_oojxnv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_mkmkkq on master_join_oojxnv.target_id = service_serviceoperationalstatus_lat_mkmkkq.id
  where master_join_oojxnv.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_fvtmyy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_updrpi.*) AS annotation
  from master_join master_join_yetpuf
  join notes.note_view notes_note_lat_updrpi on master_join_yetpuf.target_id = notes_note_lat_updrpi.id
  where master_join_yetpuf.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_glylrq on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidancelinelightsystem.id::integer as f_id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_fkkmwd.title as varchar), '(' || airport_heliport_guidanceline_pt_fkkmwd.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_fkkmwd.href::text AS lightedguidanceline_href,
    shared_lightelement_view_scxutp.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_twgrlt.availability::jsonb as availability,
    notes_note_view_tjbysr.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_fkkmwd on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_fkkmwd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_sgwipu.*) as element
  from master_join master_join_nbkrng
  join shared.lightelement_view shared_lightelement_lat_sgwipu on master_join_nbkrng.target_id = shared_lightelement_lat_sgwipu.id
  where master_join_nbkrng.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_scxutp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_jbawac.*) as availability
  from master_join master_join_uwkoio
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_jbawac on master_join_uwkoio.target_id = airport_heliport_groundlightingavailability_lat_jbawac.id
  where master_join_uwkoio.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_twgrlt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_acnvxv.*) AS annotation
  from master_join master_join_tzdvtu
  join notes.note_view notes_note_lat_acnvxv on master_join_tzdvtu.target_id = notes_note_lat_acnvxv.id
  where master_join_tzdvtu.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_tjbysr on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidancelinemarking.id::integer as f_id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_utoylf.title as varchar), '(' || airport_heliport_guidanceline_pt_utoylf.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_utoylf.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_tjjszo.element::jsonb as element,
    notes_note_view_mzozow.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_utoylf on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_utoylf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dhruyt.*) as element
  from master_join master_join_mzgvbu
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_dhruyt on master_join_mzgvbu.target_id = airport_heliport_markingelement_lat_dhruyt.id
  where master_join_mzgvbu.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_tjjszo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hfcbqu.*) AS annotation
  from master_join master_join_ukhpuf
  join notes.note_view notes_note_lat_hfcbqu on master_join_ukhpuf.target_id = notes_note_lat_hfcbqu.id
  where master_join_ukhpuf.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_mzozow on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidanceline.id::integer as f_id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_whrlxj.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_whrlxj.elevation AS extent_elevation,
    geometry_elevatedcurve_view_whrlxj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_whrlxj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_whrlxj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_whrlxj.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_uduqqg.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_mtycph.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_hhvebt.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_iutjgi.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_kvhplz.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_lplqgc.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_whrlxj on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_whrlxj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_fxjkhj.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_fxjkhj.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_fxjkhj.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_fxjkhj.href
  )) as connectedtouchdownliftoff  from master_join master_join_lkutvq
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_fxjkhj on master_join_lkutvq.target_id = airport_heliport_touchdownliftoff_lat_fxjkhj.id
  where master_join_lkutvq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_uduqqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_pzlihy.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_pzlihy.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_pzlihy.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_pzlihy.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_vjetnr
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_pzlihy on master_join_vjetnr.target_id = airport_heliport_runwaycentrelinepoint_lat_pzlihy.id
  where master_join_vjetnr.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_mtycph on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_jnycpw.id,
      'title', coalesce(cast(airport_heliport_apron_lat_jnycpw.title AS varchar), '(' || airport_heliport_apron_lat_jnycpw.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_jnycpw.href
  )) as connectedapron  from master_join master_join_mqhbrb
  join airport_heliport.apron_pt airport_heliport_apron_lat_jnycpw on master_join_mqhbrb.target_id = airport_heliport_apron_lat_jnycpw.id
  where master_join_mqhbrb.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_hhvebt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_hjdtcb.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_hjdtcb.title AS varchar), '(' || airport_heliport_aircraftstand_lat_hjdtcb.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_hjdtcb.href
  )) as connectedstand  from master_join master_join_vyfcco
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_hjdtcb on master_join_vyfcco.target_id = airport_heliport_aircraftstand_lat_hjdtcb.id
  where master_join_vyfcco.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_iutjgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_iuscmp.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_iuscmp.title AS varchar), '(' || airport_heliport_taxiway_lat_iuscmp.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_iuscmp.href
  )) as connectedtaxiway  from master_join master_join_phlrdt
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_iuscmp on master_join_phlrdt.target_id = airport_heliport_taxiway_lat_iuscmp.id
  where master_join_phlrdt.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_kvhplz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xsqihu.*) AS annotation
  from master_join master_join_nzcuxw
  join notes.note_view notes_note_lat_xsqihu on master_join_nzcuxw.target_id = notes_note_lat_xsqihu.id
  where master_join_nzcuxw.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_lplqgc on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.holdingassessment.id::integer as f_id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_veewpj.title as varchar), '(' || holding_unplannedholding_pt_veewpj.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_veewpj.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_bonsrs.title as varchar), '(' || holding_holdingpattern_pt_bonsrs.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_bonsrs.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_mjebkp.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_rgihxj.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_veewpj on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_veewpj.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_bonsrs on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_bonsrs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_mpjshy.*) as obstacleassessment
  from master_join master_join_cgunnk
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_mpjshy on master_join_cgunnk.target_id = shared_obstacleassessmentarea_lat_mpjshy.id
  where master_join_cgunnk.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_mjebkp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ketcny.*) AS annotation
  from master_join master_join_hqlprh
  join notes.note_view notes_note_lat_ketcny on master_join_hqlprh.target_id = notes_note_lat_ketcny.id
  where master_join_hqlprh.source_id = shared.holdingassessment_ts.id
) as notes_note_view_rgihxj on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatternduration_view', 'notes.note_view', 'geometry.curve_view', 'holding.holdingpatterndistance_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as id,
    holding.holdingpattern.id::integer as f_id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_enqafg.*)::jsonb AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_aisldw.*)::jsonb AS outboundlegspanenddistance,
    geometry_curve_view_veqzga.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_veqzga.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_owttky.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_enqafg on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_enqafg.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_aisldw on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_aisldw.id
left join geometry.curve_view geometry_curve_view_veqzga on holding.holdingpattern_ts.extent_id = geometry_curve_view_veqzga.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ahqqwm.*) AS annotation
  from master_join master_join_dcdoea
  join notes.note_view notes_note_lat_ahqqwm on master_join_dcdoea.target_id = notes_note_lat_ahqqwm.id
  where master_join_dcdoea.source_id = holding.holdingpattern_ts.id
) as notes_note_view_owttky on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.informationservice.id::integer as f_id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_bnjleo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bnjleo.longitude AS location_longitude,
    geometry_elevatedpoint_view_bnjleo.latitude AS location_latitude,
    geometry_elevatedpoint_view_bnjleo.elevation AS location_elevation,
    geometry_elevatedpoint_view_bnjleo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bnjleo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bnjleo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bnjleo.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ubxseg.title as varchar), '(' || organisation_unit_pt_ubxseg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ubxseg.href::text AS serviceprovider_href,
    service_callsigndetail_view_lbwbpd.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_scnash.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_wwielm.availability::jsonb as availability,
    notes_note_view_soxipd.annotation::jsonb as annotation,
    navaids_points_vor_pt_gcfujg.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_zjscyc.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_ffdznm.clientairport::jsonb as clientairport,
    routes_routeportion_view_jfcogf.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_wnczzb.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_rdecpv.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bnjleo on service.informationservice_ts.location_id = geometry_elevatedpoint_view_bnjleo.id
left join organisation.unit_pt organisation_unit_pt_ubxseg on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_ubxseg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_azbnjt.*) as callsign
  from master_join master_join_lraylt
  join service.callsigndetail_view service_callsigndetail_lat_azbnjt on master_join_lraylt.target_id = service_callsigndetail_lat_azbnjt.id
  where master_join_lraylt.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_lbwbpd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ltzgim.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ltzgim.title AS varchar), '(' || service_radiocommunicationchannel_lat_ltzgim.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ltzgim.href
  )) as radiocommunication  from master_join master_join_vuywug
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ltzgim on master_join_vuywug.target_id = service_radiocommunicationchannel_lat_ltzgim.id
  where master_join_vuywug.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_scnash on TRUE
left join lateral(
  select
  from master_join master_join_qiynvo
  join shared.contactinformation_view shared_contactinformation_lat_nlmsgx on master_join_qiynvo.target_id = shared_contactinformation_lat_nlmsgx.id
  where master_join_qiynvo.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_lnerpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bejqei.*) as availability
  from master_join master_join_dcjwah
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bejqei on master_join_dcjwah.target_id = service_serviceoperationalstatus_lat_bejqei.id
  where master_join_dcjwah.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_wwielm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zzjwxo.*) AS annotation
  from master_join master_join_adampx
  join notes.note_view notes_note_lat_zzjwxo on master_join_adampx.target_id = notes_note_lat_zzjwxo.id
  where master_join_adampx.source_id = service.informationservice_ts.id
) as notes_note_view_soxipd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_oruhki.id,
      'title', coalesce(cast(navaids_points_vor_lat_oruhki.title AS varchar), '(' || navaids_points_vor_lat_oruhki.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_oruhki.href
  )) as navaidbroadcast  from master_join master_join_qzbqzz
  join navaids_points.vor_pt navaids_points_vor_lat_oruhki on master_join_qzbqzz.target_id = navaids_points_vor_lat_oruhki.id
  where master_join_qzbqzz.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_gcfujg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_kqmzhc.id,
      'title', coalesce(cast(airspace_airspace_lat_kqmzhc.title AS varchar), '(' || airspace_airspace_lat_kqmzhc.nilreason[1] || ')'),
      'href', airspace_airspace_lat_kqmzhc.href
  )) as clientairspace  from master_join master_join_ernzak
  join airspace.airspace_pt airspace_airspace_lat_kqmzhc on master_join_ernzak.target_id = airspace_airspace_lat_kqmzhc.id
  where master_join_ernzak.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_zjscyc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fnwpvi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fnwpvi.title AS varchar), '(' || airport_heliport_airportheliport_lat_fnwpvi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fnwpvi.href
  )) as clientairport  from master_join master_join_scwggs
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fnwpvi on master_join_scwggs.target_id = airport_heliport_airportheliport_lat_fnwpvi.id
  where master_join_scwggs.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_ffdznm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_ieeofu.*) as clientroute
  from master_join master_join_ahcsvf
  join routes.routeportion_view routes_routeportion_lat_ieeofu on master_join_ahcsvf.target_id = routes_routeportion_lat_ieeofu.id
  where master_join_ahcsvf.source_id = service.informationservice_ts.id
) as routes_routeportion_view_jfcogf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_wsekmi.id,
      'title', coalesce(cast(holding_holdingpattern_lat_wsekmi.title AS varchar), '(' || holding_holdingpattern_lat_wsekmi.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_wsekmi.href
  )) as clientholding  from master_join master_join_uypico
  join holding.holdingpattern_pt holding_holdingpattern_lat_wsekmi on master_join_uypico.target_id = holding_holdingpattern_lat_wsekmi.id
  where master_join_uypico.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_wnczzb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_bpougv.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_bpougv.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_bpougv.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_bpougv.href
  )) as clientaerialrefuelling  from master_join master_join_hyzeko
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_bpougv on master_join_hyzeko.target_id = aerial_refuelling_aerialrefuelling_lat_bpougv.id
  where master_join_hyzeko.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_rdecpv on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.initialleg.id::integer as f_id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xqxgxw.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cvmppj.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_morhtq.*)::jsonb AS arccentre,
    geometry_curve_view_fhmdln.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_fhmdln.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_svfkyv.title as varchar), '(' || navaids_points_angleindication_pt_svfkyv.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_svfkyv.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ckwtys.title as varchar), '(' || navaids_points_distanceindication_pt_ckwtys.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ckwtys.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_tuqplw.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_hkioea.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_hkioea.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_hkioea.href::text AS approach_href,
    shared_aircraftcharacteristic_view_vhkpyk.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_nfyxaq.designsurface::jsonb as designsurface,
    notes_note_view_bamyxh.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xqxgxw on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_xqxgxw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cvmppj on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_cvmppj.id
left join geometry.curve_view geometry_curve_view_fhmdln on procedure.initialleg_ts.trajectory_id = geometry_curve_view_fhmdln.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_morhtq on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_morhtq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_svfkyv on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_svfkyv.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ckwtys on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_ckwtys.id
left join procedure.holdinguse_view procedure_holdinguse_view_tuqplw on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_tuqplw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_hkioea on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_hkioea.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pjcabv.*) as aircraftcategory
  from master_join master_join_aryfyb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_pjcabv on master_join_aryfyb.target_id = shared_aircraftcharacteristic_lat_pjcabv.id
  where master_join_aryfyb.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_vhkpyk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_twgali.*) as designsurface
  from master_join master_join_vpvuww
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_twgali on master_join_vpvuww.target_id = shared_obstacleassessmentarea_lat_twgali.id
  where master_join_vpvuww.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_nfyxaq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fktfgz.*) AS annotation
  from master_join master_join_phcsrl
  join notes.note_view notes_note_lat_fktfgz on master_join_phcsrl.target_id = notes_note_lat_fktfgz.id
  where master_join_phcsrl.source_id = procedure.initialleg_ts.id
) as notes_note_view_bamyxh on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.missedapproachgroup_view', 'procedure.finalprofile_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.instrumentapproachprocedure.id::integer as f_id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_ekuyll.title as varchar), '(' || navaids_points_navaid_pt_ekuyll.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ekuyll.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_olhuda.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_olhuda.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_olhuda.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ffoyqz.title as varchar), '(' || surveillance_radarsystem_pt_ffoyqz.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_ffoyqz.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_ologtr.title as varchar), '(' || procedure_safealtitudearea_pt_ologtr.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_ologtr.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_tsryun.*)::jsonb AS landing,
    to_jsonb(procedure_finalprofile_view_rrfmtc.*)::jsonb AS finalprofile,
    procedure_procedureavailability_view_copbgj.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_foeout.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_elwpep.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_hhixmy.flighttransition::jsonb as flighttransition,
    notes_note_view_runlhn.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_cgestj.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ekuyll on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ekuyll.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_olhuda on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_olhuda.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ffoyqz on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ffoyqz.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_ologtr on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_ologtr.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_tsryun on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_tsryun.id
left join procedure.finalprofile_view procedure_finalprofile_view_rrfmtc on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_rrfmtc.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_vhrwrp.*) as availability
  from master_join master_join_zqfotf
  join procedure.procedureavailability_view procedure_procedureavailability_lat_vhrwrp on master_join_zqfotf.target_id = procedure_procedureavailability_lat_vhrwrp.id
  where master_join_zqfotf.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_copbgj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_airxso.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_airxso.title AS varchar), '(' || airport_heliport_airportheliport_lat_airxso.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_airxso.href
  )) as airportheliport  from master_join master_join_yngdra
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_airxso on master_join_yngdra.target_id = airport_heliport_airportheliport_lat_airxso.id
  where master_join_yngdra.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_foeout on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_delbgz.*) as aircraftcharacteristic
  from master_join master_join_rhdzgi
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_delbgz on master_join_rhdzgi.target_id = shared_aircraftcharacteristic_lat_delbgz.id
  where master_join_rhdzgi.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_elwpep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_jhpedt.*) as flighttransition
  from master_join master_join_ovmdhx
  join procedure.proceduretransition_view procedure_proceduretransition_lat_jhpedt on master_join_ovmdhx.target_id = procedure_proceduretransition_lat_jhpedt.id
  where master_join_ovmdhx.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_hhixmy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cazphc.*) AS annotation
  from master_join master_join_gswxtp
  join notes.note_view notes_note_lat_cazphc on master_join_gswxtp.target_id = notes_note_lat_cazphc.id
  where master_join_gswxtp.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_runlhn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_klzigm.*) as missedinstruction
  from master_join master_join_rkvosd
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_klzigm on master_join_rkvosd.target_id = procedure_missedapproachgroup_lat_klzigm.id
  where master_join_rkvosd.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_cgestj on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.intermediateleg.id::integer as f_id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cuiclk.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fvffct.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ykjtsv.*)::jsonb AS arccentre,
    geometry_curve_view_pvkpng.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_pvkpng.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_jltbgq.title as varchar), '(' || navaids_points_angleindication_pt_jltbgq.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_jltbgq.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tfohzq.title as varchar), '(' || navaids_points_distanceindication_pt_tfohzq.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_tfohzq.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_rltqfo.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kdweyt.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kdweyt.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_kdweyt.href::text AS approach_href,
    shared_aircraftcharacteristic_view_laiupd.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_ykeplp.designsurface::jsonb as designsurface,
    notes_note_view_btqggg.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cuiclk on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_cuiclk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fvffct on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_fvffct.id
left join geometry.curve_view geometry_curve_view_pvkpng on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_pvkpng.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ykjtsv on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ykjtsv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_jltbgq on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_jltbgq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tfohzq on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_tfohzq.id
left join procedure.holdinguse_view procedure_holdinguse_view_rltqfo on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_rltqfo.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kdweyt on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kdweyt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sgmlta.*) as aircraftcategory
  from master_join master_join_kzqqaa
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_sgmlta on master_join_kzqqaa.target_id = shared_aircraftcharacteristic_lat_sgmlta.id
  where master_join_kzqqaa.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_laiupd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bodmub.*) as designsurface
  from master_join master_join_fcxlsj
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_bodmub on master_join_fcxlsj.target_id = shared_obstacleassessmentarea_lat_bodmub.id
  where master_join_fcxlsj.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_ykeplp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhwexx.*) AS annotation
  from master_join master_join_bhwrqp
  join notes.note_view notes_note_lat_dhwexx on master_join_bhwrqp.target_id = notes_note_lat_dhwexx.id
  where master_join_bhwrqp.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_btqggg on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.localizer.id::integer as f_id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_weiimh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_weiimh.longitude AS location_longitude,
    geometry_elevatedpoint_view_weiimh.latitude AS location_latitude,
    geometry_elevatedpoint_view_weiimh.elevation AS location_elevation,
    geometry_elevatedpoint_view_weiimh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_weiimh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_weiimh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_weiimh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hahsci.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_muskoa.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_edsbdz.availability::jsonb as availability,
    notes_note_view_pfdutc.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_weiimh on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_weiimh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_orwofo.*) as authority
  from master_join master_join_qjllta
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_orwofo on master_join_qjllta.target_id = navaids_points_authorityfornavaidequipment_lat_orwofo.id
  where master_join_qjllta.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_hahsci on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qpcltm.*) as monitoring
  from master_join master_join_xmbgzw
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qpcltm on master_join_xmbgzw.target_id = navaids_points_navaidequipmentmonitoring_lat_qpcltm.id
  where master_join_xmbgzw.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_muskoa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_pkgkiy.*) as availability
  from master_join master_join_lkwahg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_pkgkiy on master_join_lkwahg.target_id = navaids_points_navaidoperationalstatus_lat_pkgkiy.id
  where master_join_lkwahg.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_edsbdz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oejgbe.*) AS annotation
  from master_join master_join_rrktmo
  join notes.note_view notes_note_lat_oejgbe on master_join_rrktmo.target_id = notes_note_lat_oejgbe.id
  where master_join_rrktmo.source_id = navaids_points.localizer_ts.id
) as notes_note_view_pfdutc on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.markerbeacon.id::integer as f_id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_donnvp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_donnvp.longitude AS location_longitude,
    geometry_elevatedpoint_view_donnvp.latitude AS location_latitude,
    geometry_elevatedpoint_view_donnvp.elevation AS location_elevation,
    geometry_elevatedpoint_view_donnvp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_donnvp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_donnvp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_donnvp.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_omiafo.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_pltrzb.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_mwwdib.availability::jsonb as availability,
    notes_note_view_pxqmdt.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_donnvp on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_donnvp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aiewvq.*) as authority
  from master_join master_join_rqnygr
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_aiewvq on master_join_rqnygr.target_id = navaids_points_authorityfornavaidequipment_lat_aiewvq.id
  where master_join_rqnygr.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_omiafo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_edxytw.*) as monitoring
  from master_join master_join_ydwawn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_edxytw on master_join_ydwawn.target_id = navaids_points_navaidequipmentmonitoring_lat_edxytw.id
  where master_join_ydwawn.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_pltrzb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xynzxl.*) as availability
  from master_join master_join_cidtbf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xynzxl on master_join_cidtbf.target_id = navaids_points_navaidoperationalstatus_lat_xynzxl.id
  where master_join_cidtbf.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_mwwdib on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hkrjzo.*) AS annotation
  from master_join master_join_pyyfhd
  join notes.note_view notes_note_lat_hkrjzo on master_join_pyyfhd.target_id = notes_note_lat_hkrjzo.id
  where master_join_pyyfhd.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_pxqmdt on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.markingbuoy.id::integer as f_id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_sfhxyc.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_sfhxyc.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_sfhxyc.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_ktjvtn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ktjvtn.longitude AS location_longitude,
    geometry_elevatedpoint_view_ktjvtn.latitude AS location_latitude,
    geometry_elevatedpoint_view_ktjvtn.elevation AS location_elevation,
    geometry_elevatedpoint_view_ktjvtn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ktjvtn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ktjvtn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ktjvtn.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_rlryvt.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_sfhxyc on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_sfhxyc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ktjvtn on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_ktjvtn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ciuxwf.*) AS annotation
  from master_join master_join_dpvlqh
  join notes.note_view notes_note_lat_ciuxwf on master_join_dpvlqh.target_id = notes_note_lat_ciuxwf.id
  where master_join_dpvlqh.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_rlryvt on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.holdinguse_view', 'procedure.approachcondition_view', 'geometry.curve_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.missedapproachleg.id::integer as f_id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ateany.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pionkj.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ltkezm.*)::jsonb AS arccentre,
    geometry_curve_view_vqaqtm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_vqaqtm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_wamvnn.title as varchar), '(' || navaids_points_angleindication_pt_wamvnn.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_wamvnn.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_fiavrf.title as varchar), '(' || navaids_points_distanceindication_pt_fiavrf.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_fiavrf.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_mtccft.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_rzxvhn.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_rzxvhn.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_rzxvhn.href::text AS approach_href,
    shared_aircraftcharacteristic_view_kitprf.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_uwzvwd.designsurface::jsonb as designsurface,
    notes_note_view_bjljdi.annotation::jsonb as annotation,
    procedure_approachcondition_view_huihrn.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ateany on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ateany.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pionkj on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_pionkj.id
left join geometry.curve_view geometry_curve_view_vqaqtm on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_vqaqtm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ltkezm on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ltkezm.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_wamvnn on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_wamvnn.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_fiavrf on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_fiavrf.id
left join procedure.holdinguse_view procedure_holdinguse_view_mtccft on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_mtccft.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_rzxvhn on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_rzxvhn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_mgrgnd.*) as aircraftcategory
  from master_join master_join_rnlsew
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_mgrgnd on master_join_rnlsew.target_id = shared_aircraftcharacteristic_lat_mgrgnd.id
  where master_join_rnlsew.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_kitprf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qexliq.*) as designsurface
  from master_join master_join_kptztv
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qexliq on master_join_kptztv.target_id = shared_obstacleassessmentarea_lat_qexliq.id
  where master_join_kptztv.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_uwzvwd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oagmmz.*) AS annotation
  from master_join master_join_kvdevg
  join notes.note_view notes_note_lat_oagmmz on master_join_kvdevg.target_id = notes_note_lat_oagmmz.id
  where master_join_kvdevg.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_bjljdi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_vjcadk.*) as condition
  from master_join master_join_vauhnq
  join procedure.approachcondition_view procedure_approachcondition_lat_vjcadk on master_join_vauhnq.target_id = procedure_approachcondition_lat_vjcadk.id
  where master_join_vauhnq.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_huihrn on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['navaids_points.navaidcomponent_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.navaid.id::integer as f_id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_lykfxh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lykfxh.longitude AS location_longitude,
    geometry_elevatedpoint_view_lykfxh.latitude AS location_latitude,
    geometry_elevatedpoint_view_lykfxh.elevation AS location_elevation,
    geometry_elevatedpoint_view_lykfxh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lykfxh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lykfxh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lykfxh.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_zeeuze.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_hiqdqf.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_rluvdg.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_izpzlf.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_hcaxyd.availability::jsonb as availability,
    notes_note_view_poqgsf.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lykfxh on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_lykfxh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_yvcsyq.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_yvcsyq.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_yvcsyq.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_yvcsyq.href
  )) as touchdownliftoff  from master_join master_join_udingg
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_yvcsyq on master_join_udingg.target_id = airport_heliport_touchdownliftoff_lat_yvcsyq.id
  where master_join_udingg.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_zeeuze on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_aljkku.*) as navaidequipment
  from master_join master_join_aqpmvb
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_aljkku on master_join_aqpmvb.target_id = navaids_points_navaidcomponent_lat_aljkku.id
  where master_join_aqpmvb.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_hiqdqf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ivgeuf.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ivgeuf.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ivgeuf.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ivgeuf.href
  )) as runwaydirection  from master_join master_join_xfntsr
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ivgeuf on master_join_xfntsr.target_id = airport_heliport_runwaydirection_lat_ivgeuf.id
  where master_join_xfntsr.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_rluvdg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pjtaqx.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pjtaqx.title AS varchar), '(' || airport_heliport_airportheliport_lat_pjtaqx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pjtaqx.href
  )) as servedairport  from master_join master_join_zqhuxn
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pjtaqx on master_join_zqhuxn.target_id = airport_heliport_airportheliport_lat_pjtaqx.id
  where master_join_zqhuxn.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_izpzlf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mvkgkb.*) as availability
  from master_join master_join_rdtjgw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_mvkgkb on master_join_rdtjgw.target_id = navaids_points_navaidoperationalstatus_lat_mvkgkb.id
  where master_join_rdtjgw.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_hcaxyd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asffpd.*) AS annotation
  from master_join master_join_ieguxe
  join notes.note_view notes_note_lat_asffpd on master_join_ieguxe.target_id = notes_note_lat_asffpd.id
  where master_join_ieguxe.source_id = navaids_points.navaid_ts.id
) as notes_note_view_poqgsf on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'shared.circlesector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.navigationarearestriction.id::integer as f_id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_diccbl.*)::jsonb AS designsurface,
    to_jsonb(shared_circlesector_view_vftzop.*)::jsonb AS sectordefinition,
    notes_note_view_ftipbr.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_diccbl on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_diccbl.id
left join shared.circlesector_view shared_circlesector_view_vftzop on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_vftzop.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iezxax.*) AS annotation
  from master_join master_join_ttmdfs
  join notes.note_view notes_note_lat_iezxax on master_join_ttmdfs.target_id = notes_note_lat_iezxax.id
  where master_join_ttmdfs.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_ftipbr on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['geometry.point_view', 'notes.note_view', 'procedure.navigationareasector_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.navigationarea.id::integer as f_id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_rdzjex.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_rdzjex.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_rdzjex.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jbaabc.title as varchar), '(' || navaids_points_designatedpoint_pt_jbaabc.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jbaabc.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zkwdcx.title as varchar), '(' || navaids_points_navaid_pt_zkwdcx.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_zkwdcx.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pkmxbv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pkmxbv.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_pkmxbv.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_yewbut.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_yewbut.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_yewbut.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hhemmn.title as varchar), '(' || airport_heliport_airportheliport_pt_hhemmn.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_hhemmn.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_mtutfa.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_mtutfa.longitude AS centrepointposition_longitude,
    geometry_point_view_mtutfa.latitude AS centrepointposition_latitude,
    geometry_point_view_mtutfa.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_jsycvn.sector::jsonb as sector,
    notes_note_view_vewxqt.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_rdzjex on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_rdzjex.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jbaabc on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jbaabc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zkwdcx on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_zkwdcx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pkmxbv on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pkmxbv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_yewbut on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_yewbut.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hhemmn on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hhemmn.id
left join geometry.point_view geometry_point_view_mtutfa on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_mtutfa.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_ahxnfb.*) as sector
  from master_join master_join_ibctdm
  join procedure.navigationareasector_view procedure_navigationareasector_lat_ahxnfb on master_join_ibctdm.target_id = procedure_navigationareasector_lat_ahxnfb.id
  where master_join_ibctdm.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_jsycvn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_npvded.*) AS annotation
  from master_join master_join_sxszoy
  join notes.note_view notes_note_lat_npvded on master_join_sxszoy.target_id = notes_note_lat_npvded.id
  where master_join_sxszoy.source_id = procedure.navigationarea_ts.id
) as notes_note_view_vewxqt on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.ndb.id::integer as f_id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_cpelwz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cpelwz.longitude AS location_longitude,
    geometry_elevatedpoint_view_cpelwz.latitude AS location_latitude,
    geometry_elevatedpoint_view_cpelwz.elevation AS location_elevation,
    geometry_elevatedpoint_view_cpelwz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cpelwz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cpelwz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cpelwz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_umqrot.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_bwgyot.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_acjdwt.availability::jsonb as availability,
    notes_note_view_hkprsj.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cpelwz on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_cpelwz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_xnvtpw.*) as authority
  from master_join master_join_thqxqp
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_xnvtpw on master_join_thqxqp.target_id = navaids_points_authorityfornavaidequipment_lat_xnvtpw.id
  where master_join_thqxqp.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_umqrot on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_xbjgno.*) as monitoring
  from master_join master_join_ounbpl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_xbjgno on master_join_ounbpl.target_id = navaids_points_navaidequipmentmonitoring_lat_xbjgno.id
  where master_join_ounbpl.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bwgyot on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zkxwhp.*) as availability
  from master_join master_join_ktffif
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zkxwhp on master_join_ktffif.target_id = navaids_points_navaidoperationalstatus_lat_zkxwhp.id
  where master_join_ktffif.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_acjdwt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ymllrf.*) AS annotation
  from master_join master_join_reaqyt
  join notes.note_view notes_note_lat_ymllrf on master_join_reaqyt.target_id = notes_note_lat_ymllrf.id
  where master_join_reaqyt.source_id = navaids_points.ndb_ts.id
) as notes_note_view_hkprsj on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.nonmovementarea.id::integer as f_id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_dusxpp.title as varchar), '(' || airport_heliport_airportheliport_pt_dusxpp.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_dusxpp.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_sunity.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_sunity.elevation AS extent_elevation,
    geometry_elevatedsurface_view_sunity.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_sunity.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_sunity.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_sunity.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_tvdflj.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dusxpp on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_dusxpp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_sunity on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_sunity.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bevnzf.*) AS annotation
  from master_join master_join_xucduj
  join notes.note_view notes_note_lat_bevnzf on master_join_xucduj.target_id = notes_note_lat_bevnzf.id
  where master_join_xucduj.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_tvdflj on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    obstacles.obstaclearea.id::integer as f_id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_elsvjg.title as varchar), '(' || airport_heliport_airportheliport_pt_elsvjg.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_elsvjg.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_claqlm.title as varchar), '(' || airport_heliport_runwaydirection_pt_claqlm.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_claqlm.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_rduwpv.title as varchar), '(' || organisation_organisationauthority_pt_rduwpv.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_rduwpv.href::text AS referenceownerorganisation_href,
    geometry_surface_view_pdhyth.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_pdhyth.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_fguuuz.obstacle::jsonb as obstacle,
    notes_note_view_glotmz.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_elsvjg on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_elsvjg.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_claqlm on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_claqlm.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_rduwpv on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_rduwpv.id
left join geometry.surface_view geometry_surface_view_pdhyth on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_pdhyth.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_xmpjss.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_xmpjss.title AS varchar), '(' || obstacles_verticalstructure_lat_xmpjss.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_xmpjss.href
  )) as obstacle  from master_join master_join_rxnqsz
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_xmpjss on master_join_rxnqsz.target_id = obstacles_verticalstructure_lat_xmpjss.id
  where master_join_rxnqsz.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_fguuuz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vtwgmy.*) AS annotation
  from master_join master_join_rpcwkr
  join notes.note_view notes_note_lat_vtwgmy on master_join_rpcwkr.target_id = notes_note_lat_vtwgmy.id
  where master_join_rpcwkr.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_glotmz on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['organisation.organisationauthorityassociation_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as id,
    organisation.organisationauthority.id::integer as f_id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_htfmga.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_sowhxo.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_oecdsl
  join shared.contactinformation_view shared_contactinformation_lat_mkyqee on master_join_oecdsl.target_id = shared_contactinformation_lat_mkyqee.id
  where master_join_oecdsl.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_lwzidd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_lxdhmt.*) as relatedorganisationauthority
  from master_join master_join_wdzvqv
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_lxdhmt on master_join_wdzvqv.target_id = organisation_organisationauthorityassociation_lat_lxdhmt.id
  where master_join_wdzvqv.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_htfmga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iusqqt.*) AS annotation
  from master_join master_join_cdkczw
  join notes.note_view notes_note_lat_iusqqt on master_join_cdkczw.target_id = notes_note_lat_iusqqt.id
  where master_join_cdkczw.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_sowhxo on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.passengerloadingbridge.id::integer as f_id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_hknnsh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_hknnsh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hknnsh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hknnsh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hknnsh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hknnsh.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_rnsmdz.associatedstand::jsonb as associatedstand,
    notes_note_view_ojechx.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hknnsh on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_hknnsh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_bgbbqz.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_bgbbqz.title AS varchar), '(' || airport_heliport_aircraftstand_lat_bgbbqz.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_bgbbqz.href
  )) as associatedstand  from master_join master_join_wdglvh
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_bgbbqz on master_join_wdglvh.target_id = airport_heliport_aircraftstand_lat_bgbbqz.id
  where master_join_wdglvh.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_rnsmdz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqrlxa.*) AS annotation
  from master_join master_join_draiwp
  join notes.note_view notes_note_lat_oqrlxa on master_join_draiwp.target_id = notes_note_lat_oqrlxa.id
  where master_join_draiwp.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_ojechx on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.passengerservice.id::integer as f_id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_kmjhue.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kmjhue.longitude AS location_longitude,
    geometry_elevatedpoint_view_kmjhue.latitude AS location_latitude,
    geometry_elevatedpoint_view_kmjhue.elevation AS location_elevation,
    geometry_elevatedpoint_view_kmjhue.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kmjhue.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kmjhue.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kmjhue.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hunzjg.title as varchar), '(' || organisation_unit_pt_hunzjg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_hunzjg.href::text AS serviceprovider_href,
    service_callsigndetail_view_razici.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ouxupz.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_agyoci.availability::jsonb as availability,
    notes_note_view_uwrdnz.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_xnzeyf.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kmjhue on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_kmjhue.id
left join organisation.unit_pt organisation_unit_pt_hunzjg on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_hunzjg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_owmpzd.*) as callsign
  from master_join master_join_zxqjnf
  join service.callsigndetail_view service_callsigndetail_lat_owmpzd on master_join_zxqjnf.target_id = service_callsigndetail_lat_owmpzd.id
  where master_join_zxqjnf.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_razici on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_iyylzs.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_iyylzs.title AS varchar), '(' || service_radiocommunicationchannel_lat_iyylzs.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_iyylzs.href
  )) as radiocommunication  from master_join master_join_yqffol
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_iyylzs on master_join_yqffol.target_id = service_radiocommunicationchannel_lat_iyylzs.id
  where master_join_yqffol.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_ouxupz on TRUE
left join lateral(
  select
  from master_join master_join_fekehm
  join shared.contactinformation_view shared_contactinformation_lat_xqpfbv on master_join_fekehm.target_id = shared_contactinformation_lat_xqpfbv.id
  where master_join_fekehm.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_rntlnu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_rivihd.*) as availability
  from master_join master_join_avmbge
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_rivihd on master_join_avmbge.target_id = service_serviceoperationalstatus_lat_rivihd.id
  where master_join_avmbge.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_agyoci on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dcmlob.*) AS annotation
  from master_join master_join_xqgipd
  join notes.note_view notes_note_lat_dcmlob on master_join_xqgipd.target_id = notes_note_lat_dcmlob.id
  where master_join_xqgipd.source_id = service.passengerservice_ts.id
) as notes_note_view_uwrdnz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pmwoux.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pmwoux.title AS varchar), '(' || airport_heliport_airportheliport_lat_pmwoux.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pmwoux.href
  )) as airportheliport  from master_join master_join_gzqosy
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pmwoux on master_join_gzqosy.target_id = airport_heliport_airportheliport_lat_pmwoux.id
  where master_join_gzqosy.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_xnzeyf on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.pilotcontrolledlighting.id::integer as f_id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_oakcku.controlledlightintensity::jsonb as controlledlightintensity,
    notes_note_view_sacque.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_olrvqh.*) as controlledlightintensity
  from master_join master_join_hfmpmx
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_olrvqh on master_join_hfmpmx.target_id = airport_heliport_lightactivation_lat_olrvqh.id
  where master_join_hfmpmx.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_oakcku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukiulc.*) AS annotation
  from master_join master_join_tfeijc
  join notes.note_view notes_note_lat_ukiulc on master_join_tfeijc.target_id = notes_note_lat_ukiulc.id
  where master_join_tfeijc.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_sacque on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.reflector_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.precisionapproachradar.id::integer as f_id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_fpovla.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fpovla.longitude AS location_longitude,
    geometry_elevatedpoint_view_fpovla.latitude AS location_latitude,
    geometry_elevatedpoint_view_fpovla.elevation AS location_elevation,
    geometry_elevatedpoint_view_fpovla.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fpovla.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fpovla.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fpovla.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_acehsf.annotation::jsonb as annotation,
    surveillance_reflector_view_ubndbc.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fpovla on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_fpovla.id
left join lateral(
  select
  from master_join master_join_bphkor
  join shared.contactinformation_view shared_contactinformation_lat_sehapg on master_join_bphkor.target_id = shared_contactinformation_lat_sehapg.id
  where master_join_bphkor.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_bsvskx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_firvmu.*) AS annotation
  from master_join master_join_kgcfqu
  join notes.note_view notes_note_lat_firvmu on master_join_kgcfqu.target_id = notes_note_lat_firvmu.id
  where master_join_kgcfqu.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_acehsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_hwtqcu.*) as reflector
  from master_join master_join_psctdm
  join surveillance.reflector_view surveillance_reflector_lat_hwtqcu on master_join_psctdm.target_id = surveillance_reflector_lat_hwtqcu.id
  where master_join_psctdm.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_ubndbc on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.primarysurveillanceradar.id::integer as f_id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_jobawg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jobawg.longitude AS location_longitude,
    geometry_elevatedpoint_view_jobawg.latitude AS location_latitude,
    geometry_elevatedpoint_view_jobawg.elevation AS location_elevation,
    geometry_elevatedpoint_view_jobawg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jobawg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jobawg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jobawg.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_gzjnyw.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_iryjqc.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jobawg on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_jobawg.id
left join lateral(
  select
  from master_join master_join_slurek
  join shared.contactinformation_view shared_contactinformation_lat_ysfvqu on master_join_slurek.target_id = shared_contactinformation_lat_ysfvqu.id
  where master_join_slurek.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_wadqca on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_babkrz.*) AS annotation
  from master_join master_join_fjttqo
  join notes.note_view notes_note_lat_babkrz on master_join_fjttqo.target_id = notes_note_lat_babkrz.id
  where master_join_fjttqo.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_gzjnyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_zfeknw.*) as groundstation
  from master_join master_join_dcspwo
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_zfeknw on master_join_dcspwo.target_id = surveillance_surveillancegroundstation_lat_zfeknw.id
  where master_join_dcspwo.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_iryjqc on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.proceduredme.id::integer as f_id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_lfknac.title as varchar), '(' || navaids_points_dme_pt_lfknac.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_lfknac.href::text AS dme_href,
    notes_note_view_dtqsby.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_lfknac on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_lfknac.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdmaau.*) AS annotation
  from master_join master_join_unvzbi
  join notes.note_view notes_note_lat_mdmaau on master_join_unvzbi.target_id = notes_note_lat_mdmaau.id
  where master_join_unvzbi.source_id = procedure.proceduredme_ts.id
) as notes_note_view_dtqsby on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['surveillance.radarcomponent_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.radarsystem.id::integer as f_id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_sdhjyu.title as varchar), '(' || airport_heliport_airportheliport_pt_sdhjyu.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_sdhjyu.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_pmeira.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pmeira.longitude AS location_longitude,
    geometry_elevatedpoint_view_pmeira.latitude AS location_latitude,
    geometry_elevatedpoint_view_pmeira.elevation AS location_elevation,
    geometry_elevatedpoint_view_pmeira.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pmeira.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pmeira.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pmeira.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_oxphtw.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_kugmjl.office::jsonb as office,
    airport_heliport_runway_pt_wymzmb.parrunway::jsonb as parrunway,
    notes_note_view_pavzxs.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sdhjyu on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_sdhjyu.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pmeira on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_pmeira.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_evtwwt.*) as radarequipment
  from master_join master_join_iaaede
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_evtwwt on master_join_iaaede.target_id = surveillance_radarcomponent_lat_evtwwt.id
  where master_join_iaaede.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_oxphtw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kcmwlk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kcmwlk.title AS varchar), '(' || organisation_organisationauthority_lat_kcmwlk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kcmwlk.href
  )) as office  from master_join master_join_ngjobk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kcmwlk on master_join_ngjobk.target_id = organisation_organisationauthority_lat_kcmwlk.id
  where master_join_ngjobk.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_kugmjl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_zfhrle.id,
      'title', coalesce(cast(airport_heliport_runway_lat_zfhrle.title AS varchar), '(' || airport_heliport_runway_lat_zfhrle.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_zfhrle.href
  )) as parrunway  from master_join master_join_yqfpwx
  join airport_heliport.runway_pt airport_heliport_runway_lat_zfhrle on master_join_yqfpwx.target_id = airport_heliport_runway_lat_zfhrle.id
  where master_join_yqfpwx.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_wymzmb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tixkdr.*) AS annotation
  from master_join master_join_tephuo
  join notes.note_view notes_note_lat_tixkdr on master_join_tephuo.target_id = notes_note_lat_tixkdr.id
  where master_join_tephuo.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_pavzxs on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['service.radiocommunicationoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.radiocommunicationchannel.id::integer as f_id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_rqhfys.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_rqhfys.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_oofcno.availability::jsonb as availability,
    notes_note_view_crkzqx.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_zdhiiy.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_zdhiiy.id,
      'longitude', geometry_elevatedpoint_lat_zdhiiy.longitude,
      'latitude', geometry_elevatedpoint_lat_zdhiiy.latitude,
      'elevation', geometry_elevatedpoint_lat_zdhiiy.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_zdhiiy.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_zdhiiy.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_zdhiiy.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_zdhiiy.horizontalAccuracy
    )) AS attr
  from master_join master_join_hyykcw
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_zdhiiy on master_join_hyykcw.target_id = geometry_elevatedpoint_lat_zdhiiy.id
  where master_join_hyykcw.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_rqhfys on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_lxnwir.*) as availability
  from master_join master_join_lkyulx
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_lxnwir on master_join_lkyulx.target_id = service_radiocommunicationoperationalstatus_lat_lxnwir.id
  where master_join_lkyulx.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_oofcno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_riawwl.*) AS annotation
  from master_join master_join_bbfqyz
  join notes.note_view notes_note_lat_riawwl on master_join_bbfqyz.target_id = notes_note_lat_riawwl.id
  where master_join_bbfqyz.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_crkzqx on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.radiofrequencyarea.id::integer as f_id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_swxgwt.title as varchar), '(' || service_radiocommunicationchannel_pt_swxgwt.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_swxgwt.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_jfcylu.title as varchar), '(' || navaids_points_specialnavigationstation_pt_jfcylu.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_jfcylu.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_bpvwfs.title as varchar), '(' || surveillance_precisionapproachradar_pt_bpvwfs.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_bpvwfs.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_xprjie.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_xprjie.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_xprjie.href::text AS equipmentradar_href,
    shared_circlesector_view_qazitp.sector::jsonb as sector,
    geometry_surface_view_vbcxna.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_vbcxna.attr::jsonb as extent,
    notes_note_view_ihxjgt.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_swxgwt on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_swxgwt.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_jfcylu on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_jfcylu.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_bpvwfs on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_bpvwfs.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_xprjie on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_xprjie.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_tdbeds.*) as sector
  from master_join master_join_ctxugd
  join shared.circlesector_view shared_circlesector_lat_tdbeds on master_join_ctxugd.target_id = shared_circlesector_lat_tdbeds.id
  where master_join_ctxugd.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_qazitp on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_eycwyz.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_eycwyz.id,
      'horizontalAccuracy', geometry_surface_lat_eycwyz.horizontalAccuracy
    )) AS attr
  from master_join master_join_ktqeoi
  join geometry.surface_view geometry_surface_lat_eycwyz on master_join_ktqeoi.target_id = geometry_surface_lat_eycwyz.id
  where master_join_ktqeoi.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_vbcxna on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mgwvhz.*) AS annotation
  from master_join master_join_sbicvx
  join notes.note_view notes_note_lat_mgwvhz on master_join_sbicvx.target_id = notes_note_lat_mgwvhz.id
  where master_join_sbicvx.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_ihxjgt on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.road.id::integer as f_id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_ebkdiu.title as varchar), '(' || airport_heliport_airportheliport_pt_ebkdiu.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_ebkdiu.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_iiqukc.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_spktsh.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_spktsh.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_spktsh.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_spktsh.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_spktsh.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_spktsh.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_kbdvqb.accessiblestand::jsonb as accessiblestand,
    notes_note_view_dztcbt.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ebkdiu on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_ebkdiu.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_iiqukc on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_iiqukc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_spktsh on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_spktsh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_kldklm.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_kldklm.title AS varchar), '(' || airport_heliport_aircraftstand_lat_kldklm.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_kldklm.href
  )) as accessiblestand  from master_join master_join_ysmkzf
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_kldklm on master_join_ysmkzf.target_id = airport_heliport_aircraftstand_lat_kldklm.id
  where master_join_ysmkzf.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_kbdvqb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_llirwc.*) AS annotation
  from master_join master_join_viigpy
  join notes.note_view notes_note_lat_llirwc on master_join_viigpy.target_id = notes_note_lat_llirwc.id
  where master_join_viigpy.source_id = airport_heliport.road_ts.id
) as notes_note_view_dztcbt on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.routedme.id::integer as f_id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_shglsh.title as varchar), '(' || navaids_points_dme_pt_shglsh.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_shglsh.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_wrpult.*)::jsonb AS applicablerouteportion,
    notes_note_view_qggoxc.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_shglsh on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_shglsh.id
left join routes.routeportion_view routes_routeportion_view_wrpult on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_wrpult.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvlczc.*) AS annotation
  from master_join master_join_qxkbcs
  join notes.note_view notes_note_lat_jvlczc on master_join_qxkbcs.target_id = notes_note_lat_jvlczc.id
  where master_join_qxkbcs.source_id = routes.routedme_ts.id
) as notes_note_view_qggoxc on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'geometry.curve_view', 'navaids_points.enroutesegmentpoint_view', 'routes.routeavailability_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.routesegment.id::integer as f_id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_wltvcx.*)::jsonb AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_bwhfcq.*)::jsonb AS end,
    coalesce(cast(routes_route_pt_wcczvy.title as varchar), '(' || routes_route_pt_wcczvy.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_wcczvy.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_sbjite.*)::jsonb AS evaluationarea,
    geometry_curve_view_gxypgp.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_gxypgp.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_kpszcs.availability::jsonb as availability,
    notes_note_view_rxthmb.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_wltvcx on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_wltvcx.id
left join routes.route_pt routes_route_pt_wcczvy on routes.routesegment_ts.routeformed_id = routes_route_pt_wcczvy.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_sbjite on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_sbjite.id
left join geometry.curve_view geometry_curve_view_gxypgp on routes.routesegment_ts.curveextent_id = geometry_curve_view_gxypgp.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_bwhfcq on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_bwhfcq.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_yxfedh.*) as availability
  from master_join master_join_xvipuq
  join routes.routeavailability_view routes_routeavailability_lat_yxfedh on master_join_xvipuq.target_id = routes_routeavailability_lat_yxfedh.id
  where master_join_xvipuq.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_kpszcs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asrouj.*) AS annotation
  from master_join master_join_ggqeti
  join notes.note_view notes_note_lat_asrouj on master_join_ggqeti.target_id = notes_note_lat_asrouj.id
  where master_join_ggqeti.source_id = routes.routesegment_ts.id
) as notes_note_view_rxthmb on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.route.id::integer as f_id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_dupojq.title as varchar), '(' || organisation_organisationauthority_pt_dupojq.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_dupojq.href::text AS userorganisation_href,
    notes_note_view_vmjdhy.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_dupojq on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_dupojq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ghlfzg.*) AS annotation
  from master_join master_join_akhvpo
  join notes.note_view notes_note_lat_ghlfzg on master_join_akhvpo.target_id = notes_note_lat_ghlfzg.id
  where master_join_akhvpo.source_id = routes.route_ts.id
) as notes_note_view_vmjdhy on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as id,
    rules_procedures.rulesprocedures.id::integer as f_id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_ejngbl.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_jytqtj.affectedarea::jsonb as affectedarea,
    notes_note_view_aknyog.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_hrijbu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_hrijbu.title AS varchar), '(' || airport_heliport_airportheliport_lat_hrijbu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_hrijbu.href
  )) as affectedlocation  from master_join master_join_pdnezv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_hrijbu on master_join_pdnezv.target_id = airport_heliport_airportheliport_lat_hrijbu.id
  where master_join_pdnezv.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_ejngbl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_rbgqdr.id,
      'title', coalesce(cast(airspace_airspace_lat_rbgqdr.title AS varchar), '(' || airspace_airspace_lat_rbgqdr.nilreason[1] || ')'),
      'href', airspace_airspace_lat_rbgqdr.href
  )) as affectedarea  from master_join master_join_raimzg
  join airspace.airspace_pt airspace_airspace_lat_rbgqdr on master_join_raimzg.target_id = airspace_airspace_lat_rbgqdr.id
  where master_join_raimzg.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_jytqtj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dtecni.*) AS annotation
  from master_join master_join_uxclrq
  join notes.note_view notes_note_lat_dtecni on master_join_uxclrq.target_id = notes_note_lat_dtecni.id
  where master_join_uxclrq.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_aknyog on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayblastpad.id::integer as f_id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_nnuvif.title as varchar), '(' || airport_heliport_runwaydirection_pt_nnuvif.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_nnuvif.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_igxdud.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_igxdud.elevation AS extent_elevation,
    geometry_elevatedsurface_view_igxdud.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_igxdud.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_igxdud.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_igxdud.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lqyriy.*)::jsonb AS surfaceproperties,
    notes_note_view_drauiu.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_nnuvif on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_nnuvif.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_igxdud on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_igxdud.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lqyriy on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lqyriy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nrdhes.*) AS annotation
  from master_join master_join_bemfcr
  join notes.note_view notes_note_lat_nrdhes on master_join_bemfcr.target_id = notes_note_lat_nrdhes.id
  where master_join_bemfcr.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_drauiu on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['airport_heliport.runwaydeclareddistance_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.navaidequipmentdistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaycentrelinepoint.id::integer as f_id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_rpjaae.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rpjaae.longitude AS location_longitude,
    geometry_elevatedpoint_view_rpjaae.latitude AS location_latitude,
    geometry_elevatedpoint_view_rpjaae.elevation AS location_elevation,
    geometry_elevatedpoint_view_rpjaae.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rpjaae.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rpjaae.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rpjaae.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_oxyxkh.title as varchar), '(' || airport_heliport_runwaydirection_pt_oxyxkh.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_oxyxkh.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_rzptfw.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_wyycuz.navaidequipment::jsonb as navaidequipment,
    notes_note_view_qqqnue.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rpjaae on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_rpjaae.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_oxyxkh on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_oxyxkh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_zkmuwt.*) as associateddeclareddistance
  from master_join master_join_midmdi
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_zkmuwt on master_join_midmdi.target_id = airport_heliport_runwaydeclareddistance_lat_zkmuwt.id
  where master_join_midmdi.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_rzptfw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_gxaear.*) as navaidequipment
  from master_join master_join_mjfvot
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_gxaear on master_join_mjfvot.target_id = airport_heliport_navaidequipmentdistance_lat_gxaear.id
  where master_join_mjfvot.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_wyycuz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_guiynl.*) AS annotation
  from master_join master_join_bpaeby
  join notes.note_view notes_note_lat_guiynl on master_join_bpaeby.target_id = notes_note_lat_guiynl.id
  where master_join_bpaeby.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_qqqnue on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaydirectionlightsystem.id::integer as f_id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_utfvli.title as varchar), '(' || airport_heliport_runwaydirection_pt_utfvli.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_utfvli.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_jwitic.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_vkfpug.availability::jsonb as availability,
    notes_note_view_ngshed.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_utfvli on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_utfvli.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_kbpbcb.*) as element
  from master_join master_join_hsrgkb
  join shared.lightelement_view shared_lightelement_lat_kbpbcb on master_join_hsrgkb.target_id = shared_lightelement_lat_kbpbcb.id
  where master_join_hsrgkb.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_jwitic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_grmdlz.*) as availability
  from master_join master_join_hxyuzd
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_grmdlz on master_join_hxyuzd.target_id = airport_heliport_groundlightingavailability_lat_grmdlz.id
  where master_join_hxyuzd.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_vkfpug on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nvknub.*) AS annotation
  from master_join master_join_ngyajc
  join notes.note_view notes_note_lat_nvknub on master_join_ngyajc.target_id = notes_note_lat_nvknub.id
  where master_join_ngyajc.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_ngshed on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaydirection.id::integer as f_id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_dppegi.title as varchar), '(' || airport_heliport_runway_pt_dppegi.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_dppegi.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_ycvxsx.title as varchar), '(' || airport_heliport_runwayelement_pt_ycvxsx.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_ycvxsx.href::text AS startingelement_href,
    notes_note_view_ggkqhb.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_uqdtoh.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_dppegi on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_dppegi.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_ycvxsx on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_ycvxsx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tdicpf.*) AS annotation
  from master_join master_join_njbffr
  join notes.note_view notes_note_lat_tdicpf on master_join_njbffr.target_id = notes_note_lat_tdicpf.id
  where master_join_njbffr.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_ggkqhb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xssvdh.*) as availability
  from master_join master_join_crruyi
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xssvdh on master_join_crruyi.target_id = airport_heliport_manoeuvringareaavailability_lat_xssvdh.id
  where master_join_crruyi.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_uqdtoh on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayelement.id::integer as f_id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_tbkmes.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_fpwocj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fpwocj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fpwocj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fpwocj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fpwocj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fpwocj.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_iuggii.associatedrunway::jsonb as associatedrunway,
    notes_note_view_jogtag.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_qjlmet.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_tbkmes on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_tbkmes.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fpwocj on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_fpwocj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_myidfm.id,
      'title', coalesce(cast(airport_heliport_runway_lat_myidfm.title AS varchar), '(' || airport_heliport_runway_lat_myidfm.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_myidfm.href
  )) as associatedrunway  from master_join master_join_obkldp
  join airport_heliport.runway_pt airport_heliport_runway_lat_myidfm on master_join_obkldp.target_id = airport_heliport_runway_lat_myidfm.id
  where master_join_obkldp.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_iuggii on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_riofym.*) AS annotation
  from master_join master_join_wkeslj
  join notes.note_view notes_note_lat_riofym on master_join_wkeslj.target_id = notes_note_lat_riofym.id
  where master_join_wkeslj.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_jogtag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_bzbgvz.*) as availability
  from master_join master_join_ehosra
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_bzbgvz on master_join_ehosra.target_id = airport_heliport_manoeuvringareaavailability_lat_bzbgvz.id
  where master_join_ehosra.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_qjlmet on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaymarking.id::integer as f_id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_nnprvy.title as varchar), '(' || airport_heliport_runway_pt_nnprvy.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_nnprvy.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_pjchca.element::jsonb as element,
    notes_note_view_tmsqbp.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_nnprvy on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_nnprvy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fbihes.*) as element
  from master_join master_join_qcoary
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fbihes on master_join_qcoary.target_id = airport_heliport_markingelement_lat_fbihes.id
  where master_join_qcoary.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_pjchca on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dzgyxh.*) AS annotation
  from master_join master_join_feuudb
  join notes.note_view notes_note_lat_dzgyxh on master_join_feuudb.target_id = notes_note_lat_dzgyxh.id
  where master_join_feuudb.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_tmsqbp on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayprotectarealightsystem.id::integer as f_id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_gnnpqz.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_gnnpqz.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_gnnpqz.href::text AS lightedarea_href,
    shared_lightelement_view_pvqscb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_yjpjmr.availability::jsonb as availability,
    notes_note_view_mnzypt.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_gnnpqz on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_gnnpqz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jnttob.*) as element
  from master_join master_join_jrkxqb
  join shared.lightelement_view shared_lightelement_lat_jnttob on master_join_jrkxqb.target_id = shared_lightelement_lat_jnttob.id
  where master_join_jrkxqb.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_pvqscb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_nobuvr.*) as availability
  from master_join master_join_oegqcm
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_nobuvr on master_join_oegqcm.target_id = airport_heliport_groundlightingavailability_lat_nobuvr.id
  where master_join_oegqcm.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_yjpjmr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ufmuee.*) AS annotation
  from master_join master_join_tbfdvg
  join notes.note_view notes_note_lat_ufmuee on master_join_tbfdvg.target_id = notes_note_lat_ufmuee.id
  where master_join_tbfdvg.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_mnzypt on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayprotectarea.id::integer as f_id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_udmoaf.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_zefcjt.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_zefcjt.elevation AS extent_elevation,
    geometry_elevatedsurface_view_zefcjt.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_zefcjt.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_zefcjt.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_zefcjt.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_cuiahq.title as varchar), '(' || airport_heliport_runwaydirection_pt_cuiahq.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_cuiahq.href::text AS protectedrunwaydirection_href,
    notes_note_view_tgobzp.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_udmoaf on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_udmoaf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_zefcjt on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_zefcjt.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_cuiahq on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_cuiahq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thikvl.*) AS annotation
  from master_join master_join_xgnhlc
  join notes.note_view notes_note_lat_thikvl on master_join_xgnhlc.target_id = notes_note_lat_thikvl.id
  where master_join_xgnhlc.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_tgobzp on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.runwaysectioncontamination_view', 'notes.note_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runway.id::integer as f_id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fwkrxy.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_ittpri.title as varchar), '(' || airport_heliport_airportheliport_pt_ittpri.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ittpri.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_cxszmb.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_ubohpl.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_cpyucc.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fwkrxy on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fwkrxy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ittpri on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ittpri.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_etrqyx.*) as overallcontaminant
  from master_join master_join_vdeqbw
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_etrqyx on master_join_vdeqbw.target_id = airport_heliport_runwaycontamination_lat_etrqyx.id
  where master_join_vdeqbw.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_cxszmb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mryxss.*) AS annotation
  from master_join master_join_nuumet
  join notes.note_view notes_note_lat_mryxss on master_join_nuumet.target_id = notes_note_lat_mryxss.id
  where master_join_nuumet.source_id = airport_heliport.runway_ts.id
) as notes_note_view_ubohpl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_adqzuh.*) as areacontaminant
  from master_join master_join_qbsxbj
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_adqzuh on master_join_qbsxbj.target_id = airport_heliport_runwaysectioncontamination_lat_adqzuh.id
  where master_join_qbsxbj.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_cpyucc on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayvisualrange.id::integer as f_id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_cfqbrm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cfqbrm.longitude AS location_longitude,
    geometry_elevatedpoint_view_cfqbrm.latitude AS location_latitude,
    geometry_elevatedpoint_view_cfqbrm.elevation AS location_elevation,
    geometry_elevatedpoint_view_cfqbrm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cfqbrm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cfqbrm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cfqbrm.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_qyjstj.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_uimetx.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cfqbrm on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_cfqbrm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_utbapo.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_utbapo.title AS varchar), '(' || airport_heliport_runwaydirection_lat_utbapo.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_utbapo.href
  )) as associatedrunwaydirection  from master_join master_join_pargac
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_utbapo on master_join_pargac.target_id = airport_heliport_runwaydirection_lat_utbapo.id
  where master_join_pargac.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_qyjstj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mkpbzf.*) AS annotation
  from master_join master_join_pizmax
  join notes.note_view notes_note_lat_mkpbzf on master_join_pizmax.target_id = notes_note_lat_mkpbzf.id
  where master_join_pizmax.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_uimetx on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['geometry.point_view', 'procedure.safealtitudeareasector_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.safealtitudearea.id::integer as f_id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_ewmolu.title as varchar), '(' || navaids_points_designatedpoint_pt_ewmolu.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ewmolu.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wlixxf.title as varchar), '(' || navaids_points_navaid_pt_wlixxf.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_wlixxf.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jntaie.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jntaie.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jntaie.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wwruva.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wwruva.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wwruva.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yczscu.title as varchar), '(' || airport_heliport_airportheliport_pt_yczscu.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_yczscu.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_xbcmgg.location::jsonb as location,
    geometry_point_view_kttcky.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_kttcky.longitude AS centrepointposition_longitude,
    geometry_point_view_kttcky.latitude AS centrepointposition_latitude,
    geometry_point_view_kttcky.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_plxluq.sector::jsonb as sector,
    notes_note_view_zdpezr.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ewmolu on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ewmolu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wlixxf on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_wlixxf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jntaie on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jntaie.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wwruva on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wwruva.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yczscu on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_yczscu.id
left join geometry.point_view geometry_point_view_kttcky on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_kttcky.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_sbmcrx.*) as sector
  from master_join master_join_bmopdb
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_sbmcrx on master_join_bmopdb.target_id = procedure_safealtitudeareasector_lat_sbmcrx.id
  where master_join_bmopdb.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_plxluq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_yziffp.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_yziffp.title AS varchar), '(' || airport_heliport_airportheliport_lat_yziffp.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_yziffp.href
  )) as location  from master_join master_join_rcumbu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_yziffp on master_join_rcumbu.target_id = airport_heliport_airportheliport_lat_yziffp.id
  where master_join_rcumbu.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_xbcmgg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_opmiws.*) AS annotation
  from master_join master_join_iexlsz
  join notes.note_view notes_note_lat_opmiws on master_join_iexlsz.target_id = notes_note_lat_opmiws.id
  where master_join_iexlsz.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_zdpezr on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.sdf.id::integer as f_id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_sralgn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_sralgn.longitude AS location_longitude,
    geometry_elevatedpoint_view_sralgn.latitude AS location_latitude,
    geometry_elevatedpoint_view_sralgn.elevation AS location_elevation,
    geometry_elevatedpoint_view_sralgn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sralgn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sralgn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sralgn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ewkegi.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_yllbhz.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_pxnarz.availability::jsonb as availability,
    notes_note_view_efhfhj.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sralgn on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_sralgn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_signyo.*) as authority
  from master_join master_join_bkswhn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_signyo on master_join_bkswhn.target_id = navaids_points_authorityfornavaidequipment_lat_signyo.id
  where master_join_bkswhn.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_ewkegi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qopynf.*) as monitoring
  from master_join master_join_tygjia
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qopynf on master_join_tygjia.target_id = navaids_points_navaidequipmentmonitoring_lat_qopynf.id
  where master_join_tygjia.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_yllbhz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gyusax.*) as availability
  from master_join master_join_qscsbl
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_gyusax on master_join_qscsbl.target_id = navaids_points_navaidoperationalstatus_lat_gyusax.id
  where master_join_qscsbl.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_pxnarz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwsqsm.*) AS annotation
  from master_join master_join_dwmsqe
  join notes.note_view notes_note_lat_qwsqsm on master_join_dwmsqe.target_id = notes_note_lat_qwsqsm.id
  where master_join_dwmsqe.source_id = navaids_points.sdf_ts.id
) as notes_note_view_efhfhj on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.seaplanelandingarea.id::integer as f_id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_oesjmm.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_oesjmm.elevation AS extent_elevation,
    geometry_elevatedsurface_view_oesjmm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_oesjmm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_oesjmm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_oesjmm.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_ictrvm.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_vdollg.docksite::jsonb as docksite,
    notes_note_view_dpbzjh.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_rkipac.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oesjmm on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_oesjmm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_ohvarq.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_ohvarq.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_ohvarq.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_ohvarq.href
  )) as rampsite  from master_join master_join_ylsfwl
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_ohvarq on master_join_ylsfwl.target_id = airport_heliport_seaplanerampsite_lat_ohvarq.id
  where master_join_ylsfwl.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_ictrvm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_ljjzqy.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_ljjzqy.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_ljjzqy.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_ljjzqy.href
  )) as docksite  from master_join master_join_ukwilc
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_ljjzqy on master_join_ukwilc.target_id = airport_heliport_floatingdocksite_lat_ljjzqy.id
  where master_join_ukwilc.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_vdollg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_clhnmm.*) AS annotation
  from master_join master_join_xpkftm
  join notes.note_view notes_note_lat_clhnmm on master_join_xpkftm.target_id = notes_note_lat_clhnmm.id
  where master_join_xpkftm.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_dpbzjh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ylmhum.*) as availability
  from master_join master_join_qbhehe
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ylmhum on master_join_qbhehe.target_id = airport_heliport_manoeuvringareaavailability_lat_ylmhum.id
  where master_join_qbhehe.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_rkipac on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.seaplanerampsite.id::integer as f_id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_ocbbdr.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ocbbdr.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ocbbdr.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ocbbdr.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ocbbdr.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ocbbdr.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_atqnax.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_atqnax.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_atqnax.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_atqnax.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_atqnax.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_atqnax.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_xhqado.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ocbbdr on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_ocbbdr.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_atqnax on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_atqnax.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pdoqcg.*) AS annotation
  from master_join master_join_yyicss
  join notes.note_view notes_note_lat_pdoqcg on master_join_yyicss.target_id = notes_note_lat_pdoqcg.id
  where master_join_yyicss.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_xhqado on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'routes.routeportion_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.searchrescueservice.id::integer as f_id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_fiidkh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fiidkh.longitude AS location_longitude,
    geometry_elevatedpoint_view_fiidkh.latitude AS location_latitude,
    geometry_elevatedpoint_view_fiidkh.elevation AS location_elevation,
    geometry_elevatedpoint_view_fiidkh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fiidkh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fiidkh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fiidkh.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_taxsjl.title as varchar), '(' || organisation_unit_pt_taxsjl.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_taxsjl.href::text AS serviceprovider_href,
    service_callsigndetail_view_jvdymt.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_dtkakz.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rshlvt.availability::jsonb as availability,
    notes_note_view_vhtdrw.annotation::jsonb as annotation,
    airspace_airspace_pt_rpvadq.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_ujpiql.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fiidkh on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_fiidkh.id
left join organisation.unit_pt organisation_unit_pt_taxsjl on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_taxsjl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_eptbsv.*) as callsign
  from master_join master_join_swsuea
  join service.callsigndetail_view service_callsigndetail_lat_eptbsv on master_join_swsuea.target_id = service_callsigndetail_lat_eptbsv.id
  where master_join_swsuea.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_jvdymt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_yzjehx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_yzjehx.title AS varchar), '(' || service_radiocommunicationchannel_lat_yzjehx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_yzjehx.href
  )) as radiocommunication  from master_join master_join_acugex
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_yzjehx on master_join_acugex.target_id = service_radiocommunicationchannel_lat_yzjehx.id
  where master_join_acugex.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_dtkakz on TRUE
left join lateral(
  select
  from master_join master_join_wpssdp
  join shared.contactinformation_view shared_contactinformation_lat_sbjjed on master_join_wpssdp.target_id = shared_contactinformation_lat_sbjjed.id
  where master_join_wpssdp.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_szogmm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_dlfryt.*) as availability
  from master_join master_join_czlvwv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_dlfryt on master_join_czlvwv.target_id = service_serviceoperationalstatus_lat_dlfryt.id
  where master_join_czlvwv.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_rshlvt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ftwnqn.*) AS annotation
  from master_join master_join_wuuyjw
  join notes.note_view notes_note_lat_ftwnqn on master_join_wuuyjw.target_id = notes_note_lat_ftwnqn.id
  where master_join_wuuyjw.source_id = service.searchrescueservice_ts.id
) as notes_note_view_vhtdrw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ykujly.id,
      'title', coalesce(cast(airspace_airspace_lat_ykujly.title AS varchar), '(' || airspace_airspace_lat_ykujly.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ykujly.href
  )) as clientairspace  from master_join master_join_zoiesz
  join airspace.airspace_pt airspace_airspace_lat_ykujly on master_join_zoiesz.target_id = airspace_airspace_lat_ykujly.id
  where master_join_zoiesz.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_rpvadq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_mpiigf.*) as clientroute
  from master_join master_join_tplcha
  join routes.routeportion_view routes_routeportion_lat_mpiigf on master_join_tplcha.target_id = routes_routeportion_lat_mpiigf.id
  where master_join_tplcha.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_ujpiql on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.secondarysurveillanceradar.id::integer as f_id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_guhouv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_guhouv.longitude AS location_longitude,
    geometry_elevatedpoint_view_guhouv.latitude AS location_latitude,
    geometry_elevatedpoint_view_guhouv.elevation AS location_elevation,
    geometry_elevatedpoint_view_guhouv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_guhouv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_guhouv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_guhouv.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_eynnrp.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_asldzg.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_guhouv on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_guhouv.id
left join lateral(
  select
  from master_join master_join_yrvjin
  join shared.contactinformation_view shared_contactinformation_lat_rszmtq on master_join_yrvjin.target_id = shared_contactinformation_lat_rszmtq.id
  where master_join_yrvjin.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_swhaxl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wmzusb.*) AS annotation
  from master_join master_join_agunuv
  join notes.note_view notes_note_lat_wmzusb on master_join_agunuv.target_id = notes_note_lat_wmzusb.id
  where master_join_agunuv.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_eynnrp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_xcmmrp.*) as groundstation
  from master_join master_join_nsizwz
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_xcmmrp on master_join_nsizwz.target_id = surveillance_surveillancegroundstation_lat_xcmmrp.id
  where master_join_nsizwz.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_asldzg on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.significantpointinairspace.id::integer as f_id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_aqegeb.title as varchar), '(' || airspace_airspace_pt_aqegeb.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_aqegeb.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_dsytfd.title as varchar), '(' || navaids_points_designatedpoint_pt_dsytfd.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dsytfd.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lwvhuc.title as varchar), '(' || navaids_points_navaid_pt_lwvhuc.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_lwvhuc.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kcouah.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kcouah.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_kcouah.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bwybec.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bwybec.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bwybec.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_huoupp.title as varchar), '(' || airport_heliport_airportheliport_pt_huoupp.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_huoupp.href::text AS locationairportreferencepoint_href,
    geometry_point_view_gnnbwm.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_gnnbwm.longitude AS locationposition_longitude,
    geometry_point_view_gnnbwm.latitude AS locationposition_latitude,
    geometry_point_view_gnnbwm.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_qoaaia.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_aqegeb on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_aqegeb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dsytfd on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dsytfd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lwvhuc on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_lwvhuc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kcouah on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kcouah.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bwybec on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bwybec.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_huoupp on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_huoupp.id
left join geometry.point_view geometry_point_view_gnnbwm on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_gnnbwm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbjujp.*) AS annotation
  from master_join master_join_nxmlsv
  join notes.note_view notes_note_lat_dbjujp on master_join_nxmlsv.target_id = notes_note_lat_dbjujp.id
  where master_join_nxmlsv.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_qoaaia on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.specialdate.id::integer as f_id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation_organisationauthority_pt_friezf.title as varchar), '(' || organisation_organisationauthority_pt_friezf.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_friezf.href::text AS authority_href,
    notes_note_view_bbpobx.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_friezf on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_friezf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rmidtr.*) AS annotation
  from master_join master_join_skykvl
  join notes.note_view notes_note_lat_rmidtr on master_join_skykvl.target_id = notes_note_lat_rmidtr.id
  where master_join_skykvl.source_id = shared.specialdate_ts.id
) as notes_note_view_bbpobx on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['navaids_points.authorityforspecialnavigationstation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.specialnavigationstation.id::integer as f_id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_oilnfo.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_oilnfo.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_oilnfo.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_jkjnfq.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_gflicw.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_gflicw.longitude AS position_longitude,
    geometry_elevatedpoint_view_gflicw.latitude AS position_latitude,
    geometry_elevatedpoint_view_gflicw.elevation AS position_elevation,
    geometry_elevatedpoint_view_gflicw.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_gflicw.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_gflicw.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_gflicw.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_axcpox.availability::jsonb as availability,
    notes_note_view_effwnb.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_oilnfo on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_oilnfo.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_jkjnfq on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_jkjnfq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gflicw on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_gflicw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_dwafav.*) as availability
  from master_join master_join_jouexo
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_dwafav on master_join_jouexo.target_id = navaids_points_specialnavigationstationstatus_lat_dwafav.id
  where master_join_jouexo.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_axcpox on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dtwyej.*) AS annotation
  from master_join master_join_klagcy
  join notes.note_view notes_note_lat_dtwyej on master_join_klagcy.target_id = notes_note_lat_dtwyej.id
  where master_join_klagcy.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_effwnb on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.specialnavigationsystem.id::integer as f_id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_sbxkho.*)::jsonb AS responsibleorganisation,
    notes_note_view_ychjlc.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_sbxkho on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_sbxkho.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsrvcc.*) AS annotation
  from master_join master_join_yccetw
  join notes.note_view notes_note_lat_bsrvcc on master_join_yccetw.target_id = notes_note_lat_bsrvcc.id
  where master_join_yccetw.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_ychjlc on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.standardinstrumentarrival.id::integer as f_id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_mtxosi.title as varchar), '(' || navaids_points_navaid_pt_mtxosi.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_mtxosi.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ibflmv.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ibflmv.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ibflmv.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_tprqsb.title as varchar), '(' || surveillance_radarsystem_pt_tprqsb.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_tprqsb.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_tdbujz.title as varchar), '(' || procedure_safealtitudearea_pt_tdbujz.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_tdbujz.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_jflygy.*)::jsonb AS arrival,
    procedure_procedureavailability_view_vjykts.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_tdtlwr.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_wkwisx.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_djazwc.flighttransition::jsonb as flighttransition,
    notes_note_view_pcurot.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mtxosi on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_mtxosi.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ibflmv on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ibflmv.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_tprqsb on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_tprqsb.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_tdbujz on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_tdbujz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_jflygy on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_jflygy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_hgswsd.*) as availability
  from master_join master_join_yolron
  join procedure.procedureavailability_view procedure_procedureavailability_lat_hgswsd on master_join_yolron.target_id = procedure_procedureavailability_lat_hgswsd.id
  where master_join_yolron.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_vjykts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_tezszr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_tezszr.title AS varchar), '(' || airport_heliport_airportheliport_lat_tezszr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_tezszr.href
  )) as airportheliport  from master_join master_join_eiobye
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_tezszr on master_join_eiobye.target_id = airport_heliport_airportheliport_lat_tezszr.id
  where master_join_eiobye.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_tdtlwr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_nuinwn.*) as aircraftcharacteristic
  from master_join master_join_grlkcz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_nuinwn on master_join_grlkcz.target_id = shared_aircraftcharacteristic_lat_nuinwn.id
  where master_join_grlkcz.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_wkwisx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_nupiwn.*) as flighttransition
  from master_join master_join_wwklms
  join procedure.proceduretransition_view procedure_proceduretransition_lat_nupiwn on master_join_wwklms.target_id = procedure_proceduretransition_lat_nupiwn.id
  where master_join_wwklms.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_djazwc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dvzobp.*) AS annotation
  from master_join master_join_iyeszu
  join notes.note_view notes_note_lat_dvzobp on master_join_iyeszu.target_id = notes_note_lat_dvzobp.id
  where master_join_iyeszu.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_pcurot on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.standardinstrumentdeparture.id::integer as f_id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_ofoiud.title as varchar), '(' || navaids_points_navaid_pt_ofoiud.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ofoiud.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_rtpzcq.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_rtpzcq.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_rtpzcq.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_bfobtl.title as varchar), '(' || surveillance_radarsystem_pt_bfobtl.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_bfobtl.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_kdeoos.title as varchar), '(' || procedure_safealtitudearea_pt_kdeoos.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_kdeoos.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_iqvtig.*)::jsonb AS takeoff,
    procedure_procedureavailability_view_aerfxf.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_tgvzzc.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_xwbmpd.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_jlqwgb.flighttransition::jsonb as flighttransition,
    notes_note_view_vxsoqg.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ofoiud on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ofoiud.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_rtpzcq on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_rtpzcq.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_bfobtl on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_bfobtl.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_kdeoos on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_kdeoos.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_iqvtig on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_iqvtig.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_tvwykc.*) as availability
  from master_join master_join_hidzcs
  join procedure.procedureavailability_view procedure_procedureavailability_lat_tvwykc on master_join_hidzcs.target_id = procedure_procedureavailability_lat_tvwykc.id
  where master_join_hidzcs.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_aerfxf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ymjuen.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ymjuen.title AS varchar), '(' || airport_heliport_airportheliport_lat_ymjuen.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ymjuen.href
  )) as airportheliport  from master_join master_join_ujxmck
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ymjuen on master_join_ujxmck.target_id = airport_heliport_airportheliport_lat_ymjuen.id
  where master_join_ujxmck.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_tgvzzc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xoauvi.*) as aircraftcharacteristic
  from master_join master_join_kdgvph
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xoauvi on master_join_kdgvph.target_id = shared_aircraftcharacteristic_lat_xoauvi.id
  where master_join_kdgvph.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_xwbmpd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_kfzntl.*) as flighttransition
  from master_join master_join_ccqzgi
  join procedure.proceduretransition_view procedure_proceduretransition_lat_kfzntl on master_join_ccqzgi.target_id = procedure_proceduretransition_lat_kfzntl.id
  where master_join_ccqzgi.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_jlqwgb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ozudqr.*) AS annotation
  from master_join master_join_erjftx
  join notes.note_view notes_note_lat_ozudqr on master_join_erjftx.target_id = notes_note_lat_ozudqr.id
  where master_join_erjftx.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_vxsoqg on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardlevelcolumn.id::integer as f_id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_fnmkak.title as varchar), '(' || shared_standardleveltable_pt_fnmkak.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_fnmkak.href::text AS leveltable_href,
    shared_standardlevel_view_ffyear.level::jsonb as level,
    notes_note_view_brdjcq.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_fnmkak on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_fnmkak.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_mylqpt.*) as level
  from master_join master_join_pbdujt
  join shared.standardlevel_view shared_standardlevel_lat_mylqpt on master_join_pbdujt.target_id = shared_standardlevel_lat_mylqpt.id
  where master_join_pbdujt.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_ffyear on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ebbzvk.*) AS annotation
  from master_join master_join_jgymxn
  join notes.note_view notes_note_lat_ebbzvk on master_join_jgymxn.target_id = notes_note_lat_ebbzvk.id
  where master_join_jgymxn.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_brdjcq on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardlevelsector.id::integer as f_id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_gpumua.title as varchar), '(' || shared_standardlevelcolumn_pt_gpumua.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_gpumua.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_yofoai.applicableairspace::jsonb as applicableairspace,
    notes_note_view_epevth.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_gpumua on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_gpumua.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_wcpamr.id,
      'title', coalesce(cast(airspace_airspace_lat_wcpamr.title AS varchar), '(' || airspace_airspace_lat_wcpamr.nilreason[1] || ')'),
      'href', airspace_airspace_lat_wcpamr.href
  )) as applicableairspace  from master_join master_join_ifodir
  join airspace.airspace_pt airspace_airspace_lat_wcpamr on master_join_ifodir.target_id = airspace_airspace_lat_wcpamr.id
  where master_join_ifodir.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_yofoai on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_duwhtp.*) AS annotation
  from master_join master_join_yujsdo
  join notes.note_view notes_note_lat_duwhtp on master_join_yujsdo.target_id = notes_note_lat_duwhtp.id
  where master_join_yujsdo.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_epevth on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardleveltable.id::integer as f_id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_wrpcqw.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wqydjy.*) AS annotation
  from master_join master_join_rpyeam
  join notes.note_view notes_note_lat_wqydjy on master_join_rpyeam.target_id = notes_note_lat_wqydjy.id
  where master_join_rpyeam.source_id = shared.standardleveltable_ts.id
) as notes_note_view_wrpcqw on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.standmarking.id::integer as f_id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_pposwp.title as varchar), '(' || airport_heliport_aircraftstand_pt_pposwp.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_pposwp.href::text AS markedstand_href,
    airport_heliport_markingelement_view_uvjpjk.element::jsonb as element,
    notes_note_view_nntvfj.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_pposwp on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_pposwp.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_cdrloe.*) as element
  from master_join master_join_oveecw
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_cdrloe on master_join_oveecw.target_id = airport_heliport_markingelement_lat_cdrloe.id
  where master_join_oveecw.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_uvjpjk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zypzet.*) AS annotation
  from master_join master_join_jpbgxl
  join notes.note_view notes_note_lat_zypzet on master_join_jpbgxl.target_id = notes_note_lat_zypzet.id
  where master_join_jpbgxl.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_nntvfj on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.surveycontrolpoint.id::integer as f_id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_vqxpvh.title as varchar), '(' || airport_heliport_airportheliport_pt_vqxpvh.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_vqxpvh.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_cqimlx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cqimlx.longitude AS location_longitude,
    geometry_elevatedpoint_view_cqimlx.latitude AS location_latitude,
    geometry_elevatedpoint_view_cqimlx.elevation AS location_elevation,
    geometry_elevatedpoint_view_cqimlx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cqimlx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cqimlx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cqimlx.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ykgxxj.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vqxpvh on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_vqxpvh.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cqimlx on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_cqimlx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ssluer.*) AS annotation
  from master_join master_join_vkukyy
  join notes.note_view notes_note_lat_ssluer on master_join_vkukyy.target_id = notes_note_lat_ssluer.id
  where master_join_vkukyy.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_ykgxxj on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.tacan.id::integer as f_id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_caxinm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_caxinm.longitude AS location_longitude,
    geometry_elevatedpoint_view_caxinm.latitude AS location_latitude,
    geometry_elevatedpoint_view_caxinm.elevation AS location_elevation,
    geometry_elevatedpoint_view_caxinm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_caxinm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_caxinm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_caxinm.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_vavztl.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_xsjwmd.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_tynnhv.availability::jsonb as availability,
    notes_note_view_igkrlh.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_caxinm on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_caxinm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ssjtkg.*) as authority
  from master_join master_join_pixpwn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ssjtkg on master_join_pixpwn.target_id = navaids_points_authorityfornavaidequipment_lat_ssjtkg.id
  where master_join_pixpwn.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_vavztl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kvwfmb.*) as monitoring
  from master_join master_join_qixfgg
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kvwfmb on master_join_qixfgg.target_id = navaids_points_navaidequipmentmonitoring_lat_kvwfmb.id
  where master_join_qixfgg.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xsjwmd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_inkoqe.*) as availability
  from master_join master_join_qajvjy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_inkoqe on master_join_qajvjy.target_id = navaids_points_navaidoperationalstatus_lat_inkoqe.id
  where master_join_qajvjy.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_tynnhv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wyhaik.*) AS annotation
  from master_join master_join_nthqld
  join notes.note_view notes_note_lat_wyhaik on master_join_nthqld.target_id = notes_note_lat_wyhaik.id
  where master_join_nthqld.source_id = navaids_points.tacan_ts.id
) as notes_note_view_igkrlh on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as f_id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_mrkhvj.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_mrkhvj.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_mrkhvj.href::text AS taxiholding_href,
    shared_lightelement_view_szvkwy.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qltqgc.availability::jsonb as availability,
    notes_note_view_kbgixb.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_mrkhvj on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_mrkhvj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lmmtai.*) as element
  from master_join master_join_qbrhjl
  join shared.lightelement_view shared_lightelement_lat_lmmtai on master_join_qbrhjl.target_id = shared_lightelement_lat_lmmtai.id
  where master_join_qbrhjl.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_szvkwy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_psoaxg.*) as availability
  from master_join master_join_rwcvof
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_psoaxg on master_join_rwcvof.target_id = airport_heliport_groundlightingavailability_lat_psoaxg.id
  where master_join_rwcvof.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qltqgc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pxcjaz.*) AS annotation
  from master_join master_join_qalxfv
  join notes.note_view notes_note_lat_pxcjaz on master_join_qalxfv.target_id = notes_note_lat_pxcjaz.id
  where master_join_qalxfv.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_kbgixb on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingpositionmarking.id::integer as f_id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_hamtly.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_hamtly.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_hamtly.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_acmkvn.element::jsonb as element,
    notes_note_view_bpvipy.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_hamtly on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_hamtly.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_yguegy.*) as element
  from master_join master_join_dvawcb
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_yguegy on master_join_dvawcb.target_id = airport_heliport_markingelement_lat_yguegy.id
  where master_join_dvawcb.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_acmkvn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ywnhhi.*) AS annotation
  from master_join master_join_wxyqbw
  join notes.note_view notes_note_lat_ywnhhi on master_join_wxyqbw.target_id = notes_note_lat_ywnhhi.id
  where master_join_wxyqbw.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_bpvipy on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingposition.id::integer as f_id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_jyofci.title as varchar), '(' || airport_heliport_guidanceline_pt_jyofci.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_jyofci.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_lqzfmz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lqzfmz.longitude AS location_longitude,
    geometry_elevatedpoint_view_lqzfmz.latitude AS location_latitude,
    geometry_elevatedpoint_view_lqzfmz.elevation AS location_elevation,
    geometry_elevatedpoint_view_lqzfmz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lqzfmz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lqzfmz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lqzfmz.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_jezrfw.protectedrunway::jsonb as protectedrunway,
    notes_note_view_fqvtif.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jyofci on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_jyofci.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lqzfmz on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_lqzfmz.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_wppkyf.id,
      'title', coalesce(cast(airport_heliport_runway_lat_wppkyf.title AS varchar), '(' || airport_heliport_runway_lat_wppkyf.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_wppkyf.href
  )) as protectedrunway  from master_join master_join_pmnnoc
  join airport_heliport.runway_pt airport_heliport_runway_lat_wppkyf on master_join_pmnnoc.target_id = airport_heliport_runway_lat_wppkyf.id
  where master_join_pmnnoc.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_jezrfw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qvsvoc.*) AS annotation
  from master_join master_join_ojekog
  join notes.note_view notes_note_lat_qvsvoc on master_join_ojekog.target_id = notes_note_lat_qvsvoc.id
  where master_join_ojekog.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_fqvtif on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwayelement.id::integer as f_id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_smbmes.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_zqmyyn.title as varchar), '(' || airport_heliport_taxiway_pt_zqmyyn.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_zqmyyn.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_qmhrbw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_qmhrbw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qmhrbw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qmhrbw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qmhrbw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qmhrbw.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_yxizsn.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_titdbm.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_smbmes on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_smbmes.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_zqmyyn on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_zqmyyn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qmhrbw on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_qmhrbw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mxmlbo.*) AS annotation
  from master_join master_join_tktqxg
  join notes.note_view notes_note_lat_mxmlbo on master_join_tktqxg.target_id = notes_note_lat_mxmlbo.id
  where master_join_tktqxg.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_yxizsn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ihhqvh.*) as availability
  from master_join master_join_kukseu
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ihhqvh on master_join_kukseu.target_id = airport_heliport_manoeuvringareaavailability_lat_ihhqvh.id
  where master_join_kukseu.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_titdbm on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwaylightsystem.id::integer as f_id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_hjlkhz.title as varchar), '(' || airport_heliport_taxiway_pt_hjlkhz.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_hjlkhz.href::text AS lightedtaxiway_href,
    shared_lightelement_view_cjtgbf.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_dshtpv.availability::jsonb as availability,
    notes_note_view_jqwihz.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_hjlkhz on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_hjlkhz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ttvnio.*) as element
  from master_join master_join_ftnzei
  join shared.lightelement_view shared_lightelement_lat_ttvnio on master_join_ftnzei.target_id = shared_lightelement_lat_ttvnio.id
  where master_join_ftnzei.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_cjtgbf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_kdysvm.*) as availability
  from master_join master_join_sndfko
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_kdysvm on master_join_sndfko.target_id = airport_heliport_groundlightingavailability_lat_kdysvm.id
  where master_join_sndfko.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_dshtpv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ehatuz.*) AS annotation
  from master_join master_join_dtrluq
  join notes.note_view notes_note_lat_ehatuz on master_join_dtrluq.target_id = notes_note_lat_ehatuz.id
  where master_join_dtrluq.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_jqwihz on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwaymarking.id::integer as f_id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_olhfiv.title as varchar), '(' || airport_heliport_taxiway_pt_olhfiv.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_olhfiv.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_lkqdgt.title as varchar), '(' || airport_heliport_taxiwayelement_pt_lkqdgt.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_lkqdgt.href::text AS markedelement_href,
    airport_heliport_markingelement_view_rynmtw.element::jsonb as element,
    notes_note_view_wolhww.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_olhfiv on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_olhfiv.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_lkqdgt on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_lkqdgt.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_oluglo.*) as element
  from master_join master_join_lxczkt
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_oluglo on master_join_lxczkt.target_id = airport_heliport_markingelement_lat_oluglo.id
  where master_join_lxczkt.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_rynmtw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wsrdak.*) AS annotation
  from master_join master_join_hnyqmg
  join notes.note_view notes_note_lat_wsrdak on master_join_hnyqmg.target_id = notes_note_lat_wsrdak.id
  where master_join_hnyqmg.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_wolhww on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.taxiwaycontamination_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiway.id::integer as f_id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kuuxtw.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_kfenaj.title as varchar), '(' || airport_heliport_airportheliport_pt_kfenaj.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_kfenaj.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_eymjki.contaminant::jsonb as contaminant,
    notes_note_view_reilyc.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_cfycpm.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kuuxtw on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kuuxtw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kfenaj on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_kfenaj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_enpnnz.*) as contaminant
  from master_join master_join_wdaopm
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_enpnnz on master_join_wdaopm.target_id = airport_heliport_taxiwaycontamination_lat_enpnnz.id
  where master_join_wdaopm.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_eymjki on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jxfmzi.*) AS annotation
  from master_join master_join_rafzfy
  join notes.note_view notes_note_lat_jxfmzi on master_join_rafzfy.target_id = notes_note_lat_jxfmzi.id
  where master_join_rafzfy.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_reilyc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ahuige.*) as availability
  from master_join master_join_xeuicf
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ahuige on master_join_xeuicf.target_id = airport_heliport_manoeuvringareaavailability_lat_ahuige.id
  where master_join_xeuicf.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_cfycpm on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.point_view', 'geometry.surface_view', 'notes.note_view', 'procedure.terminalarrivalareasector_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.terminalarrivalarea.id::integer as f_id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_ggldba.title as varchar), '(' || navaids_points_designatedpoint_pt_ggldba.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ggldba.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bzswpu.title as varchar), '(' || navaids_points_designatedpoint_pt_bzswpu.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_bzswpu.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_huskli.title as varchar), '(' || navaids_points_navaid_pt_huskli.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_huskli.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_bmcbhn.title as varchar), '(' || navaids_points_navaid_pt_bmcbhn.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_bmcbhn.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_luviyu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_luviyu.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_luviyu.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_skwbhs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_skwbhs.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_skwbhs.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_omgpcg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_omgpcg.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_omgpcg.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wptcrx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wptcrx.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wptcrx.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ysbint.title as varchar), '(' || airport_heliport_airportheliport_pt_ysbint.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_ysbint.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zmztlm.title as varchar), '(' || airport_heliport_airportheliport_pt_zmztlm.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_zmztlm.href::text AS iafairportreferencepoint_href,
    geometry_point_view_jnmspj.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_jnmspj.longitude AS ifposition_longitude,
    geometry_point_view_jnmspj.latitude AS ifposition_latitude,
    geometry_point_view_jnmspj.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_uosgdt.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_uosgdt.longitude AS iafposition_longitude,
    geometry_point_view_uosgdt.latitude AS iafposition_latitude,
    geometry_point_view_uosgdt.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_jglnvs.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_jglnvs.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_znsvvu.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_znsvvu.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_znsvvu.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_xfgfkv.sector::jsonb as sector,
    notes_note_view_jhtfcm.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ggldba on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ggldba.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_huskli on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_huskli.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_luviyu on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_luviyu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_omgpcg on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_omgpcg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ysbint on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_ysbint.id
left join geometry.point_view geometry_point_view_jnmspj on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_jnmspj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bzswpu on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bzswpu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bmcbhn on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_bmcbhn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_skwbhs on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_skwbhs.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wptcrx on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wptcrx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zmztlm on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_zmztlm.id
left join geometry.point_view geometry_point_view_uosgdt on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_uosgdt.id
left join geometry.surface_view geometry_surface_view_jglnvs on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_jglnvs.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_znsvvu on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_znsvvu.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_bvahfq.*) as sector
  from master_join master_join_rwhbdp
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_bvahfq on master_join_rwhbdp.target_id = procedure_terminalarrivalareasector_lat_bvahfq.id
  where master_join_rwhbdp.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_xfgfkv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lemwxx.*) AS annotation
  from master_join master_join_xbizrv
  join notes.note_view notes_note_lat_lemwxx on master_join_xbizrv.target_id = notes_note_lat_lemwxx.id
  where master_join_xbizrv.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_jhtfcm on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftofflightsystem.id::integer as f_id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pptqto.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pptqto.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_pptqto.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_njqxvx.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_cjsfsh.availability::jsonb as availability,
    notes_note_view_ecqdvi.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pptqto on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_pptqto.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_izzxbv.*) as element
  from master_join master_join_pbrvhe
  join shared.lightelement_view shared_lightelement_lat_izzxbv on master_join_pbrvhe.target_id = shared_lightelement_lat_izzxbv.id
  where master_join_pbrvhe.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_njqxvx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qrtaia.*) as availability
  from master_join master_join_wnyfgq
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qrtaia on master_join_wnyfgq.target_id = airport_heliport_groundlightingavailability_lat_qrtaia.id
  where master_join_wnyfgq.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_cjsfsh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhkpor.*) AS annotation
  from master_join master_join_doairg
  join notes.note_view notes_note_lat_qhkpor on master_join_doairg.target_id = notes_note_lat_qhkpor.id
  where master_join_doairg.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_ecqdvi on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoffmarking.id::integer as f_id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_auzyxk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_auzyxk.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_auzyxk.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_badgfx.element::jsonb as element,
    notes_note_view_kxtfno.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_auzyxk on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_auzyxk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_bypakf.*) as element
  from master_join master_join_cduuch
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_bypakf on master_join_cduuch.target_id = airport_heliport_markingelement_lat_bypakf.id
  where master_join_cduuch.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_badgfx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sfytnv.*) AS annotation
  from master_join master_join_hdmmrj
  join notes.note_view notes_note_lat_sfytnv on master_join_hdmmrj.target_id = notes_note_lat_sfytnv.id
  where master_join_hdmmrj.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_kxtfno on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoffsafearea.id::integer as f_id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mtwleb.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_njbqzj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_njbqzj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_njbqzj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_njbqzj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_njbqzj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_njbqzj.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_udqxpt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_udqxpt.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_udqxpt.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_qbhdkw.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mtwleb on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mtwleb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_njbqzj on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_njbqzj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_udqxpt on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_udqxpt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ozyqcf.*) AS annotation
  from master_join master_join_hawbwa
  join notes.note_view notes_note_lat_ozyqcf on master_join_hawbwa.target_id = notes_note_lat_ozyqcf.id
  where master_join_hawbwa.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_qbhdkw on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.touchdownliftoffcontamination_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoff.id::integer as f_id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_bjyfsv.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_bjyfsv.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_bjyfsv.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_bjyfsv.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_bjyfsv.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_bjyfsv.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_bjyfsv.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_bjyfsv.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_cjobkw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cjobkw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cjobkw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cjobkw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cjobkw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cjobkw.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_tfcabe.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_zqxkng.title as varchar), '(' || airport_heliport_airportheliport_pt_zqxkng.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zqxkng.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_klftew.title as varchar), '(' || airport_heliport_runway_pt_klftew.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_klftew.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_enxuoo.contaminant::jsonb as contaminant,
    notes_note_view_ammhbp.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_iotfud.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bjyfsv on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_bjyfsv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cjobkw on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_cjobkw.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_tfcabe on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_tfcabe.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqxkng on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zqxkng.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_klftew on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_klftew.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_rsxzmm.*) as contaminant
  from master_join master_join_pbhnqy
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_rsxzmm on master_join_pbhnqy.target_id = airport_heliport_touchdownliftoffcontamination_lat_rsxzmm.id
  where master_join_pbhnqy.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_enxuoo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xbiojl.*) AS annotation
  from master_join master_join_txjkco
  join notes.note_view notes_note_lat_xbiojl on master_join_txjkco.target_id = notes_note_lat_xbiojl.id
  where master_join_txjkco.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_ammhbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_cjvrkd.*) as availability
  from master_join master_join_aqfppa
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_cjvrkd on master_join_aqfppa.target_id = airport_heliport_manoeuvringareaavailability_lat_cjvrkd.id
  where master_join_aqfppa.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_iotfud on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['shared.contactinformation_view', 'organisation.unitdependency_view', 'notes.note_view', 'organisation.unitavailability_view', 'geometry.elevatedpoint_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as id,
    organisation.unit.id::integer as f_id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_svvbds.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_svvbds.longitude AS position_longitude,
    geometry_elevatedpoint_view_svvbds.latitude AS position_latitude,
    geometry_elevatedpoint_view_svvbds.elevation AS position_elevation,
    geometry_elevatedpoint_view_svvbds.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_svvbds.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_svvbds.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_svvbds.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_bmpzlo.title as varchar), '(' || airport_heliport_airportheliport_pt_bmpzlo.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_bmpzlo.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_obkxyr.title as varchar), '(' || organisation_organisationauthority_pt_obkxyr.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_obkxyr.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_hlhldb.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_ylzswk.availability::jsonb as availability,
    notes_note_view_fhovkw.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_svvbds on organisation.unit_ts.position_id = geometry_elevatedpoint_view_svvbds.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bmpzlo on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_bmpzlo.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_obkxyr on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_obkxyr.id
left join lateral(
  select
  from master_join master_join_mzvmcw
  join shared.contactinformation_view shared_contactinformation_lat_uhawfa on master_join_mzvmcw.target_id = shared_contactinformation_lat_uhawfa.id
  where master_join_mzvmcw.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_dwfvsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_kcthsu.*) as relatedunit
  from master_join master_join_jhglid
  join organisation.unitdependency_view organisation_unitdependency_lat_kcthsu on master_join_jhglid.target_id = organisation_unitdependency_lat_kcthsu.id
  where master_join_jhglid.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_hlhldb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_unbncp.*) as availability
  from master_join master_join_lginif
  join organisation.unitavailability_view organisation_unitavailability_lat_unbncp on master_join_lginif.target_id = organisation_unitavailability_lat_unbncp.id
  where master_join_lginif.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_ylzswk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bopmrr.*) AS annotation
  from master_join master_join_nfaooj
  join notes.note_view notes_note_lat_bopmrr on master_join_nfaooj.target_id = notes_note_lat_bopmrr.id
  where master_join_nfaooj.source_id = organisation.unit_ts.id
) as notes_note_view_fhovkw on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as id,
    holding.unplannedholding.id::integer as f_id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_rlnerd.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vekurs.*) AS annotation
  from master_join master_join_qbxquw
  join notes.note_view notes_note_lat_vekurs on master_join_qbxquw.target_id = notes_note_lat_vekurs.id
  where master_join_qbxquw.source_id = holding.unplannedholding_ts.id
) as notes_note_view_rlnerd on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurepart_view', 'notes.note_view', 'obstacles.verticalstructurelightingstatus_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as id,
    obstacles.verticalstructure.id::integer as f_id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_ardwpn.title as varchar), '(' || navaids_points_markerbeacon_pt_ardwpn.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_ardwpn.href::text AS marker_href,
    obstacles_verticalstructurepart_view_xssmub.part::jsonb as part,
    service_passengerservice_pt_ysqztn.hostedpassengerservice::jsonb as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_tmptyh.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_wsuytj.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_pihkxo.hostedorganisation::jsonb as hostedorganisation,
    notes_note_view_wtffaj.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_czyamn.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_ardwpn on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_ardwpn.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_huzdis.*) as part
  from master_join master_join_rhqypy
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_huzdis on master_join_rhqypy.target_id = obstacles_verticalstructurepart_lat_huzdis.id
  where master_join_rhqypy.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_xssmub on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_vomava.id,
      'title', coalesce(cast(service_passengerservice_lat_vomava.title AS varchar), '(' || service_passengerservice_lat_vomava.nilreason[1] || ')'),
      'href', service_passengerservice_lat_vomava.href
  )) as hostedpassengerservice  from master_join master_join_hyozba
  join service.passengerservice_pt service_passengerservice_lat_vomava on master_join_hyozba.target_id = service_passengerservice_lat_vomava.id
  where master_join_hyozba.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_ysqztn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_onsnig.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_onsnig.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_onsnig.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_onsnig.href
  )) as hostedspecialnavstation  from master_join master_join_inbkrd
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_onsnig on master_join_inbkrd.target_id = navaids_points_specialnavigationstation_lat_onsnig.id
  where master_join_inbkrd.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_tmptyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_fjmgcv.id,
      'title', coalesce(cast(organisation_unit_lat_fjmgcv.title AS varchar), '(' || organisation_unit_lat_fjmgcv.nilreason[1] || ')'),
      'href', organisation_unit_lat_fjmgcv.href
  )) as hostedunit  from master_join master_join_zowlik
  join organisation.unit_pt organisation_unit_lat_fjmgcv on master_join_zowlik.target_id = organisation_unit_lat_fjmgcv.id
  where master_join_zowlik.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_wsuytj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_axgfec.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_axgfec.title AS varchar), '(' || organisation_organisationauthority_lat_axgfec.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_axgfec.href
  )) as hostedorganisation  from master_join master_join_dgjscl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_axgfec on master_join_dgjscl.target_id = organisation_organisationauthority_lat_axgfec.id
  where master_join_dgjscl.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_pihkxo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ocymqn.*) AS annotation
  from master_join master_join_qclhjw
  join notes.note_view notes_note_lat_ocymqn on master_join_qclhjw.target_id = notes_note_lat_ocymqn.id
  where master_join_qclhjw.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_wtffaj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_szzdum.*) as lightingavailability
  from master_join master_join_vspbmq
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_szzdum on master_join_vspbmq.target_id = obstacles_verticalstructurelightingstatus_lat_szzdum.id
  where master_join_vspbmq.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_czyamn on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.visualglideslopeindicator.id::integer as f_id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_azogef.title as varchar), '(' || airport_heliport_runwaydirection_pt_azogef.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_azogef.href::text AS runwaydirection_href,
    shared_lightelement_view_psxnpj.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_gppoye.availability::jsonb as availability,
    notes_note_view_jbomdn.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_azogef on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_azogef.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_gzejkl.*) as element
  from master_join master_join_ajibhd
  join shared.lightelement_view shared_lightelement_lat_gzejkl on master_join_ajibhd.target_id = shared_lightelement_lat_gzejkl.id
  where master_join_ajibhd.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_psxnpj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_slhnyu.*) as availability
  from master_join master_join_olbuqv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_slhnyu on master_join_olbuqv.target_id = airport_heliport_groundlightingavailability_lat_slhnyu.id
  where master_join_olbuqv.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_gppoye on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldgcfj.*) AS annotation
  from master_join master_join_hywrja
  join notes.note_view notes_note_lat_ldgcfj on master_join_hywrja.target_id = notes_note_lat_ldgcfj.id
  where master_join_hywrja.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_jbomdn on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.vor.id::integer as f_id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_qtgoxe.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qtgoxe.longitude AS location_longitude,
    geometry_elevatedpoint_view_qtgoxe.latitude AS location_latitude,
    geometry_elevatedpoint_view_qtgoxe.elevation AS location_elevation,
    geometry_elevatedpoint_view_qtgoxe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qtgoxe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qtgoxe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qtgoxe.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rvwpqg.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tmdrek.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hjccjb.availability::jsonb as availability,
    notes_note_view_gsrown.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qtgoxe on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_qtgoxe.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_eyqbrg.*) as authority
  from master_join master_join_cyxqle
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_eyqbrg on master_join_cyxqle.target_id = navaids_points_authorityfornavaidequipment_lat_eyqbrg.id
  where master_join_cyxqle.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_rvwpqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vflzdm.*) as monitoring
  from master_join master_join_ppwfml
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vflzdm on master_join_ppwfml.target_id = navaids_points_navaidequipmentmonitoring_lat_vflzdm.id
  where master_join_ppwfml.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tmdrek on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ndtzts.*) as availability
  from master_join master_join_tmvpbo
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ndtzts on master_join_tmvpbo.target_id = navaids_points_navaidoperationalstatus_lat_ndtzts.id
  where master_join_tmvpbo.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_hjccjb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szhxkv.*) AS annotation
  from master_join master_join_pgrsvi
  join notes.note_view notes_note_lat_szhxkv on master_join_pgrsvi.target_id = notes_note_lat_szhxkv.id
  where master_join_pgrsvi.source_id = navaids_points.vor_ts.id
) as notes_note_view_gsrown on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.workareaactivity_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.workarea.id::integer as f_id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_llhvyq.title as varchar), '(' || airport_heliport_airportheliport_pt_llhvyq.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_llhvyq.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_aipkgb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_aipkgb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_aipkgb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_aipkgb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_aipkgb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_aipkgb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_loyemf.activation::jsonb as activation,
    notes_note_view_oozpts.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_llhvyq on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_llhvyq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_aipkgb on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_aipkgb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_srclhf.*) as activation
  from master_join master_join_qzcaib
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_srclhf on master_join_qzcaib.target_id = airport_heliport_workareaactivity_lat_srclhf.id
  where master_join_qzcaib.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_loyemf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ahtiqr.*) AS annotation
  from master_join master_join_meeacx
  join notes.note_view notes_note_lat_ahtiqr on master_join_meeacx.target_id = notes_note_lat_ahtiqr.id
  where master_join_meeacx.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_oozpts on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
