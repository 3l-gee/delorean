-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_wrpdwb.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgwlvg.*) AS annotation
  from master_join master_join_kufwjv
  join notes.note_view notes_note_lat_wgwlvg on master_join_kufwjv.target_id = notes_note_lat_wgwlvg.id
  where master_join_kufwjv.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_wrpdwb on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_liduud.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_qsywga.layer::jsonb as layer,
    notes_note_view_wpihgt.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_uokjea.id) as criticalridge
  from master_join master_join_hctirw
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_uokjea on master_join_hctirw.target_id = airport_heliport_ridge_lat_uokjea.id
  where master_join_hctirw.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_liduud on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_mvxhpe.id) as layer
  from master_join master_join_artasm
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_mvxhpe on master_join_artasm.target_id = airport_heliport_surfacecontaminationlayer_lat_mvxhpe.id
  where master_join_artasm.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_qsywga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cleegi.*) AS annotation
  from master_join master_join_hnjmns
  join notes.note_view notes_note_lat_cleegi on master_join_hnjmns.target_id = notes_note_lat_cleegi.id
  where master_join_hnjmns.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_wpihgt on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_xojkzu.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jrduds.layer::jsonb as layer,
    notes_note_view_mbziay.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_nizxtk.id) as criticalridge
  from master_join master_join_sattfv
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_nizxtk on master_join_sattfv.target_id = airport_heliport_ridge_lat_nizxtk.id
  where master_join_sattfv.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_xojkzu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_kbnqiw.id) as layer
  from master_join master_join_lqklwv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_kbnqiw on master_join_lqklwv.target_id = airport_heliport_surfacecontaminationlayer_lat_kbnqiw.id
  where master_join_lqklwv.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jrduds on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_prpnza.*) AS annotation
  from master_join master_join_nddvgo
  join notes.note_view notes_note_lat_prpnza on master_join_nddvgo.target_id = notes_note_lat_prpnza.id
  where master_join_nddvgo.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_mbziay on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_crgjxd.id)::jsonb AS theairspacevolume,
    notes_note_view_spvnit.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_crgjxd on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_crgjxd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ggidlt.*) AS annotation
  from master_join master_join_ycquyj
  join notes.note_view notes_note_lat_ggidlt on master_join_ycquyj.target_id = notes_note_lat_ggidlt.id
  where master_join_ycquyj.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_spvnit on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_sggknw.title as varchar), '(' || shared_standardlevelcolumn_pt_sggknw.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_sggknw.href::text AS discretelevelseries_href,
    notes_note_view_xqmlac.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_sggknw on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_sggknw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_avvsoi.*) AS annotation
  from master_join master_join_vxwkho
  join notes.note_view notes_note_lat_avvsoi on master_join_vxwkho.target_id = notes_note_lat_avvsoi.id
  where master_join_vxwkho.source_id = shared.airspacelayer.id
) as notes_note_view_xqmlac on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_ggluza.title as varchar), '(' || airspace_airspace_pt_ggluza.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_ggluza.href::text AS theairspace_href,
    notes_note_view_rtiocp.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_ggluza on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_ggluza.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rehnrk.*) AS annotation
  from master_join master_join_cfsjch
  join notes.note_view notes_note_lat_rehnrk on master_join_cfsjch.target_id = notes_note_lat_rehnrk.id
  where master_join_cfsjch.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_rtiocp on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_lsljif.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_krckgl.*) AS annotation
  from master_join master_join_ymxedl
  join notes.note_view notes_note_lat_krckgl on master_join_ymxedl.target_id = notes_note_lat_krckgl.id
  where master_join_ymxedl.source_id = shared.altitudeadjustment.id
) as notes_note_view_lsljif on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_thiaom.title as varchar), '(' || navaids_points_angleindication_pt_thiaom.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_thiaom.href::text AS theangleindication_href,
    notes_note_view_hliszf.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_thiaom on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_thiaom.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_shqncx.*) AS annotation
  from master_join master_join_ubqodf
  join notes.note_view notes_note_lat_shqncx on master_join_ubqodf.target_id = notes_note_lat_shqncx.id
  where master_join_ubqodf.source_id = navaids_points.angleuse.id
) as notes_note_view_hliszf on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_pojsnw.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pypync.*) AS annotation
  from master_join master_join_plzgoq
  join notes.note_view notes_note_lat_pypync on master_join_plzgoq.target_id = notes_note_lat_pypync.id
  where master_join_plzgoq.source_id = procedure.approachaltitudetable.id
) as notes_note_view_pojsnw on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_ujqonm.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_inmcyp.title as varchar), '(' || airport_heliport_altimetersource_pt_inmcyp.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_inmcyp.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_kaajvt.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_hkjbzs.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_pcjfrp.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_iyodmv.designsurface::jsonb as designsurface,
    notes_note_view_uwrkaw.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_ujqonm on procedure.approachcondition.minimumset_id = procedure_minima_pt_ujqonm.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_inmcyp on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_inmcyp.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_nwdewy.id) as circlingrestriction
  from master_join master_join_xxejea
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_nwdewy on master_join_xxejea.target_id = procedure_circlingrestriction_lat_nwdewy.id
  where master_join_xxejea.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_kaajvt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_utiehb.id) as aircraftcategory
  from master_join master_join_eqfqyb
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_utiehb on master_join_eqfqyb.target_id = shared_aircraftcharacteristic_lat_utiehb.id
  where master_join_eqfqyb.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_hkjbzs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_tpxhvs.id) as landingarea
  from master_join master_join_hmqogl
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_tpxhvs on master_join_hmqogl.target_id = procedure_landingtakeoffareacollection_lat_tpxhvs.id
  where master_join_hmqogl.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_pcjfrp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xckxbp.id) as designsurface
  from master_join master_join_axncdg
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_xckxbp on master_join_axncdg.target_id = shared_obstacleassessmentarea_lat_xckxbp.id
  where master_join_axncdg.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_iyodmv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tbayls.*) AS annotation
  from master_join master_join_tvjzoz
  join notes.note_view notes_note_lat_tbayls on master_join_tvjzoz.target_id = notes_note_lat_tbayls.id
  where master_join_tvjzoz.source_id = procedure.approachcondition.id
) as notes_note_view_uwrkaw on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_efdgqn.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjltkk.*) AS annotation
  from master_join master_join_nncktg
  join notes.note_view notes_note_lat_rjltkk on master_join_nncktg.target_id = notes_note_lat_rjltkk.id
  where master_join_nncktg.source_id = procedure.approachdistancetable.id
) as notes_note_view_efdgqn on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_rjlmzo.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pviebq.*) AS annotation
  from master_join master_join_pewgsw
  join notes.note_view notes_note_lat_pviebq on master_join_pewgsw.target_id = notes_note_lat_pviebq.id
  where master_join_pewgsw.source_id = procedure.approachtimingtable.id
) as notes_note_view_rjlmzo on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_dpnuus.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_njchru.layer::jsonb as layer,
    notes_note_view_srkuof.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ckyokn.id) as criticalridge
  from master_join master_join_ckiosz
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ckyokn on master_join_ckiosz.target_id = airport_heliport_ridge_lat_ckyokn.id
  where master_join_ckiosz.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_dpnuus on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_dqepaz.id) as layer
  from master_join master_join_wrjngs
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_dqepaz on master_join_wrjngs.target_id = airport_heliport_surfacecontaminationlayer_lat_dqepaz.id
  where master_join_wrjngs.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_njchru on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_muizea.*) AS annotation
  from master_join master_join_qtuuxr
  join notes.note_view notes_note_lat_muizea on master_join_qtuuxr.target_id = notes_note_lat_muizea.id
  where master_join_qtuuxr.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_srkuof on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_etinhr.title as varchar), '(' || organisation_organisationauthority_pt_etinhr.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_etinhr.href::text AS theorganisationauthority_href,
    notes_note_view_blgodt.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_etinhr on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_etinhr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dcdtzb.*) AS annotation
  from master_join master_join_fcncgv
  join notes.note_view notes_note_lat_dcdtzb on master_join_fcncgv.target_id = notes_note_lat_dcdtzb.id
  where master_join_fcncgv.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_blgodt on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_vgjewc.title as varchar), '(' || organisation_organisationauthority_pt_vgjewc.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_vgjewc.href::text AS theorganisationauthority_href,
    notes_note_view_usmdih.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vgjewc on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_vgjewc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_upvhud.*) AS annotation
  from master_join master_join_qsmxlu
  join notes.note_view notes_note_lat_upvhud on master_join_qsmxlu.target_id = notes_note_lat_upvhud.id
  where master_join_qsmxlu.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_usmdih on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_esztyo.title as varchar), '(' || organisation_organisationauthority_pt_esztyo.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_esztyo.href::text AS theorganisationauthority_href,
    notes_note_view_tuixpv.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_esztyo on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_esztyo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vruqux.*) AS annotation
  from master_join master_join_iynwpj
  join notes.note_view notes_note_lat_vruqux on master_join_iynwpj.target_id = notes_note_lat_vruqux.id
  where master_join_iynwpj.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_tuixpv on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xkdgps.title as varchar), '(' || organisation_organisationauthority_pt_xkdgps.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_xkdgps.href::text AS theorganisationauthority_href,
    notes_note_view_nalnse.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xkdgps on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_xkdgps.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hqenrl.*) AS annotation
  from master_join master_join_tvnooh
  join notes.note_view notes_note_lat_hqenrl on master_join_tvnooh.target_id = notes_note_lat_hqenrl.id
  where master_join_tvnooh.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_nalnse on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_itqgrw.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zfwumq.*) AS annotation
  from master_join master_join_fypkoh
  join notes.note_view notes_note_lat_zfwumq on master_join_fypkoh.target_id = notes_note_lat_zfwumq.id
  where master_join_fypkoh.source_id = service.callsigndetail.id
) as notes_note_view_itqgrw on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_aripkg.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ycrovv.*) AS annotation
  from master_join master_join_hmwqah
  join notes.note_view notes_note_lat_ycrovv on master_join_hmwqah.target_id = notes_note_lat_ycrovv.id
  where master_join_hmwqah.source_id = shared.circlesector.id
) as notes_note_view_aripkg on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_gdheyj.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_snhcjn.*) AS annotation
  from master_join master_join_orlzvw
  join notes.note_view notes_note_lat_snhcjn on master_join_orlzvw.target_id = notes_note_lat_snhcjn.id
  where master_join_orlzvw.source_id = airport_heliport.city.id
) as notes_note_view_gdheyj on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_xrtrdp.id)::jsonb AS enginetype,
    notes_note_view_czmwcj.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_xrtrdp on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_xrtrdp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_idbeev.*) AS annotation
  from master_join master_join_euastm
  join notes.note_view notes_note_lat_idbeev on master_join_euastm.target_id = notes_note_lat_idbeev.id
  where master_join_euastm.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_czmwcj on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_lpfido.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfzccy.*) AS annotation
  from master_join master_join_ntcysl
  join notes.note_view notes_note_lat_tfzccy on master_join_ntcysl.target_id = notes_note_lat_tfzccy.id
  where master_join_ntcysl.source_id = routes.directflightclass.id
) as notes_note_view_lpfido on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_ltnvwp.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tquhcb.*) AS annotation
  from master_join master_join_sxorwk
  join notes.note_view notes_note_lat_tquhcb on master_join_sxorwk.target_id = notes_note_lat_tquhcb.id
  where master_join_sxorwk.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_ltnvwp on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_gdygth.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_qihmvf.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_eloyjb.id) as adjustmentinopcol
  from master_join master_join_fetfsg
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_eloyjb on master_join_fetfsg.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_eloyjb.id
  where master_join_fetfsg.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_gdygth on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ravpsv.*) AS annotation
  from master_join master_join_vbgfar
  join notes.note_view notes_note_lat_ravpsv on master_join_vbgfar.target_id = notes_note_lat_ravpsv.id
  where master_join_vbgfar.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_qihmvf on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_flwvzl.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pgqbde.*) AS annotation
  from master_join master_join_hjjtij
  join notes.note_view notes_note_lat_pgqbde on master_join_hjjtij.target_id = notes_note_lat_pgqbde.id
  where master_join_hjjtij.source_id = public.fasdatablock.id
) as notes_note_view_flwvzl on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_xrstrj.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_btmpgp.distance::jsonb as distance,
    procedure_approachtimingtable_pt_ofkung.timing::jsonb as timing,
    notes_note_view_ojjvuu.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_vmuszl.id) as altitude
  from master_join master_join_bgmqrg
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_vmuszl on master_join_bgmqrg.target_id = procedure_approachaltitudetable_lat_vmuszl.id
  where master_join_bgmqrg.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_xrstrj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_jzzknk.id) as distance
  from master_join master_join_vhnczs
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_jzzknk on master_join_vhnczs.target_id = procedure_approachdistancetable_lat_jzzknk.id
  where master_join_vhnczs.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_btmpgp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_bdszuc.id) as timing
  from master_join master_join_yweqoa
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_bdszuc on master_join_yweqoa.target_id = procedure_approachtimingtable_lat_bdszuc.id
  where master_join_yweqoa.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_ofkung on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvgaeq.*) AS annotation
  from master_join master_join_mhgdpv
  join notes.note_view notes_note_lat_cvgaeq on master_join_mhgdpv.target_id = notes_note_lat_cvgaeq.id
  where master_join_mhgdpv.source_id = procedure.finalprofile.id
) as notes_note_view_ojjvuu on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_bzncff.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rnceru.*) AS annotation
  from master_join master_join_kjmuwx
  join notes.note_view notes_note_lat_rnceru on master_join_kjmuwx.target_id = notes_note_lat_rnceru.id
  where master_join_kjmuwx.source_id = shared.flightcharacteristic.id
) as notes_note_view_bzncff on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_oboefu.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ztjnrv.*) AS annotation
  from master_join master_join_bpfmgo
  join notes.note_view notes_note_lat_ztjnrv on master_join_bpfmgo.target_id = notes_note_lat_ztjnrv.id
  where master_join_bpfmgo.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_oboefu on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_mzycxl.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrlhur.*) AS annotation
  from master_join master_join_ugcdtu
  join notes.note_view notes_note_lat_hrlhur on master_join_ugcdtu.target_id = notes_note_lat_hrlhur.id
  where master_join_ugcdtu.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_mzycxl on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_fczuhu.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kteejr.*) AS annotation
  from master_join master_join_ahufig
  join notes.note_view notes_note_lat_kteejr on master_join_ahufig.target_id = notes_note_lat_kteejr.id
  where master_join_ahufig.source_id = service.fuel.id
) as notes_note_view_fczuhu on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_cxbins.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrijzn.*) AS annotation
  from master_join master_join_dulsjj
  join notes.note_view notes_note_lat_wrijzn on master_join_dulsjj.target_id = notes_note_lat_wrijzn.id
  where master_join_dulsjj.source_id = holding.holdingpatterndistance.id
) as notes_note_view_cxbins on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_bxicfu.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bifoke.*) AS annotation
  from master_join master_join_bfjweq
  join notes.note_view notes_note_lat_bifoke on master_join_bfjweq.target_id = notes_note_lat_bifoke.id
  where master_join_bfjweq.source_id = holding.holdingpatternduration.id
) as notes_note_view_bxicfu on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_tdfaok.title as varchar), '(' || holding_holdingpattern_pt_tdfaok.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_tdfaok.href::text AS theholdingpattern_href,
    notes_note_view_zidnev.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_tdfaok on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_tdfaok.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ewnefo.*) AS annotation
  from master_join master_join_ujavzk
  join notes.note_view notes_note_lat_ewnefo on master_join_ujavzk.target_id = notes_note_lat_ewnefo.id
  where master_join_ujavzk.source_id = procedure.holdinguse.id
) as notes_note_view_zidnev on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_ttrsff.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_xdcaja.tlof::jsonb as tlof,
    notes_note_view_radsqg.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_oojglo.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_oojglo.title AS varchar), '(' || airport_heliport_runwaydirection_lat_oojglo.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_oojglo.href
  )) as runway  from master_join master_join_ueaxij
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_oojglo on master_join_ueaxij.target_id = airport_heliport_runwaydirection_lat_oojglo.id
  where master_join_ueaxij.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_ttrsff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_qpkyvk.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_qpkyvk.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_qpkyvk.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_qpkyvk.href
  )) as tlof  from master_join master_join_maetcg
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_qpkyvk on master_join_maetcg.target_id = airport_heliport_touchdownliftoff_lat_qpkyvk.id
  where master_join_maetcg.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_xdcaja on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_khwgce.*) AS annotation
  from master_join master_join_mmcpta
  join notes.note_view notes_note_lat_khwgce on master_join_mmcpta.target_id = notes_note_lat_khwgce.id
  where master_join_mmcpta.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_radsqg on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_rpkuwc.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qsmxsw.*) AS annotation
  from master_join master_join_rgyipw
  join notes.note_view notes_note_lat_qsmxsw on master_join_rgyipw.target_id = notes_note_lat_qsmxsw.id
  where master_join_rgyipw.source_id = airport_heliport.lightactivation.id
) as notes_note_view_rpkuwc on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_yvljwd.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hklllh.*) AS annotation
  from master_join master_join_ntqmbg
  join notes.note_view notes_note_lat_hklllh on master_join_ntqmbg.target_id = notes_note_lat_hklllh.id
  where master_join_ntqmbg.source_id = shared.meteorology.id
) as notes_note_view_yvljwd on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_rmwkkh.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_lybgqx.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_revkue.id) as adjustmentinop
  from master_join master_join_obewjh
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_revkue on master_join_obewjh.target_id = procedure_equipmentunavailableadjustment_lat_revkue.id
  where master_join_obewjh.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_rmwkkh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yqnhql.*) AS annotation
  from master_join master_join_vntozu
  join notes.note_view notes_note_lat_yqnhql on master_join_vntozu.target_id = notes_note_lat_yqnhql.id
  where master_join_vntozu.source_id = procedure.minima.id
) as notes_note_view_lybgqx on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_ilmiud.altimeter::jsonb as altimeter,
    notes_note_view_whqmcx.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_syuxpp.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_syuxpp.title AS varchar), '(' || airport_heliport_altimetersource_lat_syuxpp.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_syuxpp.href
  )) as altimeter  from master_join master_join_lwqrwe
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_syuxpp on master_join_lwqrwe.target_id = airport_heliport_altimetersource_lat_syuxpp.id
  where master_join_lwqrwe.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_ilmiud on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbljxg.*) AS annotation
  from master_join master_join_hpaprh
  join notes.note_view notes_note_lat_fbljxg on master_join_hpaprh.target_id = notes_note_lat_fbljxg.id
  where master_join_hpaprh.source_id = procedure.missedapproachgroup.id
) as notes_note_view_whqmcx on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    coalesce(cast(navaids_points_navaidequipment_pt_ldcabe.title as varchar), '(' || navaids_points_navaidequipment_pt_ldcabe.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_ldcabe.href::text AS thenavaidequipment_href,
    notes_note_view_wltfgz.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_ldcabe on navaids_points.navaidcomponent.thenavaidequipment_id = navaids_points_navaidequipment_pt_ldcabe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pqlspe.*) AS annotation
  from master_join master_join_tavwan
  join notes.note_view notes_note_lat_pqlspe on master_join_tavwan.target_id = notes_note_lat_pqlspe.id
  where master_join_tavwan.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_wltfgz on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    coalesce(cast(navaids_points_navaidequipment_pt_pjnnmt.title as varchar), '(' || navaids_points_navaidequipment_pt_pjnnmt.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_pjnnmt.href::text AS thenavaidequipment_href,
    notes_note_view_lazhqb.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_pjnnmt on airport_heliport.navaidequipmentdistance.thenavaidequipment_id = navaids_points_navaidequipment_pt_pjnnmt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ceqgab.*) AS annotation
  from master_join master_join_teuweo
  join notes.note_view notes_note_lat_ceqgab on master_join_teuweo.target_id = notes_note_lat_ceqgab.id
  where master_join_teuweo.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_lazhqb on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_ygtmuk.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ljknph.*) AS annotation
  from master_join master_join_jdvpwy
  join notes.note_view notes_note_lat_ljknph on master_join_jdvpwy.target_id = notes_note_lat_ljknph.id
  where master_join_jdvpwy.source_id = service.nitrogen.id
) as notes_note_view_ygtmuk on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_phzqjv.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hzvado.*) AS annotation
  from master_join master_join_teftzc
  join notes.note_view notes_note_lat_hzvado on master_join_teftzc.target_id = notes_note_lat_hzvado.id
  where master_join_teftzc.source_id = shared.obstacleplacement.id
) as notes_note_view_phzqjv on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_yodifq.title as varchar), '(' || obstacles_verticalstructure_pt_yodifq.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_yodifq.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_aoxupb.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_ugevqf.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_nkasfp.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_yodifq on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_yodifq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_vrlwki.id) as adjustment
  from master_join master_join_zvmmhw
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_vrlwki on master_join_zvmmhw.target_id = shared_altitudeadjustment_lat_vrlwki.id
  where master_join_zvmmhw.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_aoxupb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_gdmtor.id) as obstacleplacement
  from master_join master_join_islqgs
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_gdmtor on master_join_islqgs.target_id = shared_obstacleplacement_lat_gdmtor.id
  where master_join_islqgs.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_ugevqf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_icftni.*) AS annotation
  from master_join master_join_kpzhzg
  join notes.note_view notes_note_lat_icftni on master_join_kpzhzg.target_id = notes_note_lat_icftni.id
  where master_join_kpzhzg.source_id = shared.obstruction.id
) as notes_note_view_nkasfp on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_zmnkxs.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zjsoif.*) AS annotation
  from master_join master_join_ckiihk
  join notes.note_view notes_note_lat_zjsoif on master_join_ckiihk.target_id = notes_note_lat_zjsoif.id
  where master_join_ckiihk.source_id = service.oil.id
) as notes_note_view_zmnkxs on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ddubmz.title as varchar), '(' || organisation_organisationauthority_pt_ddubmz.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ddubmz.href::text AS theorganisationauthority_href,
    notes_note_view_lyywmb.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ddubmz on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_ddubmz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbepde.*) AS annotation
  from master_join master_join_dmymcu
  join notes.note_view notes_note_lat_fbepde on master_join_dmymcu.target_id = notes_note_lat_fbepde.id
  where master_join_dmymcu.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_lyywmb on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_pywfhx.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbubpp.*) AS annotation
  from master_join master_join_bxwmkl
  join notes.note_view notes_note_lat_cbubpp on master_join_bxwmkl.target_id = notes_note_lat_cbubpp.id
  where master_join_bxwmkl.source_id = service.oxygen.id
) as notes_note_view_pywfhx on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    coalesce(cast(procedure_segmentleg_pt_xaonml.title as varchar), '(' || procedure_segmentleg_pt_xaonml.nilreason[1] || ')')::text AS thesegmentleg,
    procedure_segmentleg_pt_xaonml.href::text AS thesegmentleg_href,
    notes_note_view_kwocml.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_xaonml on procedure.proceduretransitionleg.thesegmentleg_id = procedure_segmentleg_pt_xaonml.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dkjhgy.*) AS annotation
  from master_join master_join_snfkxu
  join notes.note_view notes_note_lat_dkjhgy on master_join_snfkxu.target_id = notes_note_lat_dkjhgy.id
  where master_join_snfkxu.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_kwocml on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(surveillance_radarequipment_pt_esmqlr.title as varchar), '(' || surveillance_radarequipment_pt_esmqlr.nilreason[1] || ')')::text AS theradarequipment,
    surveillance_radarequipment_pt_esmqlr.href::text AS theradarequipment_href,
    notes_note_view_cegmrm.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join surveillance.radarequipment_pt surveillance_radarequipment_pt_esmqlr on surveillance.radarcomponent.theradarequipment_id = surveillance_radarequipment_pt_esmqlr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjyuly.*) AS annotation
  from master_join master_join_wbjucl
  join notes.note_view notes_note_lat_yjyuly on master_join_wbjucl.target_id = notes_note_lat_yjyuly.id
  where master_join_wbjucl.source_id = surveillance.radarcomponent.id
) as notes_note_view_cegmrm on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_wsvtkn.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oypelv.*) AS annotation
  from master_join master_join_tltxzk
  join notes.note_view notes_note_lat_oypelv on master_join_tltxzk.target_id = notes_note_lat_oypelv.id
  where master_join_tltxzk.source_id = airport_heliport.ridge.id
) as notes_note_view_wsvtkn on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_yxyjpw.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_obutnn.layer::jsonb as layer,
    notes_note_view_kdkdcj.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_tbfjcb.id) as criticalridge
  from master_join master_join_ecctpc
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_tbfjcb on master_join_ecctpc.target_id = airport_heliport_ridge_lat_tbfjcb.id
  where master_join_ecctpc.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_yxyjpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_fwrdxl.id) as layer
  from master_join master_join_fyssdn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_fwrdxl on master_join_fyssdn.target_id = airport_heliport_surfacecontaminationlayer_lat_fwrdxl.id
  where master_join_fyssdn.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_obutnn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ejxqje.*) AS annotation
  from master_join master_join_jicwcd
  join notes.note_view notes_note_lat_ejxqje on master_join_jicwcd.target_id = notes_note_lat_ejxqje.id
  where master_join_jicwcd.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_kdkdcj on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_xuqosg.declaredvalue::jsonb as declaredvalue,
    notes_note_view_bvlvgk.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_jlxpfi.id) as declaredvalue
  from master_join master_join_stncyt
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_jlxpfi on master_join_stncyt.target_id = airport_heliport_runwaydeclareddistancevalue_lat_jlxpfi.id
  where master_join_stncyt.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_xuqosg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xhwfly.*) AS annotation
  from master_join master_join_dluzip
  join notes.note_view notes_note_lat_xhwfly on master_join_dluzip.target_id = notes_note_lat_xhwfly.id
  where master_join_dluzip.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_bvlvgk on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_etronk.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_xojswt.layer::jsonb as layer,
    notes_note_view_iczodk.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_anbucf.id) as criticalridge
  from master_join master_join_eewalm
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_anbucf on master_join_eewalm.target_id = airport_heliport_ridge_lat_anbucf.id
  where master_join_eewalm.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_etronk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_fvqnxi.id) as layer
  from master_join master_join_otavpf
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_fvqnxi on master_join_otavpf.target_id = airport_heliport_surfacecontaminationlayer_lat_fvqnxi.id
  where master_join_otavpf.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_xojswt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hlylsm.*) AS annotation
  from master_join master_join_cnxceg
  join notes.note_view notes_note_lat_hlylsm on master_join_cnxceg.target_id = notes_note_lat_hlylsm.id
  where master_join_cnxceg.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_iczodk on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_fqdhwi.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_juvwlv.*) AS annotation
  from master_join master_join_nrpjda
  join notes.note_view notes_note_lat_juvwlv on master_join_nrpjda.target_id = notes_note_lat_juvwlv.id
  where master_join_nrpjda.source_id = procedure.sectordesign.id
) as notes_note_view_fqdhwi on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_guqgxl.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lufwjz.*) AS annotation
  from master_join master_join_nxvhmg
  join notes.note_view notes_note_lat_lufwjz on master_join_nxvhmg.target_id = notes_note_lat_lufwjz.id
  where master_join_nxvhmg.source_id = shared.standardlevel.id
) as notes_note_view_guqgxl on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_xklycd.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rrhoej.*) AS annotation
  from master_join master_join_yjcifr
  join notes.note_view notes_note_lat_rrhoej on master_join_yjcifr.target_id = notes_note_lat_rrhoej.id
  where master_join_yjcifr.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_xklycd on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_tezhqp.title as varchar), '(' || organisation_unit_pt_tezhqp.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_tezhqp.href::text AS theunit_href,
    notes_note_view_jsrysd.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_tezhqp on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_tezhqp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ruygyl.*) AS annotation
  from master_join master_join_xkvijv
  join notes.note_view notes_note_lat_ruygyl on master_join_xkvijv.target_id = notes_note_lat_ruygyl.id
  where master_join_xkvijv.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_jsrysd on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_msahpw.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_dkiguz.layer::jsonb as layer,
    notes_note_view_zhwolc.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_txfkpx.id) as criticalridge
  from master_join master_join_lfkepz
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_txfkpx on master_join_lfkepz.target_id = airport_heliport_ridge_lat_txfkpx.id
  where master_join_lfkepz.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_msahpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qmrjbf.id) as layer
  from master_join master_join_xkiqga
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qmrjbf on master_join_xkiqga.target_id = airport_heliport_surfacecontaminationlayer_lat_qmrjbf.id
  where master_join_xkiqga.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_dkiguz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cldqew.*) AS annotation
  from master_join master_join_kbyyjg
  join notes.note_view notes_note_lat_cldqew on master_join_kbyyjg.target_id = notes_note_lat_cldqew.id
  where master_join_kbyyjg.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_zhwolc on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_tvuirk.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_yfghbi.layer::jsonb as layer,
    notes_note_view_gyhndc.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_snmoqn.id) as criticalridge
  from master_join master_join_ilcscw
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_snmoqn on master_join_ilcscw.target_id = airport_heliport_ridge_lat_snmoqn.id
  where master_join_ilcscw.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_tvuirk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_eneaea.id) as layer
  from master_join master_join_vbapqv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_eneaea on master_join_vbapqv.target_id = airport_heliport_surfacecontaminationlayer_lat_eneaea.id
  where master_join_vbapqv.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_yfghbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dwjlgf.*) AS annotation
  from master_join master_join_pwxvln
  join notes.note_view notes_note_lat_dwjlgf on master_join_pwxvln.target_id = notes_note_lat_dwjlgf.id
  where master_join_pwxvln.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_gyhndc on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_wbyszw.title as varchar), '(' || organisation_unit_pt_wbyszw.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_wbyszw.href::text AS theunit_href,
    notes_note_view_hlidbv.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_wbyszw on organisation.unitdependency.theunit_id = organisation_unit_pt_wbyszw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nqmltv.*) AS annotation
  from master_join master_join_chjqfs
  join notes.note_view notes_note_lat_nqmltv on master_join_chjqfs.target_id = notes_note_lat_nqmltv.id
  where master_join_chjqfs.source_id = organisation.unitdependency.id
) as notes_note_view_hlidbv on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_fnfoko.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_fnfoko.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_awumeg.point::jsonb as point,
    shared_airspacelayer_pt_pqtjjo.verticalextent::jsonb as verticalextent,
    notes_note_view_spdaht.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_fnfoko on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_fnfoko.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_gxonix.id) as point
  from master_join master_join_kubnkv
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_gxonix on master_join_kubnkv.target_id = aerial_refuelling_aerialrefuellingpoint_lat_gxonix.id
  where master_join_kubnkv.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_awumeg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ztbzlw.id) as verticalextent
  from master_join master_join_gglzhq
  join shared.airspacelayer_pt shared_airspacelayer_lat_ztbzlw on master_join_gglzhq.target_id = shared_airspacelayer_lat_ztbzlw.id
  where master_join_gglzhq.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_pqtjjo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ssvuqt.*) AS annotation
  from master_join master_join_akkati
  join notes.note_view notes_note_lat_ssvuqt on master_join_akkati.target_id = notes_note_lat_ssvuqt.id
  where master_join_akkati.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_spdaht on TRUE;
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_slpoxf.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_twnjdp.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_twnjdp.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_hmlhkp.transitionleg::jsonb as transitionleg,
    notes_note_view_eodfmn.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_slpoxf on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_slpoxf.id
left join geometry.curve_view geometry_curve_view_twnjdp on procedure.proceduretransition.trajectory_id = geometry_curve_view_twnjdp.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_lfkqid.id) as transitionleg
  from master_join master_join_pnepva
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_lfkqid on master_join_pnepva.target_id = procedure_proceduretransitionleg_lat_lfkqid.id
  where master_join_pnepva.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_hmlhkp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vyvywv.*) AS annotation
  from master_join master_join_bfoejp
  join notes.note_view notes_note_lat_vyvywv on master_join_bfoejp.target_id = notes_note_lat_vyvywv.id
  where master_join_bfoejp.source_id = procedure.proceduretransition.id
) as notes_note_view_eodfmn on TRUE;
-- LightElementPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_hnknqn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_hnknqn.longitude AS location_longitude,
    geometry_elevatedpoint_view_hnknqn.latitude AS location_latitude,
    geometry_elevatedpoint_view_hnknqn.elevation AS location_elevation,
    geometry_elevatedpoint_view_hnknqn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hnknqn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hnknqn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hnknqn.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ytfboj.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_vzjobn.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hnknqn on shared.lightelement.location_id = geometry_elevatedpoint_view_hnknqn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ynfwru.*) AS annotation
  from master_join master_join_nqkohy
  join notes.note_view notes_note_lat_ynfwru on master_join_nqkohy.target_id = notes_note_lat_ynfwru.id
  where master_join_nqkohy.source_id = shared.lightelement.id
) as notes_note_view_ytfboj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_yhiavv.id) as availability
  from master_join master_join_drovde
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_yhiavv on master_join_drovde.target_id = shared_lightelementstatus_lat_yhiavv.id
  where master_join_drovde.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_vzjobn on TRUE;
-- ReflectorPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_vpovqj.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_vpovqj.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_vpovqj.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_vpovqj.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_vpovqj.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_vpovqj.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_vpovqj.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_vpovqj.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_fycnsg.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vpovqj on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_vpovqj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wubqkd.*) AS annotation
  from master_join master_join_jvpxkg
  join notes.note_view notes_note_lat_wubqkd on master_join_jvpxkg.target_id = notes_note_lat_wubqkd.id
  where master_join_jvpxkg.source_id = surveillance.reflector.id
) as notes_note_view_fycnsg on TRUE;
-- MarkingElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_yapgcd.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_yapgcd.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_yapgcd.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_yapgcd.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_yapgcd.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_yapgcd.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_nzhkbf.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_nzhkbf.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_nzhkbf.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_nzhkbf.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_nzhkbf.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_nzhkbf.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_mdprgl.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_mdprgl.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_mdprgl.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_mdprgl.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_mdprgl.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_mdprgl.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_mdprgl.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_mdprgl.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_zlypba.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yapgcd on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_yapgcd.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_nzhkbf on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_nzhkbf.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mdprgl on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_mdprgl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hchupn.*) AS annotation
  from master_join master_join_vmwycf
  join notes.note_view notes_note_lat_hchupn on master_join_vmwycf.target_id = notes_note_lat_hchupn.id
  where master_join_vmwycf.source_id = airport_heliport.markingelement.id
) as notes_note_view_zlypba on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_ehtlmz.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_ehtlmz.attr::jsonb  as extent,
    notes_note_view_uokrgv.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_fzflmx.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_fzflmx.id,
      'elevation', geometry_elevatedsurface_lat_fzflmx.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_fzflmx.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_fzflmx.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_fzflmx.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_fzflmx.horizontalAccuracy
    )) AS attr
  from master_join master_join_dluyrg
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_fzflmx on master_join_dluyrg.target_id = geometry_elevatedsurface_lat_fzflmx.id
  where master_join_dluyrg.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_ehtlmz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqymnq.*) AS annotation
  from master_join master_join_exysco
  join notes.note_view notes_note_lat_aqymnq on master_join_exysco.target_id = notes_note_lat_aqymnq.id
  where master_join_exysco.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_uokrgv on TRUE;
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_sgsqny.title as varchar), '(' || navaids_points_designatedpoint_pt_sgsqny.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_sgsqny.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_mezujp.title as varchar), '(' || navaids_points_navaid_pt_mezujp.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_mezujp.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ffsnkn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ffsnkn.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ffsnkn.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_atccdn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_atccdn.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_atccdn.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xqkdps.title as varchar), '(' || airport_heliport_airportheliport_pt_xqkdps.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_xqkdps.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_eqxxlv.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_eqxxlv.longitude AS pointchoiceposition_longitude,
    geometry_point_view_eqxxlv.latitude AS pointchoiceposition_latitude,
    geometry_point_view_eqxxlv.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_lhovjf.title as varchar), '(' || shared_radiofrequencyarea_pt_lhovjf.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_lhovjf.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_yrptgf.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_rwaaro.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_sgsqny on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_sgsqny.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mezujp on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_mezujp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ffsnkn on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ffsnkn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_atccdn on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_atccdn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xqkdps on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xqkdps.id
left join geometry.point_view geometry_point_view_eqxxlv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_eqxxlv.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_lhovjf on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_lhovjf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_vdtqqy.id) as facilitymakeup
  from master_join master_join_igfogx
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_vdtqqy on master_join_igfogx.target_id = navaids_points_pointreference_lat_vdtqqy.id
  where master_join_igfogx.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_yrptgf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_flqrxx.*) AS annotation
  from master_join master_join_ybckgz
  join notes.note_view notes_note_lat_flqrxx on master_join_ybckgz.target_id = notes_note_lat_flqrxx.id
  where master_join_ybckgz.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_rwaaro on TRUE;
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_iaoels.title as varchar), '(' || navaids_points_designatedpoint_pt_iaoels.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_iaoels.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_utmrwq.title as varchar), '(' || navaids_points_designatedpoint_pt_utmrwq.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_utmrwq.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_eyighx.title as varchar), '(' || navaids_points_navaid_pt_eyighx.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_eyighx.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_nmting.title as varchar), '(' || navaids_points_navaid_pt_nmting.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_nmting.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bynime.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bynime.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_bynime.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hrskov.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hrskov.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_hrskov.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fhqnbu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fhqnbu.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fhqnbu.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xjqaoz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xjqaoz.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xjqaoz.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pcqwob.title as varchar), '(' || airport_heliport_airportheliport_pt_pcqwob.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_pcqwob.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gfstwm.title as varchar), '(' || airport_heliport_airportheliport_pt_gfstwm.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_gfstwm.href::text AS startairportreferencepoint_href,
    geometry_point_view_qurjyb.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_qurjyb.longitude AS endposition_longitude,
    geometry_point_view_qurjyb.latitude AS endposition_latitude,
    geometry_point_view_qurjyb.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_usrfaa.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_usrfaa.longitude AS startposition_longitude,
    geometry_point_view_usrfaa.latitude AS startposition_latitude,
    geometry_point_view_usrfaa.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_bbgxmr.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_iaoels on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_iaoels.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eyighx on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_eyighx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bynime on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bynime.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fhqnbu on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fhqnbu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pcqwob on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_pcqwob.id
left join geometry.point_view geometry_point_view_qurjyb on routes.directflightsegment.end_position_id = geometry_point_view_qurjyb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_utmrwq on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_utmrwq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nmting on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_nmting.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hrskov on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hrskov.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xjqaoz on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xjqaoz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gfstwm on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_gfstwm.id
left join geometry.point_view geometry_point_view_usrfaa on routes.directflightsegment.start_position_id = geometry_point_view_usrfaa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jznxuh.*) AS annotation
  from master_join master_join_dltdne
  join notes.note_view notes_note_lat_jznxuh on master_join_dltdne.target_id = notes_note_lat_jznxuh.id
  where master_join_dltdne.source_id = routes.directflightsegment.id
) as notes_note_view_bbgxmr on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_yloqtl.title as varchar), '(' || navaids_points_designatedpoint_pt_yloqtl.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_yloqtl.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jhilyr.title as varchar), '(' || navaids_points_navaid_pt_jhilyr.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jhilyr.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lmasjj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lmasjj.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_lmasjj.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dwekmd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dwekmd.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dwekmd.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zdrzol.title as varchar), '(' || airport_heliport_airportheliport_pt_zdrzol.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zdrzol.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_rpzwhz.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_rpzwhz.longitude AS pointchoiceposition_longitude,
    geometry_point_view_rpzwhz.latitude AS pointchoiceposition_latitude,
    geometry_point_view_rpzwhz.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_vpiprp.title as varchar), '(' || shared_radiofrequencyarea_pt_vpiprp.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_vpiprp.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_arlseq.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_afibsg.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_yloqtl on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_yloqtl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jhilyr on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_jhilyr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lmasjj on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lmasjj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dwekmd on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dwekmd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zdrzol on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zdrzol.id
left join geometry.point_view geometry_point_view_rpzwhz on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_rpzwhz.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_vpiprp on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_vpiprp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_ydgmkf.id) as facilitymakeup
  from master_join master_join_mgxgjk
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_ydgmkf on master_join_mgxgjk.target_id = navaids_points_pointreference_lat_ydgmkf.id
  where master_join_mgxgjk.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_arlseq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_doprns.*) AS annotation
  from master_join master_join_uzqkmk
  join notes.note_view notes_note_lat_doprns on master_join_uzqkmk.target_id = notes_note_lat_doprns.id
  where master_join_uzqkmk.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_afibsg on TRUE;
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_bzmtvp.title as varchar), '(' || airport_heliport_airportheliport_pt_bzmtvp.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_bzmtvp.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_iplxiq.title as varchar), '(' || airport_heliport_airportheliport_pt_iplxiq.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_iplxiq.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_jgusav.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_jgusav.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_jgusav.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_vtycpl.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_oytssx.title as varchar), '(' || organisation_organisationauthority_pt_oytssx.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_oytssx.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_wwyidb.title as varchar), '(' || navaids_points_designatedpoint_pt_wwyidb.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_wwyidb.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jecuhn.title as varchar), '(' || navaids_points_navaid_pt_jecuhn.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_jecuhn.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xajpuq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xajpuq.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_xajpuq.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_flgayp.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_flgayp.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_flgayp.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_miucaa.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_miucaa.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_miucaa.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_miucaa.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_yqpaye.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_vhosqh.title as varchar), '(' || routes_airspacebordercrossing_pt_vhosqh.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_vhosqh.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_umakod.title as varchar), '(' || airspace_airspace_pt_umakod.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_umakod.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_qjaphx.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_xebzts.title as varchar), '(' || procedure_standardinstrumentarrival_pt_xebzts.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_xebzts.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_viuexu.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_eadeto.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_cdmaqr.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_cdmaqr.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_cdmaqr.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_npluyd.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_fleyjo.flightlevel::jsonb as flightlevel,
    notes_note_view_fncrrm.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bzmtvp on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_bzmtvp.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_jgusav on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_jgusav.id
left join routes.routeportion_pt routes_routeportion_pt_vtycpl on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_vtycpl.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_oytssx on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_oytssx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wwyidb on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wwyidb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jecuhn on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_jecuhn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xajpuq on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xajpuq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_flgayp on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_flgayp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iplxiq on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_iplxiq.id
left join geometry.point_view geometry_point_view_miucaa on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_miucaa.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_yqpaye on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_yqpaye.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_vhosqh on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_vhosqh.id
left join airspace.airspace_pt airspace_airspace_pt_umakod on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_umakod.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_qjaphx on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_qjaphx.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_xebzts on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_xebzts.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_viuexu on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_viuexu.id
left join shared.meteorology_pt shared_meteorology_pt_eadeto on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_eadeto.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_cdmaqr on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_cdmaqr.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_npluyd on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_npluyd.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_tctpgr.id) as flightlevel
  from master_join master_join_gdrwej
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_tctpgr on master_join_gdrwej.target_id = routes_flightrestrictionlevel_lat_tctpgr.id
  where master_join_gdrwej.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_fleyjo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rseavg.*) AS annotation
  from master_join master_join_lwkzbl
  join notes.note_view notes_note_lat_rseavg on master_join_lwkzbl.target_id = notes_note_lat_rseavg.id
  where master_join_lwkzbl.source_id = routes.flightconditionelement.id
) as notes_note_view_fncrrm on TRUE;
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_bjxduv.title as varchar), '(' || procedure_standardinstrumentarrival_pt_bjxduv.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_bjxduv.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_cxlnxi.title as varchar), '(' || airspace_airspace_pt_cxlnxi.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_cxlnxi.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_fresvx.title as varchar), '(' || navaids_points_designatedpoint_pt_fresvx.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_fresvx.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jwvnfc.title as varchar), '(' || navaids_points_navaid_pt_jwvnfc.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_jwvnfc.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_prgasd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_prgasd.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_prgasd.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ftknoy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ftknoy.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ftknoy.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hmrtfn.title as varchar), '(' || airport_heliport_airportheliport_pt_hmrtfn.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_hmrtfn.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_wwgxwp.title as varchar), '(' || airport_heliport_airportheliport_pt_wwgxwp.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_wwgxwp.href::text AS elementairportheliportelement_href,
    geometry_point_view_fvhjym.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_fvhjym.longitude AS pointelementposition_longitude,
    geometry_point_view_fvhjym.latitude AS pointelementposition_latitude,
    geometry_point_view_fvhjym.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_fnqgzq.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_zmkmpk.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_zmkmpk.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_zmkmpk.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_jigzaj.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_sizehn.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_sizehn.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_sizehn.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_xbkzkc.flightlevel::jsonb as flightlevel,
    notes_note_view_clojdv.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_bjxduv on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_bjxduv.id
left join airspace.airspace_pt airspace_airspace_pt_cxlnxi on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_cxlnxi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_fresvx on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_fresvx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jwvnfc on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_jwvnfc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_prgasd on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_prgasd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ftknoy on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ftknoy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hmrtfn on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_hmrtfn.id
left join geometry.point_view geometry_point_view_fvhjym on routes.flightroutingelement.pointelement_position_id = geometry_point_view_fvhjym.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_fnqgzq on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_fnqgzq.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_zmkmpk on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_zmkmpk.id
left join routes.routeportion_pt routes_routeportion_pt_jigzaj on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_jigzaj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wwgxwp on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_wwgxwp.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_sizehn on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_sizehn.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_mtgtku.id) as flightlevel
  from master_join master_join_inkpzx
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_mtgtku on master_join_inkpzx.target_id = routes_flightrestrictionlevel_lat_mtgtku.id
  where master_join_inkpzx.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_xbkzkc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zifrrf.*) AS annotation
  from master_join master_join_eabzuc
  join notes.note_view notes_note_lat_zifrrf on master_join_eabzuc.target_id = notes_note_lat_zifrrf.id
  where master_join_eabzuc.source_id = routes.flightroutingelement.id
) as notes_note_view_clojdv on TRUE;
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_haokct.title as varchar), '(' || navaids_points_designatedpoint_pt_haokct.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_haokct.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_mmtrcv.title as varchar), '(' || navaids_points_designatedpoint_pt_mmtrcv.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_mmtrcv.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_iqkozl.title as varchar), '(' || navaids_points_designatedpoint_pt_iqkozl.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_iqkozl.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wxqgou.title as varchar), '(' || navaids_points_navaid_pt_wxqgou.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_wxqgou.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_qzgdoi.title as varchar), '(' || navaids_points_navaid_pt_qzgdoi.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_qzgdoi.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_svqkfi.title as varchar), '(' || navaids_points_navaid_pt_svqkfi.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_svqkfi.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gffupf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gffupf.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_gffupf.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jhdlzo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jhdlzo.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jhdlzo.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zzhdai.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zzhdai.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_zzhdai.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nhcdsw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nhcdsw.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nhcdsw.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ntcnpq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ntcnpq.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ntcnpq.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ddadxe.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ddadxe.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ddadxe.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aogwav.title as varchar), '(' || airport_heliport_airportheliport_pt_aogwav.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_aogwav.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uqpcot.title as varchar), '(' || airport_heliport_airportheliport_pt_uqpcot.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_uqpcot.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_wdcjnr.title as varchar), '(' || airport_heliport_airportheliport_pt_wdcjnr.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_wdcjnr.href::text AS endairportreferencepoint_href,
    geometry_point_view_xhsblq.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_xhsblq.longitude AS startposition_longitude,
    geometry_point_view_xhsblq.latitude AS startposition_latitude,
    geometry_point_view_xhsblq.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_hlvgpy.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_hlvgpy.longitude AS intermediatepointposition_longitude,
    geometry_point_view_hlvgpy.latitude AS intermediatepointposition_latitude,
    geometry_point_view_hlvgpy.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_hizwit.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_hizwit.longitude AS endposition_longitude,
    geometry_point_view_hizwit.latitude AS endposition_latitude,
    geometry_point_view_hizwit.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_vhndsc.title as varchar), '(' || routes_route_pt_vhndsc.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_vhndsc.href::text AS referencedroute_href,
    notes_note_view_zszrnx.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_haokct on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_haokct.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wxqgou on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_wxqgou.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gffupf on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gffupf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nhcdsw on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nhcdsw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aogwav on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_aogwav.id
left join geometry.point_view geometry_point_view_xhsblq on routes.routeportion.start_position_id = geometry_point_view_xhsblq.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mmtrcv on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mmtrcv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qzgdoi on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_qzgdoi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jhdlzo on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jhdlzo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ntcnpq on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ntcnpq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uqpcot on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_uqpcot.id
left join geometry.point_view geometry_point_view_hlvgpy on routes.routeportion.intermediatepoint_position_id = geometry_point_view_hlvgpy.id
left join routes.route_pt routes_route_pt_vhndsc on routes.routeportion.referencedroute_id = routes_route_pt_vhndsc.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_iqkozl on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_iqkozl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_svqkfi on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_svqkfi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zzhdai on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zzhdai.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ddadxe on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ddadxe.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wdcjnr on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_wdcjnr.id
left join geometry.point_view geometry_point_view_hizwit on routes.routeportion.end_position_id = geometry_point_view_hizwit.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yiqfxn.*) AS annotation
  from master_join master_join_lupydk
  join notes.note_view notes_note_lat_yiqfxn on master_join_lupydk.target_id = notes_note_lat_yiqfxn.id
  where master_join_lupydk.source_id = routes.routeportion.id
) as notes_note_view_zszrnx on TRUE;
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_qngsxy.title as varchar), '(' || navaids_points_designatedpoint_pt_qngsxy.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_qngsxy.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_agwlri.title as varchar), '(' || navaids_points_navaid_pt_agwlri.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_agwlri.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vmygcm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vmygcm.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_vmygcm.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xjewba.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xjewba.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xjewba.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_baecly.title as varchar), '(' || airport_heliport_airportheliport_pt_baecly.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_baecly.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_nzljov.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_nzljov.longitude AS pointchoiceposition_longitude,
    geometry_point_view_nzljov.latitude AS pointchoiceposition_latitude,
    geometry_point_view_nzljov.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_pgggaa.title as varchar), '(' || shared_radiofrequencyarea_pt_pgggaa.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_pgggaa.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_ffzsqc.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_gfdfcc.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qngsxy on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qngsxy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_agwlri on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_agwlri.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vmygcm on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vmygcm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xjewba on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xjewba.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_baecly on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_baecly.id
left join geometry.point_view geometry_point_view_nzljov on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_nzljov.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_pgggaa on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_pgggaa.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_zcjfzs.id) as facilitymakeup
  from master_join master_join_fxxblo
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_zcjfzs on master_join_fxxblo.target_id = navaids_points_pointreference_lat_zcjfzs.id
  where master_join_fxxblo.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_ffzsqc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uvbymw.*) AS annotation
  from master_join master_join_qayxtq
  join notes.note_view notes_note_lat_uvbymw on master_join_qayxtq.target_id = notes_note_lat_uvbymw.id
  where master_join_qayxtq.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_gfdfcc on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_bglpst.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_bglpst.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_mlokht.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_boapru.point::jsonb as point,
    notes_note_view_eetmsp.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_bglpst on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_bglpst.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_kkjcks.id) as verticalextent
  from master_join master_join_sbndfl
  join shared.airspacelayer_pt shared_airspacelayer_lat_kkjcks on master_join_sbndfl.target_id = shared_airspacelayer_lat_kkjcks.id
  where master_join_sbndfl.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_mlokht on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_qqnupu.id) as point
  from master_join master_join_qmiadt
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_qqnupu on master_join_qmiadt.target_id = aerial_refuelling_aerialrefuellingpoint_lat_qqnupu.id
  where master_join_qmiadt.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_boapru on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pneptw.*) AS annotation
  from master_join master_join_weyrru
  join notes.note_view notes_note_lat_pneptw on master_join_weyrru.target_id = notes_note_lat_pneptw.id
  where master_join_weyrru.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_eetmsp on TRUE;
-- AirspaceVolumePropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_obxugt.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_obxugt.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_egplzg.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_egplzg.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_atshrc.id)::jsonb AS contributorairspace,
    notes_note_view_kephgh.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_obxugt on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_obxugt.id
left join geometry.curve_view geometry_curve_view_egplzg on airspace.airspacevolume.centreline_id = geometry_curve_view_egplzg.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_atshrc on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_atshrc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vpdtys.*) AS annotation
  from master_join master_join_imqziq
  join notes.note_view notes_note_lat_vpdtys on master_join_imqziq.target_id = notes_note_lat_vpdtys.id
  where master_join_imqziq.source_id = airspace.airspacevolume.id
) as notes_note_view_kephgh on TRUE;
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_obnfze.id)::jsonb AS sectordefinition,
    geometry_surface_view_mjrhlb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_mjrhlb.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_djcaqd.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_voqwyz.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_jfjcbu.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_obnfze on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_obnfze.id
left join geometry.surface_view geometry_surface_view_mjrhlb on procedure.navigationareasector.extent_id = geometry_surface_view_mjrhlb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_xnkacn.id) as significantobstacle
  from master_join master_join_ripnwo
  join shared.obstruction_pt shared_obstruction_lat_xnkacn on master_join_ripnwo.target_id = shared_obstruction_lat_xnkacn.id
  where master_join_ripnwo.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_djcaqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_xdnyms.id) as sectorcriteria
  from master_join master_join_hzcora
  join procedure.sectordesign_pt procedure_sectordesign_lat_xdnyms on master_join_hzcora.target_id = procedure_sectordesign_lat_xdnyms.id
  where master_join_hzcora.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_voqwyz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kimxlv.*) AS annotation
  from master_join master_join_sjdyda
  join notes.note_view notes_note_lat_kimxlv on master_join_sjdyda.target_id = notes_note_lat_kimxlv.id
  where master_join_sjdyda.source_id = procedure.navigationareasector.id
) as notes_note_view_jfjcbu on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_oioxdv.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_oioxdv.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_scorvm.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_scorvm.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_dzhzrx.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_cqgwdk.significantobstacle::jsonb as significantobstacle,
    notes_note_view_zqkzdx.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_oioxdv on shared.obstacleassessmentarea.surface_id = geometry_surface_view_oioxdv.id
left join geometry.curve_view geometry_curve_view_scorvm on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_scorvm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ectskn.id) as aircraftcategory
  from master_join master_join_alfktr
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_ectskn on master_join_alfktr.target_id = shared_aircraftcharacteristic_lat_ectskn.id
  where master_join_alfktr.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_dzhzrx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_srevgr.id) as significantobstacle
  from master_join master_join_ymawrk
  join shared.obstruction_pt shared_obstruction_lat_srevgr on master_join_ymawrk.target_id = shared_obstruction_lat_srevgr.id
  where master_join_ymawrk.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_cqgwdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vxxwpn.*) AS annotation
  from master_join master_join_nfshhb
  join notes.note_view notes_note_lat_vxxwpn on master_join_nfshhb.target_id = notes_note_lat_vxxwpn.id
  where master_join_nfshhb.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_zqkzdx on TRUE;
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_dktmmb.title as varchar), '(' || navaids_points_designatedpoint_pt_dktmmb.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_dktmmb.href::text AS point_href,
    geometry_surface_view_odqsov.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_odqsov.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_giqtmr.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_yvpmrr.facilitydistance::jsonb as facilitydistance,
    notes_note_view_plchfh.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dktmmb on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_dktmmb.id
left join geometry.surface_view geometry_surface_view_odqsov on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_odqsov.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_lcxzfx.id) as facilityangle
  from master_join master_join_nzpgzi
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_lcxzfx on master_join_nzpgzi.target_id = navaids_points_angleuse_lat_lcxzfx.id
  where master_join_nzpgzi.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_giqtmr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_hwwkfj.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_hwwkfj.title AS varchar), '(' || navaids_points_distanceindication_lat_hwwkfj.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_hwwkfj.href
  )) as facilitydistance  from master_join master_join_bspnfb
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_hwwkfj on master_join_bspnfb.target_id = navaids_points_distanceindication_lat_hwwkfj.id
  where master_join_bspnfb.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_yvpmrr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bnvvxg.*) AS annotation
  from master_join master_join_pfypex
  join notes.note_view notes_note_lat_bnvvxg on master_join_pfypex.target_id = notes_note_lat_bnvvxg.id
  where master_join_pfypex.source_id = navaids_points.pointreference.id
) as notes_note_view_plchfh on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_tfiwwz.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_tfiwwz.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_owsitn.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_rxwmzg.significantobstacle::jsonb as significantobstacle,
    notes_note_view_sdqobp.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_tfiwwz on procedure.safealtitudeareasector.extent_id = geometry_surface_view_tfiwwz.id
left join shared.circlesector_pt shared_circlesector_pt_owsitn on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_owsitn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ekqjth.id) as significantobstacle
  from master_join master_join_ibugal
  join shared.obstruction_pt shared_obstruction_lat_ekqjth on master_join_ibugal.target_id = shared_obstruction_lat_ekqjth.id
  where master_join_ibugal.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_rxwmzg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pqrczm.*) AS annotation
  from master_join master_join_ikbxem
  join notes.note_view notes_note_lat_pqrczm on master_join_ikbxem.target_id = notes_note_lat_pqrczm.id
  where master_join_ikbxem.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_sdqobp on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_hibjwz.id)::jsonb AS sectordefinition,
    geometry_surface_view_pvimse.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_pvimse.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_jmuexo.significantobstacle::jsonb as significantobstacle,
    notes_note_view_imvwut.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_hibjwz on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_hibjwz.id
left join geometry.surface_view geometry_surface_view_pvimse on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_pvimse.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_abdxfh.id) as significantobstacle
  from master_join master_join_buldkr
  join shared.obstruction_pt shared_obstruction_lat_abdxfh on master_join_buldkr.target_id = shared_obstruction_lat_abdxfh.id
  where master_join_buldkr.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_jmuexo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fnvylz.*) AS annotation
  from master_join master_join_bncxty
  join notes.note_view notes_note_lat_fnvylz on master_join_bncxty.target_id = notes_note_lat_fnvylz.id
  where master_join_bncxty.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_imvwut on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_xrnmwe.timeinterval::jsonb as timeinterval,
    notes_note_view_ifyemf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_oxkpji.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_okdpfj.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wdwzzg.*) AS timeinterval
  from master_join master_join_jhsnci
  join shared.timesheet_view shared_timesheet_lat_wdwzzg on master_join_jhsnci.target_id = shared_timesheet_lat_wdwzzg.id
  where master_join_jhsnci.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_xrnmwe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kkxfwe.*) AS annotation
  from master_join master_join_ogkiil
  join notes.note_view notes_note_lat_kkxfwe on master_join_ogkiil.target_id = notes_note_lat_kkxfwe.id
  where master_join_ogkiil.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_ifyemf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xjzdzv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xjzdzv.title AS varchar), '(' || organisation_organisationauthority_lat_xjzdzv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xjzdzv.href
  )) as specialdateauthority  from master_join master_join_pagypj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xjzdzv on master_join_pagypj.target_id = organisation_organisationauthority_lat_xjzdzv.id
  where master_join_pagypj.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_oxkpji on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_clxsjz.id) as usage
  from master_join master_join_zdvuqo
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_clxsjz on master_join_zdvuqo.target_id = airport_heliport_airportheliportusage_lat_clxsjz.id
  where master_join_zdvuqo.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_okdpfj on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_vzavcp.title as varchar), '(' || organisation_organisationauthority_pt_vzavcp.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_vzavcp.href::text AS theorganisationauthority_href,
    shared_timesheet_view_mjlivy.timeinterval::jsonb as timeinterval,
    notes_note_view_bjfzpl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rfqdyi.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vzavcp on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_vzavcp.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_aczspp.*) AS timeinterval
  from master_join master_join_wnzjic
  join shared.timesheet_view shared_timesheet_lat_aczspp on master_join_wnzjic.target_id = shared_timesheet_lat_aczspp.id
  where master_join_wnzjic.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_mjlivy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fgfqnf.*) AS annotation
  from master_join master_join_omxwii
  join notes.note_view notes_note_lat_fgfqnf on master_join_omxwii.target_id = notes_note_lat_fgfqnf.id
  where master_join_omxwii.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_bjfzpl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nvxztp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nvxztp.title AS varchar), '(' || organisation_organisationauthority_lat_nvxztp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nvxztp.href
  )) as specialdateauthority  from master_join master_join_hrnspd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nvxztp on master_join_hrnspd.target_id = organisation_organisationauthority_lat_nvxztp.id
  where master_join_hrnspd.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_rfqdyi on TRUE;
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_ntwxcd.timeinterval::jsonb as timeinterval,
    notes_note_view_zcrpjh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mhnpxb.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_zghlfu.user::jsonb as user,
    shared_airspacelayer_pt_vgszkf.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_blepha.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_osdglv.*) AS timeinterval
  from master_join master_join_cndqtn
  join shared.timesheet_view shared_timesheet_lat_osdglv on master_join_cndqtn.target_id = shared_timesheet_lat_osdglv.id
  where master_join_cndqtn.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_ntwxcd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_udafpk.*) AS annotation
  from master_join master_join_yvheek
  join notes.note_view notes_note_lat_udafpk on master_join_yvheek.target_id = notes_note_lat_udafpk.id
  where master_join_yvheek.source_id = airspace.airspaceactivation.id
) as notes_note_view_zcrpjh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jmpyiz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jmpyiz.title AS varchar), '(' || organisation_organisationauthority_lat_jmpyiz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jmpyiz.href
  )) as specialdateauthority  from master_join master_join_kjnezy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jmpyiz on master_join_kjnezy.target_id = organisation_organisationauthority_lat_jmpyiz.id
  where master_join_kjnezy.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_mhnpxb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_grnscl.id) as levels
  from master_join master_join_dixidd
  join shared.airspacelayer_pt shared_airspacelayer_lat_grnscl on master_join_dixidd.target_id = shared_airspacelayer_lat_grnscl.id
  where master_join_dixidd.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_vgszkf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hfxshj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hfxshj.title AS varchar), '(' || organisation_organisationauthority_lat_hfxshj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hfxshj.href
  )) as user  from master_join master_join_cplqxl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hfxshj on master_join_cplqxl.target_id = organisation_organisationauthority_lat_hfxshj.id
  where master_join_cplqxl.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_zghlfu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_volrcz.id) as aircraft
  from master_join master_join_oopsas
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_volrcz on master_join_oopsas.target_id = shared_aircraftcharacteristic_lat_volrcz.id
  where master_join_oopsas.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_blepha on TRUE;
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_maqvgn.timeinterval::jsonb as timeinterval,
    notes_note_view_sfrhdk.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ucvqxp.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_txtkwi.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ovqldn.*) AS timeinterval
  from master_join master_join_pvpqgs
  join shared.timesheet_view shared_timesheet_lat_ovqldn on master_join_pvpqgs.target_id = shared_timesheet_lat_ovqldn.id
  where master_join_pvpqgs.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_maqvgn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qysqfn.*) AS annotation
  from master_join master_join_ffsepz
  join notes.note_view notes_note_lat_qysqfn on master_join_ffsepz.target_id = notes_note_lat_qysqfn.id
  where master_join_ffsepz.source_id = airspace.airspacelayerclass.id
) as notes_note_view_sfrhdk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xuibkt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xuibkt.title AS varchar), '(' || organisation_organisationauthority_lat_xuibkt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xuibkt.href
  )) as specialdateauthority  from master_join master_join_vgeziy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xuibkt on master_join_vgeziy.target_id = organisation_organisationauthority_lat_xuibkt.id
  where master_join_vgeziy.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_ucvqxp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_qvllqj.id) as associatedlevels
  from master_join master_join_zmdwqj
  join shared.airspacelayer_pt shared_airspacelayer_lat_qvllqj on master_join_zmdwqj.target_id = shared_airspacelayer_lat_qvllqj.id
  where master_join_zmdwqj.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_txtkwi on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ggefcg.timeinterval::jsonb as timeinterval,
    notes_note_view_twrwxf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_poudim.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mtjgrg.*) AS timeinterval
  from master_join master_join_jkvgqj
  join shared.timesheet_view shared_timesheet_lat_mtjgrg on master_join_jkvgqj.target_id = shared_timesheet_lat_mtjgrg.id
  where master_join_jkvgqj.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_ggefcg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tqdned.*) AS annotation
  from master_join master_join_yacwmx
  join notes.note_view notes_note_lat_tqdned on master_join_yacwmx.target_id = notes_note_lat_tqdned.id
  where master_join_yacwmx.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_twrwxf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wsoevb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wsoevb.title AS varchar), '(' || organisation_organisationauthority_lat_wsoevb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wsoevb.href
  )) as specialdateauthority  from master_join master_join_jedhfd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wsoevb on master_join_jedhfd.target_id = organisation_organisationauthority_lat_wsoevb.id
  where master_join_jedhfd.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_poudim on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_fvagar.timeinterval::jsonb as timeinterval,
    notes_note_view_rmdmof.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_iiecvs.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_janeri.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cktlqh.*) AS timeinterval
  from master_join master_join_snbnwq
  join shared.timesheet_view shared_timesheet_lat_cktlqh on master_join_snbnwq.target_id = shared_timesheet_lat_cktlqh.id
  where master_join_snbnwq.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_fvagar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjjfxu.*) AS annotation
  from master_join master_join_uiwflv
  join notes.note_view notes_note_lat_bjjfxu on master_join_uiwflv.target_id = notes_note_lat_bjjfxu.id
  where master_join_uiwflv.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_rmdmof on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sjolzn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sjolzn.title AS varchar), '(' || organisation_organisationauthority_lat_sjolzn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sjolzn.href
  )) as specialdateauthority  from master_join master_join_yeemyw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sjolzn on master_join_yeemyw.target_id = organisation_organisationauthority_lat_sjolzn.id
  where master_join_yeemyw.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_iiecvs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_djhmiv.id) as usage
  from master_join master_join_dbbjyq
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_djhmiv on master_join_dbbjyq.target_id = airport_heliport_apronareausage_lat_djhmiv.id
  where master_join_dbbjyq.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_janeri on TRUE;
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_ihgell.id)::jsonb AS sectordescription,
    geometry_surface_view_bsdshn.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_bsdshn.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_dqowzt.timeinterval::jsonb as timeinterval,
    notes_note_view_jmpupu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pbfgaw.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_ihgell on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_ihgell.id
left join geometry.surface_view geometry_surface_view_bsdshn on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_bsdshn.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dcqlec.*) AS timeinterval
  from master_join master_join_aoutzd
  join shared.timesheet_view shared_timesheet_lat_dcqlec on master_join_aoutzd.target_id = shared_timesheet_lat_dcqlec.id
  where master_join_aoutzd.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_dqowzt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tiyrio.*) AS annotation
  from master_join master_join_vjlyxm
  join notes.note_view notes_note_lat_tiyrio on master_join_vjlyxm.target_id = notes_note_lat_tiyrio.id
  where master_join_vjlyxm.source_id = procedure.circlingrestriction.id
) as notes_note_view_jmpupu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uvtvvu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uvtvvu.title AS varchar), '(' || organisation_organisationauthority_lat_uvtvvu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uvtvvu.href
  )) as specialdateauthority  from master_join master_join_fjpfiw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uvtvvu on master_join_fjpfiw.target_id = organisation_organisationauthority_lat_uvtvvu.id
  where master_join_fjpfiw.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_pbfgaw on TRUE;
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_uyvlqe.timeinterval::jsonb as timeinterval,
    notes_note_view_ckbisc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rqxwfh.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_abkfep.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_prckhr.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_grxcca.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_atcuxv.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wuzvos.*) AS timeinterval
  from master_join master_join_hgrhmt
  join shared.timesheet_view shared_timesheet_lat_wuzvos on master_join_hgrhmt.target_id = shared_timesheet_lat_wuzvos.id
  where master_join_hgrhmt.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_uyvlqe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_smvvdq.*) AS annotation
  from master_join master_join_jssekx
  join notes.note_view notes_note_lat_smvvdq on master_join_jssekx.target_id = notes_note_lat_smvvdq.id
  where master_join_jssekx.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_ckbisc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ubckky.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ubckky.title AS varchar), '(' || organisation_organisationauthority_lat_ubckky.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ubckky.href
  )) as specialdateauthority  from master_join master_join_gjquzm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ubckky on master_join_gjquzm.target_id = organisation_organisationauthority_lat_ubckky.id
  where master_join_gjquzm.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_rqxwfh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_yktnys.id) as weather
  from master_join master_join_ktnvwu
  join shared.meteorology_pt shared_meteorology_lat_yktnys on master_join_ktnvwu.target_id = shared_meteorology_lat_yktnys.id
  where master_join_ktnvwu.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_abkfep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_dhrfas.id) as aircraft
  from master_join master_join_rwadmj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_dhrfas on master_join_rwadmj.target_id = shared_aircraftcharacteristic_lat_dhrfas.id
  where master_join_rwadmj.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_prckhr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_bqdosz.id) as flight
  from master_join master_join_gsnfsr
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_bqdosz on master_join_gsnfsr.target_id = shared_flightcharacteristic_lat_bqdosz.id
  where master_join_gsnfsr.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_grxcca on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_zungpl.id) as subcondition
  from master_join master_join_dwirio
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_zungpl on master_join_dwirio.target_id = airport_heliport_conditioncombination_lat_zungpl.id
  where master_join_dwirio.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_atcuxv on TRUE;
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_mqkrcy.timeinterval::jsonb as timeinterval,
    notes_note_view_ombcow.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yqxmbk.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_xwwybn.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kltqds.*) AS timeinterval
  from master_join master_join_frqaed
  join shared.timesheet_view shared_timesheet_lat_kltqds on master_join_frqaed.target_id = shared_timesheet_lat_kltqds.id
  where master_join_frqaed.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_mqkrcy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gkyvva.*) AS annotation
  from master_join master_join_mfsilp
  join notes.note_view notes_note_lat_gkyvva on master_join_mfsilp.target_id = notes_note_lat_gkyvva.id
  where master_join_mfsilp.source_id = routes.flightconditioncombination.id
) as notes_note_view_ombcow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zpdrpb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zpdrpb.title AS varchar), '(' || organisation_organisationauthority_lat_zpdrpb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zpdrpb.href
  )) as specialdateauthority  from master_join master_join_zzuicx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zpdrpb on master_join_zzuicx.target_id = organisation_organisationauthority_lat_zpdrpb.id
  where master_join_zzuicx.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_yqxmbk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_xvjdpa.id) as element
  from master_join master_join_ntzgcf
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_xvjdpa on master_join_ntzgcf.target_id = routes_flightconditionelement_lat_xvjdpa.id
  where master_join_ntzgcf.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_xwwybn on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_juvnzy.timeinterval::jsonb as timeinterval,
    notes_note_view_ydawdq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cdehjm.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zyscgm.*) AS timeinterval
  from master_join master_join_nrpcwc
  join shared.timesheet_view shared_timesheet_lat_zyscgm on master_join_nrpcwc.target_id = shared_timesheet_lat_zyscgm.id
  where master_join_nrpcwc.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_juvnzy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ysltyq.*) AS annotation
  from master_join master_join_hdnlrw
  join notes.note_view notes_note_lat_ysltyq on master_join_hdnlrw.target_id = notes_note_lat_ysltyq.id
  where master_join_hdnlrw.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_ydawdq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mupjvn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mupjvn.title AS varchar), '(' || organisation_organisationauthority_lat_mupjvn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mupjvn.href
  )) as specialdateauthority  from master_join master_join_gvbxkd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mupjvn on master_join_gvbxkd.target_id = organisation_organisationauthority_lat_mupjvn.id
  where master_join_gvbxkd.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_cdehjm on TRUE;
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_wncktf.timeinterval::jsonb as timeinterval,
    notes_note_view_sbirww.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gmalji.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hoeivv.*) AS timeinterval
  from master_join master_join_ggikfp
  join shared.timesheet_view shared_timesheet_lat_hoeivv on master_join_ggikfp.target_id = shared_timesheet_lat_hoeivv.id
  where master_join_ggikfp.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_wncktf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_whrmdi.*) AS annotation
  from master_join master_join_hfvmkh
  join notes.note_view notes_note_lat_whrmdi on master_join_hfvmkh.target_id = notes_note_lat_whrmdi.id
  where master_join_hfvmkh.source_id = shared.lightelementstatus.id
) as notes_note_view_sbirww on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_aaxfuw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_aaxfuw.title AS varchar), '(' || organisation_organisationauthority_lat_aaxfuw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_aaxfuw.href
  )) as specialdateauthority  from master_join master_join_hddova
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_aaxfuw on master_join_hddova.target_id = organisation_organisationauthority_lat_aaxfuw.id
  where master_join_hddova.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_gmalji on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_eqcdsg.timeinterval::jsonb as timeinterval,
    notes_note_view_nvupqh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ltbxjd.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_ugsoqg.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_quuwhi.*) AS timeinterval
  from master_join master_join_bgjytm
  join shared.timesheet_view shared_timesheet_lat_quuwhi on master_join_bgjytm.target_id = shared_timesheet_lat_quuwhi.id
  where master_join_bgjytm.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_eqcdsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gihuxk.*) AS annotation
  from master_join master_join_csuvhb
  join notes.note_view notes_note_lat_gihuxk on master_join_csuvhb.target_id = notes_note_lat_gihuxk.id
  where master_join_csuvhb.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_nvupqh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jvckig.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jvckig.title AS varchar), '(' || organisation_organisationauthority_lat_jvckig.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jvckig.href
  )) as specialdateauthority  from master_join master_join_jimvwn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jvckig on master_join_jimvwn.target_id = organisation_organisationauthority_lat_jvckig.id
  where master_join_jimvwn.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_ltbxjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_fqkjmv.id) as usage
  from master_join master_join_zqrjqo
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_fqkjmv on master_join_zqrjqo.target_id = airport_heliport_manoeuvringareausage_lat_fqkjmv.id
  where master_join_zqrjqo.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_ugsoqg on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_bvauvq.timeinterval::jsonb as timeinterval,
    notes_note_view_uabziw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mtygjp.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_muvhnm.*) AS timeinterval
  from master_join master_join_nsfboe
  join shared.timesheet_view shared_timesheet_lat_muvhnm on master_join_nsfboe.target_id = shared_timesheet_lat_muvhnm.id
  where master_join_nsfboe.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_bvauvq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mvfnpw.*) AS annotation
  from master_join master_join_rdxlzu
  join notes.note_view notes_note_lat_mvfnpw on master_join_rdxlzu.target_id = notes_note_lat_mvfnpw.id
  where master_join_rdxlzu.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_uabziw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wdtnkw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wdtnkw.title AS varchar), '(' || organisation_organisationauthority_lat_wdtnkw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wdtnkw.href
  )) as specialdateauthority  from master_join master_join_mknjmh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wdtnkw on master_join_mknjmh.target_id = organisation_organisationauthority_lat_wdtnkw.id
  where master_join_mknjmh.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_mtygjp on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_lbvjjk.timeinterval::jsonb as timeinterval,
    notes_note_view_yuuoff.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qgsjhh.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ienyzx.*) AS timeinterval
  from master_join master_join_jgsona
  join shared.timesheet_view shared_timesheet_lat_ienyzx on master_join_jgsona.target_id = shared_timesheet_lat_ienyzx.id
  where master_join_jgsona.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_lbvjjk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plazgu.*) AS annotation
  from master_join master_join_qqzezg
  join notes.note_view notes_note_lat_plazgu on master_join_qqzezg.target_id = notes_note_lat_plazgu.id
  where master_join_qqzezg.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_yuuoff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_adytca.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_adytca.title AS varchar), '(' || organisation_organisationauthority_lat_adytca.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_adytca.href
  )) as specialdateauthority  from master_join master_join_ionuhv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_adytca on master_join_ionuhv.target_id = organisation_organisationauthority_lat_adytca.id
  where master_join_ionuhv.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_qgsjhh on TRUE;
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_phwtzu.timeinterval::jsonb as timeinterval,
    notes_note_view_bczlaf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_evynki.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_knokdp.*) AS timeinterval
  from master_join master_join_ifwowd
  join shared.timesheet_view shared_timesheet_lat_knokdp on master_join_ifwowd.target_id = shared_timesheet_lat_knokdp.id
  where master_join_ifwowd.source_id = shared.onlinecontact.id
) as shared_timesheet_view_phwtzu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dzxllz.*) AS annotation
  from master_join master_join_dpqitn
  join notes.note_view notes_note_lat_dzxllz on master_join_dpqitn.target_id = notes_note_lat_dzxllz.id
  where master_join_dpqitn.source_id = shared.onlinecontact.id
) as notes_note_view_bczlaf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qumlah.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qumlah.title AS varchar), '(' || organisation_organisationauthority_lat_qumlah.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qumlah.href
  )) as specialdateauthority  from master_join master_join_gcjdad
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qumlah on master_join_gcjdad.target_id = organisation_organisationauthority_lat_qumlah.id
  where master_join_gcjdad.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_evynki on TRUE;
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_bzodmr.timeinterval::jsonb as timeinterval,
    notes_note_view_bfnqnv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_buldnz.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cxiogy.*) AS timeinterval
  from master_join master_join_jpawmw
  join shared.timesheet_view shared_timesheet_lat_cxiogy on master_join_jpawmw.target_id = shared_timesheet_lat_cxiogy.id
  where master_join_jpawmw.source_id = shared.postaladdress.id
) as shared_timesheet_view_bzodmr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xmdnih.*) AS annotation
  from master_join master_join_dudwvz
  join notes.note_view notes_note_lat_xmdnih on master_join_dudwvz.target_id = notes_note_lat_xmdnih.id
  where master_join_dudwvz.source_id = shared.postaladdress.id
) as notes_note_view_bfnqnv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_aswydq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_aswydq.title AS varchar), '(' || organisation_organisationauthority_lat_aswydq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_aswydq.href
  )) as specialdateauthority  from master_join master_join_vlvssf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_aswydq on master_join_vlvssf.target_id = organisation_organisationauthority_lat_aswydq.id
  where master_join_vlvssf.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_buldnz on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_mprnkk.timeinterval::jsonb as timeinterval,
    notes_note_view_vbcemz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hhtakd.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dijhcm.*) AS timeinterval
  from master_join master_join_vdfhhn
  join shared.timesheet_view shared_timesheet_lat_dijhcm on master_join_vdfhhn.target_id = shared_timesheet_lat_dijhcm.id
  where master_join_vdfhhn.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_mprnkk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_seaxxf.*) AS annotation
  from master_join master_join_bbohlf
  join notes.note_view notes_note_lat_seaxxf on master_join_bbohlf.target_id = notes_note_lat_seaxxf.id
  where master_join_bbohlf.source_id = procedure.procedureavailability.id
) as notes_note_view_vbcemz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vkouli.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vkouli.title AS varchar), '(' || organisation_organisationauthority_lat_vkouli.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vkouli.href
  )) as specialdateauthority  from master_join master_join_ztpiae
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vkouli on master_join_ztpiae.target_id = organisation_organisationauthority_lat_vkouli.id
  where master_join_ztpiae.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_hhtakd on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_egkfna.timeinterval::jsonb as timeinterval,
    notes_note_view_jseexz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gbwdba.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lyzxdi.*) AS timeinterval
  from master_join master_join_ocftyf
  join shared.timesheet_view shared_timesheet_lat_lyzxdi on master_join_ocftyf.target_id = shared_timesheet_lat_lyzxdi.id
  where master_join_ocftyf.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_egkfna on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fxaqjb.*) AS annotation
  from master_join master_join_rptfig
  join notes.note_view notes_note_lat_fxaqjb on master_join_rptfig.target_id = notes_note_lat_fxaqjb.id
  where master_join_rptfig.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_jseexz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ibibqx.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ibibqx.title AS varchar), '(' || organisation_organisationauthority_lat_ibibqx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ibibqx.href
  )) as specialdateauthority  from master_join master_join_zzcqsw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ibibqx on master_join_zzcqsw.target_id = organisation_organisationauthority_lat_ibibqx.id
  where master_join_zzcqsw.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_gbwdba on TRUE;
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_fitprg.timeinterval::jsonb as timeinterval,
    notes_note_view_uxvqpq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tkndud.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_pevwsb.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_auezvb.*) AS timeinterval
  from master_join master_join_zyiwru
  join shared.timesheet_view shared_timesheet_lat_auezvb on master_join_zyiwru.target_id = shared_timesheet_lat_auezvb.id
  where master_join_zyiwru.source_id = routes.routeavailability.id
) as shared_timesheet_view_fitprg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hzpacs.*) AS annotation
  from master_join master_join_aiznag
  join notes.note_view notes_note_lat_hzpacs on master_join_aiznag.target_id = notes_note_lat_hzpacs.id
  where master_join_aiznag.source_id = routes.routeavailability.id
) as notes_note_view_uxvqpq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nflheu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nflheu.title AS varchar), '(' || organisation_organisationauthority_lat_nflheu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nflheu.href
  )) as specialdateauthority  from master_join master_join_fvroqm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nflheu on master_join_fvroqm.target_id = organisation_organisationauthority_lat_nflheu.id
  where master_join_fvroqm.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_tkndud on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ijitex.id) as levels
  from master_join master_join_rjwpge
  join shared.airspacelayer_pt shared_airspacelayer_lat_ijitex on master_join_rjwpge.target_id = shared_airspacelayer_lat_ijitex.id
  where master_join_rjwpge.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_pevwsb on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_vndxcs.timeinterval::jsonb as timeinterval,
    notes_note_view_solhtb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ttupfy.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uetgnu.*) AS timeinterval
  from master_join master_join_alemjj
  join shared.timesheet_view shared_timesheet_lat_uetgnu on master_join_alemjj.target_id = shared_timesheet_lat_uetgnu.id
  where master_join_alemjj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_vndxcs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cnrpah.*) AS annotation
  from master_join master_join_xnduhy
  join notes.note_view notes_note_lat_cnrpah on master_join_xnduhy.target_id = notes_note_lat_cnrpah.id
  where master_join_xnduhy.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_solhtb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zpcwwm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zpcwwm.title AS varchar), '(' || organisation_organisationauthority_lat_zpcwwm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zpcwwm.href
  )) as specialdateauthority  from master_join master_join_vuvaze
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zpcwwm on master_join_vuvaze.target_id = organisation_organisationauthority_lat_zpcwwm.id
  where master_join_vuvaze.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_ttupfy on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_hurevm.timeinterval::jsonb as timeinterval,
    notes_note_view_hrtrmu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vumxts.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hwmwbo.*) AS timeinterval
  from master_join master_join_upxtiq
  join shared.timesheet_view shared_timesheet_lat_hwmwbo on master_join_upxtiq.target_id = shared_timesheet_lat_hwmwbo.id
  where master_join_upxtiq.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_hurevm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppbabu.*) AS annotation
  from master_join master_join_abnuqy
  join notes.note_view notes_note_lat_ppbabu on master_join_abnuqy.target_id = notes_note_lat_ppbabu.id
  where master_join_abnuqy.source_id = service.serviceoperationalstatus.id
) as notes_note_view_hrtrmu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_oezsew.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_oezsew.title AS varchar), '(' || organisation_organisationauthority_lat_oezsew.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_oezsew.href
  )) as specialdateauthority  from master_join master_join_xmghpl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_oezsew on master_join_xmghpl.target_id = organisation_organisationauthority_lat_oezsew.id
  where master_join_xmghpl.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_vumxts on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qnrvsz.timeinterval::jsonb as timeinterval,
    notes_note_view_iiouqx.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bwhhjv.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_thowsl.*) AS timeinterval
  from master_join master_join_mjsizc
  join shared.timesheet_view shared_timesheet_lat_thowsl on master_join_mjsizc.target_id = shared_timesheet_lat_thowsl.id
  where master_join_mjsizc.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_qnrvsz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mmbros.*) AS annotation
  from master_join master_join_hwtxzm
  join notes.note_view notes_note_lat_mmbros on master_join_hwtxzm.target_id = notes_note_lat_mmbros.id
  where master_join_hwtxzm.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_iiouqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_odvrqg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_odvrqg.title AS varchar), '(' || organisation_organisationauthority_lat_odvrqg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_odvrqg.href
  )) as specialdateauthority  from master_join master_join_sjmxbl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_odvrqg on master_join_sjmxbl.target_id = organisation_organisationauthority_lat_odvrqg.id
  where master_join_sjmxbl.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_bwhhjv on TRUE;
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_zwlysl.timeinterval::jsonb as timeinterval,
    notes_note_view_haflfr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rghzty.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lffmcq.*) AS timeinterval
  from master_join master_join_fimzbn
  join shared.timesheet_view shared_timesheet_lat_lffmcq on master_join_fimzbn.target_id = shared_timesheet_lat_lffmcq.id
  where master_join_fimzbn.source_id = shared.telephonecontact.id
) as shared_timesheet_view_zwlysl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fnuxdf.*) AS annotation
  from master_join master_join_zqiaue
  join notes.note_view notes_note_lat_fnuxdf on master_join_zqiaue.target_id = notes_note_lat_fnuxdf.id
  where master_join_zqiaue.source_id = shared.telephonecontact.id
) as notes_note_view_haflfr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ftcerz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ftcerz.title AS varchar), '(' || organisation_organisationauthority_lat_ftcerz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ftcerz.href
  )) as specialdateauthority  from master_join master_join_yyodto
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ftcerz on master_join_yyodto.target_id = organisation_organisationauthority_lat_ftcerz.id
  where master_join_yyodto.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_rghzty on TRUE;
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_linxpk.timeinterval::jsonb as timeinterval,
    notes_note_view_ttexor.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lfheos.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ebtrgj.*) AS timeinterval
  from master_join master_join_qijvfg
  join shared.timesheet_view shared_timesheet_lat_ebtrgj on master_join_qijvfg.target_id = shared_timesheet_lat_ebtrgj.id
  where master_join_qijvfg.source_id = organisation.unitavailability.id
) as shared_timesheet_view_linxpk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqzljp.*) AS annotation
  from master_join master_join_domxkb
  join notes.note_view notes_note_lat_sqzljp on master_join_domxkb.target_id = notes_note_lat_sqzljp.id
  where master_join_domxkb.source_id = organisation.unitavailability.id
) as notes_note_view_ttexor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kebxdg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kebxdg.title AS varchar), '(' || organisation_organisationauthority_lat_kebxdg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kebxdg.href
  )) as specialdateauthority  from master_join master_join_kkihkn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kebxdg on master_join_kkihkn.target_id = organisation_organisationauthority_lat_kebxdg.id
  where master_join_kkihkn.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_lfheos on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_fqtqpu.timeinterval::jsonb as timeinterval,
    notes_note_view_fbzkpw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hirgwk.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zxbbhc.*) AS timeinterval
  from master_join master_join_lmqbxn
  join shared.timesheet_view shared_timesheet_lat_zxbbhc on master_join_lmqbxn.target_id = shared_timesheet_lat_zxbbhc.id
  where master_join_lmqbxn.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_fqtqpu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukkoqf.*) AS annotation
  from master_join master_join_vmyghj
  join notes.note_view notes_note_lat_ukkoqf on master_join_vmyghj.target_id = notes_note_lat_ukkoqf.id
  where master_join_vmyghj.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_fbzkpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fhjvog.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fhjvog.title AS varchar), '(' || organisation_organisationauthority_lat_fhjvog.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fhjvog.href
  )) as specialdateauthority  from master_join master_join_ccizgg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fhjvog on master_join_ccizgg.target_id = organisation_organisationauthority_lat_fhjvog.id
  where master_join_ccizgg.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_hirgwk on TRUE;
-- VerticalStructurePartPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_lvouhw.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_lvouhw.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_lvouhw.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_lvouhw.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_lvouhw.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_lvouhw.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_lvouhw.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_lvouhw.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_hkoiil.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_hkoiil.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_hkoiil.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_hkoiil.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_hkoiil.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_hkoiil.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_nvybue.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_nvybue.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_nvybue.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_nvybue.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_nvybue.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_nvybue.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_uvonju.timeinterval::jsonb as timeinterval,
    notes_note_view_rknqcl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_upvtjj.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_huueqz.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lvouhw on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_lvouhw.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_hkoiil on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_hkoiil.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nvybue on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_nvybue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wfmxgh.*) AS timeinterval
  from master_join master_join_ojvakb
  join shared.timesheet_view shared_timesheet_lat_wfmxgh on master_join_ojvakb.target_id = shared_timesheet_lat_wfmxgh.id
  where master_join_ojvakb.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_uvonju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgblsn.*) AS annotation
  from master_join master_join_kcbehs
  join notes.note_view notes_note_lat_wgblsn on master_join_kcbehs.target_id = notes_note_lat_wgblsn.id
  where master_join_kcbehs.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_rknqcl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fjkval.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fjkval.title AS varchar), '(' || organisation_organisationauthority_lat_fjkval.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fjkval.href
  )) as specialdateauthority  from master_join master_join_anbxbk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fjkval on master_join_anbxbk.target_id = organisation_organisationauthority_lat_fjkval.id
  where master_join_anbxbk.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_upvtjj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ijqusm.id) as lighting
  from master_join master_join_lpjkte
  join shared.lightelement_pt shared_lightelement_lat_ijqusm on master_join_lpjkte.target_id = shared_lightelement_lat_ijqusm.id
  where master_join_lpjkte.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_huueqz on TRUE;
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_ldqolv.timeinterval::jsonb as timeinterval,
    notes_note_view_pzygbj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_nqnvdf.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_scogon.*) AS timeinterval
  from master_join master_join_akptdk
  join shared.timesheet_view shared_timesheet_lat_scogon on master_join_akptdk.target_id = shared_timesheet_lat_scogon.id
  where master_join_akptdk.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_ldqolv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tlhbxb.*) AS annotation
  from master_join master_join_lsfdzj
  join notes.note_view notes_note_lat_tlhbxb on master_join_lsfdzj.target_id = notes_note_lat_tlhbxb.id
  where master_join_lsfdzj.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_pzygbj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rtsnkb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rtsnkb.title AS varchar), '(' || organisation_organisationauthority_lat_rtsnkb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rtsnkb.href
  )) as specialdateauthority  from master_join master_join_sdfppj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rtsnkb on master_join_sdfppj.target_id = organisation_organisationauthority_lat_rtsnkb.id
  where master_join_sdfppj.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_nqnvdf on TRUE;
-- ContactInformationPropertyType
-- ['shared.postaladdress_view', 'shared.onlinecontact_view', 'shared.telephonecontact_view', 'notes.note_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_tekzxf.id)::jsonb AS selection,
    notes_note_view_yfgwed.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_tekzxf on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_tekzxf.id
left join lateral(
  select
  from master_join master_join_jrcksp
  join shared.contactinformation_view shared_contactinformation_lat_tveiip on master_join_jrcksp.target_id = shared_contactinformation_lat_tveiip.id
  where master_join_jrcksp.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_kandhu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ednnpf.*) AS annotation
  from master_join master_join_bmygef
  join notes.note_view notes_note_lat_ednnpf on master_join_bmygef.target_id = notes_note_lat_ednnpf.id
  where master_join_bmygef.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_yfgwed on TRUE;
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_ysymgk.id)::jsonb AS selection,
    notes_note_view_jgbhym.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_ysymgk on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_ysymgk.id
left join lateral(
  select
  from master_join master_join_bupjjr
  join shared.contactinformation_view shared_contactinformation_lat_anyafa on master_join_bupjjr.target_id = shared_contactinformation_lat_anyafa.id
  where master_join_bupjjr.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_ujgagp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mhmyxc.*) AS annotation
  from master_join master_join_bdytlb
  join notes.note_view notes_note_lat_mhmyxc on master_join_bdytlb.target_id = notes_note_lat_mhmyxc.id
  where master_join_bdytlb.source_id = airport_heliport.apronareausage.id
) as notes_note_view_jgbhym on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_htinhe.routeelement::jsonb as routeelement,
    notes_note_view_xtdvgc.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_kitagp.id) as routeelement
  from master_join master_join_rnxkvl
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_kitagp on master_join_rnxkvl.target_id = routes_flightroutingelement_lat_kitagp.id
  where master_join_rnxkvl.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_htinhe on TRUE
left join lateral(
  select
  from master_join master_join_xnyeed
  join shared.contactinformation_view shared_contactinformation_lat_qngrgx on master_join_xnyeed.target_id = shared_contactinformation_lat_qngrgx.id
  where master_join_xnyeed.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_gvqthr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ohlfud.*) AS annotation
  from master_join master_join_bkxfrd
  join notes.note_view notes_note_lat_ohlfud on master_join_bkxfrd.target_id = notes_note_lat_ohlfud.id
  where master_join_bkxfrd.source_id = routes.flightrestrictionroute.id
) as notes_note_view_xtdvgc on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_irpybe.id)::jsonb AS selection,
    notes_note_view_ggxjsv.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_irpybe on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_irpybe.id
left join lateral(
  select
  from master_join master_join_mprydn
  join shared.contactinformation_view shared_contactinformation_lat_xgzcbp on master_join_mprydn.target_id = shared_contactinformation_lat_xgzcbp.id
  where master_join_mprydn.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_lcttcg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yaprpc.*) AS annotation
  from master_join master_join_clzzfe
  join notes.note_view notes_note_lat_yaprpc on master_join_clzzfe.target_id = notes_note_lat_yaprpc.id
  where master_join_clzzfe.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_ggxjsv on TRUE;
-- AerialRefuellingType
-- ['aerial_refuelling.aerialrefuellingtrack_view', 'notes.note_view', 'routes.routeavailability_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.authorityforaerialrefuelling_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_hwajmd.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_hwajmd.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_hwajmd.href::text AS oppositetrack_href,
    routes_routeavailability_view_zpbroz.availability::jsonb as availability,
    airspace_airspace_pt_xwemdn.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_pxbhwd.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_cvcqau.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_mqgkxi.managingorganisation::jsonb as managingorganisation,
    notes_note_view_esxrqy.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_hwajmd on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_hwajmd.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_ylbykw.id) as availability
  from master_join master_join_qlsgbo
  join routes.routeavailability_view routes_routeavailability_lat_ylbykw on master_join_qlsgbo.target_id = routes_routeavailability_lat_ylbykw.id
  where master_join_qlsgbo.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_zpbroz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ousmjq.id,
      'title', coalesce(cast(airspace_airspace_lat_ousmjq.title AS varchar), '(' || airspace_airspace_lat_ousmjq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ousmjq.href
  )) as protectingairspace  from master_join master_join_vzvnat
  join airspace.airspace_pt airspace_airspace_lat_ousmjq on master_join_vzvnat.target_id = airspace_airspace_lat_ousmjq.id
  where master_join_vzvnat.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_xwemdn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_aqiflu.id) as track
  from master_join master_join_oncrqm
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_aqiflu on master_join_oncrqm.target_id = aerial_refuelling_aerialrefuellingtrack_lat_aqiflu.id
  where master_join_oncrqm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_pxbhwd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_spgbnf.id) as anchor
  from master_join master_join_mnswau
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_spgbnf on master_join_mnswau.target_id = aerial_refuelling_aerialrefuellinganchor_lat_spgbnf.id
  where master_join_mnswau.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_cvcqau on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_kpfmvk.id) as managingorganisation
  from master_join master_join_lpajsy
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_kpfmvk on master_join_lpajsy.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_kpfmvk.id
  where master_join_lpajsy.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_mqgkxi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rhtrch.*) AS annotation
  from master_join master_join_pglvcq
  join notes.note_view notes_note_lat_rhtrch on master_join_pglvcq.target_id = notes_note_lat_rhtrch.id
  where master_join_pglvcq.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_esxrqy on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_sruljc.title as varchar), '(' || obstacles_verticalstructure_pt_sruljc.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_sruljc.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gtkhcb.title as varchar), '(' || airport_heliport_airportheliport_pt_gtkhcb.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_gtkhcb.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_xfkehn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xfkehn.longitude AS location_longitude,
    geometry_elevatedpoint_view_xfkehn.latitude AS location_latitude,
    geometry_elevatedpoint_view_xfkehn.elevation AS location_elevation,
    geometry_elevatedpoint_view_xfkehn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xfkehn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xfkehn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xfkehn.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_zhmweq.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_sruljc on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_sruljc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gtkhcb on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_gtkhcb.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xfkehn on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_xfkehn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvesdn.*) AS annotation
  from master_join master_join_snrtgx
  join notes.note_view notes_note_lat_bvesdn on master_join_snrtgx.target_id = notes_note_lat_bvesdn.id
  where master_join_snrtgx.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_zhmweq on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_jcvyqw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jcvyqw.longitude AS location_longitude,
    geometry_elevatedpoint_view_jcvyqw.latitude AS location_latitude,
    geometry_elevatedpoint_view_jcvyqw.elevation AS location_elevation,
    geometry_elevatedpoint_view_jcvyqw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jcvyqw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jcvyqw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jcvyqw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_gxzrle.title as varchar), '(' || organisation_unit_pt_gxzrle.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_gxzrle.href::text AS serviceprovider_href,
    service_callsigndetail_view_pacdxl.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_jlqbsb.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_zrvfgv.availability::jsonb as availability,
    notes_note_view_zgonmu.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_cwpsiu.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jcvyqw on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_jcvyqw.id
left join organisation.unit_pt organisation_unit_pt_gxzrle on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_gxzrle.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ifdgvs.id) as callsign
  from master_join master_join_qdgjtp
  join service.callsigndetail_view service_callsigndetail_lat_ifdgvs on master_join_qdgjtp.target_id = service_callsigndetail_lat_ifdgvs.id
  where master_join_qdgjtp.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_pacdxl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_oehmcq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_oehmcq.title AS varchar), '(' || service_radiocommunicationchannel_lat_oehmcq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_oehmcq.href
  )) as radiocommunication  from master_join master_join_tvqlwf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_oehmcq on master_join_tvqlwf.target_id = service_radiocommunicationchannel_lat_oehmcq.id
  where master_join_tvqlwf.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_jlqbsb on TRUE
left join lateral(
  select
  from master_join master_join_mptqbx
  join shared.contactinformation_view shared_contactinformation_lat_vklcxs on master_join_mptqbx.target_id = shared_contactinformation_lat_vklcxs.id
  where master_join_mptqbx.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_flzmql on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ccfxbt.id) as availability
  from master_join master_join_vgwlsm
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ccfxbt on master_join_vgwlsm.target_id = service_serviceoperationalstatus_lat_ccfxbt.id
  where master_join_vgwlsm.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_zrvfgv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aieemq.*) AS annotation
  from master_join master_join_amxemc
  join notes.note_view notes_note_lat_aieemq on master_join_amxemc.target_id = notes_note_lat_aieemq.id
  where master_join_amxemc.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_zgonmu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fpnlrf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fpnlrf.title AS varchar), '(' || airport_heliport_airportheliport_lat_fpnlrf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fpnlrf.href
  )) as airportheliport  from master_join master_join_otiwbe
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fpnlrf on master_join_otiwbe.target_id = airport_heliport_airportheliport_lat_fpnlrf.id
  where master_join_otiwbe.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_cwpsiu on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.aircraftstandcontamination_view', 'geometry.elevatedpoint_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gtabjr.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_gtabjr.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_xuxksj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xuxksj.longitude AS location_longitude,
    geometry_elevatedpoint_view_xuxksj.latitude AS location_latitude,
    geometry_elevatedpoint_view_xuxksj.elevation AS location_elevation,
    geometry_elevatedpoint_view_xuxksj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xuxksj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xuxksj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xuxksj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_vitsdq.title as varchar), '(' || airport_heliport_apronelement_pt_vitsdq.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_vitsdq.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_uuvjie.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_uuvjie.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uuvjie.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uuvjie.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uuvjie.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uuvjie.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_seuqnw.contaminant::jsonb as contaminant,
    notes_note_view_uhrdwd.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_wimmpa.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gtabjr on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gtabjr.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xuxksj on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_xuxksj.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_vitsdq on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_vitsdq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uuvjie on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_uuvjie.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_fdopgk.id) as contaminant
  from master_join master_join_hcojmk
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_fdopgk on master_join_hcojmk.target_id = airport_heliport_aircraftstandcontamination_lat_fdopgk.id
  where master_join_hcojmk.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_seuqnw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njmkah.*) AS annotation
  from master_join master_join_jofnzb
  join notes.note_view notes_note_lat_njmkah on master_join_jofnzb.target_id = notes_note_lat_njmkah.id
  where master_join_jofnzb.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_uhrdwd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_mjswil.id) as availability
  from master_join master_join_wjwpqi
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_mjswil on master_join_wjwpqi.target_id = airport_heliport_apronareaavailability_lat_mjswil.id
  where master_join_wjwpqi.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_wimmpa on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_slzxtf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_slzxtf.longitude AS location_longitude,
    geometry_elevatedpoint_view_slzxtf.latitude AS location_latitude,
    geometry_elevatedpoint_view_slzxtf.elevation AS location_elevation,
    geometry_elevatedpoint_view_slzxtf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_slzxtf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_slzxtf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_slzxtf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_dlwnvv.title as varchar), '(' || organisation_unit_pt_dlwnvv.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_dlwnvv.href::text AS serviceprovider_href,
    service_callsigndetail_view_aybcay.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_nyuzjw.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rzituo.availability::jsonb as availability,
    notes_note_view_ienpfu.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_twjlph.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_slzxtf on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_slzxtf.id
left join organisation.unit_pt organisation_unit_pt_dlwnvv on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_dlwnvv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_qxwexn.id) as callsign
  from master_join master_join_tlgmon
  join service.callsigndetail_view service_callsigndetail_lat_qxwexn on master_join_tlgmon.target_id = service_callsigndetail_lat_qxwexn.id
  where master_join_tlgmon.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_aybcay on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xgkkwn.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xgkkwn.title AS varchar), '(' || service_radiocommunicationchannel_lat_xgkkwn.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xgkkwn.href
  )) as radiocommunication  from master_join master_join_evpvmw
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xgkkwn on master_join_evpvmw.target_id = service_radiocommunicationchannel_lat_xgkkwn.id
  where master_join_evpvmw.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_nyuzjw on TRUE
left join lateral(
  select
  from master_join master_join_cdesbl
  join shared.contactinformation_view shared_contactinformation_lat_hnrwke on master_join_cdesbl.target_id = shared_contactinformation_lat_hnrwke.id
  where master_join_cdesbl.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_rkplbh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_khryzy.id) as availability
  from master_join master_join_bojkwt
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_khryzy on master_join_bojkwt.target_id = service_serviceoperationalstatus_lat_khryzy.id
  where master_join_bojkwt.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_rzituo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xaejai.*) AS annotation
  from master_join master_join_iufbbm
  join notes.note_view notes_note_lat_xaejai on master_join_iufbbm.target_id = notes_note_lat_xaejai.id
  where master_join_iufbbm.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_ienpfu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ndtxwg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ndtxwg.title AS varchar), '(' || airport_heliport_airportheliport_lat_ndtxwg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ndtxwg.href
  )) as airportheliport  from master_join master_join_lvpcxy
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ndtxwg on master_join_lvpcxy.target_id = airport_heliport_airportheliport_lat_ndtxwg.id
  where master_join_lvpcxy.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_twjlph on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_mtkmdu.title as varchar), '(' || airport_heliport_airportheliport_pt_mtkmdu.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_mtkmdu.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uriwvn.title as varchar), '(' || airport_heliport_airportheliport_pt_uriwvn.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_uriwvn.href::text AS dependentairport_href,
    notes_note_view_rntrgi.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mtkmdu on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_mtkmdu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uriwvn on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_uriwvn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jcabxz.*) AS annotation
  from master_join master_join_monekw
  join notes.note_view notes_note_lat_jcabxz on master_join_monekw.target_id = notes_note_lat_jcabxz.id
  where master_join_monekw.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_rntrgi on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.airportheliportcontamination_view', 'geometry.elevatedpoint_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'airport_heliport.airportheliportavailability_view', 'shared.contactinformation_view', 'airport_heliport.city_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_mwuknt.id)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_mwuknt.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_keavkv.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_keavkv.longitude AS arp_longitude,
    geometry_elevatedpoint_view_keavkv.latitude AS arp_latitude,
    geometry_elevatedpoint_view_keavkv.elevation AS arp_elevation,
    geometry_elevatedpoint_view_keavkv.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_keavkv.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_keavkv.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_keavkv.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_vaeekd.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_vaeekd.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_vaeekd.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_vaeekd.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_vaeekd.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_vaeekd.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_ctvqok.contaminant::jsonb as contaminant,
    airport_heliport_city_view_umixta.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_mrsizm.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_cckytw.availability::jsonb as availability,
    notes_note_view_mtlxcy.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_mwuknt on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_mwuknt.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_keavkv on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_keavkv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vaeekd on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_vaeekd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_qibdip.id) as contaminant
  from master_join master_join_chjnup
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_qibdip on master_join_chjnup.target_id = airport_heliport_airportheliportcontamination_lat_qibdip.id
  where master_join_chjnup.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_ctvqok on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_csrbpa.id) as servedcity
  from master_join master_join_ipaoqc
  join airport_heliport.city_view airport_heliport_city_lat_csrbpa on master_join_ipaoqc.target_id = airport_heliport_city_lat_csrbpa.id
  where master_join_ipaoqc.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_umixta on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_gqhnau.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_gqhnau.title AS varchar), '(' || airport_heliport_altimetersource_lat_gqhnau.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_gqhnau.href
  )) as altimetersource  from master_join master_join_hardtf
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_gqhnau on master_join_hardtf.target_id = airport_heliport_altimetersource_lat_gqhnau.id
  where master_join_hardtf.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_mrsizm on TRUE
left join lateral(
  select
  from master_join master_join_sybewn
  join shared.contactinformation_view shared_contactinformation_lat_rltafq on master_join_sybewn.target_id = shared_contactinformation_lat_rltafq.id
  where master_join_sybewn.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_reunqe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_fbskak.id) as availability
  from master_join master_join_ppmfxq
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_fbskak on master_join_ppmfxq.target_id = airport_heliport_airportheliportavailability_lat_fbskak.id
  where master_join_ppmfxq.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_cckytw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pnxmoh.*) AS annotation
  from master_join master_join_xuvuol
  join notes.note_view notes_note_lat_pnxmoh on master_join_xuvuol.target_id = notes_note_lat_pnxmoh.id
  where master_join_xuvuol.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_mtlxcy on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_oghfqh.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_oghfqh.elevation AS area_elevation,
    geometry_elevatedsurface_view_oghfqh.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_oghfqh.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_oghfqh.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_oghfqh.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_moysqb.title as varchar), '(' || airport_heliport_airportheliport_pt_moysqb.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_moysqb.href::text AS affectedairport_href,
    notes_note_view_crcvxi.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oghfqh on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_oghfqh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_moysqb on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_moysqb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqxexo.*) AS annotation
  from master_join master_join_jttuhy
  join notes.note_view notes_note_lat_jqxexo on master_join_jttuhy.target_id = notes_note_lat_jqxexo.id
  where master_join_jttuhy.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_crcvxi on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_airportheliportprotectionarea_pt_jrayro.title as varchar), '(' || airport_heliport_airportheliportprotectionarea_pt_jrayro.nilreason[1] || ')')::text AS markedprotectionarea,
    airport_heliport_airportheliportprotectionarea_pt_jrayro.href::text AS markedprotectionarea_href,
    airport_heliport_markingelement_view_erbhaj.element::jsonb as element,
    notes_note_view_hebzqs.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_pt_jrayro on airport_heliport.airportprotectionareamarking_ts.markedprotectionarea_id = airport_heliport_airportheliportprotectionarea_pt_jrayro.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ugnrxi.id) as element
  from master_join master_join_jpilju
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ugnrxi on master_join_jpilju.target_id = airport_heliport_markingelement_lat_ugnrxi.id
  where master_join_jpilju.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_erbhaj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rlclkb.*) AS annotation
  from master_join master_join_xjwvaf
  join notes.note_view notes_note_lat_rlclkb on master_join_xjwvaf.target_id = notes_note_lat_rlclkb.id
  where master_join_xjwvaf.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_hebzqs on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceType
-- ['service.oxygen_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'service.nitrogen_view', 'geometry.elevatedpoint_view', 'service.oil_view', 'service.fuel_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_cmsdkv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cmsdkv.longitude AS location_longitude,
    geometry_elevatedpoint_view_cmsdkv.latitude AS location_latitude,
    geometry_elevatedpoint_view_cmsdkv.elevation AS location_elevation,
    geometry_elevatedpoint_view_cmsdkv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cmsdkv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cmsdkv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cmsdkv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_yksjrb.title as varchar), '(' || organisation_unit_pt_yksjrb.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_yksjrb.href::text AS serviceprovider_href,
    service_callsigndetail_view_rnbnav.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_khpxbv.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_kpfsyj.availability::jsonb as availability,
    notes_note_view_fdwfms.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_pijiem.airportheliport::jsonb as airportheliport,
    service_fuel_view_dwnrgr.fuelsupply::jsonb as fuelsupply,
    service_oil_view_ihbjxm.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_ufttcu.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_dkyzxt.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cmsdkv on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_cmsdkv.id
left join organisation.unit_pt organisation_unit_pt_yksjrb on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_yksjrb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_sulwcz.id) as callsign
  from master_join master_join_takkuf
  join service.callsigndetail_view service_callsigndetail_lat_sulwcz on master_join_takkuf.target_id = service_callsigndetail_lat_sulwcz.id
  where master_join_takkuf.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_rnbnav on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_howyzb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_howyzb.title AS varchar), '(' || service_radiocommunicationchannel_lat_howyzb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_howyzb.href
  )) as radiocommunication  from master_join master_join_yarcyn
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_howyzb on master_join_yarcyn.target_id = service_radiocommunicationchannel_lat_howyzb.id
  where master_join_yarcyn.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_khpxbv on TRUE
left join lateral(
  select
  from master_join master_join_ydtlva
  join shared.contactinformation_view shared_contactinformation_lat_voyofx on master_join_ydtlva.target_id = shared_contactinformation_lat_voyofx.id
  where master_join_ydtlva.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_huzwwo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ketsyi.id) as availability
  from master_join master_join_exekmd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ketsyi on master_join_exekmd.target_id = service_serviceoperationalstatus_lat_ketsyi.id
  where master_join_exekmd.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_kpfsyj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kpcmln.*) AS annotation
  from master_join master_join_tyhlvi
  join notes.note_view notes_note_lat_kpcmln on master_join_tyhlvi.target_id = notes_note_lat_kpcmln.id
  where master_join_tyhlvi.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_fdwfms on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vjmmhu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vjmmhu.title AS varchar), '(' || airport_heliport_airportheliport_lat_vjmmhu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vjmmhu.href
  )) as airportheliport  from master_join master_join_kxykyo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vjmmhu on master_join_kxykyo.target_id = airport_heliport_airportheliport_lat_vjmmhu.id
  where master_join_kxykyo.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_pijiem on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_csjdww.id) as fuelsupply
  from master_join master_join_xqhfln
  join service.fuel_view service_fuel_lat_csjdww on master_join_xqhfln.target_id = service_fuel_lat_csjdww.id
  where master_join_xqhfln.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_dwnrgr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_gcfqoo.id) as oilsupply
  from master_join master_join_sbzmww
  join service.oil_view service_oil_lat_gcfqoo on master_join_sbzmww.target_id = service_oil_lat_gcfqoo.id
  where master_join_sbzmww.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_ihbjxm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_ykagwo.id) as nitrogensupply
  from master_join master_join_fzxkjc
  join service.nitrogen_view service_nitrogen_lat_ykagwo on master_join_fzxkjc.target_id = service_nitrogen_lat_ykagwo.id
  where master_join_fzxkjc.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_ufttcu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_ybahaz.id) as oxygensupply
  from master_join master_join_igrwcz
  join service.oxygen_view service_oxygen_lat_ybahaz on master_join_igrwcz.target_id = service_oxygen_lat_ybahaz.id
  where master_join_igrwcz.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_dkyzxt on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_fnrogi.title as varchar), '(' || airspace_airspace_pt_fnrogi.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_fnrogi.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_zoczye.title as varchar), '(' || airspace_airspace_pt_zoczye.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_zoczye.href::text AS enteredairspace_href,
    notes_note_view_jkanyp.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_fnrogi on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_fnrogi.id
left join airspace.airspace_pt airspace_airspace_pt_zoczye on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_zoczye.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cooqjt.*) AS annotation
  from master_join master_join_hhphse
  join notes.note_view notes_note_lat_cooqjt on master_join_hhphse.target_id = notes_note_lat_cooqjt.id
  where master_join_hhphse.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_jkanyp on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceType
-- ['airspace.airspacelayerclass_view', 'notes.note_view', 'airspace.airspacegeometrycomponent_view', 'airspace.airspaceactivation_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_ugiivg.title as varchar), '(' || routes_route_pt_ugiivg.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_ugiivg.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_pliqne.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_leecmw.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_gpkdeb.activation::jsonb as activation,
    notes_note_view_tgngss.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_ugiivg on airspace.airspace_ts.protectedroute_id = routes_route_pt_ugiivg.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_igqaxm.id) as clazz
  from master_join master_join_chsgft
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_igqaxm on master_join_chsgft.target_id = airspace_airspacelayerclass_lat_igqaxm.id
  where master_join_chsgft.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_pliqne on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_oiceny.id) as geometrycomponent
  from master_join master_join_frmltk
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_oiceny on master_join_frmltk.target_id = airspace_airspacegeometrycomponent_lat_oiceny.id
  where master_join_frmltk.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_leecmw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_qcigqo.id) as activation
  from master_join master_join_nldfrl
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_qcigqo on master_join_nldfrl.target_id = airspace_airspaceactivation_lat_qcigqo.id
  where master_join_nldfrl.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_gpkdeb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_avfwjs.*) AS annotation
  from master_join master_join_orizmy
  join notes.note_view notes_note_lat_avfwjs on master_join_orizmy.target_id = notes_note_lat_avfwjs.id
  where master_join_orizmy.source_id = airspace.airspace_ts.id
) as notes_note_view_tgngss on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_vyqmds.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vyqmds.longitude AS location_longitude,
    geometry_elevatedpoint_view_vyqmds.latitude AS location_latitude,
    geometry_elevatedpoint_view_vyqmds.elevation AS location_elevation,
    geometry_elevatedpoint_view_vyqmds.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vyqmds.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vyqmds.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vyqmds.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pshtyv.title as varchar), '(' || organisation_unit_pt_pshtyv.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pshtyv.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_hniauv.title as varchar), '(' || navaids_points_directionfinder_pt_hniauv.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_hniauv.href::text AS aircraftlocator_href,
    service_callsigndetail_view_kokboy.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_hlebom.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rvbifp.availability::jsonb as availability,
    notes_note_view_jcnjml.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_lxgddp.clientairport::jsonb as clientairport,
    airspace_airspace_pt_nbwgzd.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_ceklhn.clientroute::jsonb as clientroute,
    procedure_procedure_pt_vtmblc.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_upolut.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_pmsccv.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vyqmds on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_vyqmds.id
left join organisation.unit_pt organisation_unit_pt_pshtyv on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_pshtyv.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_hniauv on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_hniauv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_lrygch.id) as callsign
  from master_join master_join_lkcqud
  join service.callsigndetail_view service_callsigndetail_lat_lrygch on master_join_lkcqud.target_id = service_callsigndetail_lat_lrygch.id
  where master_join_lkcqud.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_kokboy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_yescys.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_yescys.title AS varchar), '(' || service_radiocommunicationchannel_lat_yescys.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_yescys.href
  )) as radiocommunication  from master_join master_join_xtahou
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_yescys on master_join_xtahou.target_id = service_radiocommunicationchannel_lat_yescys.id
  where master_join_xtahou.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_hlebom on TRUE
left join lateral(
  select
  from master_join master_join_ympdep
  join shared.contactinformation_view shared_contactinformation_lat_jtzmlc on master_join_ympdep.target_id = shared_contactinformation_lat_jtzmlc.id
  where master_join_ympdep.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_yivlyr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_rzeiej.id) as availability
  from master_join master_join_mrzolv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_rzeiej on master_join_mrzolv.target_id = service_serviceoperationalstatus_lat_rzeiej.id
  where master_join_mrzolv.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_rvbifp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zoevto.*) AS annotation
  from master_join master_join_gymcaq
  join notes.note_view notes_note_lat_zoevto on master_join_gymcaq.target_id = notes_note_lat_zoevto.id
  where master_join_gymcaq.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_jcnjml on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ufgrze.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ufgrze.title AS varchar), '(' || airport_heliport_airportheliport_lat_ufgrze.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ufgrze.href
  )) as clientairport  from master_join master_join_apkivu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ufgrze on master_join_apkivu.target_id = airport_heliport_airportheliport_lat_ufgrze.id
  where master_join_apkivu.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_lxgddp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ctqtoa.id,
      'title', coalesce(cast(airspace_airspace_lat_ctqtoa.title AS varchar), '(' || airspace_airspace_lat_ctqtoa.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ctqtoa.href
  )) as clientairspace  from master_join master_join_cfjoqz
  join airspace.airspace_pt airspace_airspace_lat_ctqtoa on master_join_cfjoqz.target_id = airspace_airspace_lat_ctqtoa.id
  where master_join_cfjoqz.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_nbwgzd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_teqjqn.id) as clientroute
  from master_join master_join_imkuxm
  join routes.routeportion_view routes_routeportion_lat_teqjqn on master_join_imkuxm.target_id = routes_routeportion_lat_teqjqn.id
  where master_join_imkuxm.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_ceklhn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_bwozqa.id,
      'title', coalesce(cast(procedure_procedure_lat_bwozqa.title AS varchar), '(' || procedure_procedure_lat_bwozqa.nilreason[1] || ')'),
      'href', procedure_procedure_lat_bwozqa.href
  )) as clientprocedure  from master_join master_join_rkpbvh
  join procedure.procedure_pt procedure_procedure_lat_bwozqa on master_join_rkpbvh.target_id = procedure_procedure_lat_bwozqa.id
  where master_join_rkpbvh.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_vtmblc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_hhheni.id,
      'title', coalesce(cast(holding_holdingpattern_lat_hhheni.title AS varchar), '(' || holding_holdingpattern_lat_hhheni.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_hhheni.href
  )) as clientholding  from master_join master_join_nddzub
  join holding.holdingpattern_pt holding_holdingpattern_lat_hhheni on master_join_nddzub.target_id = holding_holdingpattern_lat_hhheni.id
  where master_join_nddzub.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_upolut on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_dhwgpe.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_dhwgpe.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_dhwgpe.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_dhwgpe.href
  )) as clientaerialrefuelling  from master_join master_join_lnkgkl
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_dhwgpe on master_join_lnkgkl.target_id = aerial_refuelling_aerialrefuelling_lat_dhwgpe.id
  where master_join_lnkgkl.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_pmsccv on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_umckps.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_umckps.longitude AS location_longitude,
    geometry_elevatedpoint_view_umckps.latitude AS location_latitude,
    geometry_elevatedpoint_view_umckps.elevation AS location_elevation,
    geometry_elevatedpoint_view_umckps.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_umckps.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_umckps.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_umckps.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uunxkg.title as varchar), '(' || organisation_unit_pt_uunxkg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_uunxkg.href::text AS serviceprovider_href,
    service_callsigndetail_view_emgcxq.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_rrjpju.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_yzwjbg.availability::jsonb as availability,
    notes_note_view_ojhcko.annotation::jsonb as annotation,
    airspace_airspace_pt_euyzqs.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_lvcxep.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_ohkxvv.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_umckps on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_umckps.id
left join organisation.unit_pt organisation_unit_pt_uunxkg on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_uunxkg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ubuvvj.id) as callsign
  from master_join master_join_uffuph
  join service.callsigndetail_view service_callsigndetail_lat_ubuvvj on master_join_uffuph.target_id = service_callsigndetail_lat_ubuvvj.id
  where master_join_uffuph.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_emgcxq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xnavgp.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xnavgp.title AS varchar), '(' || service_radiocommunicationchannel_lat_xnavgp.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xnavgp.href
  )) as radiocommunication  from master_join master_join_eqyfjq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xnavgp on master_join_eqyfjq.target_id = service_radiocommunicationchannel_lat_xnavgp.id
  where master_join_eqyfjq.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_rrjpju on TRUE
left join lateral(
  select
  from master_join master_join_yzodpr
  join shared.contactinformation_view shared_contactinformation_lat_dygcoz on master_join_yzodpr.target_id = shared_contactinformation_lat_dygcoz.id
  where master_join_yzodpr.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_ybnenf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_wzhssg.id) as availability
  from master_join master_join_isjwhj
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_wzhssg on master_join_isjwhj.target_id = service_serviceoperationalstatus_lat_wzhssg.id
  where master_join_isjwhj.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_yzwjbg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hbtpwb.*) AS annotation
  from master_join master_join_mxljoi
  join notes.note_view notes_note_lat_hbtpwb on master_join_mxljoi.target_id = notes_note_lat_hbtpwb.id
  where master_join_mxljoi.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_ojhcko on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_rjvece.id,
      'title', coalesce(cast(airspace_airspace_lat_rjvece.title AS varchar), '(' || airspace_airspace_lat_rjvece.nilreason[1] || ')'),
      'href', airspace_airspace_lat_rjvece.href
  )) as clientairspace  from master_join master_join_iixgzk
  join airspace.airspace_pt airspace_airspace_lat_rjvece on master_join_iixgzk.target_id = airspace_airspace_lat_rjvece.id
  where master_join_iixgzk.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_euyzqs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_nepdnu.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_nepdnu.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_nepdnu.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_nepdnu.href
  )) as clientaerialrefuelling  from master_join master_join_gttywh
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_nepdnu on master_join_gttywh.target_id = aerial_refuelling_aerialrefuelling_lat_nepdnu.id
  where master_join_gttywh.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_lvcxep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_rnjqah.id) as clientroute
  from master_join master_join_nnmugd
  join routes.routeportion_view routes_routeportion_lat_rnjqah on master_join_nnmugd.target_id = routes_routeportion_lat_rnjqah.id
  where master_join_nnmugd.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_ohkxvv on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_jrlvho.availability::jsonb as availability,
    notes_note_view_zdcoqk.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_acrlqx.id) as availability
  from master_join master_join_scovuj
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_acrlqx on master_join_scovuj.target_id = airport_heliport_altimetersourcestatus_lat_acrlqx.id
  where master_join_scovuj.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_jrlvho on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ipktvz.*) AS annotation
  from master_join master_join_scqxvh
  join notes.note_view notes_note_lat_ipktvz on master_join_scqxvh.target_id = notes_note_lat_ipktvz.id
  where master_join_scqxvh.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_zdcoqk on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_vnzdhk.title as varchar), '(' || navaids_points_designatedpoint_pt_vnzdhk.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_vnzdhk.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_iqeefo.title as varchar), '(' || navaids_points_designatedpoint_pt_iqeefo.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_iqeefo.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pviftz.title as varchar), '(' || navaids_points_navaid_pt_pviftz.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_pviftz.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xprior.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xprior.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_xprior.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zimydj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zimydj.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zimydj.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zqlsed.title as varchar), '(' || airport_heliport_airportheliport_pt_zqlsed.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zqlsed.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ugrdbi.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_ugrdbi.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ugrdbi.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ugrdbi.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_dubarg.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vnzdhk on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_vnzdhk.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_iqeefo on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_iqeefo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pviftz on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_pviftz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xprior on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xprior.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zimydj on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zimydj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqlsed on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_zqlsed.id
left join geometry.point_view geometry_point_view_ugrdbi on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_ugrdbi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tuyler.*) AS annotation
  from master_join master_join_yjlxbm
  join notes.note_view notes_note_lat_tuyler on master_join_yjlxbm.target_id = notes_note_lat_tuyler.id
  where master_join_yjlxbm.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_dubarg on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_rcxlde.title as varchar), '(' || airport_heliport_runwaydirection_pt_rcxlde.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_rcxlde.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_krtfon.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_sfvqle.availability::jsonb as availability,
    notes_note_view_ffeyqy.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_rcxlde on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_rcxlde.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_axuqsc.id) as element
  from master_join master_join_tzdawn
  join shared.lightelement_view shared_lightelement_lat_axuqsc on master_join_tzdawn.target_id = shared_lightelement_lat_axuqsc.id
  where master_join_tzdawn.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_krtfon on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ecacmv.id) as availability
  from master_join master_join_izhcwo
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ecacmv on master_join_izhcwo.target_id = airport_heliport_groundlightingavailability_lat_ecacmv.id
  where master_join_izhcwo.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_sfvqle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xodndd.*) AS annotation
  from master_join master_join_goucav
  join notes.note_view notes_note_lat_xodndd on master_join_goucav.target_id = notes_note_lat_xodndd.id
  where master_join_goucav.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_ffeyqy on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_wnhggc.title as varchar), '(' || airport_heliport_apron_pt_wnhggc.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_wnhggc.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kqawav.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_kqawav.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_fkjgmw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fkjgmw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fkjgmw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fkjgmw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fkjgmw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fkjgmw.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_hpvhhz.supplyservice::jsonb as supplyservice,
    notes_note_view_wtvsix.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_ifbhbr.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_wnhggc on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_wnhggc.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kqawav on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kqawav.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fkjgmw on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_fkjgmw.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_tnugmc.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_tnugmc.title AS varchar), '(' || service_airportsuppliesservice_lat_tnugmc.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_tnugmc.href
  )) as supplyservice  from master_join master_join_xbfxoa
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_tnugmc on master_join_xbfxoa.target_id = service_airportsuppliesservice_lat_tnugmc.id
  where master_join_xbfxoa.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_hpvhhz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jghaxq.*) AS annotation
  from master_join master_join_rvfaop
  join notes.note_view notes_note_lat_jghaxq on master_join_rvfaop.target_id = notes_note_lat_jghaxq.id
  where master_join_rvfaop.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_wtvsix on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_rblcno.id) as availability
  from master_join master_join_lyawcb
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_rblcno on master_join_lyawcb.target_id = airport_heliport_apronareaavailability_lat_rblcno.id
  where master_join_lyawcb.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_ifbhbr on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_bojswu.title as varchar), '(' || airport_heliport_apron_pt_bojswu.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_bojswu.href::text AS lightedapron_href,
    shared_lightelement_view_nadkgn.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_lqyxtx.availability::jsonb as availability,
    notes_note_view_fvvuhf.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_bojswu on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_bojswu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lgvetf.id) as element
  from master_join master_join_xxyedf
  join shared.lightelement_view shared_lightelement_lat_lgvetf on master_join_xxyedf.target_id = shared_lightelement_lat_lgvetf.id
  where master_join_xxyedf.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_nadkgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vvnxrj.id) as availability
  from master_join master_join_vyscix
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_vvnxrj on master_join_vyscix.target_id = airport_heliport_groundlightingavailability_lat_vvnxrj.id
  where master_join_vyscix.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_lqyxtx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfouyn.*) AS annotation
  from master_join master_join_gltldi
  join notes.note_view notes_note_lat_rfouyn on master_join_gltldi.target_id = notes_note_lat_rfouyn.id
  where master_join_gltldi.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_fvvuhf on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_kpoyzw.title as varchar), '(' || airport_heliport_apron_pt_kpoyzw.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_kpoyzw.href::text AS markedapron_href,
    airport_heliport_markingelement_view_bdlrsm.element::jsonb as element,
    notes_note_view_fmxark.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_kpoyzw on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_kpoyzw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_skqyxx.id) as element
  from master_join master_join_qwhadw
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_skqyxx on master_join_qwhadw.target_id = airport_heliport_markingelement_lat_skqyxx.id
  where master_join_qwhadw.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_bdlrsm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtzmzu.*) AS annotation
  from master_join master_join_xvweyx
  join notes.note_view notes_note_lat_rtzmzu on master_join_xvweyx.target_id = notes_note_lat_rtzmzu.id
  where master_join_xvweyx.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_fmxark on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronType
-- ['airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_iwhnwk.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_iwhnwk.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_mvibki.title as varchar), '(' || airport_heliport_airportheliport_pt_mvibki.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mvibki.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_ozmlrb.contaminant::jsonb as contaminant,
    notes_note_view_uuhdee.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_eyokmo.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_iwhnwk on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_iwhnwk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mvibki on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mvibki.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_jwsfoa.id) as contaminant
  from master_join master_join_ubnzzs
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_jwsfoa on master_join_ubnzzs.target_id = airport_heliport_aproncontamination_lat_jwsfoa.id
  where master_join_ubnzzs.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_ozmlrb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqjman.*) AS annotation
  from master_join master_join_yqzmxc
  join notes.note_view notes_note_lat_gqjman on master_join_yqzmxc.target_id = notes_note_lat_gqjman.id
  where master_join_yqzmxc.source_id = airport_heliport.apron_ts.id
) as notes_note_view_uuhdee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_piijmw.id) as availability
  from master_join master_join_iklhed
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_piijmw on master_join_iklhed.target_id = airport_heliport_apronareaavailability_lat_piijmw.id
  where master_join_iklhed.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_eyokmo on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ypjdhf.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ypjdhf.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_dbbqpj.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_dbbqpj.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_dbbqpj.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_dbbqpj.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_dbbqpj.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_dbbqpj.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_hasnsi.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_hasnsi.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_hasnsi.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_hasnsi.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_hasnsi.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_hasnsi.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_qyfawu.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_qyfawu.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_qyfawu.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_qyfawu.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_qyfawu.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_qyfawu.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_qyfawu.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_qyfawu.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_hblhfj.runwaydirection::jsonb as runwaydirection,
    notes_note_view_zocysy.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ypjdhf on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ypjdhf.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_dbbqpj on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_dbbqpj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hasnsi on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_hasnsi.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qyfawu on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_qyfawu.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ufxgid.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ufxgid.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ufxgid.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ufxgid.href
  )) as runwaydirection  from master_join master_join_taherx
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ufxgid on master_join_taherx.target_id = airport_heliport_runwaydirection_lat_ufxgid.id
  where master_join_taherx.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_hblhfj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_elrmrp.*) AS annotation
  from master_join master_join_ybzfhb
  join notes.note_view notes_note_lat_elrmrp on master_join_ybzfhb.target_id = notes_note_lat_elrmrp.id
  where master_join_ybzfhb.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_zocysy on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_uittfu.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_uittfu.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xitavw.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_xitavw.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pgocbm.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_pgocbm.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_lgzeiv.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_lgzeiv.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nqipop.title as varchar), '(' || navaids_points_angleindication_pt_nqipop.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_nqipop.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_dyaqaw.title as varchar), '(' || navaids_points_distanceindication_pt_dyaqaw.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_dyaqaw.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qyqjaq.id)::jsonb AS holding,
    procedure_holdinguse_view_qyqjaq.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_srvgbo.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_srvgbo.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_srvgbo.href::text AS approach_href,
    shared_aircraftcharacteristic_view_yhbqom.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_swtgdq.designsurface::jsonb as designsurface,
    notes_note_view_dsdmvt.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_uittfu on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_uittfu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xitavw on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_xitavw.id
left join geometry.curve_view geometry_curve_view_lgzeiv on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_lgzeiv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pgocbm on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_pgocbm.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nqipop on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_nqipop.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_dyaqaw on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_dyaqaw.id
left join procedure.holdinguse_view procedure_holdinguse_view_qyqjaq on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_qyqjaq.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_srvgbo on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_srvgbo.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ldizvv.id) as aircraftcategory
  from master_join master_join_srldvb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ldizvv on master_join_srldvb.target_id = shared_aircraftcharacteristic_lat_ldizvv.id
  where master_join_srldvb.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_yhbqom on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qxbvxi.id) as designsurface
  from master_join master_join_fmufrc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qxbvxi on master_join_fmufrc.target_id = shared_obstacleassessmentarea_lat_qxbvxi.id
  where master_join_fmufrc.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_swtgdq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jsxbwm.*) AS annotation
  from master_join master_join_qfgkzc
  join notes.note_view notes_note_lat_jsxbwm on master_join_qfgkzc.target_id = notes_note_lat_jsxbwm.id
  where master_join_qfgkzc.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_dsdmvt on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nhqdwz.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_nhqdwz.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_gbmybk.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_gbmybk.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pcphet.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_pcphet.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_nbdwvm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_nbdwvm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_lfykhk.title as varchar), '(' || navaids_points_angleindication_pt_lfykhk.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_lfykhk.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jowcpr.title as varchar), '(' || navaids_points_distanceindication_pt_jowcpr.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_jowcpr.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ooxhpq.id)::jsonb AS holding,
    procedure_holdinguse_view_ooxhpq.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_zxdgcy.title as varchar), '(' || procedure_standardinstrumentarrival_pt_zxdgcy.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_zxdgcy.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_duqrjf.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_lntyul.designsurface::jsonb as designsurface,
    notes_note_view_qisozn.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nhqdwz on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_nhqdwz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_gbmybk on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_gbmybk.id
left join geometry.curve_view geometry_curve_view_nbdwvm on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_nbdwvm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pcphet on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_pcphet.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_lfykhk on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_lfykhk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jowcpr on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_jowcpr.id
left join procedure.holdinguse_view procedure_holdinguse_view_ooxhpq on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_ooxhpq.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_zxdgcy on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_zxdgcy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_nmjbdw.id) as aircraftcategory
  from master_join master_join_eguhrw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_nmjbdw on master_join_eguhrw.target_id = shared_aircraftcharacteristic_lat_nmjbdw.id
  where master_join_eguhrw.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_duqrjf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_tnzjbm.id) as designsurface
  from master_join master_join_aepbnm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_tnzjbm on master_join_aepbnm.target_id = shared_obstacleassessmentarea_lat_tnzjbm.id
  where master_join_aepbnm.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_lntyul on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_whsiaj.*) AS annotation
  from master_join master_join_nhrczz
  join notes.note_view notes_note_lat_whsiaj on master_join_nhrczz.target_id = notes_note_lat_whsiaj.id
  where master_join_nhrczz.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_qisozn on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_seblht.title as varchar), '(' || organisation_organisationauthority_pt_seblht.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_seblht.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_fmjxkl.title as varchar), '(' || airspace_airspace_pt_fmjxkl.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_fmjxkl.href::text AS assignedairspace_href,
    notes_note_view_yzixrx.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_seblht on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_seblht.id
left join airspace.airspace_pt airspace_airspace_pt_fmjxkl on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_fmjxkl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wulmqq.*) AS annotation
  from master_join master_join_buieow
  join notes.note_view notes_note_lat_wulmqq on master_join_buieow.target_id = notes_note_lat_wulmqq.id
  where master_join_buieow.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_yzixrx on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_japsdw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_japsdw.longitude AS location_longitude,
    geometry_elevatedpoint_view_japsdw.latitude AS location_latitude,
    geometry_elevatedpoint_view_japsdw.elevation AS location_elevation,
    geometry_elevatedpoint_view_japsdw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_japsdw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_japsdw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_japsdw.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fordox.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_osibjf.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qlbknb.availability::jsonb as availability,
    notes_note_view_xbmbrj.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_japsdw on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_japsdw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zvrvpk.id) as authority
  from master_join master_join_hscrmp
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zvrvpk on master_join_hscrmp.target_id = navaids_points_authorityfornavaidequipment_lat_zvrvpk.id
  where master_join_hscrmp.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_fordox on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_dehpbc.id) as monitoring
  from master_join master_join_rqrfkd
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_dehpbc on master_join_rqrfkd.target_id = navaids_points_navaidequipmentmonitoring_lat_dehpbc.id
  where master_join_rqrfkd.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_osibjf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wqkvex.id) as availability
  from master_join master_join_acrjya
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wqkvex on master_join_acrjya.target_id = navaids_points_navaidoperationalstatus_lat_wqkvex.id
  where master_join_acrjya.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_qlbknb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vjirrv.*) AS annotation
  from master_join master_join_uksdxc
  join notes.note_view notes_note_lat_vjirrv on master_join_uksdxc.target_id = notes_note_lat_vjirrv.id
  where master_join_uksdxc.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_xbmbrj on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointType
-- ['routes.routeportion_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_uaaeoy.title as varchar), '(' || navaids_points_designatedpoint_pt_uaaeoy.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_uaaeoy.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_hmusyn.title as varchar), '(' || navaids_points_navaid_pt_hmusyn.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_hmusyn.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kjidfe.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kjidfe.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_kjidfe.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cfvdid.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cfvdid.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cfvdid.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_exhpqw.title as varchar), '(' || airport_heliport_airportheliport_pt_exhpqw.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_exhpqw.href::text AS locationairportreferencepoint_href,
    geometry_point_view_dvwaci.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_dvwaci.longitude AS locationposition_longitude,
    geometry_point_view_dvwaci.latitude AS locationposition_latitude,
    geometry_point_view_dvwaci.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_ttrcbi.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_ttrcbi.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_zntduv.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uaaeoy on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uaaeoy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_hmusyn on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_hmusyn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kjidfe on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kjidfe.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cfvdid on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cfvdid.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_exhpqw on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_exhpqw.id
left join geometry.point_view geometry_point_view_dvwaci on routes.changeoverpoint_ts.location_position_id = geometry_point_view_dvwaci.id
left join routes.routeportion_view routes_routeportion_view_ttrcbi on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_ttrcbi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_paxkrg.*) AS annotation
  from master_join master_join_rceeej
  join notes.note_view notes_note_lat_paxkrg on master_join_rceeej.target_id = notes_note_lat_paxkrg.id
  where master_join_rceeej.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_zntduv on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_vgsrrd.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_vgsrrd.longitude AS position_longitude,
    geometry_elevatedpoint_view_vgsrrd.latitude AS position_latitude,
    geometry_elevatedpoint_view_vgsrrd.elevation AS position_elevation,
    geometry_elevatedpoint_view_vgsrrd.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_vgsrrd.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_vgsrrd.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_vgsrrd.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_nzyxhy.title as varchar), '(' || airport_heliport_airportheliport_pt_nzyxhy.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_nzyxhy.href::text AS airportheliport_href,
    notes_note_view_xsvkjr.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vgsrrd on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_vgsrrd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nzyxhy on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_nzyxhy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hqswkv.*) AS annotation
  from master_join master_join_nofqbc
  join notes.note_view notes_note_lat_hqswkv on master_join_nofqbc.target_id = notes_note_lat_hqswkv.id
  where master_join_nofqbc.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_xsvkjr on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_zrajni.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_zrajni.longitude AS position_longitude,
    geometry_elevatedpoint_view_zrajni.latitude AS position_latitude,
    geometry_elevatedpoint_view_zrajni.elevation AS position_elevation,
    geometry_elevatedpoint_view_zrajni.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_zrajni.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_zrajni.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_zrajni.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_rgllpm.title as varchar), '(' || airport_heliport_airportheliport_pt_rgllpm.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_rgllpm.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_yplfip.title as varchar), '(' || navaids_points_vor_pt_yplfip.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_yplfip.href::text AS checkpointfacility_href,
    notes_note_view_vkihod.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zrajni on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_zrajni.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rgllpm on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_rgllpm.id
left join navaids_points.vor_pt navaids_points_vor_pt_yplfip on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_yplfip.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qreymk.*) AS annotation
  from master_join master_join_umlqbc
  join notes.note_view notes_note_lat_qreymk on master_join_umlqbc.target_id = notes_note_lat_qreymk.id
  where master_join_umlqbc.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_vkihod on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaType
-- ['notes.note_view', 'geometry.surface_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_saftco.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_saftco.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_dzvsmu.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_dzvsmu.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_dzvsmu.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_skvgsd.id)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_skvgsd.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_papgec.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_mhkhgb.designsurface::jsonb as designsurface,
    notes_note_view_mwulix.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_saftco on public.circlingarea_ts.extent_id = geometry_surface_view_saftco.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_dzvsmu on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_dzvsmu.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_skvgsd on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_skvgsd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_fngevq.id) as condition
  from master_join master_join_aepqfu
  join procedure.approachcondition_view procedure_approachcondition_lat_fngevq on master_join_aepqfu.target_id = procedure_approachcondition_lat_fngevq.id
  where master_join_aepqfu.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_papgec on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_vcybqs.id) as designsurface
  from master_join master_join_bnxpzu
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_vcybqs on master_join_bnxpzu.target_id = shared_obstacleassessmentarea_lat_vcybqs.id
  where master_join_bnxpzu.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_mhkhgb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_berxek.*) AS annotation
  from master_join master_join_qxmbll
  join notes.note_view notes_note_lat_berxek on master_join_qxmbll.target_id = notes_note_lat_berxek.id
  where master_join_qxmbll.source_id = public.circlingarea_ts.id
) as notes_note_view_mwulix on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_msxbsw.title as varchar), '(' || airport_heliport_deicingarea_pt_msxbsw.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_msxbsw.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_onrhij.element::jsonb as element,
    notes_note_view_ejtdfd.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_msxbsw on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_msxbsw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_hedhnj.id) as element
  from master_join master_join_swobws
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_hedhnj on master_join_swobws.target_id = airport_heliport_markingelement_lat_hedhnj.id
  where master_join_swobws.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_onrhij on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsvuql.*) AS annotation
  from master_join master_join_leeyca
  join notes.note_view notes_note_lat_bsvuql on master_join_leeyca.target_id = notes_note_lat_bsvuql.id
  where master_join_leeyca.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_ejtdfd on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_qngwnp.title as varchar), '(' || airport_heliport_apron_pt_qngwnp.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_qngwnp.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_bqsiuq.title as varchar), '(' || airport_heliport_taxiway_pt_bqsiuq.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_bqsiuq.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_kztpuf.title as varchar), '(' || airport_heliport_aircraftstand_pt_kztpuf.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_kztpuf.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_odrcba.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_odrcba.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_uymazh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_uymazh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uymazh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uymazh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uymazh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uymazh.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_kbnrkt.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_upmcde.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_qngwnp on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_qngwnp.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_bqsiuq on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_bqsiuq.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_kztpuf on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_kztpuf.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_odrcba on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_odrcba.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uymazh on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_uymazh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ssmlyj.*) AS annotation
  from master_join master_join_taigcc
  join notes.note_view notes_note_lat_ssmlyj on master_join_taigcc.target_id = notes_note_lat_ssmlyj.id
  where master_join_taigcc.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_kbnrkt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_uagbvg.id) as availability
  from master_join master_join_vcszoj
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_uagbvg on master_join_vcszoj.target_id = airport_heliport_apronareaavailability_lat_uagbvg.id
  where master_join_vcszoj.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_upmcde on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'procedure.departurearrivalcondition_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_iobhkr.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_iobhkr.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kqouaz.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_kqouaz.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ovfhol.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_ovfhol.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_yssizb.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_yssizb.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_rknplz.title as varchar), '(' || navaids_points_angleindication_pt_rknplz.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_rknplz.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_wvlbjw.title as varchar), '(' || navaids_points_distanceindication_pt_wvlbjw.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_wvlbjw.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_zueriw.id)::jsonb AS holding,
    procedure_holdinguse_view_zueriw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_lihirw.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_lihirw.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_lihirw.href::text AS departure_href,
    shared_aircraftcharacteristic_view_oqggts.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_tvhkmv.designsurface::jsonb as designsurface,
    notes_note_view_xlitul.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_wxalhg.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_iobhkr on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_iobhkr.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kqouaz on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_kqouaz.id
left join geometry.curve_view geometry_curve_view_yssizb on procedure.departureleg_ts.trajectory_id = geometry_curve_view_yssizb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ovfhol on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ovfhol.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_rknplz on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_rknplz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_wvlbjw on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_wvlbjw.id
left join procedure.holdinguse_view procedure_holdinguse_view_zueriw on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_zueriw.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_lihirw on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_lihirw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xtzoll.id) as aircraftcategory
  from master_join master_join_dojdtu
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xtzoll on master_join_dojdtu.target_id = shared_aircraftcharacteristic_lat_xtzoll.id
  where master_join_dojdtu.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_oqggts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_phvfgd.id) as designsurface
  from master_join master_join_vhyolq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_phvfgd on master_join_vhyolq.target_id = shared_obstacleassessmentarea_lat_phvfgd.id
  where master_join_vhyolq.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_tvhkmv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cboeyy.*) AS annotation
  from master_join master_join_ibzcad
  join notes.note_view notes_note_lat_cboeyy on master_join_ibzcad.target_id = notes_note_lat_cboeyy.id
  where master_join_ibzcad.source_id = procedure.departureleg_ts.id
) as notes_note_view_xlitul on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_alntbj.id) as condition
  from master_join master_join_mubxgt
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_alntbj on master_join_mubxgt.target_id = procedure_departurearrivalcondition_lat_alntbj.id
  where master_join_mubxgt.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_wxalhg on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_cnibnz.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_cnibnz.longitude AS location_longitude,
    geometry_point_view_cnibnz.latitude AS location_latitude,
    geometry_point_view_cnibnz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bebxtw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bebxtw.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_bebxtw.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_llfwsy.title as varchar), '(' || airport_heliport_airportheliport_pt_llfwsy.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_llfwsy.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vlqkez.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vlqkez.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vlqkez.href::text AS runwaypoint_href,
    notes_note_view_cpmnkh.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_cnibnz on navaids_points.designatedpoint_ts.location_id = geometry_point_view_cnibnz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bebxtw on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_bebxtw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_llfwsy on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_llfwsy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vlqkez on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vlqkez.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_arnsli.*) AS annotation
  from master_join master_join_scytqw
  join notes.note_view notes_note_lat_arnsli on master_join_scytqw.target_id = notes_note_lat_arnsli.id
  where master_join_scytqw.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_cpmnkh on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_fnptzu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fnptzu.longitude AS location_longitude,
    geometry_elevatedpoint_view_fnptzu.latitude AS location_latitude,
    geometry_elevatedpoint_view_fnptzu.elevation AS location_elevation,
    geometry_elevatedpoint_view_fnptzu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fnptzu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fnptzu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fnptzu.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wwwjam.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_osjzzm.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_jzfzsh.availability::jsonb as availability,
    notes_note_view_bzgxgs.annotation::jsonb as annotation,
    service_informationservice_pt_jgjxad.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fnptzu on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_fnptzu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_juzoiq.id) as authority
  from master_join master_join_eegmgb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_juzoiq on master_join_eegmgb.target_id = navaids_points_authorityfornavaidequipment_lat_juzoiq.id
  where master_join_eegmgb.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_wwwjam on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bwtzay.id) as monitoring
  from master_join master_join_gzwaxb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bwtzay on master_join_gzwaxb.target_id = navaids_points_navaidequipmentmonitoring_lat_bwtzay.id
  where master_join_gzwaxb.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_osjzzm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_uxksyh.id) as availability
  from master_join master_join_pujiru
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_uxksyh on master_join_pujiru.target_id = navaids_points_navaidoperationalstatus_lat_uxksyh.id
  where master_join_pujiru.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_jzfzsh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ixpoep.*) AS annotation
  from master_join master_join_bzqtnx
  join notes.note_view notes_note_lat_ixpoep on master_join_bzqtnx.target_id = notes_note_lat_ixpoep.id
  where master_join_bzqtnx.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_bzgxgs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_cgofhi.id,
      'title', coalesce(cast(service_informationservice_lat_cgofhi.title AS varchar), '(' || service_informationservice_lat_cgofhi.nilreason[1] || ')'),
      'href', service_informationservice_lat_cgofhi.href
  )) as informationprovision  from master_join master_join_ghowla
  join service.informationservice_pt service_informationservice_lat_cgofhi on master_join_ghowla.target_id = service_informationservice_lat_cgofhi.id
  where master_join_ghowla.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_jgjxad on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_lftoqp.title as varchar), '(' || navaids_points_designatedpoint_pt_lftoqp.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_lftoqp.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_xyyufi.title as varchar), '(' || navaids_points_designatedpoint_pt_xyyufi.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_xyyufi.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_itadvt.title as varchar), '(' || navaids_points_navaid_pt_itadvt.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_itadvt.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_djrxpe.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_djrxpe.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_djrxpe.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_czlhlv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_czlhlv.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_czlhlv.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hakmbl.title as varchar), '(' || airport_heliport_airportheliport_pt_hakmbl.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hakmbl.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_wtuhvn.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_wtuhvn.longitude AS pointchoiceposition_longitude,
    geometry_point_view_wtuhvn.latitude AS pointchoiceposition_latitude,
    geometry_point_view_wtuhvn.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_mflnrx.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lftoqp on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_lftoqp.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xyyufi on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xyyufi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_itadvt on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_itadvt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_djrxpe on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_djrxpe.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_czlhlv on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_czlhlv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hakmbl on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_hakmbl.id
left join geometry.point_view geometry_point_view_wtuhvn on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_wtuhvn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xrqucv.*) AS annotation
  from master_join master_join_tbabku
  join notes.note_view notes_note_lat_xrqucv on master_join_tbabku.target_id = notes_note_lat_xrqucv.id
  where master_join_tbabku.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_mflnrx on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMEType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_ofgpyu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ofgpyu.longitude AS location_longitude,
    geometry_elevatedpoint_view_ofgpyu.latitude AS location_latitude,
    geometry_elevatedpoint_view_ofgpyu.elevation AS location_elevation,
    geometry_elevatedpoint_view_ofgpyu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ofgpyu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ofgpyu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ofgpyu.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_koaawe.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_xxpaat.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_pecfey.availability::jsonb as availability,
    notes_note_view_unhkzk.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ofgpyu on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_ofgpyu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jewyhb.id) as authority
  from master_join master_join_mmvgcq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jewyhb on master_join_mmvgcq.target_id = navaids_points_authorityfornavaidequipment_lat_jewyhb.id
  where master_join_mmvgcq.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_koaawe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ldywty.id) as monitoring
  from master_join master_join_jtuxrg
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ldywty on master_join_jtuxrg.target_id = navaids_points_navaidequipmentmonitoring_lat_ldywty.id
  where master_join_jtuxrg.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xxpaat on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xnucsh.id) as availability
  from master_join master_join_zilmfv
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xnucsh on master_join_zilmfv.target_id = navaids_points_navaidoperationalstatus_lat_xnucsh.id
  where master_join_zilmfv.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_pecfey on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_agounn.*) AS annotation
  from master_join master_join_vsgcsg
  join notes.note_view notes_note_lat_agounn on master_join_vsgcsg.target_id = notes_note_lat_agounn.id
  where master_join_vsgcsg.source_id = navaids_points.dme_ts.id
) as notes_note_view_unhkzk on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_nltqqj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nltqqj.longitude AS location_longitude,
    geometry_elevatedpoint_view_nltqqj.latitude AS location_latitude,
    geometry_elevatedpoint_view_nltqqj.elevation AS location_elevation,
    geometry_elevatedpoint_view_nltqqj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nltqqj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nltqqj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nltqqj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kxbmgz.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jjqqxc.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hsjfou.availability::jsonb as availability,
    notes_note_view_mvkach.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nltqqj on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_nltqqj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nbsqho.id) as authority
  from master_join master_join_ypwlyr
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nbsqho on master_join_ypwlyr.target_id = navaids_points_authorityfornavaidequipment_lat_nbsqho.id
  where master_join_ypwlyr.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_kxbmgz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_firkpw.id) as monitoring
  from master_join master_join_cankjw
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_firkpw on master_join_cankjw.target_id = navaids_points_navaidequipmentmonitoring_lat_firkpw.id
  where master_join_cankjw.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jjqqxc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ezsryj.id) as availability
  from master_join master_join_alveep
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ezsryj on master_join_alveep.target_id = navaids_points_navaidoperationalstatus_lat_ezsryj.id
  where master_join_alveep.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_hsjfou on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_omaxlt.*) AS annotation
  from master_join master_join_ynyhlh
  join notes.note_view notes_note_lat_omaxlt on master_join_ynyhlh.target_id = notes_note_lat_omaxlt.id
  where master_join_ynyhlh.source_id = navaids_points.elevation_ts.id
) as notes_note_view_mvkach on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'public.fasdatablock_view', 'procedure.holdinguse_view', 'shared.aircraftcharacteristic_view', 'geometry.point_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nnupwo.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_nnupwo.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cdozlp.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_cdozlp.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pnpxcz.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_pnpxcz.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_djjjyd.id)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_djjjyd.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_radexi.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_radexi.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_bzwrje.title as varchar), '(' || navaids_points_angleindication_pt_bzwrje.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_bzwrje.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_icfbck.title as varchar), '(' || navaids_points_distanceindication_pt_icfbck.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_icfbck.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qrckav.id)::jsonb AS holding,
    procedure_holdinguse_view_qrckav.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_xccukw.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_xccukw.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_xccukw.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_avlomu.title as varchar), '(' || navaids_points_designatedpoint_pt_avlomu.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_avlomu.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_diyiqa.title as varchar), '(' || navaids_points_navaid_pt_diyiqa.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_diyiqa.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sddjez.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sddjez.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_sddjez.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_haklvq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_haklvq.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_haklvq.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xzytxy.title as varchar), '(' || airport_heliport_airportheliport_pt_xzytxy.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_xzytxy.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_mfbegv.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_mfbegv.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_mfbegv.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_mfbegv.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_zsbagb.id)::jsonb AS fasdata,
    public_fasdatablock_view_zsbagb.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_tnigox.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_vlhtkb.designsurface::jsonb as designsurface,
    notes_note_view_woojtf.annotation::jsonb as annotation,
    procedure_approachcondition_view_ztlflb.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nnupwo on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_nnupwo.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cdozlp on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_cdozlp.id
left join geometry.curve_view geometry_curve_view_radexi on procedure.finalleg_ts.trajectory_id = geometry_curve_view_radexi.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pnpxcz on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_pnpxcz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_bzwrje on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_bzwrje.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_icfbck on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_icfbck.id
left join procedure.holdinguse_view procedure_holdinguse_view_qrckav on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_qrckav.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_xccukw on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_xccukw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_avlomu on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_avlomu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_diyiqa on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_diyiqa.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sddjez on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sddjez.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_haklvq on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_haklvq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xzytxy on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xzytxy.id
left join geometry.point_view geometry_point_view_mfbegv on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_mfbegv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_djjjyd on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_djjjyd.id
left join public.fasdatablock_view public_fasdatablock_view_zsbagb on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_zsbagb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_byktqz.id) as aircraftcategory
  from master_join master_join_hllegq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_byktqz on master_join_hllegq.target_id = shared_aircraftcharacteristic_lat_byktqz.id
  where master_join_hllegq.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_tnigox on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bkhjjs.id) as designsurface
  from master_join master_join_ncepze
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_bkhjjs on master_join_ncepze.target_id = shared_obstacleassessmentarea_lat_bkhjjs.id
  where master_join_ncepze.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_vlhtkb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aljael.*) AS annotation
  from master_join master_join_ojgpvd
  join notes.note_view notes_note_lat_aljael on master_join_ojgpvd.target_id = notes_note_lat_aljael.id
  where master_join_ojgpvd.source_id = procedure.finalleg_ts.id
) as notes_note_view_woojtf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_frrbwj.id) as condition
  from master_join master_join_pwrhzz
  join procedure.approachcondition_view procedure_approachcondition_lat_frrbwj on master_join_pwrhzz.target_id = procedure_approachcondition_lat_frrbwj.id
  where master_join_pwrhzz.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_ztlflb on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_xrlppb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xrlppb.longitude AS location_longitude,
    geometry_elevatedpoint_view_xrlppb.latitude AS location_latitude,
    geometry_elevatedpoint_view_xrlppb.elevation AS location_elevation,
    geometry_elevatedpoint_view_xrlppb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xrlppb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xrlppb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xrlppb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_tlbuxq.title as varchar), '(' || organisation_unit_pt_tlbuxq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_tlbuxq.href::text AS serviceprovider_href,
    service_callsigndetail_view_pmpdif.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_tyqwfi.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_vrsoge.availability::jsonb as availability,
    notes_note_view_akfnjk.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_ofkygr.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xrlppb on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_xrlppb.id
left join organisation.unit_pt organisation_unit_pt_tlbuxq on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_tlbuxq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_zjziue.id) as callsign
  from master_join master_join_lltoaa
  join service.callsigndetail_view service_callsigndetail_lat_zjziue on master_join_lltoaa.target_id = service_callsigndetail_lat_zjziue.id
  where master_join_lltoaa.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_pmpdif on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_nmmuwm.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_nmmuwm.title AS varchar), '(' || service_radiocommunicationchannel_lat_nmmuwm.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_nmmuwm.href
  )) as radiocommunication  from master_join master_join_vfsuls
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_nmmuwm on master_join_vfsuls.target_id = service_radiocommunicationchannel_lat_nmmuwm.id
  where master_join_vfsuls.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_tyqwfi on TRUE
left join lateral(
  select
  from master_join master_join_havvzm
  join shared.contactinformation_view shared_contactinformation_lat_qnrlpi on master_join_havvzm.target_id = shared_contactinformation_lat_qnrlpi.id
  where master_join_havvzm.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_shupyl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ifmndd.id) as availability
  from master_join master_join_vmvkgc
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ifmndd on master_join_vmvkgc.target_id = service_serviceoperationalstatus_lat_ifmndd.id
  where master_join_vmvkgc.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_vrsoge on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfoxfx.*) AS annotation
  from master_join master_join_cgwbes
  join notes.note_view notes_note_lat_rfoxfx on master_join_cgwbes.target_id = notes_note_lat_rfoxfx.id
  where master_join_cgwbes.source_id = service.firefightingservice_ts.id
) as notes_note_view_akfnjk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ecjupb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ecjupb.title AS varchar), '(' || airport_heliport_airportheliport_lat_ecjupb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ecjupb.href
  )) as airportheliport  from master_join master_join_goqltn
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ecjupb on master_join_goqltn.target_id = airport_heliport_airportheliport_lat_ecjupb.id
  where master_join_goqltn.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_ofkygr on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionType
-- ['routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_kaecha.id)::jsonb AS flight,
    routes_flightconditioncombination_view_kaecha.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_zdikdl.regulatedroute::jsonb as regulatedroute,
    notes_note_view_gytopm.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_kaecha on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_kaecha.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_fjrheg.id) as regulatedroute
  from master_join master_join_ucyhoc
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_fjrheg on master_join_ucyhoc.target_id = routes_flightrestrictionroute_lat_fjrheg.id
  where master_join_ucyhoc.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_zdikdl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qtfrxy.*) AS annotation
  from master_join master_join_pgovna
  join notes.note_view notes_note_lat_qtfrxy on master_join_pgovna.target_id = notes_note_lat_qtfrxy.id
  where master_join_pgovna.source_id = routes.flightrestriction_ts.id
) as notes_note_view_gytopm on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_xqpnae.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xqpnae.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xqpnae.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xqpnae.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xqpnae.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xqpnae.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_uewkkp.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xqpnae on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_xqpnae.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wvejwt.*) AS annotation
  from master_join master_join_fchuzf
  join notes.note_view notes_note_lat_wvejwt on master_join_fchuzf.target_id = notes_note_lat_wvejwt.id
  where master_join_fchuzf.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_uewkkp on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_ljsidj.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_ljsidj.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_exbewt.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_ljsidj on airspace.geoborder_ts.border_id = geometry_curve_view_ljsidj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srgyyl.*) AS annotation
  from master_join master_join_xjmmcn
  join notes.note_view notes_note_lat_srgyyl on master_join_xjmmcn.target_id = notes_note_lat_srgyyl.id
  where master_join_xjmmcn.source_id = airspace.geoborder_ts.id
) as notes_note_view_exbewt on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_gbzyki.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gbzyki.longitude AS location_longitude,
    geometry_elevatedpoint_view_gbzyki.latitude AS location_latitude,
    geometry_elevatedpoint_view_gbzyki.elevation AS location_elevation,
    geometry_elevatedpoint_view_gbzyki.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gbzyki.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gbzyki.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gbzyki.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ojkijb.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_zekujr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_zlvdbo.availability::jsonb as availability,
    notes_note_view_cbegyp.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gbzyki on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_gbzyki.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_bdjosc.id) as authority
  from master_join master_join_kbfmyi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_bdjosc on master_join_kbfmyi.target_id = navaids_points_authorityfornavaidequipment_lat_bdjosc.id
  where master_join_kbfmyi.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_ojkijb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_jnetoy.id) as monitoring
  from master_join master_join_sddtmp
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_jnetoy on master_join_sddtmp.target_id = navaids_points_navaidequipmentmonitoring_lat_jnetoy.id
  where master_join_sddtmp.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_zekujr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hrtxsz.id) as availability
  from master_join master_join_yzzkjv
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_hrtxsz on master_join_yzzkjv.target_id = navaids_points_navaidoperationalstatus_lat_hrtxsz.id
  where master_join_yzzkjv.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_zlvdbo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zksvlk.*) AS annotation
  from master_join master_join_iuvblp
  join notes.note_view notes_note_lat_zksvlk on master_join_iuvblp.target_id = notes_note_lat_zksvlk.id
  where master_join_iuvblp.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_cbegyp on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_wvahmn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wvahmn.longitude AS location_longitude,
    geometry_elevatedpoint_view_wvahmn.latitude AS location_latitude,
    geometry_elevatedpoint_view_wvahmn.elevation AS location_elevation,
    geometry_elevatedpoint_view_wvahmn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wvahmn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wvahmn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wvahmn.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ybguho.title as varchar), '(' || organisation_unit_pt_ybguho.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ybguho.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bvqfnj.title as varchar), '(' || airport_heliport_airportheliport_pt_bvqfnj.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_bvqfnj.href::text AS clientairport_href,
    service_callsigndetail_view_axcfso.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_wkgnox.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_vdbdpb.availability::jsonb as availability,
    notes_note_view_khzodn.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wvahmn on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_wvahmn.id
left join organisation.unit_pt organisation_unit_pt_ybguho on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ybguho.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bvqfnj on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_bvqfnj.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_jqmoxr.id) as callsign
  from master_join master_join_hcddze
  join service.callsigndetail_view service_callsigndetail_lat_jqmoxr on master_join_hcddze.target_id = service_callsigndetail_lat_jqmoxr.id
  where master_join_hcddze.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_axcfso on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_rmzpar.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_rmzpar.title AS varchar), '(' || service_radiocommunicationchannel_lat_rmzpar.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_rmzpar.href
  )) as radiocommunication  from master_join master_join_nhpslz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_rmzpar on master_join_nhpslz.target_id = service_radiocommunicationchannel_lat_rmzpar.id
  where master_join_nhpslz.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_wkgnox on TRUE
left join lateral(
  select
  from master_join master_join_vbwwba
  join shared.contactinformation_view shared_contactinformation_lat_bpwanl on master_join_vbwwba.target_id = shared_contactinformation_lat_bpwanl.id
  where master_join_vbwwba.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_iythbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ywiqdb.id) as availability
  from master_join master_join_tsyfup
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ywiqdb on master_join_tsyfup.target_id = service_serviceoperationalstatus_lat_ywiqdb.id
  where master_join_tsyfup.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_vdbdpb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vydgwi.*) AS annotation
  from master_join master_join_jwozcl
  join notes.note_view notes_note_lat_vydgwi on master_join_jwozcl.target_id = notes_note_lat_vydgwi.id
  where master_join_jwozcl.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_khzodn on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_dahxda.title as varchar), '(' || airport_heliport_guidanceline_pt_dahxda.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_dahxda.href::text AS lightedguidanceline_href,
    shared_lightelement_view_csupgd.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_sybjcm.availability::jsonb as availability,
    notes_note_view_rkugei.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_dahxda on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_dahxda.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ndiift.id) as element
  from master_join master_join_qxfzyo
  join shared.lightelement_view shared_lightelement_lat_ndiift on master_join_qxfzyo.target_id = shared_lightelement_lat_ndiift.id
  where master_join_qxfzyo.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_csupgd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ntwclr.id) as availability
  from master_join master_join_vcliki
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ntwclr on master_join_vcliki.target_id = airport_heliport_groundlightingavailability_lat_ntwclr.id
  where master_join_vcliki.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_sybjcm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rwnutw.*) AS annotation
  from master_join master_join_ddhvsh
  join notes.note_view notes_note_lat_rwnutw on master_join_ddhvsh.target_id = notes_note_lat_rwnutw.id
  where master_join_ddhvsh.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_rkugei on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_hqfktv.title as varchar), '(' || airport_heliport_guidanceline_pt_hqfktv.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_hqfktv.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_ixmrtx.element::jsonb as element,
    notes_note_view_dnbupm.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_hqfktv on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_hqfktv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_skvfzh.id) as element
  from master_join master_join_fwatjo
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_skvfzh on master_join_fwatjo.target_id = airport_heliport_markingelement_lat_skvfzh.id
  where master_join_fwatjo.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_ixmrtx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_isgsav.*) AS annotation
  from master_join master_join_tsqmsp
  join notes.note_view notes_note_lat_isgsav on master_join_tsqmsp.target_id = notes_note_lat_isgsav.id
  where master_join_tsqmsp.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_dnbupm on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_vjhggt.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_vjhggt.elevation AS extent_elevation,
    geometry_elevatedcurve_view_vjhggt.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_vjhggt.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_vjhggt.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_vjhggt.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_npvxti.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_rbbpye.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_rgppxt.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_bhdgsp.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_hkitps.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_rebzql.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_vjhggt on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_vjhggt.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_zkygee.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_zkygee.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_zkygee.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_zkygee.href
  )) as connectedtouchdownliftoff  from master_join master_join_gyirxt
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_zkygee on master_join_gyirxt.target_id = airport_heliport_touchdownliftoff_lat_zkygee.id
  where master_join_gyirxt.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_npvxti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_inhcnd.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_inhcnd.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_inhcnd.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_inhcnd.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_ovpizw
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_inhcnd on master_join_ovpizw.target_id = airport_heliport_runwaycentrelinepoint_lat_inhcnd.id
  where master_join_ovpizw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_rbbpye on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_ykkost.id,
      'title', coalesce(cast(airport_heliport_apron_lat_ykkost.title AS varchar), '(' || airport_heliport_apron_lat_ykkost.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_ykkost.href
  )) as connectedapron  from master_join master_join_rhugeu
  join airport_heliport.apron_pt airport_heliport_apron_lat_ykkost on master_join_rhugeu.target_id = airport_heliport_apron_lat_ykkost.id
  where master_join_rhugeu.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_rgppxt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_jtcael.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_jtcael.title AS varchar), '(' || airport_heliport_aircraftstand_lat_jtcael.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_jtcael.href
  )) as connectedstand  from master_join master_join_intipw
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_jtcael on master_join_intipw.target_id = airport_heliport_aircraftstand_lat_jtcael.id
  where master_join_intipw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_bhdgsp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_bjqwby.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_bjqwby.title AS varchar), '(' || airport_heliport_taxiway_lat_bjqwby.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_bjqwby.href
  )) as connectedtaxiway  from master_join master_join_yggnij
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_bjqwby on master_join_yggnij.target_id = airport_heliport_taxiway_lat_bjqwby.id
  where master_join_yggnij.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_hkitps on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kyplkw.*) AS annotation
  from master_join master_join_ehrsyb
  join notes.note_view notes_note_lat_kyplkw on master_join_ehrsyb.target_id = notes_note_lat_kyplkw.id
  where master_join_ehrsyb.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_rebzql on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_pztaak.title as varchar), '(' || holding_unplannedholding_pt_pztaak.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_pztaak.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_imahfn.title as varchar), '(' || holding_holdingpattern_pt_imahfn.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_imahfn.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_lwhudx.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_xncycu.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_pztaak on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_pztaak.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_imahfn on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_imahfn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_lzhflm.id) as obstacleassessment
  from master_join master_join_okkuok
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_lzhflm on master_join_okkuok.target_id = shared_obstacleassessmentarea_lat_lzhflm.id
  where master_join_okkuok.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_lwhudx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hktfre.*) AS annotation
  from master_join master_join_etrkir
  join notes.note_view notes_note_lat_hktfre on master_join_etrkir.target_id = notes_note_lat_hktfre.id
  where master_join_etrkir.source_id = shared.holdingassessment_ts.id
) as notes_note_view_xncycu on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternType
-- ['holding.holdingpatternduration_view', 'holding.holdingpatterndistance_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_gcujro.id)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_gcujro.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_pvreop.id)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_pvreop.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_hhlmnx.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_hhlmnx.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_leepfv.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_gcujro on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_gcujro.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_pvreop on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_pvreop.id
left join geometry.curve_view geometry_curve_view_hhlmnx on holding.holdingpattern_ts.extent_id = geometry_curve_view_hhlmnx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_buzpnn.*) AS annotation
  from master_join master_join_skfsts
  join notes.note_view notes_note_lat_buzpnn on master_join_skfsts.target_id = notes_note_lat_buzpnn.id
  where master_join_skfsts.source_id = holding.holdingpattern_ts.id
) as notes_note_view_leepfv on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'routes.routeportion_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_ywhvtx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ywhvtx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ywhvtx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ywhvtx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ywhvtx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ywhvtx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ywhvtx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ywhvtx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wvpkau.title as varchar), '(' || organisation_unit_pt_wvpkau.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_wvpkau.href::text AS serviceprovider_href,
    service_callsigndetail_view_eipfpy.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_bovgqt.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ebwyvm.availability::jsonb as availability,
    notes_note_view_zgvtbe.annotation::jsonb as annotation,
    navaids_points_vor_pt_hozptq.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_ccagfb.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_bugpiq.clientairport::jsonb as clientairport,
    routes_routeportion_view_xfmfrl.clientroute::jsonb as clientroute,
    procedure_procedure_pt_cigfbv.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_tjyqtb.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_walllb.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ywhvtx on service.informationservice_ts.location_id = geometry_elevatedpoint_view_ywhvtx.id
left join organisation.unit_pt organisation_unit_pt_wvpkau on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_wvpkau.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_yhybjd.id) as callsign
  from master_join master_join_vhewzs
  join service.callsigndetail_view service_callsigndetail_lat_yhybjd on master_join_vhewzs.target_id = service_callsigndetail_lat_yhybjd.id
  where master_join_vhewzs.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_eipfpy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_fitrvz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_fitrvz.title AS varchar), '(' || service_radiocommunicationchannel_lat_fitrvz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_fitrvz.href
  )) as radiocommunication  from master_join master_join_aamurm
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_fitrvz on master_join_aamurm.target_id = service_radiocommunicationchannel_lat_fitrvz.id
  where master_join_aamurm.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_bovgqt on TRUE
left join lateral(
  select
  from master_join master_join_mauusg
  join shared.contactinformation_view shared_contactinformation_lat_isjjya on master_join_mauusg.target_id = shared_contactinformation_lat_isjjya.id
  where master_join_mauusg.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_aojvop on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ddtuvv.id) as availability
  from master_join master_join_cctnnp
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ddtuvv on master_join_cctnnp.target_id = service_serviceoperationalstatus_lat_ddtuvv.id
  where master_join_cctnnp.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_ebwyvm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tryouk.*) AS annotation
  from master_join master_join_cvrdpv
  join notes.note_view notes_note_lat_tryouk on master_join_cvrdpv.target_id = notes_note_lat_tryouk.id
  where master_join_cvrdpv.source_id = service.informationservice_ts.id
) as notes_note_view_zgvtbe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_ojrojt.id,
      'title', coalesce(cast(navaids_points_vor_lat_ojrojt.title AS varchar), '(' || navaids_points_vor_lat_ojrojt.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_ojrojt.href
  )) as navaidbroadcast  from master_join master_join_vnyote
  join navaids_points.vor_pt navaids_points_vor_lat_ojrojt on master_join_vnyote.target_id = navaids_points_vor_lat_ojrojt.id
  where master_join_vnyote.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_hozptq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_jxjmia.id,
      'title', coalesce(cast(airspace_airspace_lat_jxjmia.title AS varchar), '(' || airspace_airspace_lat_jxjmia.nilreason[1] || ')'),
      'href', airspace_airspace_lat_jxjmia.href
  )) as clientairspace  from master_join master_join_gdqnog
  join airspace.airspace_pt airspace_airspace_lat_jxjmia on master_join_gdqnog.target_id = airspace_airspace_lat_jxjmia.id
  where master_join_gdqnog.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_ccagfb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_tfzdho.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_tfzdho.title AS varchar), '(' || airport_heliport_airportheliport_lat_tfzdho.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_tfzdho.href
  )) as clientairport  from master_join master_join_helclz
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_tfzdho on master_join_helclz.target_id = airport_heliport_airportheliport_lat_tfzdho.id
  where master_join_helclz.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_bugpiq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_estjcc.id) as clientroute
  from master_join master_join_bewaaz
  join routes.routeportion_view routes_routeportion_lat_estjcc on master_join_bewaaz.target_id = routes_routeportion_lat_estjcc.id
  where master_join_bewaaz.source_id = service.informationservice_ts.id
) as routes_routeportion_view_xfmfrl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_vzqvyf.id,
      'title', coalesce(cast(procedure_procedure_lat_vzqvyf.title AS varchar), '(' || procedure_procedure_lat_vzqvyf.nilreason[1] || ')'),
      'href', procedure_procedure_lat_vzqvyf.href
  )) as clientprocedure  from master_join master_join_jwzeqf
  join procedure.procedure_pt procedure_procedure_lat_vzqvyf on master_join_jwzeqf.target_id = procedure_procedure_lat_vzqvyf.id
  where master_join_jwzeqf.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_cigfbv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_guysen.id,
      'title', coalesce(cast(holding_holdingpattern_lat_guysen.title AS varchar), '(' || holding_holdingpattern_lat_guysen.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_guysen.href
  )) as clientholding  from master_join master_join_ncpend
  join holding.holdingpattern_pt holding_holdingpattern_lat_guysen on master_join_ncpend.target_id = holding_holdingpattern_lat_guysen.id
  where master_join_ncpend.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_tjyqtb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_jajgoi.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_jajgoi.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_jajgoi.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_jajgoi.href
  )) as clientaerialrefuelling  from master_join master_join_vhhkla
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_jajgoi on master_join_vhhkla.target_id = aerial_refuelling_aerialrefuelling_lat_jajgoi.id
  where master_join_vhhkla.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_walllb on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yxvhrp.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_yxvhrp.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tuxgbq.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_tuxgbq.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mcekix.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_mcekix.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_dfwvzx.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_dfwvzx.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ftdpok.title as varchar), '(' || navaids_points_angleindication_pt_ftdpok.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ftdpok.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_bkjick.title as varchar), '(' || navaids_points_distanceindication_pt_bkjick.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_bkjick.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ouhcou.id)::jsonb AS holding,
    procedure_holdinguse_view_ouhcou.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_bskvmx.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_bskvmx.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_bskvmx.href::text AS approach_href,
    shared_aircraftcharacteristic_view_lchdwx.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_axmqna.designsurface::jsonb as designsurface,
    notes_note_view_gdgmmp.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yxvhrp on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_yxvhrp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tuxgbq on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_tuxgbq.id
left join geometry.curve_view geometry_curve_view_dfwvzx on procedure.initialleg_ts.trajectory_id = geometry_curve_view_dfwvzx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mcekix on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_mcekix.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ftdpok on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_ftdpok.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_bkjick on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_bkjick.id
left join procedure.holdinguse_view procedure_holdinguse_view_ouhcou on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_ouhcou.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_bskvmx on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_bskvmx.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_inloxn.id) as aircraftcategory
  from master_join master_join_vjbtle
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_inloxn on master_join_vjbtle.target_id = shared_aircraftcharacteristic_lat_inloxn.id
  where master_join_vjbtle.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_lchdwx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xfryyx.id) as designsurface
  from master_join master_join_gvryzc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_xfryyx on master_join_gvryzc.target_id = shared_obstacleassessmentarea_lat_xfryyx.id
  where master_join_gvryzc.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_axmqna on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_stxizw.*) AS annotation
  from master_join master_join_etgyuf
  join notes.note_view notes_note_lat_stxizw on master_join_etgyuf.target_id = notes_note_lat_stxizw.id
  where master_join_etgyuf.source_id = procedure.initialleg_ts.id
) as notes_note_view_gdgmmp on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureType
-- ['notes.note_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.missedapproachgroup_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'procedure.finalprofile_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_xtxhno.title as varchar), '(' || navaids_points_navaid_pt_xtxhno.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_xtxhno.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ahkgdt.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ahkgdt.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ahkgdt.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_skefdf.title as varchar), '(' || surveillance_radarsystem_pt_skefdf.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_skefdf.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_wgvoln.title as varchar), '(' || procedure_safealtitudearea_pt_wgvoln.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_wgvoln.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_xrmyam.id)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_xrmyam.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_mtafzy.id)::jsonb AS finalprofile,
    procedure_finalprofile_view_mtafzy.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_cgdynj.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_krahtv.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_bdhglf.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_quyyhr.flighttransition::jsonb as flighttransition,
    notes_note_view_pendtp.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_wshgpc.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xtxhno on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_xtxhno.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ahkgdt on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ahkgdt.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_skefdf on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_skefdf.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_wgvoln on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_wgvoln.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_xrmyam on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_xrmyam.id
left join procedure.finalprofile_view procedure_finalprofile_view_mtafzy on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_mtafzy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_ztubjx.id) as availability
  from master_join master_join_yluyzt
  join procedure.procedureavailability_view procedure_procedureavailability_lat_ztubjx on master_join_yluyzt.target_id = procedure_procedureavailability_lat_ztubjx.id
  where master_join_yluyzt.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_cgdynj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ocucpq.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ocucpq.title AS varchar), '(' || airport_heliport_airportheliport_lat_ocucpq.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ocucpq.href
  )) as airportheliport  from master_join master_join_olyzay
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ocucpq on master_join_olyzay.target_id = airport_heliport_airportheliport_lat_ocucpq.id
  where master_join_olyzay.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_krahtv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ioaszd.id) as aircraftcharacteristic
  from master_join master_join_efkvua
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ioaszd on master_join_efkvua.target_id = shared_aircraftcharacteristic_lat_ioaszd.id
  where master_join_efkvua.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_bdhglf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_mhmbuj.id) as flighttransition
  from master_join master_join_qfjggr
  join procedure.proceduretransition_view procedure_proceduretransition_lat_mhmbuj on master_join_qfjggr.target_id = procedure_proceduretransition_lat_mhmbuj.id
  where master_join_qfjggr.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_quyyhr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfstnb.*) AS annotation
  from master_join master_join_ifowlz
  join notes.note_view notes_note_lat_tfstnb on master_join_ifowlz.target_id = notes_note_lat_tfstnb.id
  where master_join_ifowlz.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_pendtp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_pqlbaw.id) as missedinstruction
  from master_join master_join_otkoxe
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_pqlbaw on master_join_otkoxe.target_id = procedure_missedapproachgroup_lat_pqlbaw.id
  where master_join_otkoxe.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_wshgpc on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_multbj.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_multbj.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fwtsfk.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_fwtsfk.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lsaejr.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_lsaejr.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_uotpge.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_uotpge.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qgiayy.title as varchar), '(' || navaids_points_angleindication_pt_qgiayy.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qgiayy.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_paaquh.title as varchar), '(' || navaids_points_distanceindication_pt_paaquh.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_paaquh.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_jgkknq.id)::jsonb AS holding,
    procedure_holdinguse_view_jgkknq.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_uvyzvr.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_uvyzvr.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_uvyzvr.href::text AS approach_href,
    shared_aircraftcharacteristic_view_frbapd.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_dqzhlb.designsurface::jsonb as designsurface,
    notes_note_view_feorkz.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_multbj on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_multbj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fwtsfk on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_fwtsfk.id
left join geometry.curve_view geometry_curve_view_uotpge on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_uotpge.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lsaejr on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_lsaejr.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qgiayy on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_qgiayy.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_paaquh on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_paaquh.id
left join procedure.holdinguse_view procedure_holdinguse_view_jgkknq on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_jgkknq.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_uvyzvr on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_uvyzvr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_wnttub.id) as aircraftcategory
  from master_join master_join_gkoqoz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_wnttub on master_join_gkoqoz.target_id = shared_aircraftcharacteristic_lat_wnttub.id
  where master_join_gkoqoz.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_frbapd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_vwdwjy.id) as designsurface
  from master_join master_join_fkznug
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_vwdwjy on master_join_fkznug.target_id = shared_obstacleassessmentarea_lat_vwdwjy.id
  where master_join_fkznug.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_dqzhlb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_docpxk.*) AS annotation
  from master_join master_join_jnahgy
  join notes.note_view notes_note_lat_docpxk on master_join_jnahgy.target_id = notes_note_lat_docpxk.id
  where master_join_jnahgy.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_feorkz on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_gjhnox.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gjhnox.longitude AS location_longitude,
    geometry_elevatedpoint_view_gjhnox.latitude AS location_latitude,
    geometry_elevatedpoint_view_gjhnox.elevation AS location_elevation,
    geometry_elevatedpoint_view_gjhnox.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gjhnox.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gjhnox.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gjhnox.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_clhvto.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_oasfsf.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qpmndg.availability::jsonb as availability,
    notes_note_view_httgwb.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gjhnox on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_gjhnox.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_pupuzz.id) as authority
  from master_join master_join_uuurhi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_pupuzz on master_join_uuurhi.target_id = navaids_points_authorityfornavaidequipment_lat_pupuzz.id
  where master_join_uuurhi.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_clhvto on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_iokcfb.id) as monitoring
  from master_join master_join_ymosvo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_iokcfb on master_join_ymosvo.target_id = navaids_points_navaidequipmentmonitoring_lat_iokcfb.id
  where master_join_ymosvo.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_oasfsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mqammf.id) as availability
  from master_join master_join_arowwq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_mqammf on master_join_arowwq.target_id = navaids_points_navaidoperationalstatus_lat_mqammf.id
  where master_join_arowwq.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_qpmndg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_txjfdy.*) AS annotation
  from master_join master_join_zmkpax
  join notes.note_view notes_note_lat_txjfdy on master_join_zmkpax.target_id = notes_note_lat_txjfdy.id
  where master_join_zmkpax.source_id = navaids_points.localizer_ts.id
) as notes_note_view_httgwb on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_wuaveq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wuaveq.longitude AS location_longitude,
    geometry_elevatedpoint_view_wuaveq.latitude AS location_latitude,
    geometry_elevatedpoint_view_wuaveq.elevation AS location_elevation,
    geometry_elevatedpoint_view_wuaveq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wuaveq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wuaveq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wuaveq.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_khgbwl.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_zkiups.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_ikwevz.availability::jsonb as availability,
    notes_note_view_knlokn.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wuaveq on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_wuaveq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jioycw.id) as authority
  from master_join master_join_mhhizb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jioycw on master_join_mhhizb.target_id = navaids_points_authorityfornavaidequipment_lat_jioycw.id
  where master_join_mhhizb.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_khgbwl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bwrybm.id) as monitoring
  from master_join master_join_jmkkjz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bwrybm on master_join_jmkkjz.target_id = navaids_points_navaidequipmentmonitoring_lat_bwrybm.id
  where master_join_jmkkjz.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_zkiups on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_nnrvih.id) as availability
  from master_join master_join_mrsmmv
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_nnrvih on master_join_mrsmmv.target_id = navaids_points_navaidoperationalstatus_lat_nnrvih.id
  where master_join_mrsmmv.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_ikwevz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eywipn.*) AS annotation
  from master_join master_join_frtsgd
  join notes.note_view notes_note_lat_eywipn on master_join_frtsgd.target_id = notes_note_lat_eywipn.id
  where master_join_frtsgd.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_knlokn on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_uuiyur.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_uuiyur.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_uuiyur.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_olwqdl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_olwqdl.longitude AS location_longitude,
    geometry_elevatedpoint_view_olwqdl.latitude AS location_latitude,
    geometry_elevatedpoint_view_olwqdl.elevation AS location_elevation,
    geometry_elevatedpoint_view_olwqdl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_olwqdl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_olwqdl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_olwqdl.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_vcvtbo.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_uuiyur on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_uuiyur.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_olwqdl on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_olwqdl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bpggrn.*) AS annotation
  from master_join master_join_virbnj
  join notes.note_view notes_note_lat_bpggrn on master_join_virbnj.target_id = notes_note_lat_bpggrn.id
  where master_join_virbnj.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_vcvtbo on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegType
-- ['navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'geometry.curve_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jpauza.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_jpauza.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vochvx.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_vochvx.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jrzfwo.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_jrzfwo.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_kvdywe.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_kvdywe.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_mtcyje.title as varchar), '(' || navaids_points_angleindication_pt_mtcyje.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_mtcyje.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_rzkkwu.title as varchar), '(' || navaids_points_distanceindication_pt_rzkkwu.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_rzkkwu.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_bcqhde.id)::jsonb AS holding,
    procedure_holdinguse_view_bcqhde.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_jvjbov.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_jvjbov.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_jvjbov.href::text AS approach_href,
    shared_aircraftcharacteristic_view_knanaz.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_xqvxwl.designsurface::jsonb as designsurface,
    notes_note_view_weradi.annotation::jsonb as annotation,
    procedure_approachcondition_view_djtpbj.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jpauza on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_jpauza.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vochvx on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_vochvx.id
left join geometry.curve_view geometry_curve_view_kvdywe on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_kvdywe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jrzfwo on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jrzfwo.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mtcyje on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_mtcyje.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_rzkkwu on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_rzkkwu.id
left join procedure.holdinguse_view procedure_holdinguse_view_bcqhde on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_bcqhde.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_jvjbov on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_jvjbov.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ncflkz.id) as aircraftcategory
  from master_join master_join_reqeub
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ncflkz on master_join_reqeub.target_id = shared_aircraftcharacteristic_lat_ncflkz.id
  where master_join_reqeub.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_knanaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_guncpf.id) as designsurface
  from master_join master_join_fkfcdf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_guncpf on master_join_fkfcdf.target_id = shared_obstacleassessmentarea_lat_guncpf.id
  where master_join_fkfcdf.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_xqvxwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_znmadk.*) AS annotation
  from master_join master_join_tzlggj
  join notes.note_view notes_note_lat_znmadk on master_join_tzlggj.target_id = notes_note_lat_znmadk.id
  where master_join_tzlggj.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_weradi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_myohaw.id) as condition
  from master_join master_join_vigtzu
  join procedure.approachcondition_view procedure_approachcondition_lat_myohaw on master_join_vigtzu.target_id = procedure_approachcondition_lat_myohaw.id
  where master_join_vigtzu.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_djtpbj on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidType
-- ['navaids_points.navaidcomponent_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_lwovpf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lwovpf.longitude AS location_longitude,
    geometry_elevatedpoint_view_lwovpf.latitude AS location_latitude,
    geometry_elevatedpoint_view_lwovpf.elevation AS location_elevation,
    geometry_elevatedpoint_view_lwovpf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lwovpf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lwovpf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lwovpf.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_hzfxbn.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_mvimvk.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_zirhtb.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_puvvgi.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_nchtqb.availability::jsonb as availability,
    notes_note_view_fixtmh.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lwovpf on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_lwovpf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_sizxea.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_sizxea.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_sizxea.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_sizxea.href
  )) as touchdownliftoff  from master_join master_join_vkzsfv
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_sizxea on master_join_vkzsfv.target_id = airport_heliport_touchdownliftoff_lat_sizxea.id
  where master_join_vkzsfv.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_hzfxbn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_uwsjcy.id) as navaidequipment
  from master_join master_join_ijpygr
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_uwsjcy on master_join_ijpygr.target_id = navaids_points_navaidcomponent_lat_uwsjcy.id
  where master_join_ijpygr.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_mvimvk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_srzcux.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_srzcux.title AS varchar), '(' || airport_heliport_runwaydirection_lat_srzcux.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_srzcux.href
  )) as runwaydirection  from master_join master_join_jogbxd
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_srzcux on master_join_jogbxd.target_id = airport_heliport_runwaydirection_lat_srzcux.id
  where master_join_jogbxd.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_zirhtb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xbuddj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xbuddj.title AS varchar), '(' || airport_heliport_airportheliport_lat_xbuddj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xbuddj.href
  )) as servedairport  from master_join master_join_dufdol
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xbuddj on master_join_dufdol.target_id = airport_heliport_airportheliport_lat_xbuddj.id
  where master_join_dufdol.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_puvvgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_uvhszn.id) as availability
  from master_join master_join_oncndb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_uvhszn on master_join_oncndb.target_id = navaids_points_navaidoperationalstatus_lat_uvhszn.id
  where master_join_oncndb.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_nchtqb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_albjre.*) AS annotation
  from master_join master_join_pzzwuw
  join notes.note_view notes_note_lat_albjre on master_join_pzzwuw.target_id = notes_note_lat_albjre.id
  where master_join_pzzwuw.source_id = navaids_points.navaid_ts.id
) as notes_note_view_fixtmh on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionType
-- ['notes.note_view', 'shared.circlesector_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_bdygtn.id)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_bdygtn.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_qjfdvk.id)::jsonb AS sectordefinition,
    shared_circlesector_view_qjfdvk.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_ffiqgw.procedure::jsonb as procedure,
    notes_note_view_vjfttn.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_bdygtn on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_bdygtn.id
left join shared.circlesector_view shared_circlesector_view_qjfdvk on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_qjfdvk.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_weuzsg.id,
      'title', coalesce(cast(procedure_procedure_lat_weuzsg.title AS varchar), '(' || procedure_procedure_lat_weuzsg.nilreason[1] || ')'),
      'href', procedure_procedure_lat_weuzsg.href
  )) as procedure  from master_join master_join_taboco
  join procedure.procedure_pt procedure_procedure_lat_weuzsg on master_join_taboco.target_id = procedure_procedure_lat_weuzsg.id
  where master_join_taboco.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_ffiqgw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_crcgbv.*) AS annotation
  from master_join master_join_ezjvdb
  join notes.note_view notes_note_lat_crcgbv on master_join_ezjvdb.target_id = notes_note_lat_crcgbv.id
  where master_join_ezjvdb.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_vjfttn on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaType
-- ['notes.note_view', 'procedure.navigationareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_wpfpse.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_wpfpse.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_wpfpse.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vlopff.title as varchar), '(' || navaids_points_designatedpoint_pt_vlopff.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vlopff.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_sskjhl.title as varchar), '(' || navaids_points_navaid_pt_sskjhl.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_sskjhl.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sesdfc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sesdfc.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_sesdfc.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dvxojz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dvxojz.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dvxojz.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_acvvey.title as varchar), '(' || airport_heliport_airportheliport_pt_acvvey.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_acvvey.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_uoztsu.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_uoztsu.longitude AS centrepointposition_longitude,
    geometry_point_view_uoztsu.latitude AS centrepointposition_latitude,
    geometry_point_view_uoztsu.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_uoeopy.sector::jsonb as sector,
    notes_note_view_pxzfwm.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_wpfpse on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_wpfpse.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vlopff on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vlopff.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_sskjhl on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_sskjhl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sesdfc on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sesdfc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dvxojz on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dvxojz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_acvvey on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_acvvey.id
left join geometry.point_view geometry_point_view_uoztsu on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_uoztsu.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_dgmpik.id) as sector
  from master_join master_join_tgtomq
  join procedure.navigationareasector_view procedure_navigationareasector_lat_dgmpik on master_join_tgtomq.target_id = procedure_navigationareasector_lat_dgmpik.id
  where master_join_tgtomq.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_uoeopy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kpwugf.*) AS annotation
  from master_join master_join_vindck
  join notes.note_view notes_note_lat_kpwugf on master_join_vindck.target_id = notes_note_lat_kpwugf.id
  where master_join_vindck.source_id = procedure.navigationarea_ts.id
) as notes_note_view_pxzfwm on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ogjzth.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ogjzth.longitude AS location_longitude,
    geometry_elevatedpoint_view_ogjzth.latitude AS location_latitude,
    geometry_elevatedpoint_view_ogjzth.elevation AS location_elevation,
    geometry_elevatedpoint_view_ogjzth.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ogjzth.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ogjzth.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ogjzth.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_iwqwvb.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_psotsy.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_loaemk.availability::jsonb as availability,
    notes_note_view_budghh.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ogjzth on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_ogjzth.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ykjcho.id) as authority
  from master_join master_join_fjnjko
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ykjcho on master_join_fjnjko.target_id = navaids_points_authorityfornavaidequipment_lat_ykjcho.id
  where master_join_fjnjko.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_iwqwvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_omhfmv.id) as monitoring
  from master_join master_join_wnnlwd
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_omhfmv on master_join_wnnlwd.target_id = navaids_points_navaidequipmentmonitoring_lat_omhfmv.id
  where master_join_wnnlwd.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_psotsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_afbxra.id) as availability
  from master_join master_join_lumhgf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_afbxra on master_join_lumhgf.target_id = navaids_points_navaidoperationalstatus_lat_afbxra.id
  where master_join_lumhgf.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_loaemk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rqymvg.*) AS annotation
  from master_join master_join_jslgeg
  join notes.note_view notes_note_lat_rqymvg on master_join_jslgeg.target_id = notes_note_lat_rqymvg.id
  where master_join_jslgeg.source_id = navaids_points.ndb_ts.id
) as notes_note_view_budghh on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_merfqp.title as varchar), '(' || airport_heliport_airportheliport_pt_merfqp.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_merfqp.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_ieyose.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ieyose.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ieyose.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ieyose.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ieyose.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ieyose.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_qefjpp.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_merfqp on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_merfqp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ieyose on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_ieyose.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wiymvv.*) AS annotation
  from master_join master_join_khpsgl
  join notes.note_view notes_note_lat_wiymvv on master_join_khpsgl.target_id = notes_note_lat_wiymvv.id
  where master_join_khpsgl.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_qefjpp on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_ozolvp.title as varchar), '(' || airport_heliport_airportheliport_pt_ozolvp.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_ozolvp.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_jhhysc.title as varchar), '(' || airport_heliport_runwaydirection_pt_jhhysc.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_jhhysc.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_pkksua.title as varchar), '(' || organisation_organisationauthority_pt_pkksua.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_pkksua.href::text AS referenceownerorganisation_href,
    geometry_surface_view_axynvy.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_axynvy.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_hqynll.obstacle::jsonb as obstacle,
    notes_note_view_jffhfc.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ozolvp on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_ozolvp.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_jhhysc on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_jhhysc.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pkksua on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_pkksua.id
left join geometry.surface_view geometry_surface_view_axynvy on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_axynvy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_nfpdcp.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_nfpdcp.title AS varchar), '(' || obstacles_verticalstructure_lat_nfpdcp.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_nfpdcp.href
  )) as obstacle  from master_join master_join_tbjlom
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_nfpdcp on master_join_tbjlom.target_id = obstacles_verticalstructure_lat_nfpdcp.id
  where master_join_tbjlom.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_hqynll on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjntbt.*) AS annotation
  from master_join master_join_xfhwjt
  join notes.note_view notes_note_lat_xjntbt on master_join_xfhwjt.target_id = notes_note_lat_xjntbt.id
  where master_join_xfhwjt.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_jffhfc on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_lggciy.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_mkyumo.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_badlyl
  join shared.contactinformation_view shared_contactinformation_lat_urpwnp on master_join_badlyl.target_id = shared_contactinformation_lat_urpwnp.id
  where master_join_badlyl.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_bfofzp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_oxvhsw.id) as relatedorganisationauthority
  from master_join master_join_yqbzbn
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_oxvhsw on master_join_yqbzbn.target_id = organisation_organisationauthorityassociation_lat_oxvhsw.id
  where master_join_yqbzbn.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_lggciy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mhduck.*) AS annotation
  from master_join master_join_epnqda
  join notes.note_view notes_note_lat_mhduck on master_join_epnqda.target_id = notes_note_lat_mhduck.id
  where master_join_epnqda.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_mkyumo on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_ffqyqc.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ffqyqc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ffqyqc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ffqyqc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ffqyqc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ffqyqc.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_cjpkah.associatedstand::jsonb as associatedstand,
    notes_note_view_srhyxs.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ffqyqc on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_ffqyqc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_woedcw.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_woedcw.title AS varchar), '(' || airport_heliport_aircraftstand_lat_woedcw.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_woedcw.href
  )) as associatedstand  from master_join master_join_gstiye
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_woedcw on master_join_gstiye.target_id = airport_heliport_aircraftstand_lat_woedcw.id
  where master_join_gstiye.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_cjpkah on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wqpiji.*) AS annotation
  from master_join master_join_fqebom
  join notes.note_view notes_note_lat_wqpiji on master_join_fqebom.target_id = notes_note_lat_wqpiji.id
  where master_join_fqebom.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_srhyxs on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_afbhiu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_afbhiu.longitude AS location_longitude,
    geometry_elevatedpoint_view_afbhiu.latitude AS location_latitude,
    geometry_elevatedpoint_view_afbhiu.elevation AS location_elevation,
    geometry_elevatedpoint_view_afbhiu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_afbhiu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_afbhiu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_afbhiu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vypurr.title as varchar), '(' || organisation_unit_pt_vypurr.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_vypurr.href::text AS serviceprovider_href,
    service_callsigndetail_view_kelhqx.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ciczvp.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_qpbtab.availability::jsonb as availability,
    notes_note_view_gevfen.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_hyzpzw.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_afbhiu on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_afbhiu.id
left join organisation.unit_pt organisation_unit_pt_vypurr on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_vypurr.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dpwvsd.id) as callsign
  from master_join master_join_otfbkk
  join service.callsigndetail_view service_callsigndetail_lat_dpwvsd on master_join_otfbkk.target_id = service_callsigndetail_lat_dpwvsd.id
  where master_join_otfbkk.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_kelhqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_tuoxau.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_tuoxau.title AS varchar), '(' || service_radiocommunicationchannel_lat_tuoxau.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_tuoxau.href
  )) as radiocommunication  from master_join master_join_zmiaxj
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_tuoxau on master_join_zmiaxj.target_id = service_radiocommunicationchannel_lat_tuoxau.id
  where master_join_zmiaxj.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_ciczvp on TRUE
left join lateral(
  select
  from master_join master_join_chvkky
  join shared.contactinformation_view shared_contactinformation_lat_gehtkd on master_join_chvkky.target_id = shared_contactinformation_lat_gehtkd.id
  where master_join_chvkky.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_qpiokx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ybfjcy.id) as availability
  from master_join master_join_iehwzc
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ybfjcy on master_join_iehwzc.target_id = service_serviceoperationalstatus_lat_ybfjcy.id
  where master_join_iehwzc.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_qpbtab on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etjcmv.*) AS annotation
  from master_join master_join_kddnud
  join notes.note_view notes_note_lat_etjcmv on master_join_kddnud.target_id = notes_note_lat_etjcmv.id
  where master_join_kddnud.source_id = service.passengerservice_ts.id
) as notes_note_view_gevfen on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_yiuotk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_yiuotk.title AS varchar), '(' || airport_heliport_airportheliport_lat_yiuotk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_yiuotk.href
  )) as airportheliport  from master_join master_join_vmmlbf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_yiuotk on master_join_vmmlbf.target_id = airport_heliport_airportheliport_lat_yiuotk.id
  where master_join_vmmlbf.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_hyzpzw on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_rwvehg.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_groundlightsystem_pt_qjetku.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_tugryf.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_wlzwkd.id) as controlledlightintensity
  from master_join master_join_bccouo
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_wlzwkd on master_join_bccouo.target_id = airport_heliport_lightactivation_lat_wlzwkd.id
  where master_join_bccouo.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_rwvehg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_nanifs.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_nanifs.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_nanifs.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_nanifs.href
  )) as activatedgroundlighting  from master_join master_join_ypunhz
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_nanifs on master_join_ypunhz.target_id = airport_heliport_groundlightsystem_lat_nanifs.id
  where master_join_ypunhz.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_qjetku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iflvxv.*) AS annotation
  from master_join master_join_hzxpbs
  join notes.note_view notes_note_lat_iflvxv on master_join_hzxpbs.target_id = notes_note_lat_iflvxv.id
  where master_join_hzxpbs.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_tugryf on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarType
-- ['surveillance.reflector_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_awooav.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_awooav.longitude AS location_longitude,
    geometry_elevatedpoint_view_awooav.latitude AS location_latitude,
    geometry_elevatedpoint_view_awooav.elevation AS location_elevation,
    geometry_elevatedpoint_view_awooav.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_awooav.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_awooav.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_awooav.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_jcsjjt.annotation::jsonb as annotation,
    surveillance_reflector_view_ixiabv.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_awooav on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_awooav.id
left join lateral(
  select
  from master_join master_join_dxqjtb
  join shared.contactinformation_view shared_contactinformation_lat_dnyshb on master_join_dxqjtb.target_id = shared_contactinformation_lat_dnyshb.id
  where master_join_dxqjtb.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_lbstyt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vijvua.*) AS annotation
  from master_join master_join_dxghdc
  join notes.note_view notes_note_lat_vijvua on master_join_dxghdc.target_id = notes_note_lat_vijvua.id
  where master_join_dxghdc.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_jcsjjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_urgvrc.id) as reflector
  from master_join master_join_usjrjz
  join surveillance.reflector_view surveillance_reflector_lat_urgvrc on master_join_usjrjz.target_id = surveillance_reflector_lat_urgvrc.id
  where master_join_usjrjz.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_ixiabv on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarType
-- ['surveillance.surveillancegroundstation_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_pcrckh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pcrckh.longitude AS location_longitude,
    geometry_elevatedpoint_view_pcrckh.latitude AS location_latitude,
    geometry_elevatedpoint_view_pcrckh.elevation AS location_elevation,
    geometry_elevatedpoint_view_pcrckh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pcrckh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pcrckh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pcrckh.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ffgoew.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_ltkola.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pcrckh on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_pcrckh.id
left join lateral(
  select
  from master_join master_join_jkvfaa
  join shared.contactinformation_view shared_contactinformation_lat_bnirsp on master_join_jkvfaa.target_id = shared_contactinformation_lat_bnirsp.id
  where master_join_jkvfaa.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_ukijvu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qtgzkx.*) AS annotation
  from master_join master_join_qttbgh
  join notes.note_view notes_note_lat_qtgzkx on master_join_qttbgh.target_id = notes_note_lat_qtgzkx.id
  where master_join_qttbgh.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_ffgoew on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_ngmesz.id) as groundstation
  from master_join master_join_nifkki
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_ngmesz on master_join_nifkki.target_id = surveillance_surveillancegroundstation_lat_ngmesz.id
  where master_join_nifkki.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_ltkola on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_urjmyj.title as varchar), '(' || navaids_points_dme_pt_urjmyj.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_urjmyj.href::text AS dme_href,
    coalesce(cast(procedure_segmentleg_pt_vogvlo.title as varchar), '(' || procedure_segmentleg_pt_vogvlo.nilreason[1] || ')')::text AS segmentleg,
    procedure_segmentleg_pt_vogvlo.href::text AS segmentleg_href,
    notes_note_view_gegypc.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_urjmyj on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_urjmyj.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_vogvlo on procedure.proceduredme_ts.segmentleg_id = procedure_segmentleg_pt_vogvlo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jhfhgc.*) AS annotation
  from master_join master_join_rifouz
  join notes.note_view notes_note_lat_jhfhgc on master_join_rifouz.target_id = notes_note_lat_jhfhgc.id
  where master_join_rifouz.source_id = procedure.proceduredme_ts.id
) as notes_note_view_gegypc on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemType
-- ['surveillance.radarcomponent_view', 'notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_hodcec.title as varchar), '(' || airport_heliport_airportheliport_pt_hodcec.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_hodcec.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_whlroy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_whlroy.longitude AS location_longitude,
    geometry_elevatedpoint_view_whlroy.latitude AS location_latitude,
    geometry_elevatedpoint_view_whlroy.elevation AS location_elevation,
    geometry_elevatedpoint_view_whlroy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_whlroy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_whlroy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_whlroy.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_mtxxnk.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_tgbyzq.office::jsonb as office,
    airport_heliport_runway_pt_gaxnbv.parrunway::jsonb as parrunway,
    notes_note_view_msieoc.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hodcec on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_hodcec.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_whlroy on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_whlroy.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_opmjtu.id) as radarequipment
  from master_join master_join_rmrpfu
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_opmjtu on master_join_rmrpfu.target_id = surveillance_radarcomponent_lat_opmjtu.id
  where master_join_rmrpfu.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_mtxxnk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_exlzgz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_exlzgz.title AS varchar), '(' || organisation_organisationauthority_lat_exlzgz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_exlzgz.href
  )) as office  from master_join master_join_iiqrix
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_exlzgz on master_join_iiqrix.target_id = organisation_organisationauthority_lat_exlzgz.id
  where master_join_iiqrix.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_tgbyzq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_hkbecl.id,
      'title', coalesce(cast(airport_heliport_runway_lat_hkbecl.title AS varchar), '(' || airport_heliport_runway_lat_hkbecl.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_hkbecl.href
  )) as parrunway  from master_join master_join_zdhliw
  join airport_heliport.runway_pt airport_heliport_runway_lat_hkbecl on master_join_zdhliw.target_id = airport_heliport_runway_lat_hkbecl.id
  where master_join_zdhliw.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_gaxnbv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qbgodc.*) AS annotation
  from master_join master_join_sqtwod
  join notes.note_view notes_note_lat_qbgodc on master_join_sqtwod.target_id = notes_note_lat_qbgodc.id
  where master_join_sqtwod.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_msieoc on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_xjlpvh.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_xjlpvh.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_gfayzr.availability::jsonb as availability,
    notes_note_view_lxdcyd.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_nvpgax.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_nvpgax.id,
      'longitude', geometry_elevatedpoint_lat_nvpgax.longitude,
      'latitude', geometry_elevatedpoint_lat_nvpgax.latitude,
      'elevation', geometry_elevatedpoint_lat_nvpgax.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_nvpgax.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_nvpgax.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_nvpgax.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_nvpgax.horizontalAccuracy
    )) AS attr
  from master_join master_join_mrsxck
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_nvpgax on master_join_mrsxck.target_id = geometry_elevatedpoint_lat_nvpgax.id
  where master_join_mrsxck.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_xjlpvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_cvkvaj.id) as availability
  from master_join master_join_vgchnv
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_cvkvaj on master_join_vgchnv.target_id = service_radiocommunicationoperationalstatus_lat_cvkvaj.id
  where master_join_vgchnv.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_gfayzr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_quvayz.*) AS annotation
  from master_join master_join_fovbsu
  join notes.note_view notes_note_lat_quvayz on master_join_fovbsu.target_id = notes_note_lat_quvayz.id
  where master_join_fovbsu.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_lxdcyd on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaType
-- ['geometry.surface_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(navaids_points_navaidequipment_pt_iowvwf.title as varchar), '(' || navaids_points_navaidequipment_pt_iowvwf.nilreason[1] || ')')::text AS equipmentnavaidequipment,
    navaids_points_navaidequipment_pt_iowvwf.href::text AS equipmentnavaidequipment_href,
    coalesce(cast(service_radiocommunicationchannel_pt_espmwz.title as varchar), '(' || service_radiocommunicationchannel_pt_espmwz.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_espmwz.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_qwcote.title as varchar), '(' || navaids_points_specialnavigationstation_pt_qwcote.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_qwcote.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_ycnfea.title as varchar), '(' || surveillance_precisionapproachradar_pt_ycnfea.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_ycnfea.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_bumump.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_bumump.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_bumump.href::text AS equipmentradar_href,
    shared_circlesector_view_gfnsbc.sector::jsonb as sector,
    geometry_surface_view_vnbjrk.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_vnbjrk.attr::jsonb as extent,
    notes_note_view_fpfljq.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_iowvwf on shared.radiofrequencyarea_ts.equipment_navaidequipment_id = navaids_points_navaidequipment_pt_iowvwf.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_espmwz on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_espmwz.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_qwcote on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_qwcote.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_ycnfea on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_ycnfea.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_bumump on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_bumump.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_qfwldw.id) as sector
  from master_join master_join_mqytpg
  join shared.circlesector_view shared_circlesector_lat_qfwldw on master_join_mqytpg.target_id = shared_circlesector_lat_qfwldw.id
  where master_join_mqytpg.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_gfnsbc on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_pquetk.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_pquetk.id,
      'horizontalAccuracy', geometry_surface_lat_pquetk.horizontalAccuracy
    )) AS attr
  from master_join master_join_qemhbh
  join geometry.surface_view geometry_surface_lat_pquetk on master_join_qemhbh.target_id = geometry_surface_lat_pquetk.id
  where master_join_qemhbh.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_vnbjrk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmysbu.*) AS annotation
  from master_join master_join_tggadr
  join notes.note_view notes_note_lat_pmysbu on master_join_tggadr.target_id = notes_note_lat_pmysbu.id
  where master_join_tggadr.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_fpfljq on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_cmkcns.title as varchar), '(' || airport_heliport_airportheliport_pt_cmkcns.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_cmkcns.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mmgoxo.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_mmgoxo.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_wmgwqe.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_wmgwqe.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_wmgwqe.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_wmgwqe.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_wmgwqe.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_wmgwqe.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_crzqqv.accessiblestand::jsonb as accessiblestand,
    notes_note_view_cckihk.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cmkcns on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_cmkcns.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mmgoxo on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mmgoxo.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wmgwqe on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_wmgwqe.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_xjoklg.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_xjoklg.title AS varchar), '(' || airport_heliport_aircraftstand_lat_xjoklg.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_xjoklg.href
  )) as accessiblestand  from master_join master_join_svrzwk
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_xjoklg on master_join_svrzwk.target_id = airport_heliport_aircraftstand_lat_xjoklg.id
  where master_join_svrzwk.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_crzqqv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_emdouu.*) AS annotation
  from master_join master_join_crvlsj
  join notes.note_view notes_note_lat_emdouu on master_join_crvlsj.target_id = notes_note_lat_emdouu.id
  where master_join_crvlsj.source_id = airport_heliport.road_ts.id
) as notes_note_view_cckihk on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMEType
-- ['notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_mprwdy.title as varchar), '(' || navaids_points_dme_pt_mprwdy.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_mprwdy.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_zyjrjm.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_zyjrjm.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_sofdsw.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_mprwdy on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_mprwdy.id
left join routes.routeportion_view routes_routeportion_view_zyjrjm on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_zyjrjm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tzvtcz.*) AS annotation
  from master_join master_join_ivitak
  join notes.note_view notes_note_lat_tzvtcz on master_join_ivitak.target_id = notes_note_lat_tzvtcz.id
  where master_join_ivitak.source_id = routes.routedme_ts.id
) as notes_note_view_sofdsw on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentType
-- ['notes.note_view', 'routes.routeavailability_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'navaids_points.enroutesegmentpoint_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_alyuii.id)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_alyuii.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_lqmupf.id)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_lqmupf.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_lqutyj.title as varchar), '(' || routes_route_pt_lqutyj.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_lqutyj.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_jyxmnb.id)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_jyxmnb.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_ivqbjg.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_ivqbjg.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_okaadg.availability::jsonb as availability,
    notes_note_view_xwuwjy.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_alyuii on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_alyuii.id
left join routes.route_pt routes_route_pt_lqutyj on routes.routesegment_ts.routeformed_id = routes_route_pt_lqutyj.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_jyxmnb on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_jyxmnb.id
left join geometry.curve_view geometry_curve_view_ivqbjg on routes.routesegment_ts.curveextent_id = geometry_curve_view_ivqbjg.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_lqmupf on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_lqmupf.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_rmygzm.id) as availability
  from master_join master_join_gzsupx
  join routes.routeavailability_view routes_routeavailability_lat_rmygzm on master_join_gzsupx.target_id = routes_routeavailability_lat_rmygzm.id
  where master_join_gzsupx.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_okaadg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_biaewa.*) AS annotation
  from master_join master_join_xcumlu
  join notes.note_view notes_note_lat_biaewa on master_join_xcumlu.target_id = notes_note_lat_biaewa.id
  where master_join_xcumlu.source_id = routes.routesegment_ts.id
) as notes_note_view_xwuwjy on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_jhghpx.title as varchar), '(' || organisation_organisationauthority_pt_jhghpx.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_jhghpx.href::text AS userorganisation_href,
    notes_note_view_tccygc.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jhghpx on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_jhghpx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbpecx.*) AS annotation
  from master_join master_join_kteckz
  join notes.note_view notes_note_lat_gbpecx on master_join_kteckz.target_id = notes_note_lat_gbpecx.id
  where master_join_kteckz.source_id = routes.route_ts.id
) as notes_note_view_tccygc on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_xvcfra.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_hsqluz.affectedarea::jsonb as affectedarea,
    notes_note_view_coyihr.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_gldhun.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_gldhun.title AS varchar), '(' || airport_heliport_airportheliport_lat_gldhun.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_gldhun.href
  )) as affectedlocation  from master_join master_join_kwirbr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_gldhun on master_join_kwirbr.target_id = airport_heliport_airportheliport_lat_gldhun.id
  where master_join_kwirbr.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_xvcfra on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_uooiut.id,
      'title', coalesce(cast(airspace_airspace_lat_uooiut.title AS varchar), '(' || airspace_airspace_lat_uooiut.nilreason[1] || ')'),
      'href', airspace_airspace_lat_uooiut.href
  )) as affectedarea  from master_join master_join_wobkwe
  join airspace.airspace_pt airspace_airspace_lat_uooiut on master_join_wobkwe.target_id = airspace_airspace_lat_uooiut.id
  where master_join_wobkwe.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_hsqluz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_acxaog.*) AS annotation
  from master_join master_join_zukirx
  join notes.note_view notes_note_lat_acxaog on master_join_zukirx.target_id = notes_note_lat_acxaog.id
  where master_join_zukirx.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_coyihr on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_espvli.title as varchar), '(' || airport_heliport_runwaydirection_pt_espvli.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_espvli.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_vmmxpa.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vmmxpa.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vmmxpa.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vmmxpa.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vmmxpa.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vmmxpa.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jhkocs.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_jhkocs.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_hihcxt.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_espvli on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_espvli.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vmmxpa on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_vmmxpa.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jhkocs on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jhkocs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gruoqn.*) AS annotation
  from master_join master_join_kgkxuo
  join notes.note_view notes_note_lat_gruoqn on master_join_kgkxuo.target_id = notes_note_lat_gruoqn.id
  where master_join_kgkxuo.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_hihcxt on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointType
-- ['airport_heliport.navaidequipmentdistance_view', 'airport_heliport.runwaydeclareddistance_view', 'notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_myhkmy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_myhkmy.longitude AS location_longitude,
    geometry_elevatedpoint_view_myhkmy.latitude AS location_latitude,
    geometry_elevatedpoint_view_myhkmy.elevation AS location_elevation,
    geometry_elevatedpoint_view_myhkmy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_myhkmy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_myhkmy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_myhkmy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_dgmxtu.title as varchar), '(' || airport_heliport_runwaydirection_pt_dgmxtu.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_dgmxtu.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_ssdzcm.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_wavwya.navaidequipment::jsonb as navaidequipment,
    notes_note_view_kcigku.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_myhkmy on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_myhkmy.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dgmxtu on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_dgmxtu.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_xkcquj.id) as associateddeclareddistance
  from master_join master_join_kyihld
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_xkcquj on master_join_kyihld.target_id = airport_heliport_runwaydeclareddistance_lat_xkcquj.id
  where master_join_kyihld.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_ssdzcm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_iiaplx.id) as navaidequipment
  from master_join master_join_bqsixs
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_iiaplx on master_join_bqsixs.target_id = airport_heliport_navaidequipmentdistance_lat_iiaplx.id
  where master_join_bqsixs.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_wavwya on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cmytee.*) AS annotation
  from master_join master_join_zizvki
  join notes.note_view notes_note_lat_cmytee on master_join_zizvki.target_id = notes_note_lat_cmytee.id
  where master_join_zizvki.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_kcigku on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_yoeqqa.title as varchar), '(' || airport_heliport_runwaydirection_pt_yoeqqa.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_yoeqqa.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_ecnxww.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_gmtgwl.availability::jsonb as availability,
    notes_note_view_xppocf.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_yoeqqa on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_yoeqqa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_eestvu.id) as element
  from master_join master_join_wkezmq
  join shared.lightelement_view shared_lightelement_lat_eestvu on master_join_wkezmq.target_id = shared_lightelement_lat_eestvu.id
  where master_join_wkezmq.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_ecnxww on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_rwmdar.id) as availability
  from master_join master_join_uizqfv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_rwmdar on master_join_uizqfv.target_id = airport_heliport_groundlightingavailability_lat_rwmdar.id
  where master_join_uizqfv.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_gmtgwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bswrte.*) AS annotation
  from master_join master_join_zecuww
  join notes.note_view notes_note_lat_bswrte on master_join_zecuww.target_id = notes_note_lat_bswrte.id
  where master_join_zecuww.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_xppocf on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_cyxsaj.title as varchar), '(' || airport_heliport_runway_pt_cyxsaj.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_cyxsaj.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_fvjzjt.title as varchar), '(' || airport_heliport_runwayelement_pt_fvjzjt.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_fvjzjt.href::text AS startingelement_href,
    notes_note_view_mvqmvd.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_vvkisf.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_cyxsaj on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_cyxsaj.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_fvjzjt on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_fvjzjt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qdaknn.*) AS annotation
  from master_join master_join_xdyync
  join notes.note_view notes_note_lat_qdaknn on master_join_xdyync.target_id = notes_note_lat_qdaknn.id
  where master_join_xdyync.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_mvqmvd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rsiugj.id) as availability
  from master_join master_join_rjgekp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rsiugj on master_join_rjgekp.target_id = airport_heliport_manoeuvringareaavailability_lat_rsiugj.id
  where master_join_rjgekp.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_vvkisf on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rggtqf.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_rggtqf.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_pchnbb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_pchnbb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_pchnbb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_pchnbb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_pchnbb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_pchnbb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_rzpyxx.associatedrunway::jsonb as associatedrunway,
    notes_note_view_dgmpci.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_bjcvvx.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rggtqf on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rggtqf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pchnbb on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_pchnbb.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_uooeht.id,
      'title', coalesce(cast(airport_heliport_runway_lat_uooeht.title AS varchar), '(' || airport_heliport_runway_lat_uooeht.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_uooeht.href
  )) as associatedrunway  from master_join master_join_gwwbgs
  join airport_heliport.runway_pt airport_heliport_runway_lat_uooeht on master_join_gwwbgs.target_id = airport_heliport_runway_lat_uooeht.id
  where master_join_gwwbgs.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_rzpyxx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vqldvd.*) AS annotation
  from master_join master_join_dvvils
  join notes.note_view notes_note_lat_vqldvd on master_join_dvvils.target_id = notes_note_lat_vqldvd.id
  where master_join_dvvils.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_dgmpci on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_elohva.id) as availability
  from master_join master_join_fikmbn
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_elohva on master_join_fikmbn.target_id = airport_heliport_manoeuvringareaavailability_lat_elohva.id
  where master_join_fikmbn.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_bjcvvx on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_pukcda.title as varchar), '(' || airport_heliport_runway_pt_pukcda.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_pukcda.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_nwfurk.element::jsonb as element,
    notes_note_view_unatjk.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_pukcda on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_pukcda.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_lyotzv.id) as element
  from master_join master_join_hinrfn
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_lyotzv on master_join_hinrfn.target_id = airport_heliport_markingelement_lat_lyotzv.id
  where master_join_hinrfn.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_nwfurk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jxlszr.*) AS annotation
  from master_join master_join_ooufdr
  join notes.note_view notes_note_lat_jxlszr on master_join_ooufdr.target_id = notes_note_lat_jxlszr.id
  where master_join_ooufdr.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_unatjk on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_tkxwls.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_tkxwls.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_tkxwls.href::text AS lightedarea_href,
    shared_lightelement_view_udasjg.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_bwislu.availability::jsonb as availability,
    notes_note_view_rvsdqv.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_tkxwls on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_tkxwls.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cctxin.id) as element
  from master_join master_join_tpgtln
  join shared.lightelement_view shared_lightelement_lat_cctxin on master_join_tpgtln.target_id = shared_lightelement_lat_cctxin.id
  where master_join_tpgtln.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_udasjg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_njrsfn.id) as availability
  from master_join master_join_jpbmrc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_njrsfn on master_join_jpbmrc.target_id = airport_heliport_groundlightingavailability_lat_njrsfn.id
  where master_join_jpbmrc.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_bwislu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgwiav.*) AS annotation
  from master_join master_join_gxzlzk
  join notes.note_view notes_note_lat_wgwiav on master_join_gxzlzk.target_id = notes_note_lat_wgwiav.id
  where master_join_gxzlzk.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_rvsdqv on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lklosv.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_lklosv.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_llbiko.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_llbiko.elevation AS extent_elevation,
    geometry_elevatedsurface_view_llbiko.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_llbiko.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_llbiko.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_llbiko.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_vbxrol.title as varchar), '(' || airport_heliport_runwaydirection_pt_vbxrol.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_vbxrol.href::text AS protectedrunwaydirection_href,
    notes_note_view_psjuup.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lklosv on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lklosv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_llbiko on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_llbiko.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vbxrol on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_vbxrol.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbdkna.*) AS annotation
  from master_join master_join_hfifnd
  join notes.note_view notes_note_lat_gbdkna on master_join_hfifnd.target_id = notes_note_lat_gbdkna.id
  where master_join_hfifnd.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_psjuup on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayType
-- ['airport_heliport.runwaycontamination_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaysectioncontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nlvbxo.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_nlvbxo.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_nahoae.title as varchar), '(' || airport_heliport_airportheliport_pt_nahoae.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_nahoae.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_hjjbdm.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_kfihhk.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_xknojm.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nlvbxo on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nlvbxo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nahoae on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_nahoae.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_sqckry.id) as overallcontaminant
  from master_join master_join_xvafum
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_sqckry on master_join_xvafum.target_id = airport_heliport_runwaycontamination_lat_sqckry.id
  where master_join_xvafum.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_hjjbdm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjwhdm.*) AS annotation
  from master_join master_join_aignkc
  join notes.note_view notes_note_lat_yjwhdm on master_join_aignkc.target_id = notes_note_lat_yjwhdm.id
  where master_join_aignkc.source_id = airport_heliport.runway_ts.id
) as notes_note_view_kfihhk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_dmellv.id) as areacontaminant
  from master_join master_join_msjmva
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_dmellv on master_join_msjmva.target_id = airport_heliport_runwaysectioncontamination_lat_dmellv.id
  where master_join_msjmva.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_xknojm on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_butrld.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_butrld.longitude AS location_longitude,
    geometry_elevatedpoint_view_butrld.latitude AS location_latitude,
    geometry_elevatedpoint_view_butrld.elevation AS location_elevation,
    geometry_elevatedpoint_view_butrld.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_butrld.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_butrld.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_butrld.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_ikrkia.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_mmjevo.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_butrld on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_butrld.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_tuowkx.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_tuowkx.title AS varchar), '(' || airport_heliport_runwaydirection_lat_tuowkx.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_tuowkx.href
  )) as associatedrunwaydirection  from master_join master_join_tbuotq
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_tuowkx on master_join_tbuotq.target_id = airport_heliport_runwaydirection_lat_tuowkx.id
  where master_join_tbuotq.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_ikrkia on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbllnx.*) AS annotation
  from master_join master_join_eoscai
  join notes.note_view notes_note_lat_wbllnx on master_join_eoscai.target_id = notes_note_lat_wbllnx.id
  where master_join_eoscai.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_mmjevo on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaType
-- ['procedure.safealtitudeareasector_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_rknhkl.title as varchar), '(' || navaids_points_designatedpoint_pt_rknhkl.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rknhkl.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nehcyw.title as varchar), '(' || navaids_points_navaid_pt_nehcyw.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_nehcyw.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_doanpd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_doanpd.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_doanpd.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kymfhm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kymfhm.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kymfhm.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cucrif.title as varchar), '(' || airport_heliport_airportheliport_pt_cucrif.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_cucrif.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_ftnyqh.location::jsonb as location,
    geometry_point_view_jjvwqb.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_jjvwqb.longitude AS centrepointposition_longitude,
    geometry_point_view_jjvwqb.latitude AS centrepointposition_latitude,
    geometry_point_view_jjvwqb.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_eorsah.sector::jsonb as sector,
    notes_note_view_uehylm.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rknhkl on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rknhkl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nehcyw on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_nehcyw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_doanpd on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_doanpd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kymfhm on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kymfhm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cucrif on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_cucrif.id
left join geometry.point_view geometry_point_view_jjvwqb on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_jjvwqb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_iobfbd.id) as sector
  from master_join master_join_dspnlh
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_iobfbd on master_join_dspnlh.target_id = procedure_safealtitudeareasector_lat_iobfbd.id
  where master_join_dspnlh.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_eorsah on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_eebvae.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_eebvae.title AS varchar), '(' || airport_heliport_airportheliport_lat_eebvae.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_eebvae.href
  )) as location  from master_join master_join_fpkhvn
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_eebvae on master_join_fpkhvn.target_id = airport_heliport_airportheliport_lat_eebvae.id
  where master_join_fpkhvn.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_ftnyqh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ggdnmb.*) AS annotation
  from master_join master_join_cxyret
  join notes.note_view notes_note_lat_ggdnmb on master_join_cxyret.target_id = notes_note_lat_ggdnmb.id
  where master_join_cxyret.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_uehylm on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_raddmx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_raddmx.longitude AS location_longitude,
    geometry_elevatedpoint_view_raddmx.latitude AS location_latitude,
    geometry_elevatedpoint_view_raddmx.elevation AS location_elevation,
    geometry_elevatedpoint_view_raddmx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_raddmx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_raddmx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_raddmx.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kcfvgh.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jcpblr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_kfbqub.availability::jsonb as availability,
    notes_note_view_xbbhzu.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_raddmx on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_raddmx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lpcjfe.id) as authority
  from master_join master_join_sjfjhs
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lpcjfe on master_join_sjfjhs.target_id = navaids_points_authorityfornavaidequipment_lat_lpcjfe.id
  where master_join_sjfjhs.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_kcfvgh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kfgidf.id) as monitoring
  from master_join master_join_cobfve
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kfgidf on master_join_cobfve.target_id = navaids_points_navaidequipmentmonitoring_lat_kfgidf.id
  where master_join_cobfve.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jcpblr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fueqjx.id) as availability
  from master_join master_join_llpzyi
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fueqjx on master_join_llpzyi.target_id = navaids_points_navaidoperationalstatus_lat_fueqjx.id
  where master_join_llpzyi.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_kfbqub on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kzpbjf.*) AS annotation
  from master_join master_join_bomwsz
  join notes.note_view notes_note_lat_kzpbjf on master_join_bomwsz.target_id = notes_note_lat_kzpbjf.id
  where master_join_bomwsz.source_id = navaids_points.sdf_ts.id
) as notes_note_view_xbbhzu on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_iqphvq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_iqphvq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_iqphvq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_iqphvq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_iqphvq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_iqphvq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_bmlybg.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_varvah.docksite::jsonb as docksite,
    notes_note_view_lowrel.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_awvsfg.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_iqphvq on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_iqphvq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_ptxjgp.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_ptxjgp.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_ptxjgp.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_ptxjgp.href
  )) as rampsite  from master_join master_join_qbkwwe
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_ptxjgp on master_join_qbkwwe.target_id = airport_heliport_seaplanerampsite_lat_ptxjgp.id
  where master_join_qbkwwe.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_bmlybg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_akqqnt.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_akqqnt.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_akqqnt.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_akqqnt.href
  )) as docksite  from master_join master_join_lwawma
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_akqqnt on master_join_lwawma.target_id = airport_heliport_floatingdocksite_lat_akqqnt.id
  where master_join_lwawma.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_varvah on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bwwhbc.*) AS annotation
  from master_join master_join_kgfvke
  join notes.note_view notes_note_lat_bwwhbc on master_join_kgfvke.target_id = notes_note_lat_bwwhbc.id
  where master_join_kgfvke.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_lowrel on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_wjzxpj.id) as availability
  from master_join master_join_nwhltn
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_wjzxpj on master_join_nwhltn.target_id = airport_heliport_manoeuvringareaavailability_lat_wjzxpj.id
  where master_join_nwhltn.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_awvsfg on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_ancmvi.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ancmvi.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ancmvi.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ancmvi.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ancmvi.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ancmvi.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_ykerol.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_ykerol.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_ykerol.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_ykerol.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_ykerol.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_ykerol.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_caqfwd.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ancmvi on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_ancmvi.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_ykerol on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_ykerol.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zaykpo.*) AS annotation
  from master_join master_join_qsmjrp
  join notes.note_view notes_note_lat_zaykpo on master_join_qsmjrp.target_id = notes_note_lat_zaykpo.id
  where master_join_qsmjrp.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_caqfwd on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'routes.routeportion_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_phcfec.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_phcfec.longitude AS location_longitude,
    geometry_elevatedpoint_view_phcfec.latitude AS location_latitude,
    geometry_elevatedpoint_view_phcfec.elevation AS location_elevation,
    geometry_elevatedpoint_view_phcfec.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_phcfec.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_phcfec.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_phcfec.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_yjlcrg.title as varchar), '(' || organisation_unit_pt_yjlcrg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_yjlcrg.href::text AS serviceprovider_href,
    service_callsigndetail_view_apaotx.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ncavku.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_dbzocc.availability::jsonb as availability,
    notes_note_view_qfrell.annotation::jsonb as annotation,
    airspace_airspace_pt_gyquhc.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_yzyocn.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_phcfec on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_phcfec.id
left join organisation.unit_pt organisation_unit_pt_yjlcrg on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_yjlcrg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_npayto.id) as callsign
  from master_join master_join_ygqdto
  join service.callsigndetail_view service_callsigndetail_lat_npayto on master_join_ygqdto.target_id = service_callsigndetail_lat_npayto.id
  where master_join_ygqdto.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_apaotx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_hbxvnu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_hbxvnu.title AS varchar), '(' || service_radiocommunicationchannel_lat_hbxvnu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_hbxvnu.href
  )) as radiocommunication  from master_join master_join_kbcszz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_hbxvnu on master_join_kbcszz.target_id = service_radiocommunicationchannel_lat_hbxvnu.id
  where master_join_kbcszz.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_ncavku on TRUE
left join lateral(
  select
  from master_join master_join_nnnyqg
  join shared.contactinformation_view shared_contactinformation_lat_vijcml on master_join_nnnyqg.target_id = shared_contactinformation_lat_vijcml.id
  where master_join_nnnyqg.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_byzlht on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_arfgvt.id) as availability
  from master_join master_join_brjiag
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_arfgvt on master_join_brjiag.target_id = service_serviceoperationalstatus_lat_arfgvt.id
  where master_join_brjiag.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_dbzocc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdsows.*) AS annotation
  from master_join master_join_rohyoo
  join notes.note_view notes_note_lat_mdsows on master_join_rohyoo.target_id = notes_note_lat_mdsows.id
  where master_join_rohyoo.source_id = service.searchrescueservice_ts.id
) as notes_note_view_qfrell on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ylzosu.id,
      'title', coalesce(cast(airspace_airspace_lat_ylzosu.title AS varchar), '(' || airspace_airspace_lat_ylzosu.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ylzosu.href
  )) as clientairspace  from master_join master_join_yxhyco
  join airspace.airspace_pt airspace_airspace_lat_ylzosu on master_join_yxhyco.target_id = airspace_airspace_lat_ylzosu.id
  where master_join_yxhyco.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_gyquhc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_acuggo.id) as clientroute
  from master_join master_join_utkuvp
  join routes.routeportion_view routes_routeportion_lat_acuggo on master_join_utkuvp.target_id = routes_routeportion_lat_acuggo.id
  where master_join_utkuvp.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_yzyocn on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarType
-- ['surveillance.surveillancegroundstation_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_jjiyuo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jjiyuo.longitude AS location_longitude,
    geometry_elevatedpoint_view_jjiyuo.latitude AS location_latitude,
    geometry_elevatedpoint_view_jjiyuo.elevation AS location_elevation,
    geometry_elevatedpoint_view_jjiyuo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jjiyuo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jjiyuo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jjiyuo.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_rsrxqo.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_kranxw.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jjiyuo on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_jjiyuo.id
left join lateral(
  select
  from master_join master_join_zdjzap
  join shared.contactinformation_view shared_contactinformation_lat_dafcbw on master_join_zdjzap.target_id = shared_contactinformation_lat_dafcbw.id
  where master_join_zdjzap.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_nsguxa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rzmyqg.*) AS annotation
  from master_join master_join_jxlqzi
  join notes.note_view notes_note_lat_rzmyqg on master_join_jxlqzi.target_id = notes_note_lat_rzmyqg.id
  where master_join_jxlqzi.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_rsrxqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_vdflfk.id) as groundstation
  from master_join master_join_kmelow
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_vdflfk on master_join_kmelow.target_id = surveillance_surveillancegroundstation_lat_vdflfk.id
  where master_join_kmelow.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_kranxw on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_slzezy.title as varchar), '(' || airspace_airspace_pt_slzezy.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_slzezy.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ijvyhr.title as varchar), '(' || navaids_points_designatedpoint_pt_ijvyhr.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ijvyhr.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gugrbv.title as varchar), '(' || navaids_points_navaid_pt_gugrbv.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_gugrbv.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jnnhko.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jnnhko.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_jnnhko.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lsrqqj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lsrqqj.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lsrqqj.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fixkpg.title as varchar), '(' || airport_heliport_airportheliport_pt_fixkpg.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_fixkpg.href::text AS locationairportreferencepoint_href,
    geometry_point_view_lrjxfj.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_lrjxfj.longitude AS locationposition_longitude,
    geometry_point_view_lrjxfj.latitude AS locationposition_latitude,
    geometry_point_view_lrjxfj.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_ixdxse.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_slzezy on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_slzezy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ijvyhr on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ijvyhr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gugrbv on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_gugrbv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jnnhko on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jnnhko.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lsrqqj on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lsrqqj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fixkpg on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_fixkpg.id
left join geometry.point_view geometry_point_view_lrjxfj on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_lrjxfj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hcvtne.*) AS annotation
  from master_join master_join_glsoew
  join notes.note_view notes_note_lat_hcvtne on master_join_glsoew.target_id = notes_note_lat_hcvtne.id
  where master_join_glsoew.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_ixdxse on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_oxozup.title as varchar), '(' || organisation_organisationauthority_pt_oxozup.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_oxozup.href::text AS authority_href,
    notes_note_view_cffdhi.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_oxozup on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_oxozup.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iawttl.*) AS annotation
  from master_join master_join_zlebxu
  join notes.note_view notes_note_lat_iawttl on master_join_zlebxu.target_id = notes_note_lat_iawttl.id
  where master_join_zlebxu.source_id = shared.specialdate_ts.id
) as notes_note_view_cffdhi on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationType
-- ['navaids_points.specialnavigationstationstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_yrwuku.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_yrwuku.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_yrwuku.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_yldurn.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_yldurn.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_voyuhw.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_voyuhw.longitude AS position_longitude,
    geometry_elevatedpoint_view_voyuhw.latitude AS position_latitude,
    geometry_elevatedpoint_view_voyuhw.elevation AS position_elevation,
    geometry_elevatedpoint_view_voyuhw.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_voyuhw.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_voyuhw.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_voyuhw.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_zoqnka.availability::jsonb as availability,
    notes_note_view_sybjnl.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_yrwuku on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_yrwuku.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_yldurn on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_yldurn.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_voyuhw on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_voyuhw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_npiqhn.id) as availability
  from master_join master_join_hrswya
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_npiqhn on master_join_hrswya.target_id = navaids_points_specialnavigationstationstatus_lat_npiqhn.id
  where master_join_hrswya.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_zoqnka on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qohezh.*) AS annotation
  from master_join master_join_ilbvnh
  join notes.note_view notes_note_lat_qohezh on master_join_ilbvnh.target_id = notes_note_lat_qohezh.id
  where master_join_ilbvnh.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_sybjnl on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_vsnsbn.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_vsnsbn.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_tukacl.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_vsnsbn on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_vsnsbn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mlefsb.*) AS annotation
  from master_join master_join_sezhhb
  join notes.note_view notes_note_lat_mlefsb on master_join_sezhhb.target_id = notes_note_lat_mlefsb.id
  where master_join_sezhhb.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_tukacl on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalType
-- ['notes.note_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_zbiutn.title as varchar), '(' || navaids_points_navaid_pt_zbiutn.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_zbiutn.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qngdjh.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qngdjh.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qngdjh.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_zxjxdk.title as varchar), '(' || surveillance_radarsystem_pt_zxjxdk.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_zxjxdk.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_dvxdfb.title as varchar), '(' || procedure_safealtitudearea_pt_dvxdfb.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_dvxdfb.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_tznsaj.id)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_tznsaj.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_tzduoq.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_ndlgcc.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_vxsszq.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_dvtvyp.flighttransition::jsonb as flighttransition,
    notes_note_view_uvevhr.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zbiutn on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_zbiutn.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qngdjh on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qngdjh.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_zxjxdk on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_zxjxdk.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_dvxdfb on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_dvxdfb.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_tznsaj on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_tznsaj.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_udriuv.id) as availability
  from master_join master_join_zmtjvp
  join procedure.procedureavailability_view procedure_procedureavailability_lat_udriuv on master_join_zmtjvp.target_id = procedure_procedureavailability_lat_udriuv.id
  where master_join_zmtjvp.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_tzduoq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pnpssg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pnpssg.title AS varchar), '(' || airport_heliport_airportheliport_lat_pnpssg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pnpssg.href
  )) as airportheliport  from master_join master_join_hvyzif
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pnpssg on master_join_hvyzif.target_id = airport_heliport_airportheliport_lat_pnpssg.id
  where master_join_hvyzif.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_ndlgcc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_mmzvnw.id) as aircraftcharacteristic
  from master_join master_join_obdfoz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_mmzvnw on master_join_obdfoz.target_id = shared_aircraftcharacteristic_lat_mmzvnw.id
  where master_join_obdfoz.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_vxsszq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_dmqxuz.id) as flighttransition
  from master_join master_join_mujevl
  join procedure.proceduretransition_view procedure_proceduretransition_lat_dmqxuz on master_join_mujevl.target_id = procedure_proceduretransition_lat_dmqxuz.id
  where master_join_mujevl.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_dvtvyp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wcjdwf.*) AS annotation
  from master_join master_join_ggdpcb
  join notes.note_view notes_note_lat_wcjdwf on master_join_ggdpcb.target_id = notes_note_lat_wcjdwf.id
  where master_join_ggdpcb.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_uvevhr on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureType
-- ['notes.note_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_snsdeo.title as varchar), '(' || navaids_points_navaid_pt_snsdeo.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_snsdeo.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_zkkuja.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_zkkuja.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_zkkuja.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_yizuqg.title as varchar), '(' || surveillance_radarsystem_pt_yizuqg.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_yizuqg.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_mmlxnx.title as varchar), '(' || procedure_safealtitudearea_pt_mmlxnx.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_mmlxnx.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_cihrla.id)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_cihrla.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_sdyxcn.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_xsfjhe.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_furzxg.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_jijcli.flighttransition::jsonb as flighttransition,
    notes_note_view_ebcrwx.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_snsdeo on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_snsdeo.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_zkkuja on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_zkkuja.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_yizuqg on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_yizuqg.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_mmlxnx on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_mmlxnx.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_cihrla on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_cihrla.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_yheplm.id) as availability
  from master_join master_join_tmczob
  join procedure.procedureavailability_view procedure_procedureavailability_lat_yheplm on master_join_tmczob.target_id = procedure_procedureavailability_lat_yheplm.id
  where master_join_tmczob.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_sdyxcn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ebkduv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ebkduv.title AS varchar), '(' || airport_heliport_airportheliport_lat_ebkduv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ebkduv.href
  )) as airportheliport  from master_join master_join_kokumm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ebkduv on master_join_kokumm.target_id = airport_heliport_airportheliport_lat_ebkduv.id
  where master_join_kokumm.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_xsfjhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_epionn.id) as aircraftcharacteristic
  from master_join master_join_qismte
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_epionn on master_join_qismte.target_id = shared_aircraftcharacteristic_lat_epionn.id
  where master_join_qismte.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_furzxg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_mcavct.id) as flighttransition
  from master_join master_join_kggvzn
  join procedure.proceduretransition_view procedure_proceduretransition_lat_mcavct on master_join_kggvzn.target_id = procedure_proceduretransition_lat_mcavct.id
  where master_join_kggvzn.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_jijcli on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yoodnk.*) AS annotation
  from master_join master_join_bpgupk
  join notes.note_view notes_note_lat_yoodnk on master_join_bpgupk.target_id = notes_note_lat_yoodnk.id
  where master_join_bpgupk.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_ebcrwx on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_ufeyms.title as varchar), '(' || shared_standardleveltable_pt_ufeyms.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_ufeyms.href::text AS leveltable_href,
    shared_standardlevel_view_zdhjqw.level::jsonb as level,
    notes_note_view_jbpzop.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_ufeyms on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_ufeyms.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_uvssum.id) as level
  from master_join master_join_bffmnw
  join shared.standardlevel_view shared_standardlevel_lat_uvssum on master_join_bffmnw.target_id = shared_standardlevel_lat_uvssum.id
  where master_join_bffmnw.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_zdhjqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjbjmh.*) AS annotation
  from master_join master_join_qexpzt
  join notes.note_view notes_note_lat_bjbjmh on master_join_qexpzt.target_id = notes_note_lat_bjbjmh.id
  where master_join_qexpzt.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_jbpzop on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_jzhwhe.title as varchar), '(' || shared_standardlevelcolumn_pt_jzhwhe.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_jzhwhe.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_vgwhkn.applicableairspace::jsonb as applicableairspace,
    notes_note_view_xdhxbq.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_jzhwhe on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_jzhwhe.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_irfnvq.id,
      'title', coalesce(cast(airspace_airspace_lat_irfnvq.title AS varchar), '(' || airspace_airspace_lat_irfnvq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_irfnvq.href
  )) as applicableairspace  from master_join master_join_xwxcfx
  join airspace.airspace_pt airspace_airspace_lat_irfnvq on master_join_xwxcfx.target_id = airspace_airspace_lat_irfnvq.id
  where master_join_xwxcfx.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_vgwhkn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_avvqrf.*) AS annotation
  from master_join master_join_pnkqyi
  join notes.note_view notes_note_lat_avvqrf on master_join_pnkqyi.target_id = notes_note_lat_avvqrf.id
  where master_join_pnkqyi.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_xdhxbq on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_pfeuwm.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oxyyuw.*) AS annotation
  from master_join master_join_ccvvqc
  join notes.note_view notes_note_lat_oxyyuw on master_join_ccvvqc.target_id = notes_note_lat_oxyyuw.id
  where master_join_ccvvqc.source_id = shared.standardleveltable_ts.id
) as notes_note_view_pfeuwm on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_ncmvrk.title as varchar), '(' || airport_heliport_aircraftstand_pt_ncmvrk.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_ncmvrk.href::text AS markedstand_href,
    airport_heliport_markingelement_view_qwgyur.element::jsonb as element,
    notes_note_view_sdplyb.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_ncmvrk on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_ncmvrk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_qgsqkr.id) as element
  from master_join master_join_dtohjc
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_qgsqkr on master_join_dtohjc.target_id = airport_heliport_markingelement_lat_qgsqkr.id
  where master_join_dtohjc.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_qwgyur on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jyafdx.*) AS annotation
  from master_join master_join_hnfdyh
  join notes.note_view notes_note_lat_jyafdx on master_join_hnfdyh.target_id = notes_note_lat_jyafdx.id
  where master_join_hnfdyh.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_sdplyb on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_dcjkzf.title as varchar), '(' || airport_heliport_airportheliport_pt_dcjkzf.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_dcjkzf.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_qktglo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qktglo.longitude AS location_longitude,
    geometry_elevatedpoint_view_qktglo.latitude AS location_latitude,
    geometry_elevatedpoint_view_qktglo.elevation AS location_elevation,
    geometry_elevatedpoint_view_qktglo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qktglo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qktglo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qktglo.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_eoewpf.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dcjkzf on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_dcjkzf.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qktglo on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_qktglo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eniqfm.*) AS annotation
  from master_join master_join_fzzkgf
  join notes.note_view notes_note_lat_eniqfm on master_join_fzzkgf.target_id = notes_note_lat_eniqfm.id
  where master_join_fzzkgf.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_eoewpf on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_kbjrno.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kbjrno.longitude AS location_longitude,
    geometry_elevatedpoint_view_kbjrno.latitude AS location_latitude,
    geometry_elevatedpoint_view_kbjrno.elevation AS location_elevation,
    geometry_elevatedpoint_view_kbjrno.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kbjrno.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kbjrno.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kbjrno.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_bzgkpk.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_pbipfd.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_xcdhyy.availability::jsonb as availability,
    notes_note_view_gfrwbu.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kbjrno on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_kbjrno.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_xyjrjt.id) as authority
  from master_join master_join_vddbdr
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_xyjrjt on master_join_vddbdr.target_id = navaids_points_authorityfornavaidequipment_lat_xyjrjt.id
  where master_join_vddbdr.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_bzgkpk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_tryxfm.id) as monitoring
  from master_join master_join_creeen
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_tryxfm on master_join_creeen.target_id = navaids_points_navaidequipmentmonitoring_lat_tryxfm.id
  where master_join_creeen.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_pbipfd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vozods.id) as availability
  from master_join master_join_aplrsr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vozods on master_join_aplrsr.target_id = navaids_points_navaidoperationalstatus_lat_vozods.id
  where master_join_aplrsr.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_xcdhyy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kfjkti.*) AS annotation
  from master_join master_join_epvqoz
  join notes.note_view notes_note_lat_kfjkti on master_join_epvqoz.target_id = notes_note_lat_kfjkti.id
  where master_join_epvqoz.source_id = navaids_points.tacan_ts.id
) as notes_note_view_gfrwbu on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_shyleh.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_shyleh.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_shyleh.href::text AS taxiholding_href,
    shared_lightelement_view_celhov.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_hayeev.availability::jsonb as availability,
    notes_note_view_zazpnh.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_shyleh on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_shyleh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_knrwun.id) as element
  from master_join master_join_ixupjs
  join shared.lightelement_view shared_lightelement_lat_knrwun on master_join_ixupjs.target_id = shared_lightelement_lat_knrwun.id
  where master_join_ixupjs.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_celhov on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_rwzils.id) as availability
  from master_join master_join_uokzva
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_rwzils on master_join_uokzva.target_id = airport_heliport_groundlightingavailability_lat_rwzils.id
  where master_join_uokzva.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hayeev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hzbtlz.*) AS annotation
  from master_join master_join_tqbifl
  join notes.note_view notes_note_lat_hzbtlz on master_join_tqbifl.target_id = notes_note_lat_hzbtlz.id
  where master_join_tqbifl.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_zazpnh on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_myxltx.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_myxltx.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_myxltx.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_epeybd.element::jsonb as element,
    notes_note_view_dgxeyq.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_myxltx on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_myxltx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dpjtvs.id) as element
  from master_join master_join_vwijpp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_dpjtvs on master_join_vwijpp.target_id = airport_heliport_markingelement_lat_dpjtvs.id
  where master_join_vwijpp.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_epeybd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nsdupm.*) AS annotation
  from master_join master_join_ukunkf
  join notes.note_view notes_note_lat_nsdupm on master_join_ukunkf.target_id = notes_note_lat_nsdupm.id
  where master_join_ukunkf.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_dgxeyq on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_imwpuk.title as varchar), '(' || airport_heliport_guidanceline_pt_imwpuk.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_imwpuk.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_revdys.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_revdys.longitude AS location_longitude,
    geometry_elevatedpoint_view_revdys.latitude AS location_latitude,
    geometry_elevatedpoint_view_revdys.elevation AS location_elevation,
    geometry_elevatedpoint_view_revdys.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_revdys.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_revdys.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_revdys.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_nvggzr.protectedrunway::jsonb as protectedrunway,
    notes_note_view_wliowl.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_imwpuk on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_imwpuk.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_revdys on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_revdys.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_xfplsm.id,
      'title', coalesce(cast(airport_heliport_runway_lat_xfplsm.title AS varchar), '(' || airport_heliport_runway_lat_xfplsm.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_xfplsm.href
  )) as protectedrunway  from master_join master_join_ohwtsj
  join airport_heliport.runway_pt airport_heliport_runway_lat_xfplsm on master_join_ohwtsj.target_id = airport_heliport_runway_lat_xfplsm.id
  where master_join_ohwtsj.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_nvggzr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zxxotb.*) AS annotation
  from master_join master_join_iayufk
  join notes.note_view notes_note_lat_zxxotb on master_join_iayufk.target_id = notes_note_lat_zxxotb.id
  where master_join_iayufk.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_wliowl on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ymoexp.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ymoexp.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_sbmslj.title as varchar), '(' || airport_heliport_taxiway_pt_sbmslj.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_sbmslj.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_onpeoi.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_onpeoi.elevation AS extent_elevation,
    geometry_elevatedsurface_view_onpeoi.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_onpeoi.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_onpeoi.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_onpeoi.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_dipexk.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_mpdaan.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ymoexp on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ymoexp.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_sbmslj on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_sbmslj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_onpeoi on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_onpeoi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jlsmwl.*) AS annotation
  from master_join master_join_icjcsg
  join notes.note_view notes_note_lat_jlsmwl on master_join_icjcsg.target_id = notes_note_lat_jlsmwl.id
  where master_join_icjcsg.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_dipexk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xpjqkx.id) as availability
  from master_join master_join_eddfpk
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xpjqkx on master_join_eddfpk.target_id = airport_heliport_manoeuvringareaavailability_lat_xpjqkx.id
  where master_join_eddfpk.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_mpdaan on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_xvgoyn.title as varchar), '(' || airport_heliport_taxiway_pt_xvgoyn.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_xvgoyn.href::text AS lightedtaxiway_href,
    shared_lightelement_view_voktod.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_lcqnou.availability::jsonb as availability,
    notes_note_view_qhgxpk.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_xvgoyn on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_xvgoyn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lbdihp.id) as element
  from master_join master_join_flzuzs
  join shared.lightelement_view shared_lightelement_lat_lbdihp on master_join_flzuzs.target_id = shared_lightelement_lat_lbdihp.id
  where master_join_flzuzs.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_voktod on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tucqfx.id) as availability
  from master_join master_join_qeocll
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tucqfx on master_join_qeocll.target_id = airport_heliport_groundlightingavailability_lat_tucqfx.id
  where master_join_qeocll.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_lcqnou on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_czxxak.*) AS annotation
  from master_join master_join_lrnodv
  join notes.note_view notes_note_lat_czxxak on master_join_lrnodv.target_id = notes_note_lat_czxxak.id
  where master_join_lrnodv.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_qhgxpk on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_qmfjlk.title as varchar), '(' || airport_heliport_taxiway_pt_qmfjlk.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_qmfjlk.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_utmkyw.title as varchar), '(' || airport_heliport_taxiwayelement_pt_utmkyw.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_utmkyw.href::text AS markedelement_href,
    airport_heliport_markingelement_view_gvtkwt.element::jsonb as element,
    notes_note_view_lpyymq.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_qmfjlk on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_qmfjlk.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_utmkyw on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_utmkyw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_uazogn.id) as element
  from master_join master_join_hidqsz
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_uazogn on master_join_hidqsz.target_id = airport_heliport_markingelement_lat_uazogn.id
  where master_join_hidqsz.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_gvtkwt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gshibg.*) AS annotation
  from master_join master_join_zuougj
  join notes.note_view notes_note_lat_gshibg on master_join_zuougj.target_id = notes_note_lat_gshibg.id
  where master_join_zuougj.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_lpyymq on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayType
-- ['airport_heliport.taxiwaycontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ulxzxg.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ulxzxg.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_pfzwhl.title as varchar), '(' || airport_heliport_airportheliport_pt_pfzwhl.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_pfzwhl.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_vxevse.contaminant::jsonb as contaminant,
    notes_note_view_qsueds.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_xqscos.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ulxzxg on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ulxzxg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pfzwhl on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_pfzwhl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_gvllfe.id) as contaminant
  from master_join master_join_cwzhzr
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_gvllfe on master_join_cwzhzr.target_id = airport_heliport_taxiwaycontamination_lat_gvllfe.id
  where master_join_cwzhzr.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_vxevse on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qsbkby.*) AS annotation
  from master_join master_join_lhcbsx
  join notes.note_view notes_note_lat_qsbkby on master_join_lhcbsx.target_id = notes_note_lat_qsbkby.id
  where master_join_lhcbsx.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_qsueds on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_wozupp.id) as availability
  from master_join master_join_lqnkvl
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_wozupp on master_join_lqnkvl.target_id = airport_heliport_manoeuvringareaavailability_lat_wozupp.id
  where master_join_lqnkvl.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_xqscos on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaType
-- ['geometry.surface_view', 'procedure.terminalarrivalareasector_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_ydigcj.title as varchar), '(' || navaids_points_designatedpoint_pt_ydigcj.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ydigcj.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_wysvpd.title as varchar), '(' || navaids_points_designatedpoint_pt_wysvpd.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_wysvpd.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_tllsbs.title as varchar), '(' || navaids_points_navaid_pt_tllsbs.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_tllsbs.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_mzvpik.title as varchar), '(' || navaids_points_navaid_pt_mzvpik.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_mzvpik.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_apdlkc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_apdlkc.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_apdlkc.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wyjetk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wyjetk.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_wyjetk.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mfmvxv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mfmvxv.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mfmvxv.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uezaln.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uezaln.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uezaln.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hwmrsv.title as varchar), '(' || airport_heliport_airportheliport_pt_hwmrsv.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_hwmrsv.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_leljjv.title as varchar), '(' || airport_heliport_airportheliport_pt_leljjv.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_leljjv.href::text AS iafairportreferencepoint_href,
    geometry_point_view_zfuadb.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_zfuadb.longitude AS ifposition_longitude,
    geometry_point_view_zfuadb.latitude AS ifposition_latitude,
    geometry_point_view_zfuadb.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_kdroxl.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_kdroxl.longitude AS iafposition_longitude,
    geometry_point_view_kdroxl.latitude AS iafposition_latitude,
    geometry_point_view_kdroxl.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_rxpttj.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_rxpttj.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_wueoby.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_wueoby.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_wueoby.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_bmhuus.sector::jsonb as sector,
    notes_note_view_uhzuya.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ydigcj on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ydigcj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tllsbs on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_tllsbs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_apdlkc on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_apdlkc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mfmvxv on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mfmvxv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hwmrsv on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_hwmrsv.id
left join geometry.point_view geometry_point_view_zfuadb on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_zfuadb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wysvpd on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wysvpd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mzvpik on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_mzvpik.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wyjetk on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wyjetk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uezaln on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uezaln.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_leljjv on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_leljjv.id
left join geometry.point_view geometry_point_view_kdroxl on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_kdroxl.id
left join geometry.surface_view geometry_surface_view_rxpttj on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_rxpttj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_wueoby on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_wueoby.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_tchwzq.id) as sector
  from master_join master_join_cyqjhw
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_tchwzq on master_join_cyqjhw.target_id = procedure_terminalarrivalareasector_lat_tchwzq.id
  where master_join_cyqjhw.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_bmhuus on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xesxss.*) AS annotation
  from master_join master_join_vnlnuz
  join notes.note_view notes_note_lat_xesxss on master_join_vnlnuz.target_id = notes_note_lat_xesxss.id
  where master_join_vnlnuz.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_uhzuya on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jyubtu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jyubtu.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_jyubtu.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_ltwdfl.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_tdvxgl.availability::jsonb as availability,
    notes_note_view_xhsobg.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jyubtu on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_jyubtu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_wxqudo.id) as element
  from master_join master_join_vrdlcg
  join shared.lightelement_view shared_lightelement_lat_wxqudo on master_join_vrdlcg.target_id = shared_lightelement_lat_wxqudo.id
  where master_join_vrdlcg.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_ltwdfl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hrcbvk.id) as availability
  from master_join master_join_phicpr
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hrcbvk on master_join_phicpr.target_id = airport_heliport_groundlightingavailability_lat_hrcbvk.id
  where master_join_phicpr.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_tdvxgl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ksejfs.*) AS annotation
  from master_join master_join_dsvchb
  join notes.note_view notes_note_lat_ksejfs on master_join_dsvchb.target_id = notes_note_lat_ksejfs.id
  where master_join_dsvchb.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_xhsobg on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ipuwbl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ipuwbl.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ipuwbl.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_xorqom.element::jsonb as element,
    notes_note_view_oidlpu.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ipuwbl on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ipuwbl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_iirvfa.id) as element
  from master_join master_join_itsxhx
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_iirvfa on master_join_itsxhx.target_id = airport_heliport_markingelement_lat_iirvfa.id
  where master_join_itsxhx.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_xorqom on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqgrrz.*) AS annotation
  from master_join master_join_teeney
  join notes.note_view notes_note_lat_sqgrrz on master_join_teeney.target_id = notes_note_lat_sqgrrz.id
  where master_join_teeney.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_oidlpu on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_urgdpq.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_urgdpq.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_rfffcw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rfffcw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rfffcw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rfffcw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rfffcw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rfffcw.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xlmbdx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xlmbdx.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xlmbdx.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_qeinxi.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_urgdpq on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_urgdpq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rfffcw on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_rfffcw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xlmbdx on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xlmbdx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kftekf.*) AS annotation
  from master_join master_join_amkmmf
  join notes.note_view notes_note_lat_kftekf on master_join_amkmmf.target_id = notes_note_lat_kftekf.id
  where master_join_amkmmf.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_qeinxi on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.touchdownliftoffcontamination_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_ggagpf.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_ggagpf.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_ggagpf.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_ggagpf.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_ggagpf.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_ggagpf.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_ggagpf.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_ggagpf.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_sxamdd.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_sxamdd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_sxamdd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_sxamdd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_sxamdd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_sxamdd.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_vifowq.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_vifowq.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_baqkhy.title as varchar), '(' || airport_heliport_airportheliport_pt_baqkhy.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_baqkhy.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_iyhsea.title as varchar), '(' || airport_heliport_runway_pt_iyhsea.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_iyhsea.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_ftonut.contaminant::jsonb as contaminant,
    notes_note_view_njggxi.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_hpasla.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ggagpf on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_ggagpf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_sxamdd on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_sxamdd.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_vifowq on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_vifowq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_baqkhy on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_baqkhy.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_iyhsea on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_iyhsea.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_osxpgx.id) as contaminant
  from master_join master_join_qhjvpm
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_osxpgx on master_join_qhjvpm.target_id = airport_heliport_touchdownliftoffcontamination_lat_osxpgx.id
  where master_join_qhjvpm.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_ftonut on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_phzkzx.*) AS annotation
  from master_join master_join_ednnos
  join notes.note_view notes_note_lat_phzkzx on master_join_ednnos.target_id = notes_note_lat_phzkzx.id
  where master_join_ednnos.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_njggxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xslbqr.id) as availability
  from master_join master_join_rjnsss
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xslbqr on master_join_rjnsss.target_id = airport_heliport_manoeuvringareaavailability_lat_xslbqr.id
  where master_join_rjnsss.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_hpasla on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitType
-- ['notes.note_view', 'organisation.unitavailability_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'organisation.unitdependency_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_gibeuy.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_gibeuy.longitude AS position_longitude,
    geometry_elevatedpoint_view_gibeuy.latitude AS position_latitude,
    geometry_elevatedpoint_view_gibeuy.elevation AS position_elevation,
    geometry_elevatedpoint_view_gibeuy.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_gibeuy.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_gibeuy.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_gibeuy.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_lgbrgr.title as varchar), '(' || airport_heliport_airportheliport_pt_lgbrgr.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_lgbrgr.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_tnqeqy.title as varchar), '(' || organisation_organisationauthority_pt_tnqeqy.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_tnqeqy.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_tyrtuj.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_dxyxgw.availability::jsonb as availability,
    notes_note_view_ocxexn.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gibeuy on organisation.unit_ts.position_id = geometry_elevatedpoint_view_gibeuy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lgbrgr on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_lgbrgr.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tnqeqy on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_tnqeqy.id
left join lateral(
  select
  from master_join master_join_qzotec
  join shared.contactinformation_view shared_contactinformation_lat_zizxev on master_join_qzotec.target_id = shared_contactinformation_lat_zizxev.id
  where master_join_qzotec.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_pblbiv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_lgltaq.id) as relatedunit
  from master_join master_join_rnarym
  join organisation.unitdependency_view organisation_unitdependency_lat_lgltaq on master_join_rnarym.target_id = organisation_unitdependency_lat_lgltaq.id
  where master_join_rnarym.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_tyrtuj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_xvehan.id) as availability
  from master_join master_join_mzodov
  join organisation.unitavailability_view organisation_unitavailability_lat_xvehan on master_join_mzodov.target_id = organisation_unitavailability_lat_xvehan.id
  where master_join_mzodov.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_dxyxgw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ncbdkh.*) AS annotation
  from master_join master_join_eqsgri
  join notes.note_view notes_note_lat_ncbdkh on master_join_eqsgri.target_id = notes_note_lat_ncbdkh.id
  where master_join_eqsgri.source_id = organisation.unit_ts.id
) as notes_note_view_ocxexn on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_lyltsn.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_txsaod.*) AS annotation
  from master_join master_join_lohziq
  join notes.note_view notes_note_lat_txsaod on master_join_lohziq.target_id = notes_note_lat_txsaod.id
  where master_join_lohziq.source_id = holding.unplannedholding_ts.id
) as notes_note_view_lyltsn on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureType
-- ['obstacles.verticalstructurelightingstatus_view', 'notes.note_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_kobojv.title as varchar), '(' || navaids_points_markerbeacon_pt_kobojv.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_kobojv.href::text AS marker_href,
    obstacles_verticalstructurepart_view_vcqcyh.part::jsonb as part,
    service_passengerservice_pt_yxwpqn.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_eurwtg.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_vjbnlv.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_xyxqyw.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_qiqhhk.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_qtpokw.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_ftqedk.supportedservice::jsonb as supportedservice,
    notes_note_view_swqyla.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_dieztq.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_kobojv on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_kobojv.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_avdpxe.id) as part
  from master_join master_join_kofezq
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_avdpxe on master_join_kofezq.target_id = obstacles_verticalstructurepart_lat_avdpxe.id
  where master_join_kofezq.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_vcqcyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_bgtibx.id,
      'title', coalesce(cast(service_passengerservice_lat_bgtibx.title AS varchar), '(' || service_passengerservice_lat_bgtibx.nilreason[1] || ')'),
      'href', service_passengerservice_lat_bgtibx.href
  )) as hostedpassengerservice  from master_join master_join_uawkpf
  join service.passengerservice_pt service_passengerservice_lat_bgtibx on master_join_uawkpf.target_id = service_passengerservice_lat_bgtibx.id
  where master_join_uawkpf.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_yxwpqn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_cccpho.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_cccpho.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_cccpho.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_cccpho.href
  )) as supportedgroundlight  from master_join master_join_vlpbjl
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_cccpho on master_join_vlpbjl.target_id = airport_heliport_groundlightsystem_lat_cccpho.id
  where master_join_vlpbjl.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_eurwtg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_hkrwzv.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_hkrwzv.title AS varchar), '(' || navaids_points_navaidequipment_lat_hkrwzv.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_hkrwzv.href
  )) as hostednavaidequipment  from master_join master_join_ecjajb
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_hkrwzv on master_join_ecjajb.target_id = navaids_points_navaidequipment_lat_hkrwzv.id
  where master_join_ecjajb.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_vjbnlv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_soodnw.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_soodnw.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_soodnw.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_soodnw.href
  )) as hostedspecialnavstation  from master_join master_join_jsyzdg
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_soodnw on master_join_jsyzdg.target_id = navaids_points_specialnavigationstation_lat_soodnw.id
  where master_join_jsyzdg.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_xyxqyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_iihznm.id,
      'title', coalesce(cast(organisation_unit_lat_iihznm.title AS varchar), '(' || organisation_unit_lat_iihznm.nilreason[1] || ')'),
      'href', organisation_unit_lat_iihznm.href
  )) as hostedunit  from master_join master_join_kejcvu
  join organisation.unit_pt organisation_unit_lat_iihznm on master_join_kejcvu.target_id = organisation_unit_lat_iihznm.id
  where master_join_kejcvu.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_qiqhhk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sxzpox.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sxzpox.title AS varchar), '(' || organisation_organisationauthority_lat_sxzpox.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sxzpox.href
  )) as hostedorganisation  from master_join master_join_lpcjga
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sxzpox on master_join_lpcjga.target_id = organisation_organisationauthority_lat_sxzpox.id
  where master_join_lpcjga.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_qtpokw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_crccfl.id,
      'title', coalesce(cast(service_service_lat_crccfl.title AS varchar), '(' || service_service_lat_crccfl.nilreason[1] || ')'),
      'href', service_service_lat_crccfl.href
  )) as supportedservice  from master_join master_join_fuznwn
  join service.service_pt service_service_lat_crccfl on master_join_fuznwn.target_id = service_service_lat_crccfl.id
  where master_join_fuznwn.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_ftqedk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eygtln.*) AS annotation
  from master_join master_join_qwmvig
  join notes.note_view notes_note_lat_eygtln on master_join_qwmvig.target_id = notes_note_lat_eygtln.id
  where master_join_qwmvig.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_swqyla on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_qlrdqc.id) as lightingavailability
  from master_join master_join_cxpkni
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_qlrdqc on master_join_cxpkni.target_id = obstacles_verticalstructurelightingstatus_lat_qlrdqc.id
  where master_join_cxpkni.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_dieztq on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_ksgnkf.title as varchar), '(' || airport_heliport_runwaydirection_pt_ksgnkf.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_ksgnkf.href::text AS runwaydirection_href,
    shared_lightelement_view_hjoijd.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_csvddc.availability::jsonb as availability,
    notes_note_view_oddjrd.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ksgnkf on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_ksgnkf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_komdvo.id) as element
  from master_join master_join_hzdvoh
  join shared.lightelement_view shared_lightelement_lat_komdvo on master_join_hzdvoh.target_id = shared_lightelement_lat_komdvo.id
  where master_join_hzdvoh.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_hjoijd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ixqwnm.id) as availability
  from master_join master_join_zpbclu
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ixqwnm on master_join_zpbclu.target_id = airport_heliport_groundlightingavailability_lat_ixqwnm.id
  where master_join_zpbclu.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_csvddc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cibmge.*) AS annotation
  from master_join master_join_qujwtk
  join notes.note_view notes_note_lat_cibmge on master_join_qujwtk.target_id = notes_note_lat_cibmge.id
  where master_join_qujwtk.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_oddjrd on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_pcwnna.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pcwnna.longitude AS location_longitude,
    geometry_elevatedpoint_view_pcwnna.latitude AS location_latitude,
    geometry_elevatedpoint_view_pcwnna.elevation AS location_elevation,
    geometry_elevatedpoint_view_pcwnna.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pcwnna.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pcwnna.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pcwnna.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rupxuk.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_bsenve.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_nrljrz.availability::jsonb as availability,
    notes_note_view_xwtrjd.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pcwnna on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_pcwnna.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nczoic.id) as authority
  from master_join master_join_hkobna
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nczoic on master_join_hkobna.target_id = navaids_points_authorityfornavaidequipment_lat_nczoic.id
  where master_join_hkobna.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_rupxuk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_khrhgv.id) as monitoring
  from master_join master_join_xlrcmf
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_khrhgv on master_join_xlrcmf.target_id = navaids_points_navaidequipmentmonitoring_lat_khrhgv.id
  where master_join_xlrcmf.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bsenve on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zbcjje.id) as availability
  from master_join master_join_rhmrdy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zbcjje on master_join_rhmrdy.target_id = navaids_points_navaidoperationalstatus_lat_zbcjje.id
  where master_join_rhmrdy.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_nrljrz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wghalr.*) AS annotation
  from master_join master_join_ahkmmz
  join notes.note_view notes_note_lat_wghalr on master_join_ahkmmz.target_id = notes_note_lat_wghalr.id
  where master_join_ahkmmz.source_id = navaids_points.vor_ts.id
) as notes_note_view_xwtrjd on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaType
-- ['airport_heliport.workareaactivity_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_mcdnaa.title as varchar), '(' || airport_heliport_airportheliport_pt_mcdnaa.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mcdnaa.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_vbofhl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vbofhl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vbofhl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vbofhl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vbofhl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vbofhl.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_mzhjhz.activation::jsonb as activation,
    notes_note_view_gmhqvf.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mcdnaa on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mcdnaa.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vbofhl on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_vbofhl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_rsraqh.id) as activation
  from master_join master_join_rulzlq
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_rsraqh on master_join_rulzlq.target_id = airport_heliport_workareaactivity_lat_rsraqh.id
  where master_join_rulzlq.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_mzhjhz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ilqooa.*) AS annotation
  from master_join master_join_cabaqj
  join notes.note_view notes_note_lat_ilqooa on master_join_cabaqj.target_id = notes_note_lat_ilqooa.id
  where master_join_cabaqj.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_gmhqvf on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
