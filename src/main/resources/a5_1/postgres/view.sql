-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    (row_number() OVER ())::integer AS row,
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    notes_note_view_kkimuh.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zrvwut.*) AS annotation
  from master_join master_join_zjckxv
  join notes.note_view notes_note_lat_zrvwut on master_join_zjckxv.target_id = notes_note_lat_zrvwut.id
  where master_join_zjckxv.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_kkimuh on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_ilstis.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_pyyutl.layer as layer,
    notes_note_view_hsxtfd.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ygarlv.id) as criticalridge
  from master_join master_join_tandxh
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ygarlv on master_join_tandxh.target_id = airport_heliport_ridge_lat_ygarlv.id
  where master_join_tandxh.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_ilstis on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qiejln.id) as layer
  from master_join master_join_neibsb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qiejln on master_join_neibsb.target_id = airport_heliport_surfacecontaminationlayer_lat_qiejln.id
  where master_join_neibsb.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_pyyutl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_opavgw.*) AS annotation
  from master_join master_join_wlovaq
  join notes.note_view notes_note_lat_opavgw on master_join_wlovaq.target_id = notes_note_lat_opavgw.id
  where master_join_wlovaq.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_hsxtfd on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_dyjmhg.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ofxwfj.layer as layer,
    notes_note_view_vbdzjb.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_xdgjeh.id) as criticalridge
  from master_join master_join_aiafyf
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_xdgjeh on master_join_aiafyf.target_id = airport_heliport_ridge_lat_xdgjeh.id
  where master_join_aiafyf.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_dyjmhg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_grdybj.id) as layer
  from master_join master_join_hvrgha
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_grdybj on master_join_hvrgha.target_id = airport_heliport_surfacecontaminationlayer_lat_grdybj.id
  where master_join_hvrgha.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ofxwfj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mtmdpc.*) AS annotation
  from master_join master_join_vtasmb
  join notes.note_view notes_note_lat_mtmdpc on master_join_vtasmb.target_id = notes_note_lat_mtmdpc.id
  where master_join_vtasmb.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_vbdzjb on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_gbwzbf.id) AS theairspacevolume,
    notes_note_view_jlrlgi.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_gbwzbf on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_gbwzbf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mvnalc.*) AS annotation
  from master_join master_join_eabqwf
  join notes.note_view notes_note_lat_mvnalc on master_join_eabqwf.target_id = notes_note_lat_mvnalc.id
  where master_join_eabqwf.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_jlrlgi on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    (row_number() OVER ())::integer AS row,
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_opbupw.title as varchar), '(' || shared_standardlevelcolumn_pt_opbupw.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_opbupw.href AS discretelevelseries_href,
    notes_note_view_qfknhj.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_opbupw on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_opbupw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_simyxs.*) AS annotation
  from master_join master_join_uatifj
  join notes.note_view notes_note_lat_simyxs on master_join_uatifj.target_id = notes_note_lat_simyxs.id
  where master_join_uatifj.source_id = shared.airspacelayer.id
) as notes_note_view_qfknhj on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_ytoiii.title as varchar), '(' || airspace_airspace_pt_ytoiii.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_ytoiii.href AS theairspace_href,
    notes_note_view_xlsuel.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_ytoiii on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_ytoiii.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dipqbd.*) AS annotation
  from master_join master_join_qsoztu
  join notes.note_view notes_note_lat_dipqbd on master_join_qsoztu.target_id = notes_note_lat_dipqbd.id
  where master_join_qsoztu.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_xlsuel on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    (row_number() OVER ())::integer AS row,
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    notes_note_view_pkncpk.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zfdtad.*) AS annotation
  from master_join master_join_rgcoir
  join notes.note_view notes_note_lat_zfdtad on master_join_rgcoir.target_id = notes_note_lat_zfdtad.id
  where master_join_rgcoir.source_id = shared.altitudeadjustment.id
) as notes_note_view_pkncpk on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_girdpc.title as varchar), '(' || navaids_points_angleindication_pt_girdpc.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_girdpc.href AS theangleindication_href,
    notes_note_view_qwqhqf.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_girdpc on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_girdpc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_scqwvm.*) AS annotation
  from master_join master_join_ulzobr
  join notes.note_view notes_note_lat_scqwvm on master_join_ulzobr.target_id = notes_note_lat_scqwvm.id
  where master_join_ulzobr.source_id = navaids_points.angleuse.id
) as notes_note_view_qwqhqf on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    notes_note_view_jjwzlx.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iweswk.*) AS annotation
  from master_join master_join_tedxhp
  join notes.note_view notes_note_lat_iweswk on master_join_tedxhp.target_id = notes_note_lat_iweswk.id
  where master_join_tedxhp.source_id = procedure.approachaltitudetable.id
) as notes_note_view_jjwzlx on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    to_jsonb(procedure_minima_pt_nptppq.id) AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_tapiyq.title as varchar), '(' || airport_heliport_altimetersource_pt_tapiyq.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_tapiyq.href AS altimeter_href,
    procedure_circlingrestriction_pt_dppbsp.circlingrestriction as circlingrestriction,
    shared_aircraftcharacteristic_pt_rbiinz.aircraftcategory as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_uzqwkf.landingarea as landingarea,
    shared_obstacleassessmentarea_pt_mldnwi.designsurface as designsurface,
    notes_note_view_vrinpy.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_nptppq on procedure.approachcondition.minimumset_id = procedure_minima_pt_nptppq.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_tapiyq on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_tapiyq.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_kggejy.id) as circlingrestriction
  from master_join master_join_nggfbj
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_kggejy on master_join_nggfbj.target_id = procedure_circlingrestriction_lat_kggejy.id
  where master_join_nggfbj.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_dppbsp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bkcekl.id) as aircraftcategory
  from master_join master_join_yfuiri
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_bkcekl on master_join_yfuiri.target_id = shared_aircraftcharacteristic_lat_bkcekl.id
  where master_join_yfuiri.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_rbiinz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_ypxbvy.id) as landingarea
  from master_join master_join_brlmya
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_ypxbvy on master_join_brlmya.target_id = procedure_landingtakeoffareacollection_lat_ypxbvy.id
  where master_join_brlmya.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_uzqwkf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ayrqqw.id) as designsurface
  from master_join master_join_gyfcew
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_ayrqqw on master_join_gyfcew.target_id = shared_obstacleassessmentarea_lat_ayrqqw.id
  where master_join_gyfcew.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_mldnwi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygnkjm.*) AS annotation
  from master_join master_join_tqaywe
  join notes.note_view notes_note_lat_ygnkjm on master_join_tqaywe.target_id = notes_note_lat_ygnkjm.id
  where master_join_tqaywe.source_id = procedure.approachcondition.id
) as notes_note_view_vrinpy on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    notes_note_view_wtxvrm.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vqhyve.*) AS annotation
  from master_join master_join_xtmnzx
  join notes.note_view notes_note_lat_vqhyve on master_join_xtmnzx.target_id = notes_note_lat_vqhyve.id
  where master_join_xtmnzx.source_id = procedure.approachdistancetable.id
) as notes_note_view_wtxvrm on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    notes_note_view_pnozva.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ogawnp.*) AS annotation
  from master_join master_join_mbozsz
  join notes.note_view notes_note_lat_ogawnp on master_join_mbozsz.target_id = notes_note_lat_ogawnp.id
  where master_join_mbozsz.source_id = procedure.approachtimingtable.id
) as notes_note_view_pnozva on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_jdtabq.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_kewkff.layer as layer,
    notes_note_view_bjbbvv.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_gdrihw.id) as criticalridge
  from master_join master_join_mixjxw
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_gdrihw on master_join_mixjxw.target_id = airport_heliport_ridge_lat_gdrihw.id
  where master_join_mixjxw.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_jdtabq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_yockln.id) as layer
  from master_join master_join_ytjfus
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_yockln on master_join_ytjfus.target_id = airport_heliport_surfacecontaminationlayer_lat_yockln.id
  where master_join_ytjfus.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_kewkff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oaiwtd.*) AS annotation
  from master_join master_join_nnxkjl
  join notes.note_view notes_note_lat_oaiwtd on master_join_nnxkjl.target_id = notes_note_lat_oaiwtd.id
  where master_join_nnxkjl.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_bjbbvv on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_pmkwaf.title as varchar), '(' || organisation_organisationauthority_pt_pmkwaf.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_pmkwaf.href AS theorganisationauthority_href,
    notes_note_view_epbdut.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pmkwaf on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_pmkwaf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hpznwr.*) AS annotation
  from master_join master_join_koxbyx
  join notes.note_view notes_note_lat_hpznwr on master_join_koxbyx.target_id = notes_note_lat_hpznwr.id
  where master_join_koxbyx.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_epbdut on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_qkshnf.title as varchar), '(' || organisation_organisationauthority_pt_qkshnf.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_qkshnf.href AS theorganisationauthority_href,
    notes_note_view_curdmx.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qkshnf on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_qkshnf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_axlaoi.*) AS annotation
  from master_join master_join_qzcthz
  join notes.note_view notes_note_lat_axlaoi on master_join_qzcthz.target_id = notes_note_lat_axlaoi.id
  where master_join_qzcthz.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_curdmx on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_lugyma.title as varchar), '(' || organisation_organisationauthority_pt_lugyma.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_lugyma.href AS theorganisationauthority_href,
    notes_note_view_zqcspv.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_lugyma on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_lugyma.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_garxyo.*) AS annotation
  from master_join master_join_pxvbgc
  join notes.note_view notes_note_lat_garxyo on master_join_pxvbgc.target_id = notes_note_lat_garxyo.id
  where master_join_pxvbgc.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_zqcspv on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_tivvnb.title as varchar), '(' || organisation_organisationauthority_pt_tivvnb.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_tivvnb.href AS theorganisationauthority_href,
    notes_note_view_goohld.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tivvnb on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_tivvnb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydmnim.*) AS annotation
  from master_join master_join_uoymog
  join notes.note_view notes_note_lat_ydmnim on master_join_uoymog.target_id = notes_note_lat_ydmnim.id
  where master_join_uoymog.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_goohld on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    (row_number() OVER ())::integer AS row,
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    notes_note_view_szgvuo.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_biwfrg.*) AS annotation
  from master_join master_join_zgjsgs
  join notes.note_view notes_note_lat_biwfrg on master_join_zgjsgs.target_id = notes_note_lat_biwfrg.id
  where master_join_zgjsgs.source_id = service.callsigndetail.id
) as notes_note_view_szgvuo on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    (row_number() OVER ())::integer AS row,
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    notes_note_view_bnvlcw.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xtfoqu.*) AS annotation
  from master_join master_join_xyecsk
  join notes.note_view notes_note_lat_xtfoqu on master_join_xyecsk.target_id = notes_note_lat_xtfoqu.id
  where master_join_xyecsk.source_id = shared.circlesector.id
) as notes_note_view_bnvlcw on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    notes_note_view_qtvbbb.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzmtmw.*) AS annotation
  from master_join master_join_ejnang
  join notes.note_view notes_note_lat_wzmtmw on master_join_ejnang.target_id = notes_note_lat_wzmtmw.id
  where master_join_ejnang.source_id = airport_heliport.city.id
) as notes_note_view_qtvbbb on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_imgjcc.id) AS enginetype,
    notes_note_view_davajf.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_imgjcc on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_imgjcc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ptsawg.*) AS annotation
  from master_join master_join_uzoseo
  join notes.note_view notes_note_lat_ptsawg on master_join_uzoseo.target_id = notes_note_lat_ptsawg.id
  where master_join_uzoseo.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_davajf on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    (row_number() OVER ())::integer AS row,
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    notes_note_view_elykue.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjjdym.*) AS annotation
  from master_join master_join_wmfgsb
  join notes.note_view notes_note_lat_bjjdym on master_join_wmfgsb.target_id = notes_note_lat_bjjdym.id
  where master_join_wmfgsb.source_id = routes.directflightclass.id
) as notes_note_view_elykue on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    notes_note_view_izsaae.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zovcol.*) AS annotation
  from master_join master_join_oelgcu
  join notes.note_view notes_note_lat_zovcol on master_join_oelgcu.target_id = notes_note_lat_zovcol.id
  where master_join_oelgcu.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_izsaae on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_rjozmx.adjustmentinopcol as adjustmentinopcol,
    notes_note_view_vachna.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_eujrcc.id) as adjustmentinopcol
  from master_join master_join_bjssvc
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_eujrcc on master_join_bjssvc.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_eujrcc.id
  where master_join_bjssvc.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_rjozmx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uqaeru.*) AS annotation
  from master_join master_join_hzwbba
  join notes.note_view notes_note_lat_uqaeru on master_join_hzwbba.target_id = notes_note_lat_uqaeru.id
  where master_join_hzwbba.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_vachna on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    (row_number() OVER ())::integer AS row,
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    notes_note_view_einxfn.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ucwqyy.*) AS annotation
  from master_join master_join_vwpjpd
  join notes.note_view notes_note_lat_ucwqyy on master_join_vwpjpd.target_id = notes_note_lat_ucwqyy.id
  where master_join_vwpjpd.source_id = public.fasdatablock.id
) as notes_note_view_einxfn on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_hvfzcn.altitude as altitude,
    procedure_approachdistancetable_pt_mtpdop.distance as distance,
    procedure_approachtimingtable_pt_uqbfds.timing as timing,
    notes_note_view_vkfhxc.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_iiflpk.id) as altitude
  from master_join master_join_rpomdt
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_iiflpk on master_join_rpomdt.target_id = procedure_approachaltitudetable_lat_iiflpk.id
  where master_join_rpomdt.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_hvfzcn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_oafmlx.id) as distance
  from master_join master_join_eistea
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_oafmlx on master_join_eistea.target_id = procedure_approachdistancetable_lat_oafmlx.id
  where master_join_eistea.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_mtpdop on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_xxtsrk.id) as timing
  from master_join master_join_gckqbv
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_xxtsrk on master_join_gckqbv.target_id = procedure_approachtimingtable_lat_xxtsrk.id
  where master_join_gckqbv.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_uqbfds on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ifapiw.*) AS annotation
  from master_join master_join_qaifzn
  join notes.note_view notes_note_lat_ifapiw on master_join_qaifzn.target_id = notes_note_lat_ifapiw.id
  where master_join_qaifzn.source_id = procedure.finalprofile.id
) as notes_note_view_vkfhxc on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    (row_number() OVER ())::integer AS row,
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    notes_note_view_vsqjcj.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_amjqaf.*) AS annotation
  from master_join master_join_avydka
  join notes.note_view notes_note_lat_amjqaf on master_join_avydka.target_id = notes_note_lat_amjqaf.id
  where master_join_avydka.source_id = shared.flightcharacteristic.id
) as notes_note_view_vsqjcj on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    notes_note_view_levbtd.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqiuom.*) AS annotation
  from master_join master_join_xupjqn
  join notes.note_view notes_note_lat_jqiuom on master_join_xupjqn.target_id = notes_note_lat_jqiuom.id
  where master_join_xupjqn.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_levbtd on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    notes_note_view_ayptjp.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ahqkpz.*) AS annotation
  from master_join master_join_jnxcno
  join notes.note_view notes_note_lat_ahqkpz on master_join_jnxcno.target_id = notes_note_lat_ahqkpz.id
  where master_join_jnxcno.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_ayptjp on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    (row_number() OVER ())::integer AS row,
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    notes_note_view_okkflz.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kdxaxk.*) AS annotation
  from master_join master_join_fjruyq
  join notes.note_view notes_note_lat_kdxaxk on master_join_fjruyq.target_id = notes_note_lat_kdxaxk.id
  where master_join_fjruyq.source_id = service.fuel.id
) as notes_note_view_okkflz on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    (row_number() OVER ())::integer AS row,
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    notes_note_view_swcawz.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ynsxao.*) AS annotation
  from master_join master_join_yokesv
  join notes.note_view notes_note_lat_ynsxao on master_join_yokesv.target_id = notes_note_lat_ynsxao.id
  where master_join_yokesv.source_id = holding.holdingpatterndistance.id
) as notes_note_view_swcawz on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    (row_number() OVER ())::integer AS row,
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    notes_note_view_clhdiz.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_llbnme.*) AS annotation
  from master_join master_join_mibavx
  join notes.note_view notes_note_lat_llbnme on master_join_mibavx.target_id = notes_note_lat_llbnme.id
  where master_join_mibavx.source_id = holding.holdingpatternduration.id
) as notes_note_view_clhdiz on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_ptbosb.title as varchar), '(' || holding_holdingpattern_pt_ptbosb.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_ptbosb.href AS theholdingpattern_href,
    notes_note_view_nhmsxb.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_ptbosb on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_ptbosb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fscpfg.*) AS annotation
  from master_join master_join_vwxitj
  join notes.note_view notes_note_lat_fscpfg on master_join_vwxitj.target_id = notes_note_lat_fscpfg.id
  where master_join_vwxitj.source_id = procedure.holdinguse.id
) as notes_note_view_nhmsxb on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_eqoevk.runway as runway,
    airport_heliport_touchdownliftoff_pt_cutrwg.tlof as tlof,
    notes_note_view_ezfxrm.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_bahazl.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_bahazl.title AS varchar), '(' || airport_heliport_runwaydirection_lat_bahazl.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_bahazl.href
  )) as runway  from master_join master_join_hugdhu
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_bahazl on master_join_hugdhu.target_id = airport_heliport_runwaydirection_lat_bahazl.id
  where master_join_hugdhu.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_eqoevk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_gzwbdv.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_gzwbdv.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_gzwbdv.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_gzwbdv.href
  )) as tlof  from master_join master_join_pmxcwu
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_gzwbdv on master_join_pmxcwu.target_id = airport_heliport_touchdownliftoff_lat_gzwbdv.id
  where master_join_pmxcwu.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_cutrwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mkcqjc.*) AS annotation
  from master_join master_join_ovkjta
  join notes.note_view notes_note_lat_mkcqjc on master_join_ovkjta.target_id = notes_note_lat_mkcqjc.id
  where master_join_ovkjta.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_ezfxrm on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    notes_note_view_cqrits.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cgxett.*) AS annotation
  from master_join master_join_otobcp
  join notes.note_view notes_note_lat_cgxett on master_join_otobcp.target_id = notes_note_lat_cgxett.id
  where master_join_otobcp.source_id = airport_heliport.lightactivation.id
) as notes_note_view_cqrits on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    (row_number() OVER ())::integer AS row,
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    notes_note_view_wphaaz.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vskvrz.*) AS annotation
  from master_join master_join_wohvcu
  join notes.note_view notes_note_lat_vskvrz on master_join_wohvcu.target_id = notes_note_lat_vskvrz.id
  where master_join_wohvcu.source_id = shared.meteorology.id
) as notes_note_view_wphaaz on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_sjapol.adjustmentinop as adjustmentinop,
    notes_note_view_tubzng.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_drfute.id) as adjustmentinop
  from master_join master_join_diiuyu
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_drfute on master_join_diiuyu.target_id = procedure_equipmentunavailableadjustment_lat_drfute.id
  where master_join_diiuyu.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_sjapol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjjedi.*) AS annotation
  from master_join master_join_ztjyhc
  join notes.note_view notes_note_lat_yjjedi on master_join_ztjyhc.target_id = notes_note_lat_yjjedi.id
  where master_join_ztjyhc.source_id = procedure.minima.id
) as notes_note_view_tubzng on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_knpgsg.altimeter as altimeter,
    notes_note_view_jrqtnq.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_ybcika.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_ybcika.title AS varchar), '(' || airport_heliport_altimetersource_lat_ybcika.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_ybcika.href
  )) as altimeter  from master_join master_join_topekc
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_ybcika on master_join_topekc.target_id = airport_heliport_altimetersource_lat_ybcika.id
  where master_join_topekc.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_knpgsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nyrviz.*) AS annotation
  from master_join master_join_jlvpxo
  join notes.note_view notes_note_lat_nyrviz on master_join_jlvpxo.target_id = notes_note_lat_nyrviz.id
  where master_join_jlvpxo.source_id = procedure.missedapproachgroup.id
) as notes_note_view_jrqtnq on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    notes_note_view_vgsqod.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnkeyh.*) AS annotation
  from master_join master_join_yicnlx
  join notes.note_view notes_note_lat_lnkeyh on master_join_yicnlx.target_id = notes_note_lat_lnkeyh.id
  where master_join_yicnlx.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_vgsqod on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    notes_note_view_xsmbfh.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrvedi.*) AS annotation
  from master_join master_join_oxwvdw
  join notes.note_view notes_note_lat_mrvedi on master_join_oxwvdw.target_id = notes_note_lat_mrvedi.id
  where master_join_oxwvdw.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_xsmbfh on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    (row_number() OVER ())::integer AS row,
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    notes_note_view_xpyuil.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqhkeq.*) AS annotation
  from master_join master_join_yixmsb
  join notes.note_view notes_note_lat_oqhkeq on master_join_yixmsb.target_id = notes_note_lat_oqhkeq.id
  where master_join_yixmsb.source_id = service.nitrogen.id
) as notes_note_view_xpyuil on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    notes_note_view_vlvxww.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eisroj.*) AS annotation
  from master_join master_join_hiudva
  join notes.note_view notes_note_lat_eisroj on master_join_hiudva.target_id = notes_note_lat_eisroj.id
  where master_join_hiudva.source_id = shared.obstacleplacement.id
) as notes_note_view_vlvxww on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_rcbeus.title as varchar), '(' || obstacles_verticalstructure_pt_rcbeus.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_rcbeus.href AS theverticalstructure_href,
    shared_altitudeadjustment_pt_nqfnea.adjustment as adjustment,
    shared_obstacleplacement_pt_bbagzo.obstacleplacement as obstacleplacement,
    notes_note_view_tdlrsz.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_rcbeus on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_rcbeus.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_gtlnru.id) as adjustment
  from master_join master_join_bumbhz
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_gtlnru on master_join_bumbhz.target_id = shared_altitudeadjustment_lat_gtlnru.id
  where master_join_bumbhz.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_nqfnea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_ajxbjj.id) as obstacleplacement
  from master_join master_join_rvqmun
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_ajxbjj on master_join_rvqmun.target_id = shared_obstacleplacement_lat_ajxbjj.id
  where master_join_rvqmun.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_bbagzo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rictzy.*) AS annotation
  from master_join master_join_bcxkyl
  join notes.note_view notes_note_lat_rictzy on master_join_bcxkyl.target_id = notes_note_lat_rictzy.id
  where master_join_bcxkyl.source_id = shared.obstruction.id
) as notes_note_view_tdlrsz on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    (row_number() OVER ())::integer AS row,
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    notes_note_view_xwnyyf.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_usjaji.*) AS annotation
  from master_join master_join_qjdjtl
  join notes.note_view notes_note_lat_usjaji on master_join_qjdjtl.target_id = notes_note_lat_usjaji.id
  where master_join_qjdjtl.source_id = service.oil.id
) as notes_note_view_xwnyyf on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_ocwstb.title as varchar), '(' || organisation_organisationauthority_pt_ocwstb.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_ocwstb.href AS theorganisationauthority_href,
    notes_note_view_qzotdk.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ocwstb on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_ocwstb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_norgrk.*) AS annotation
  from master_join master_join_cqirgi
  join notes.note_view notes_note_lat_norgrk on master_join_cqirgi.target_id = notes_note_lat_norgrk.id
  where master_join_cqirgi.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_qzotdk on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    (row_number() OVER ())::integer AS row,
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    notes_note_view_buhlrz.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mvphva.*) AS annotation
  from master_join master_join_hfauqq
  join notes.note_view notes_note_lat_mvphva on master_join_hfauqq.target_id = notes_note_lat_mvphva.id
  where master_join_hfauqq.source_id = service.oxygen.id
) as notes_note_view_buhlrz on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    notes_note_view_owbluk.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tnifkt.*) AS annotation
  from master_join master_join_hakssu
  join notes.note_view notes_note_lat_tnifkt on master_join_hakssu.target_id = notes_note_lat_tnifkt.id
  where master_join_hakssu.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_owbluk on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    notes_note_view_qsuysi.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tzmivz.*) AS annotation
  from master_join master_join_gvtakh
  join notes.note_view notes_note_lat_tzmivz on master_join_gvtakh.target_id = notes_note_lat_tzmivz.id
  where master_join_gvtakh.source_id = surveillance.radarcomponent.id
) as notes_note_view_qsuysi on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    notes_note_view_awdiat.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yhsydk.*) AS annotation
  from master_join master_join_wucmfy
  join notes.note_view notes_note_lat_yhsydk on master_join_wucmfy.target_id = notes_note_lat_yhsydk.id
  where master_join_wucmfy.source_id = airport_heliport.ridge.id
) as notes_note_view_awdiat on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    airport_heliport_ridge_pt_ausxxe.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_uzhvwk.layer as layer,
    notes_note_view_tjrdaz.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_jknvue.id) as criticalridge
  from master_join master_join_aofygk
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_jknvue on master_join_aofygk.target_id = airport_heliport_ridge_lat_jknvue.id
  where master_join_aofygk.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_ausxxe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qidmgn.id) as layer
  from master_join master_join_dhntkn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qidmgn on master_join_dhntkn.target_id = airport_heliport_surfacecontaminationlayer_lat_qidmgn.id
  where master_join_dhntkn.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_uzhvwk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkynkq.*) AS annotation
  from master_join master_join_wzlkwn
  join notes.note_view notes_note_lat_lkynkq on master_join_wzlkwn.target_id = notes_note_lat_lkynkq.id
  where master_join_wzlkwn.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_tjrdaz on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    airport_heliport_runwaydeclareddistancevalue_pt_pkgaaa.declaredvalue as declaredvalue,
    notes_note_view_ibkfti.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_ksvmnq.id) as declaredvalue
  from master_join master_join_xtdkkc
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_ksvmnq on master_join_xtdkkc.target_id = airport_heliport_runwaydeclareddistancevalue_lat_ksvmnq.id
  where master_join_xtdkkc.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_pkgaaa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lheane.*) AS annotation
  from master_join master_join_teqcjv
  join notes.note_view notes_note_lat_lheane on master_join_teqcjv.target_id = notes_note_lat_lheane.id
  where master_join_teqcjv.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_ibkfti on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_zgwpfc.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_eefxgh.layer as layer,
    notes_note_view_ywpypy.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_lfrisc.id) as criticalridge
  from master_join master_join_tdgiia
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_lfrisc on master_join_tdgiia.target_id = airport_heliport_ridge_lat_lfrisc.id
  where master_join_tdgiia.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_zgwpfc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_gaivgb.id) as layer
  from master_join master_join_ujatao
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_gaivgb on master_join_ujatao.target_id = airport_heliport_surfacecontaminationlayer_lat_gaivgb.id
  where master_join_ujatao.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_eefxgh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_irrwzh.*) AS annotation
  from master_join master_join_dqsijj
  join notes.note_view notes_note_lat_irrwzh on master_join_dqsijj.target_id = notes_note_lat_irrwzh.id
  where master_join_dqsijj.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_ywpypy on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    notes_note_view_posvmt.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_siahot.*) AS annotation
  from master_join master_join_nqoadj
  join notes.note_view notes_note_lat_siahot on master_join_nqoadj.target_id = notes_note_lat_siahot.id
  where master_join_nqoadj.source_id = procedure.sectordesign.id
) as notes_note_view_posvmt on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    (row_number() OVER ())::integer AS row,
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    notes_note_view_sqxcsi.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vikfbw.*) AS annotation
  from master_join master_join_meqkgl
  join notes.note_view notes_note_lat_vikfbw on master_join_meqkgl.target_id = notes_note_lat_vikfbw.id
  where master_join_meqkgl.source_id = shared.standardlevel.id
) as notes_note_view_sqxcsi on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    notes_note_view_gjcfcd.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qbtgej.*) AS annotation
  from master_join master_join_yjxkgz
  join notes.note_view notes_note_lat_qbtgej on master_join_yjxkgz.target_id = notes_note_lat_qbtgej.id
  where master_join_yjxkgz.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_gjcfcd on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_zrjwvg.title as varchar), '(' || organisation_unit_pt_zrjwvg.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_zrjwvg.href AS theunit_href,
    notes_note_view_pbnzbp.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_zrjwvg on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_zrjwvg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bunpxj.*) AS annotation
  from master_join master_join_xzwtgj
  join notes.note_view notes_note_lat_bunpxj on master_join_xzwtgj.target_id = notes_note_lat_bunpxj.id
  where master_join_xzwtgj.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_pbnzbp on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    airport_heliport_ridge_pt_ttnico.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_bxmedt.layer as layer,
    notes_note_view_yozaes.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_kamqxr.id) as criticalridge
  from master_join master_join_idggva
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_kamqxr on master_join_idggva.target_id = airport_heliport_ridge_lat_kamqxr.id
  where master_join_idggva.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_ttnico on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_sfnmwu.id) as layer
  from master_join master_join_hhutzv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_sfnmwu on master_join_hhutzv.target_id = airport_heliport_surfacecontaminationlayer_lat_sfnmwu.id
  where master_join_hhutzv.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_bxmedt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xxwehn.*) AS annotation
  from master_join master_join_vjpkbs
  join notes.note_view notes_note_lat_xxwehn on master_join_vjpkbs.target_id = notes_note_lat_xxwehn.id
  where master_join_vjpkbs.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_yozaes on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_rdtndu.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_rdbazs.layer as layer,
    notes_note_view_zmwgdl.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_vrujvn.id) as criticalridge
  from master_join master_join_kmqstp
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_vrujvn on master_join_kmqstp.target_id = airport_heliport_ridge_lat_vrujvn.id
  where master_join_kmqstp.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_rdtndu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_whqxur.id) as layer
  from master_join master_join_qtycqd
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_whqxur on master_join_qtycqd.target_id = airport_heliport_surfacecontaminationlayer_lat_whqxur.id
  where master_join_qtycqd.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_rdbazs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ribrlr.*) AS annotation
  from master_join master_join_abayap
  join notes.note_view notes_note_lat_ribrlr on master_join_abayap.target_id = notes_note_lat_ribrlr.id
  where master_join_abayap.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_zmwgdl on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_dmvdez.title as varchar), '(' || organisation_unit_pt_dmvdez.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_dmvdez.href AS theunit_href,
    notes_note_view_scrpjs.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_dmvdez on organisation.unitdependency.theunit_id = organisation_unit_pt_dmvdez.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjcvdk.*) AS annotation
  from master_join master_join_rimrqn
  join notes.note_view notes_note_lat_qjcvdk on master_join_rimrqn.target_id = notes_note_lat_qjcvdk.id
  where master_join_rimrqn.source_id = organisation.unitdependency.id
) as notes_note_view_scrpjs on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_eycpcg.geom AS extent_geom,
    geometry_curve_view_eycpcg.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_gcsdjs.point as point,
    shared_airspacelayer_pt_pjdktt.verticalextent as verticalextent,
    notes_note_view_ynwaue.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_eycpcg on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_eycpcg.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_pdpwfn.id) as point
  from master_join master_join_ybbwkb
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_pdpwfn on master_join_ybbwkb.target_id = aerial_refuelling_aerialrefuellingpoint_lat_pdpwfn.id
  where master_join_ybbwkb.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_gcsdjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_szzyza.id) as verticalextent
  from master_join master_join_qkzekr
  join shared.airspacelayer_pt shared_airspacelayer_lat_szzyza on master_join_qkzekr.target_id = shared_airspacelayer_lat_szzyza.id
  where master_join_qkzekr.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_pjdktt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nadosl.*) AS annotation
  from master_join master_join_wbhliw
  join notes.note_view notes_note_lat_nadosl on master_join_wbhliw.target_id = notes_note_lat_nadosl.id
  where master_join_wbhliw.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_ynwaue on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_fysuvb.id) AS departurerunwaytransition,
    geometry_curve_view_bpmymx.geom AS trajectory_geom,
    geometry_curve_view_bpmymx.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_oxwfyk.transitionleg as transitionleg,
    notes_note_view_laergh.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_fysuvb on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_fysuvb.id
left join geometry.curve_view geometry_curve_view_bpmymx on procedure.proceduretransition.trajectory_id = geometry_curve_view_bpmymx.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_oybdzs.id) as transitionleg
  from master_join master_join_bokqyy
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_oybdzs on master_join_bokqyy.target_id = procedure_proceduretransitionleg_lat_oybdzs.id
  where master_join_bokqyy.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_oxwfyk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tryieu.*) AS annotation
  from master_join master_join_lvmxcf
  join notes.note_view notes_note_lat_tryieu on master_join_lvmxcf.target_id = notes_note_lat_tryieu.id
  where master_join_lvmxcf.source_id = procedure.proceduretransition.id
) as notes_note_view_laergh on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    (row_number() OVER ())::integer AS row,
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    geometry_elevatedpoint_view_ijyswe.geom AS location_geom,
    geometry_elevatedpoint_view_ijyswe.longitude AS location_longitude,
    geometry_elevatedpoint_view_ijyswe.latitude AS location_latitude,
    geometry_elevatedpoint_view_ijyswe.elevation AS location_elevation,
    geometry_elevatedpoint_view_ijyswe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ijyswe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ijyswe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ijyswe.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_gsamxg.annotation as annotation,
    shared_lightelementstatus_pt_szorxn.availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ijyswe on shared.lightelement.location_id = geometry_elevatedpoint_view_ijyswe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dvczsd.*) AS annotation
  from master_join master_join_wlcikw
  join notes.note_view notes_note_lat_dvczsd on master_join_wlcikw.target_id = notes_note_lat_dvczsd.id
  where master_join_wlcikw.source_id = shared.lightelement.id
) as notes_note_view_gsamxg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_vneyjz.id) as availability
  from master_join master_join_qlaiwd
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_vneyjz on master_join_qlaiwd.target_id = shared_lightelementstatus_lat_vneyjz.id
  where master_join_qlaiwd.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_szorxn on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_lihmef.geom AS touchdownreflector_geom,
    geometry_elevatedpoint_view_lihmef.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_lihmef.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_lihmef.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_lihmef.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_lihmef.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_lihmef.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_lihmef.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_ptmhxm.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lihmef on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_lihmef.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vpsoei.*) AS annotation
  from master_join master_join_kliowf
  join notes.note_view notes_note_lat_vpsoei on master_join_kliowf.target_id = notes_note_lat_vpsoei.id
  where master_join_kliowf.source_id = surveillance.reflector.id
) as notes_note_view_ptmhxm on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    geometry_elevatedsurface_view_ycglqu.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_ycglqu.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_ycglqu.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_ycglqu.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_ycglqu.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_ycglqu.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_zotjdy.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_zotjdy.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_zotjdy.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_zotjdy.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_zotjdy.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_zotjdy.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_zpofeb.geom AS extentlocation_geom,
    geometry_elevatedpoint_view_zpofeb.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_zpofeb.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_zpofeb.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_zpofeb.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_zpofeb.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_zpofeb.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_zpofeb.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_curill.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ycglqu on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_ycglqu.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_zotjdy on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_zotjdy.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zpofeb on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_zpofeb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mxqhtn.*) AS annotation
  from master_join master_join_gxiihf
  join notes.note_view notes_note_lat_mxqhtn on master_join_gxiihf.target_id = notes_note_lat_mxqhtn.id
  where master_join_gxiihf.source_id = airport_heliport.markingelement.id
) as notes_note_view_curill on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_rtpiui.geom as extent_geom,
    geometry_elevatedsurface_view_rtpiui.attr as extent,
    notes_note_view_cykywy.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_ftynwn.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_ftynwn.id,
      'elevation', geometry_elevatedsurface_lat_ftynwn.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_ftynwn.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_ftynwn.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_ftynwn.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_ftynwn.horizontalAccuracy
    )) AS attr
  from master_join master_join_zuudlj
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_ftynwn on master_join_zuudlj.target_id = geometry_elevatedsurface_lat_ftynwn.id
  where master_join_zuudlj.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_rtpiui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqbnez.*) AS annotation
  from master_join master_join_fanlzn
  join notes.note_view notes_note_lat_eqbnez on master_join_fanlzn.target_id = notes_note_lat_eqbnez.id
  where master_join_fanlzn.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_cykywy on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_zguraq.title as varchar), '(' || navaids_points_designatedpoint_pt_zguraq.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_zguraq.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_iiquwy.title as varchar), '(' || navaids_points_navaid_pt_iiquwy.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_iiquwy.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_znapii.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_znapii.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_znapii.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mrdliz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mrdliz.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mrdliz.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rbfkfv.title as varchar), '(' || airport_heliport_airportheliport_pt_rbfkfv.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_rbfkfv.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_gyeqer.geom AS pointchoiceposition_geom,
    geometry_point_view_gyeqer.longitude AS pointchoiceposition_longitude,
    geometry_point_view_gyeqer.latitude AS pointchoiceposition_latitude,
    geometry_point_view_gyeqer.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_cvttuu.title as varchar), '(' || shared_radiofrequencyarea_pt_cvttuu.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_cvttuu.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_wxfptn.facilitymakeup as facilitymakeup,
    notes_note_view_qnimfe.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zguraq on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zguraq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_iiquwy on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_iiquwy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_znapii on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_znapii.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mrdliz on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mrdliz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rbfkfv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_rbfkfv.id
left join geometry.point_view geometry_point_view_gyeqer on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_gyeqer.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_cvttuu on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_cvttuu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_hdnvti.id) as facilitymakeup
  from master_join master_join_zqxlur
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_hdnvti on master_join_zqxlur.target_id = navaids_points_pointreference_lat_hdnvti.id
  where master_join_zqxlur.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_wxfptn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_usagus.*) AS annotation
  from master_join master_join_rvspbx
  join notes.note_view notes_note_lat_usagus on master_join_rvspbx.target_id = notes_note_lat_usagus.id
  where master_join_rvspbx.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_qnimfe on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    (row_number() OVER ())::integer AS row,
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_kuqmac.title as varchar), '(' || navaids_points_designatedpoint_pt_kuqmac.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_kuqmac.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_djtfra.title as varchar), '(' || navaids_points_designatedpoint_pt_djtfra.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_djtfra.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ulnzpy.title as varchar), '(' || navaids_points_navaid_pt_ulnzpy.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_ulnzpy.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_slwddi.title as varchar), '(' || navaids_points_navaid_pt_slwddi.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_slwddi.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_njdfhb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_njdfhb.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_njdfhb.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_opalxb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_opalxb.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_opalxb.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_eoznjf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_eoznjf.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_eoznjf.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oynskc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oynskc.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oynskc.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jgvruj.title as varchar), '(' || airport_heliport_airportheliport_pt_jgvruj.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_jgvruj.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_eljqdu.title as varchar), '(' || airport_heliport_airportheliport_pt_eljqdu.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_eljqdu.href AS startairportreferencepoint_href,
    geometry_point_view_pmdgwl.geom AS endposition_geom,
    geometry_point_view_pmdgwl.longitude AS endposition_longitude,
    geometry_point_view_pmdgwl.latitude AS endposition_latitude,
    geometry_point_view_pmdgwl.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_mlcfhd.geom AS startposition_geom,
    geometry_point_view_mlcfhd.longitude AS startposition_longitude,
    geometry_point_view_mlcfhd.latitude AS startposition_latitude,
    geometry_point_view_mlcfhd.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_kquznd.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_kuqmac on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_kuqmac.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ulnzpy on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_ulnzpy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_njdfhb on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_njdfhb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_eoznjf on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_eoznjf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jgvruj on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_jgvruj.id
left join geometry.point_view geometry_point_view_pmdgwl on routes.directflightsegment.end_position_id = geometry_point_view_pmdgwl.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_djtfra on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_djtfra.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_slwddi on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_slwddi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_opalxb on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_opalxb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oynskc on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oynskc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eljqdu on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_eljqdu.id
left join geometry.point_view geometry_point_view_mlcfhd on routes.directflightsegment.start_position_id = geometry_point_view_mlcfhd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsybhc.*) AS annotation
  from master_join master_join_rivfhe
  join notes.note_view notes_note_lat_bsybhc on master_join_rivfhe.target_id = notes_note_lat_bsybhc.id
  where master_join_rivfhe.source_id = routes.directflightsegment.id
) as notes_note_view_kquznd on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_sibhpn.title as varchar), '(' || navaids_points_designatedpoint_pt_sibhpn.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_sibhpn.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nzdkfh.title as varchar), '(' || navaids_points_navaid_pt_nzdkfh.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_nzdkfh.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ekegqn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ekegqn.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ekegqn.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mzcloc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mzcloc.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mzcloc.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vymyrk.title as varchar), '(' || airport_heliport_airportheliport_pt_vymyrk.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_vymyrk.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ndowpy.geom AS pointchoiceposition_geom,
    geometry_point_view_ndowpy.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ndowpy.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ndowpy.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_gkyatk.title as varchar), '(' || shared_radiofrequencyarea_pt_gkyatk.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_gkyatk.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_wujmnx.facilitymakeup as facilitymakeup,
    notes_note_view_ahrhdq.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_sibhpn on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_sibhpn.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nzdkfh on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_nzdkfh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ekegqn on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ekegqn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mzcloc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mzcloc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vymyrk on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_vymyrk.id
left join geometry.point_view geometry_point_view_ndowpy on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_ndowpy.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_gkyatk on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_gkyatk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_mcgpfk.id) as facilitymakeup
  from master_join master_join_obhcok
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_mcgpfk on master_join_obhcok.target_id = navaids_points_pointreference_lat_mcgpfk.id
  where master_join_obhcok.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_wujmnx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dayecr.*) AS annotation
  from master_join master_join_xdesvb
  join notes.note_view notes_note_lat_dayecr on master_join_xdesvb.target_id = notes_note_lat_dayecr.id
  where master_join_xdesvb.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_ahrhdq on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_wegeoz.title as varchar), '(' || airport_heliport_airportheliport_pt_wegeoz.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_wegeoz.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fqlxvl.title as varchar), '(' || airport_heliport_airportheliport_pt_fqlxvl.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_fqlxvl.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_ebpjrb.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_ebpjrb.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_ebpjrb.href AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_cbexix.id) AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_ezgroq.title as varchar), '(' || organisation_organisationauthority_pt_ezgroq.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_ezgroq.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ffaulu.title as varchar), '(' || navaids_points_designatedpoint_pt_ffaulu.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ffaulu.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_iubjqm.title as varchar), '(' || navaids_points_navaid_pt_iubjqm.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_iubjqm.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ppbtif.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ppbtif.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_ppbtif.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mleciw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mleciw.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mleciw.href AS significantpointconditionrunwaypoint_href,
    geometry_point_view_huxoor.geom AS significantpointconditionposition_geom,
    geometry_point_view_huxoor.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_huxoor.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_huxoor.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_avovpm.id) AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_tvilca.title as varchar), '(' || routes_airspacebordercrossing_pt_tvilca.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_tvilca.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_tcsczh.title as varchar), '(' || airspace_airspace_pt_tcsczh.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_tcsczh.href AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_jesyck.id) AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_cmcirl.title as varchar), '(' || procedure_standardinstrumentarrival_pt_cmcirl.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_cmcirl.href AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_phkupm.id) AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_gcadjj.id) AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_pgbrew.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_pgbrew.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_pgbrew.href AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_yhxcei.id) AS operationalcondition,
    routes_flightrestrictionlevel_pt_icughf.flightlevel as flightlevel,
    notes_note_view_tyoevu.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wegeoz on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_wegeoz.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_ebpjrb on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_ebpjrb.id
left join routes.routeportion_pt routes_routeportion_pt_cbexix on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_cbexix.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ezgroq on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_ezgroq.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ffaulu on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ffaulu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_iubjqm on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_iubjqm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ppbtif on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ppbtif.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mleciw on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mleciw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fqlxvl on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_fqlxvl.id
left join geometry.point_view geometry_point_view_huxoor on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_huxoor.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_avovpm on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_avovpm.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_tvilca on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_tvilca.id
left join airspace.airspace_pt airspace_airspace_pt_tcsczh on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_tcsczh.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_jesyck on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_jesyck.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_cmcirl on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_cmcirl.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_phkupm on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_phkupm.id
left join shared.meteorology_pt shared_meteorology_pt_gcadjj on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_gcadjj.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_pgbrew on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_pgbrew.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_yhxcei on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_yhxcei.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_evgmrd.id) as flightlevel
  from master_join master_join_ksyejy
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_evgmrd on master_join_ksyejy.target_id = routes_flightrestrictionlevel_lat_evgmrd.id
  where master_join_ksyejy.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_icughf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cxpild.*) AS annotation
  from master_join master_join_wftzsj
  join notes.note_view notes_note_lat_cxpild on master_join_wftzsj.target_id = notes_note_lat_cxpild.id
  where master_join_wftzsj.source_id = routes.flightconditionelement.id
) as notes_note_view_tyoevu on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_prgmwb.title as varchar), '(' || procedure_standardinstrumentarrival_pt_prgmwb.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_prgmwb.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_sublwi.title as varchar), '(' || airspace_airspace_pt_sublwi.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_sublwi.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bnxvbz.title as varchar), '(' || navaids_points_designatedpoint_pt_bnxvbz.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bnxvbz.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lljkgw.title as varchar), '(' || navaids_points_navaid_pt_lljkgw.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_lljkgw.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_alxxja.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_alxxja.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_alxxja.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bgeubu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bgeubu.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bgeubu.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_diszoc.title as varchar), '(' || airport_heliport_airportheliport_pt_diszoc.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_diszoc.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nitnvj.title as varchar), '(' || airport_heliport_airportheliport_pt_nitnvj.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_nitnvj.href AS elementairportheliportelement_href,
    geometry_point_view_lsfmko.geom AS pointelementposition_geom,
    geometry_point_view_lsfmko.longitude AS pointelementposition_longitude,
    geometry_point_view_lsfmko.latitude AS pointelementposition_latitude,
    geometry_point_view_lsfmko.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_lmbgtw.id) AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_jsfjio.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_jsfjio.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_jsfjio.href AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_fvqmsz.id) AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_ryuypn.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_ryuypn.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_ryuypn.href AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_qzdfcq.flightlevel as flightlevel,
    notes_note_view_mrtrrh.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_prgmwb on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_prgmwb.id
left join airspace.airspace_pt airspace_airspace_pt_sublwi on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_sublwi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bnxvbz on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bnxvbz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lljkgw on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_lljkgw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_alxxja on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_alxxja.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bgeubu on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bgeubu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_diszoc on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_diszoc.id
left join geometry.point_view geometry_point_view_lsfmko on routes.flightroutingelement.pointelement_position_id = geometry_point_view_lsfmko.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_lmbgtw on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_lmbgtw.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_jsfjio on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_jsfjio.id
left join routes.routeportion_pt routes_routeportion_pt_fvqmsz on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_fvqmsz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nitnvj on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_nitnvj.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_ryuypn on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_ryuypn.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_shwmta.id) as flightlevel
  from master_join master_join_wtkfnv
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_shwmta on master_join_wtkfnv.target_id = routes_flightrestrictionlevel_lat_shwmta.id
  where master_join_wtkfnv.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_qzdfcq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qcrjsa.*) AS annotation
  from master_join master_join_nvzoaz
  join notes.note_view notes_note_lat_qcrjsa on master_join_nvzoaz.target_id = notes_note_lat_qcrjsa.id
  where master_join_nvzoaz.source_id = routes.flightroutingelement.id
) as notes_note_view_mrtrrh on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    (row_number() OVER ())::integer AS row,
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_pthldp.title as varchar), '(' || navaids_points_designatedpoint_pt_pthldp.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pthldp.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_gqlpoz.title as varchar), '(' || navaids_points_designatedpoint_pt_gqlpoz.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gqlpoz.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_sbqstm.title as varchar), '(' || navaids_points_designatedpoint_pt_sbqstm.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_sbqstm.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qybhpx.title as varchar), '(' || navaids_points_navaid_pt_qybhpx.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_qybhpx.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_mdcrfb.title as varchar), '(' || navaids_points_navaid_pt_mdcrfb.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_mdcrfb.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_ilsfxz.title as varchar), '(' || navaids_points_navaid_pt_ilsfxz.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_ilsfxz.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ampoxr.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ampoxr.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_ampoxr.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xzcgcg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xzcgcg.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_xzcgcg.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_forkub.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_forkub.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_forkub.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_igmxba.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_igmxba.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_igmxba.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_supbrq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_supbrq.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_supbrq.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wvhdru.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wvhdru.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wvhdru.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hewjld.title as varchar), '(' || airport_heliport_airportheliport_pt_hewjld.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_hewjld.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mdbxcq.title as varchar), '(' || airport_heliport_airportheliport_pt_mdbxcq.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_mdbxcq.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_euqdki.title as varchar), '(' || airport_heliport_airportheliport_pt_euqdki.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_euqdki.href AS endairportreferencepoint_href,
    geometry_point_view_lcftfi.geom AS startposition_geom,
    geometry_point_view_lcftfi.longitude AS startposition_longitude,
    geometry_point_view_lcftfi.latitude AS startposition_latitude,
    geometry_point_view_lcftfi.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_kqlizo.geom AS intermediatepointposition_geom,
    geometry_point_view_kqlizo.longitude AS intermediatepointposition_longitude,
    geometry_point_view_kqlizo.latitude AS intermediatepointposition_latitude,
    geometry_point_view_kqlizo.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_plygkr.geom AS endposition_geom,
    geometry_point_view_plygkr.longitude AS endposition_longitude,
    geometry_point_view_plygkr.latitude AS endposition_latitude,
    geometry_point_view_plygkr.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_ywsqqv.title as varchar), '(' || routes_route_pt_ywsqqv.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_ywsqqv.href AS referencedroute_href,
    notes_note_view_snuaiv.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pthldp on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pthldp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qybhpx on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_qybhpx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ampoxr on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ampoxr.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_igmxba on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_igmxba.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hewjld on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_hewjld.id
left join geometry.point_view geometry_point_view_lcftfi on routes.routeportion.start_position_id = geometry_point_view_lcftfi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gqlpoz on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gqlpoz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mdcrfb on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_mdcrfb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xzcgcg on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xzcgcg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_supbrq on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_supbrq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mdbxcq on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_mdbxcq.id
left join geometry.point_view geometry_point_view_kqlizo on routes.routeportion.intermediatepoint_position_id = geometry_point_view_kqlizo.id
left join routes.route_pt routes_route_pt_ywsqqv on routes.routeportion.referencedroute_id = routes_route_pt_ywsqqv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_sbqstm on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_sbqstm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ilsfxz on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_ilsfxz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_forkub on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_forkub.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wvhdru on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wvhdru.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_euqdki on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_euqdki.id
left join geometry.point_view geometry_point_view_plygkr on routes.routeportion.end_position_id = geometry_point_view_plygkr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jrfzex.*) AS annotation
  from master_join master_join_caqhsr
  join notes.note_view notes_note_lat_jrfzex on master_join_caqhsr.target_id = notes_note_lat_jrfzex.id
  where master_join_caqhsr.source_id = routes.routeportion.id
) as notes_note_view_snuaiv on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_tyaauq.title as varchar), '(' || navaids_points_designatedpoint_pt_tyaauq.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_tyaauq.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_uxcajo.title as varchar), '(' || navaids_points_navaid_pt_uxcajo.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_uxcajo.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lmiekt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lmiekt.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_lmiekt.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_pzpygi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_pzpygi.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_pzpygi.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lvhvib.title as varchar), '(' || airport_heliport_airportheliport_pt_lvhvib.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_lvhvib.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_gviede.geom AS pointchoiceposition_geom,
    geometry_point_view_gviede.longitude AS pointchoiceposition_longitude,
    geometry_point_view_gviede.latitude AS pointchoiceposition_latitude,
    geometry_point_view_gviede.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_zuejoq.title as varchar), '(' || shared_radiofrequencyarea_pt_zuejoq.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_zuejoq.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_wmsbvy.facilitymakeup as facilitymakeup,
    notes_note_view_drofzt.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_tyaauq on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_tyaauq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uxcajo on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_uxcajo.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lmiekt on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lmiekt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_pzpygi on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_pzpygi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lvhvib on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_lvhvib.id
left join geometry.point_view geometry_point_view_gviede on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_gviede.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_zuejoq on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_zuejoq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_plqazt.id) as facilitymakeup
  from master_join master_join_qnawhs
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_plqazt on master_join_qnawhs.target_id = navaids_points_pointreference_lat_plqazt.id
  where master_join_qnawhs.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_wmsbvy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqbmbu.*) AS annotation
  from master_join master_join_mptfak
  join notes.note_view notes_note_lat_eqbmbu on master_join_mptfak.target_id = notes_note_lat_eqbmbu.id
  where master_join_mptfak.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_drofzt on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    geometry_surface_view_vuzwys.geom AS extent_geom,
    geometry_surface_view_vuzwys.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_rlisna.verticalextent as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_qlxjol.point as point,
    notes_note_view_fwrvjs.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_vuzwys on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_vuzwys.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ujoehv.id) as verticalextent
  from master_join master_join_bbdgsj
  join shared.airspacelayer_pt shared_airspacelayer_lat_ujoehv on master_join_bbdgsj.target_id = shared_airspacelayer_lat_ujoehv.id
  where master_join_bbdgsj.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_rlisna on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_cdvtom.id) as point
  from master_join master_join_vrzess
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_cdvtom on master_join_vrzess.target_id = aerial_refuelling_aerialrefuellingpoint_lat_cdvtom.id
  where master_join_vrzess.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_qlxjol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkwqtc.*) AS annotation
  from master_join master_join_dtcptp
  join notes.note_view notes_note_lat_lkwqtc on master_join_dtcptp.target_id = notes_note_lat_lkwqtc.id
  where master_join_dtcptp.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_fwrvjs on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['notes.note_view', 'geometry.surface_view', 'geometry.curve_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    geometry_surface_view_kjwqoq.geom AS horizontalprojection_geom,
    geometry_surface_view_kjwqoq.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_nfxxpb.geom AS centreline_geom,
    geometry_curve_view_nfxxpb.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_zpmbcl.id) AS contributorairspace,
    notes_note_view_zblagi.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_kjwqoq on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_kjwqoq.id
left join geometry.curve_view geometry_curve_view_nfxxpb on airspace.airspacevolume.centreline_id = geometry_curve_view_nfxxpb.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_zpmbcl on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_zpmbcl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rphfad.*) AS annotation
  from master_join master_join_hhzulo
  join notes.note_view notes_note_lat_rphfad on master_join_hhzulo.target_id = notes_note_lat_rphfad.id
  where master_join_hhzulo.source_id = airspace.airspacevolume.id
) as notes_note_view_zblagi on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_kgrydt.id) AS sectordefinition,
    geometry_surface_view_ufgzyb.geom AS extent_geom,
    geometry_surface_view_ufgzyb.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_ywerqe.significantobstacle as significantobstacle,
    procedure_sectordesign_pt_tagfod.sectorcriteria as sectorcriteria,
    notes_note_view_hhdqsh.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_kgrydt on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_kgrydt.id
left join geometry.surface_view geometry_surface_view_ufgzyb on procedure.navigationareasector.extent_id = geometry_surface_view_ufgzyb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_hfvemh.id) as significantobstacle
  from master_join master_join_grxdms
  join shared.obstruction_pt shared_obstruction_lat_hfvemh on master_join_grxdms.target_id = shared_obstruction_lat_hfvemh.id
  where master_join_grxdms.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_ywerqe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_cectdi.id) as sectorcriteria
  from master_join master_join_adnnip
  join procedure.sectordesign_pt procedure_sectordesign_lat_cectdi on master_join_adnnip.target_id = procedure_sectordesign_lat_cectdi.id
  where master_join_adnnip.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_tagfod on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_orjqpb.*) AS annotation
  from master_join master_join_toavep
  join notes.note_view notes_note_lat_orjqpb on master_join_toavep.target_id = notes_note_lat_orjqpb.id
  where master_join_toavep.source_id = procedure.navigationareasector.id
) as notes_note_view_hhdqsh on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['notes.note_view', 'geometry.surface_view', 'geometry.curve_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    geometry_surface_view_tkhqpf.geom AS surface_geom,
    geometry_surface_view_tkhqpf.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_ejtudy.geom AS startingcurve_geom,
    geometry_curve_view_ejtudy.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_ysuwas.aircraftcategory as aircraftcategory,
    shared_obstruction_pt_bdkoff.significantobstacle as significantobstacle,
    notes_note_view_ragxbp.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_tkhqpf on shared.obstacleassessmentarea.surface_id = geometry_surface_view_tkhqpf.id
left join geometry.curve_view geometry_curve_view_ejtudy on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_ejtudy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hevehu.id) as aircraftcategory
  from master_join master_join_yrszcs
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_hevehu on master_join_yrszcs.target_id = shared_aircraftcharacteristic_lat_hevehu.id
  where master_join_yrszcs.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_ysuwas on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_zhnhto.id) as significantobstacle
  from master_join master_join_ehafvh
  join shared.obstruction_pt shared_obstruction_lat_zhnhto on master_join_ehafvh.target_id = shared_obstruction_lat_zhnhto.id
  where master_join_ehafvh.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_bdkoff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zblail.*) AS annotation
  from master_join master_join_fybwkd
  join notes.note_view notes_note_lat_zblail on master_join_fybwkd.target_id = notes_note_lat_zblail.id
  where master_join_fybwkd.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_ragxbp on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_lngonq.title as varchar), '(' || navaids_points_designatedpoint_pt_lngonq.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_lngonq.href AS point_href,
    geometry_surface_view_wlqinu.geom AS fixtolerancearea_geom,
    geometry_surface_view_wlqinu.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_hveahe.facilityangle as facilityangle,
    navaids_points_distanceindication_pt_ketbko.facilitydistance as facilitydistance,
    notes_note_view_piinpq.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lngonq on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_lngonq.id
left join geometry.surface_view geometry_surface_view_wlqinu on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_wlqinu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_llrldc.id) as facilityangle
  from master_join master_join_vreqkr
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_llrldc on master_join_vreqkr.target_id = navaids_points_angleuse_lat_llrldc.id
  where master_join_vreqkr.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_hveahe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_ezwsjf.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_ezwsjf.title AS varchar), '(' || navaids_points_distanceindication_lat_ezwsjf.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_ezwsjf.href
  )) as facilitydistance  from master_join master_join_lkmwdl
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_ezwsjf on master_join_lkmwdl.target_id = navaids_points_distanceindication_lat_ezwsjf.id
  where master_join_lkmwdl.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_ketbko on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xbrrqp.*) AS annotation
  from master_join master_join_hrkogp
  join notes.note_view notes_note_lat_xbrrqp on master_join_hrkogp.target_id = notes_note_lat_xbrrqp.id
  where master_join_hrkogp.source_id = navaids_points.pointreference.id
) as notes_note_view_piinpq on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    geometry_surface_view_obvuto.geom AS extent_geom,
    geometry_surface_view_obvuto.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_tposam.id) AS sectordefinition,
    shared_obstruction_pt_zmvdyu.significantobstacle as significantobstacle,
    notes_note_view_wigjje.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_obvuto on procedure.safealtitudeareasector.extent_id = geometry_surface_view_obvuto.id
left join shared.circlesector_pt shared_circlesector_pt_tposam on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_tposam.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_qrbpku.id) as significantobstacle
  from master_join master_join_xmoecr
  join shared.obstruction_pt shared_obstruction_lat_qrbpku on master_join_xmoecr.target_id = shared_obstruction_lat_qrbpku.id
  where master_join_xmoecr.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_zmvdyu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_laascp.*) AS annotation
  from master_join master_join_jerfjp
  join notes.note_view notes_note_lat_laascp on master_join_jerfjp.target_id = notes_note_lat_laascp.id
  where master_join_jerfjp.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_wigjje on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    to_jsonb(shared_circlesector_pt_pgvzkp.id) AS sectordefinition,
    geometry_surface_view_tzkrrb.geom AS extent_geom,
    geometry_surface_view_tzkrrb.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_iplfea.significantobstacle as significantobstacle,
    notes_note_view_uyakdb.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_pgvzkp on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_pgvzkp.id
left join geometry.surface_view geometry_surface_view_tzkrrb on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_tzkrrb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_mzlpln.id) as significantobstacle
  from master_join master_join_sxxvml
  join shared.obstruction_pt shared_obstruction_lat_mzlpln on master_join_sxxvml.target_id = shared_obstruction_lat_mzlpln.id
  where master_join_sxxvml.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_iplfea on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qajmze.*) AS annotation
  from master_join master_join_xmglas
  join notes.note_view notes_note_lat_qajmze on master_join_xmglas.target_id = notes_note_lat_qajmze.id
  where master_join_xmglas.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_uyakdb on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_axgcbg.timeinterval as timeinterval,
    notes_note_view_qctctq.annotation as annotation,
    organisation_organisationauthority_pt_ghxvhl.specialdateauthority as specialdateauthority,
    airport_heliport_airportheliportusage_pt_cosjyt.usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yspofp.*) AS timeinterval
  from master_join master_join_nveyhm
  join shared.timesheet_view shared_timesheet_lat_yspofp on master_join_nveyhm.target_id = shared_timesheet_lat_yspofp.id
  where master_join_nveyhm.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_axgcbg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kaljiy.*) AS annotation
  from master_join master_join_qfybmd
  join notes.note_view notes_note_lat_kaljiy on master_join_qfybmd.target_id = notes_note_lat_kaljiy.id
  where master_join_qfybmd.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_qctctq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vjysnl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vjysnl.title AS varchar), '(' || organisation_organisationauthority_lat_vjysnl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vjysnl.href
  )) as specialdateauthority  from master_join master_join_scmunk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vjysnl on master_join_scmunk.target_id = organisation_organisationauthority_lat_vjysnl.id
  where master_join_scmunk.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_ghxvhl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_ujkkzq.id) as usage
  from master_join master_join_llqwmi
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_ujkkzq on master_join_llqwmi.target_id = airport_heliport_airportheliportusage_lat_ujkkzq.id
  where master_join_llqwmi.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_cosjyt on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_qfdcua.title as varchar), '(' || organisation_organisationauthority_pt_qfdcua.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_qfdcua.href AS theorganisationauthority_href,
    organisation_organisationauthority_pt_rafdfw.specialdateauthority as specialdateauthority,
    shared_timesheet_view_xursmr.timeinterval as timeinterval,
    notes_note_view_jsdqvm.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qfdcua on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_qfdcua.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ktdfop.*) AS timeinterval
  from master_join master_join_zuazet
  join shared.timesheet_view shared_timesheet_lat_ktdfop on master_join_zuazet.target_id = shared_timesheet_lat_ktdfop.id
  where master_join_zuazet.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_xursmr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wqsrwt.*) AS annotation
  from master_join master_join_aslngo
  join notes.note_view notes_note_lat_wqsrwt on master_join_aslngo.target_id = notes_note_lat_wqsrwt.id
  where master_join_aslngo.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_jsdqvm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qsrmah.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qsrmah.title AS varchar), '(' || organisation_organisationauthority_lat_qsrmah.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qsrmah.href
  )) as specialdateauthority  from master_join master_join_svoqar
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qsrmah on master_join_svoqar.target_id = organisation_organisationauthority_lat_qsrmah.id
  where master_join_svoqar.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_rafdfw on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    shared_timesheet_view_xxgzvx.timeinterval as timeinterval,
    notes_note_view_bzxsme.annotation as annotation,
    organisation_organisationauthority_pt_xjwbti.specialdateauthority as specialdateauthority,
    organisation_organisationauthority_pt_gahwtw.user as user,
    shared_airspacelayer_pt_mocepm.levels as levels,
    shared_aircraftcharacteristic_pt_gyvxah.aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_esqehm.*) AS timeinterval
  from master_join master_join_vgxbuq
  join shared.timesheet_view shared_timesheet_lat_esqehm on master_join_vgxbuq.target_id = shared_timesheet_lat_esqehm.id
  where master_join_vgxbuq.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_xxgzvx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_afusfs.*) AS annotation
  from master_join master_join_tsqeoe
  join notes.note_view notes_note_lat_afusfs on master_join_tsqeoe.target_id = notes_note_lat_afusfs.id
  where master_join_tsqeoe.source_id = airspace.airspaceactivation.id
) as notes_note_view_bzxsme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mhziwi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mhziwi.title AS varchar), '(' || organisation_organisationauthority_lat_mhziwi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mhziwi.href
  )) as specialdateauthority  from master_join master_join_yurwys
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mhziwi on master_join_yurwys.target_id = organisation_organisationauthority_lat_mhziwi.id
  where master_join_yurwys.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_xjwbti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ckclta.id) as levels
  from master_join master_join_yapvtp
  join shared.airspacelayer_pt shared_airspacelayer_lat_ckclta on master_join_yapvtp.target_id = shared_airspacelayer_lat_ckclta.id
  where master_join_yapvtp.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_mocepm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fsavno.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fsavno.title AS varchar), '(' || organisation_organisationauthority_lat_fsavno.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fsavno.href
  )) as user  from master_join master_join_ifqtte
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fsavno on master_join_ifqtte.target_id = organisation_organisationauthority_lat_fsavno.id
  where master_join_ifqtte.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_gahwtw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ykvqhy.id) as aircraft
  from master_join master_join_phgmmi
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_ykvqhy on master_join_phgmmi.target_id = shared_aircraftcharacteristic_lat_ykvqhy.id
  where master_join_phgmmi.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_gyvxah on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    shared_timesheet_view_wnaddv.timeinterval as timeinterval,
    notes_note_view_jfdrdg.annotation as annotation,
    organisation_organisationauthority_pt_zsoeha.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_zisjvs.associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dosgvf.*) AS timeinterval
  from master_join master_join_tdoqzf
  join shared.timesheet_view shared_timesheet_lat_dosgvf on master_join_tdoqzf.target_id = shared_timesheet_lat_dosgvf.id
  where master_join_tdoqzf.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_wnaddv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yghvka.*) AS annotation
  from master_join master_join_eealqf
  join notes.note_view notes_note_lat_yghvka on master_join_eealqf.target_id = notes_note_lat_yghvka.id
  where master_join_eealqf.source_id = airspace.airspacelayerclass.id
) as notes_note_view_jfdrdg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hgrwco.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hgrwco.title AS varchar), '(' || organisation_organisationauthority_lat_hgrwco.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hgrwco.href
  )) as specialdateauthority  from master_join master_join_yszuiz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hgrwco on master_join_yszuiz.target_id = organisation_organisationauthority_lat_hgrwco.id
  where master_join_yszuiz.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_zsoeha on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_mipmay.id) as associatedlevels
  from master_join master_join_agthho
  join shared.airspacelayer_pt shared_airspacelayer_lat_mipmay on master_join_agthho.target_id = shared_airspacelayer_lat_mipmay.id
  where master_join_agthho.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_zisjvs on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_dklccg.timeinterval as timeinterval,
    notes_note_view_vhigvh.annotation as annotation,
    organisation_organisationauthority_pt_asckiy.specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nmlpti.*) AS timeinterval
  from master_join master_join_eyyoew
  join shared.timesheet_view shared_timesheet_lat_nmlpti on master_join_eyyoew.target_id = shared_timesheet_lat_nmlpti.id
  where master_join_eyyoew.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_dklccg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hypxom.*) AS annotation
  from master_join master_join_dyndmr
  join notes.note_view notes_note_lat_hypxom on master_join_dyndmr.target_id = notes_note_lat_hypxom.id
  where master_join_dyndmr.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_vhigvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_blrwyb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_blrwyb.title AS varchar), '(' || organisation_organisationauthority_lat_blrwyb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_blrwyb.href
  )) as specialdateauthority  from master_join master_join_kwryrh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_blrwyb on master_join_kwryrh.target_id = organisation_organisationauthority_lat_blrwyb.id
  where master_join_kwryrh.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_asckiy on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_qmkurr.timeinterval as timeinterval,
    notes_note_view_htvwjw.annotation as annotation,
    organisation_organisationauthority_pt_rxgame.specialdateauthority as specialdateauthority,
    airport_heliport_apronareausage_pt_qsdlhf.usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nluecn.*) AS timeinterval
  from master_join master_join_hiqatg
  join shared.timesheet_view shared_timesheet_lat_nluecn on master_join_hiqatg.target_id = shared_timesheet_lat_nluecn.id
  where master_join_hiqatg.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_qmkurr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsnerv.*) AS annotation
  from master_join master_join_lssuxv
  join notes.note_view notes_note_lat_rsnerv on master_join_lssuxv.target_id = notes_note_lat_rsnerv.id
  where master_join_lssuxv.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_htvwjw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qtmuxm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qtmuxm.title AS varchar), '(' || organisation_organisationauthority_lat_qtmuxm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qtmuxm.href
  )) as specialdateauthority  from master_join master_join_flqwwz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qtmuxm on master_join_flqwwz.target_id = organisation_organisationauthority_lat_qtmuxm.id
  where master_join_flqwwz.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_rxgame on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_zkinon.id) as usage
  from master_join master_join_pypxqu
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_zkinon on master_join_pypxqu.target_id = airport_heliport_apronareausage_lat_zkinon.id
  where master_join_pypxqu.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_qsdlhf on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['notes.note_view', 'shared.timesheet_view', 'geometry.surface_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_heefje.id) AS sectordescription,
    geometry_surface_view_jmrcuv.geom AS restrictionarea_geom,
    geometry_surface_view_jmrcuv.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_krjagg.timeinterval as timeinterval,
    notes_note_view_xoulkm.annotation as annotation,
    organisation_organisationauthority_pt_vdwhvc.specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_heefje on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_heefje.id
left join geometry.surface_view geometry_surface_view_jmrcuv on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_jmrcuv.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_oslmqe.*) AS timeinterval
  from master_join master_join_ktgazv
  join shared.timesheet_view shared_timesheet_lat_oslmqe on master_join_ktgazv.target_id = shared_timesheet_lat_oslmqe.id
  where master_join_ktgazv.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_krjagg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xwvexn.*) AS annotation
  from master_join master_join_qvumlz
  join notes.note_view notes_note_lat_xwvexn on master_join_qvumlz.target_id = notes_note_lat_xwvexn.id
  where master_join_qvumlz.source_id = procedure.circlingrestriction.id
) as notes_note_view_xoulkm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vspxsk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vspxsk.title AS varchar), '(' || organisation_organisationauthority_lat_vspxsk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vspxsk.href
  )) as specialdateauthority  from master_join master_join_coxybt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vspxsk on master_join_coxybt.target_id = organisation_organisationauthority_lat_vspxsk.id
  where master_join_coxybt.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_vdwhvc on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_gnrocy.timeinterval as timeinterval,
    notes_note_view_vrpane.annotation as annotation,
    organisation_organisationauthority_pt_xsqbkl.specialdateauthority as specialdateauthority,
    shared_meteorology_pt_jwioii.weather as weather,
    shared_aircraftcharacteristic_pt_wfvqit.aircraft as aircraft,
    shared_flightcharacteristic_pt_cnksou.flight as flight,
    airport_heliport_conditioncombination_pt_fpyehe.subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xzdryb.*) AS timeinterval
  from master_join master_join_hwhqrs
  join shared.timesheet_view shared_timesheet_lat_xzdryb on master_join_hwhqrs.target_id = shared_timesheet_lat_xzdryb.id
  where master_join_hwhqrs.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_gnrocy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pgbdut.*) AS annotation
  from master_join master_join_lvlrvl
  join notes.note_view notes_note_lat_pgbdut on master_join_lvlrvl.target_id = notes_note_lat_pgbdut.id
  where master_join_lvlrvl.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_vrpane on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sqoyzu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sqoyzu.title AS varchar), '(' || organisation_organisationauthority_lat_sqoyzu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sqoyzu.href
  )) as specialdateauthority  from master_join master_join_gjmnwc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sqoyzu on master_join_gjmnwc.target_id = organisation_organisationauthority_lat_sqoyzu.id
  where master_join_gjmnwc.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_xsqbkl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_psdjuv.id) as weather
  from master_join master_join_wytsuv
  join shared.meteorology_pt shared_meteorology_lat_psdjuv on master_join_wytsuv.target_id = shared_meteorology_lat_psdjuv.id
  where master_join_wytsuv.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_jwioii on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_htrgct.id) as aircraft
  from master_join master_join_qluxhp
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_htrgct on master_join_qluxhp.target_id = shared_aircraftcharacteristic_lat_htrgct.id
  where master_join_qluxhp.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_wfvqit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_jugwnd.id) as flight
  from master_join master_join_gxkeue
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_jugwnd on master_join_gxkeue.target_id = shared_flightcharacteristic_lat_jugwnd.id
  where master_join_gxkeue.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_cnksou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_bymgwy.id) as subcondition
  from master_join master_join_ewktyw
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_bymgwy on master_join_ewktyw.target_id = airport_heliport_conditioncombination_lat_bymgwy.id
  where master_join_ewktyw.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_fpyehe on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_theqvn.timeinterval as timeinterval,
    notes_note_view_htqwyi.annotation as annotation,
    organisation_organisationauthority_pt_yxvejb.specialdateauthority as specialdateauthority,
    routes_flightconditionelement_pt_yvmdoa.element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dszrzy.*) AS timeinterval
  from master_join master_join_anakpx
  join shared.timesheet_view shared_timesheet_lat_dszrzy on master_join_anakpx.target_id = shared_timesheet_lat_dszrzy.id
  where master_join_anakpx.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_theqvn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uejptt.*) AS annotation
  from master_join master_join_ahizac
  join notes.note_view notes_note_lat_uejptt on master_join_ahizac.target_id = notes_note_lat_uejptt.id
  where master_join_ahizac.source_id = routes.flightconditioncombination.id
) as notes_note_view_htqwyi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_anjtlm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_anjtlm.title AS varchar), '(' || organisation_organisationauthority_lat_anjtlm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_anjtlm.href
  )) as specialdateauthority  from master_join master_join_vlzrpd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_anjtlm on master_join_vlzrpd.target_id = organisation_organisationauthority_lat_anjtlm.id
  where master_join_vlzrpd.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_yxvejb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_ejzcjr.id) as element
  from master_join master_join_yqajzs
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_ejzcjr on master_join_yqajzs.target_id = routes_flightconditionelement_lat_ejzcjr.id
  where master_join_yqajzs.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_yvmdoa on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_jlztqk.timeinterval as timeinterval,
    notes_note_view_jessjd.annotation as annotation,
    organisation_organisationauthority_pt_lgwdmo.specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_oqaylp.*) AS timeinterval
  from master_join master_join_ndvulc
  join shared.timesheet_view shared_timesheet_lat_oqaylp on master_join_ndvulc.target_id = shared_timesheet_lat_oqaylp.id
  where master_join_ndvulc.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_jlztqk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asypee.*) AS annotation
  from master_join master_join_zwyxvn
  join notes.note_view notes_note_lat_asypee on master_join_zwyxvn.target_id = notes_note_lat_asypee.id
  where master_join_zwyxvn.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_jessjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rcnlfp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rcnlfp.title AS varchar), '(' || organisation_organisationauthority_lat_rcnlfp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rcnlfp.href
  )) as specialdateauthority  from master_join master_join_jdzfkj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rcnlfp on master_join_jdzfkj.target_id = organisation_organisationauthority_lat_rcnlfp.id
  where master_join_jdzfkj.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_lgwdmo on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    (row_number() OVER ())::integer AS row,
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    shared_timesheet_view_zjkkkf.timeinterval as timeinterval,
    notes_note_view_ydevaz.annotation as annotation,
    organisation_organisationauthority_pt_hhkwzn.specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vqqgav.*) AS timeinterval
  from master_join master_join_iptsvh
  join shared.timesheet_view shared_timesheet_lat_vqqgav on master_join_iptsvh.target_id = shared_timesheet_lat_vqqgav.id
  where master_join_iptsvh.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_zjkkkf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jnlwav.*) AS annotation
  from master_join master_join_piaeby
  join notes.note_view notes_note_lat_jnlwav on master_join_piaeby.target_id = notes_note_lat_jnlwav.id
  where master_join_piaeby.source_id = shared.lightelementstatus.id
) as notes_note_view_ydevaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wnvecf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wnvecf.title AS varchar), '(' || organisation_organisationauthority_lat_wnvecf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wnvecf.href
  )) as specialdateauthority  from master_join master_join_euxfyl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wnvecf on master_join_euxfyl.target_id = organisation_organisationauthority_lat_wnvecf.id
  where master_join_euxfyl.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_hhkwzn on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_oedvog.timeinterval as timeinterval,
    notes_note_view_metqjk.annotation as annotation,
    organisation_organisationauthority_pt_ezzlss.specialdateauthority as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_gladjl.usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nihpcs.*) AS timeinterval
  from master_join master_join_qeivjn
  join shared.timesheet_view shared_timesheet_lat_nihpcs on master_join_qeivjn.target_id = shared_timesheet_lat_nihpcs.id
  where master_join_qeivjn.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_oedvog on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsimyg.*) AS annotation
  from master_join master_join_tpqtsk
  join notes.note_view notes_note_lat_tsimyg on master_join_tpqtsk.target_id = notes_note_lat_tsimyg.id
  where master_join_tpqtsk.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_metqjk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qtlvgy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qtlvgy.title AS varchar), '(' || organisation_organisationauthority_lat_qtlvgy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qtlvgy.href
  )) as specialdateauthority  from master_join master_join_dcdyuz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qtlvgy on master_join_dcdyuz.target_id = organisation_organisationauthority_lat_qtlvgy.id
  where master_join_dcdyuz.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_ezzlss on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_gldxsb.id) as usage
  from master_join master_join_nyxacb
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_gldxsb on master_join_nyxacb.target_id = airport_heliport_manoeuvringareausage_lat_gldxsb.id
  where master_join_nyxacb.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_gladjl on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    shared_timesheet_view_qcieva.timeinterval as timeinterval,
    notes_note_view_pelksw.annotation as annotation,
    organisation_organisationauthority_pt_ybqtom.specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nlfrmv.*) AS timeinterval
  from master_join master_join_npglyf
  join shared.timesheet_view shared_timesheet_lat_nlfrmv on master_join_npglyf.target_id = shared_timesheet_lat_nlfrmv.id
  where master_join_npglyf.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_qcieva on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yclplw.*) AS annotation
  from master_join master_join_akcbco
  join notes.note_view notes_note_lat_yclplw on master_join_akcbco.target_id = notes_note_lat_yclplw.id
  where master_join_akcbco.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_pelksw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_talxra.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_talxra.title AS varchar), '(' || organisation_organisationauthority_lat_talxra.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_talxra.href
  )) as specialdateauthority  from master_join master_join_wihuew
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_talxra on master_join_wihuew.target_id = organisation_organisationauthority_lat_talxra.id
  where master_join_wihuew.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_ybqtom on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    shared_timesheet_view_nlzjnp.timeinterval as timeinterval,
    notes_note_view_qbjtgv.annotation as annotation,
    organisation_organisationauthority_pt_vldrzj.specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vetwqn.*) AS timeinterval
  from master_join master_join_oxubvg
  join shared.timesheet_view shared_timesheet_lat_vetwqn on master_join_oxubvg.target_id = shared_timesheet_lat_vetwqn.id
  where master_join_oxubvg.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_nlzjnp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyhyvs.*) AS annotation
  from master_join master_join_qjkefs
  join notes.note_view notes_note_lat_pyhyvs on master_join_qjkefs.target_id = notes_note_lat_pyhyvs.id
  where master_join_qjkefs.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_qbjtgv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kkxodo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kkxodo.title AS varchar), '(' || organisation_organisationauthority_lat_kkxodo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kkxodo.href
  )) as specialdateauthority  from master_join master_join_sgnlsh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kkxodo on master_join_sgnlsh.target_id = organisation_organisationauthority_lat_kkxodo.id
  where master_join_sgnlsh.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_vldrzj on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    (row_number() OVER ())::integer AS row,
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    shared_timesheet_view_xvjvig.timeinterval as timeinterval,
    notes_note_view_gxxwme.annotation as annotation,
    organisation_organisationauthority_pt_dpzldb.specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zuedlz.*) AS timeinterval
  from master_join master_join_oxhxnq
  join shared.timesheet_view shared_timesheet_lat_zuedlz on master_join_oxhxnq.target_id = shared_timesheet_lat_zuedlz.id
  where master_join_oxhxnq.source_id = shared.onlinecontact.id
) as shared_timesheet_view_xvjvig on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbcjwf.*) AS annotation
  from master_join master_join_tgzvet
  join notes.note_view notes_note_lat_dbcjwf on master_join_tgzvet.target_id = notes_note_lat_dbcjwf.id
  where master_join_tgzvet.source_id = shared.onlinecontact.id
) as notes_note_view_gxxwme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ihtjkw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ihtjkw.title AS varchar), '(' || organisation_organisationauthority_lat_ihtjkw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ihtjkw.href
  )) as specialdateauthority  from master_join master_join_gphoyt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ihtjkw on master_join_gphoyt.target_id = organisation_organisationauthority_lat_ihtjkw.id
  where master_join_gphoyt.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_dpzldb on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    (row_number() OVER ())::integer AS row,
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    shared_timesheet_view_yxcnfb.timeinterval as timeinterval,
    notes_note_view_hpasct.annotation as annotation,
    organisation_organisationauthority_pt_wcahuj.specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cfcjyj.*) AS timeinterval
  from master_join master_join_kgfokw
  join shared.timesheet_view shared_timesheet_lat_cfcjyj on master_join_kgfokw.target_id = shared_timesheet_lat_cfcjyj.id
  where master_join_kgfokw.source_id = shared.postaladdress.id
) as shared_timesheet_view_yxcnfb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bqoqin.*) AS annotation
  from master_join master_join_zcsysh
  join notes.note_view notes_note_lat_bqoqin on master_join_zcsysh.target_id = notes_note_lat_bqoqin.id
  where master_join_zcsysh.source_id = shared.postaladdress.id
) as notes_note_view_hpasct on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jezbqh.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jezbqh.title AS varchar), '(' || organisation_organisationauthority_lat_jezbqh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jezbqh.href
  )) as specialdateauthority  from master_join master_join_zmvzhm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jezbqh on master_join_zmvzhm.target_id = organisation_organisationauthority_lat_jezbqh.id
  where master_join_zmvzhm.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_wcahuj on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    shared_timesheet_view_tcwtno.timeinterval as timeinterval,
    notes_note_view_uetjkd.annotation as annotation,
    organisation_organisationauthority_pt_vsegmy.specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_otihlx.*) AS timeinterval
  from master_join master_join_fmrssv
  join shared.timesheet_view shared_timesheet_lat_otihlx on master_join_fmrssv.target_id = shared_timesheet_lat_otihlx.id
  where master_join_fmrssv.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_tcwtno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plgmfu.*) AS annotation
  from master_join master_join_ioqbqa
  join notes.note_view notes_note_lat_plgmfu on master_join_ioqbqa.target_id = notes_note_lat_plgmfu.id
  where master_join_ioqbqa.source_id = procedure.procedureavailability.id
) as notes_note_view_uetjkd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_emwfso.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_emwfso.title AS varchar), '(' || organisation_organisationauthority_lat_emwfso.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_emwfso.href
  )) as specialdateauthority  from master_join master_join_vfzyas
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_emwfso on master_join_vfzyas.target_id = organisation_organisationauthority_lat_emwfso.id
  where master_join_vfzyas.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_vsegmy on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_ijkfsv.timeinterval as timeinterval,
    notes_note_view_dnvwfa.annotation as annotation,
    organisation_organisationauthority_pt_dnimsm.specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_rgstxa.*) AS timeinterval
  from master_join master_join_xcvuek
  join shared.timesheet_view shared_timesheet_lat_rgstxa on master_join_xcvuek.target_id = shared_timesheet_lat_rgstxa.id
  where master_join_xcvuek.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_ijkfsv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fosxrf.*) AS annotation
  from master_join master_join_gwrarv
  join notes.note_view notes_note_lat_fosxrf on master_join_gwrarv.target_id = notes_note_lat_fosxrf.id
  where master_join_gwrarv.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_dnvwfa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sorukb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sorukb.title AS varchar), '(' || organisation_organisationauthority_lat_sorukb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sorukb.href
  )) as specialdateauthority  from master_join master_join_hwcfka
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sorukb on master_join_hwcfka.target_id = organisation_organisationauthority_lat_sorukb.id
  where master_join_hwcfka.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_dnimsm on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    (row_number() OVER ())::integer AS row,
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    shared_timesheet_view_lvseer.timeinterval as timeinterval,
    notes_note_view_fpwgnb.annotation as annotation,
    organisation_organisationauthority_pt_zooxkc.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_iexfut.levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zmwuoj.*) AS timeinterval
  from master_join master_join_ovhahe
  join shared.timesheet_view shared_timesheet_lat_zmwuoj on master_join_ovhahe.target_id = shared_timesheet_lat_zmwuoj.id
  where master_join_ovhahe.source_id = routes.routeavailability.id
) as shared_timesheet_view_lvseer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wwmyqy.*) AS annotation
  from master_join master_join_mxtnps
  join notes.note_view notes_note_lat_wwmyqy on master_join_mxtnps.target_id = notes_note_lat_wwmyqy.id
  where master_join_mxtnps.source_id = routes.routeavailability.id
) as notes_note_view_fpwgnb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_avgrck.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_avgrck.title AS varchar), '(' || organisation_organisationauthority_lat_avgrck.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_avgrck.href
  )) as specialdateauthority  from master_join master_join_srduyv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_avgrck on master_join_srduyv.target_id = organisation_organisationauthority_lat_avgrck.id
  where master_join_srduyv.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_zooxkc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ewiqhm.id) as levels
  from master_join master_join_hqnzyt
  join shared.airspacelayer_pt shared_airspacelayer_lat_ewiqhm on master_join_hqnzyt.target_id = shared_airspacelayer_lat_ewiqhm.id
  where master_join_hqnzyt.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_iexfut on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    shared_timesheet_view_zquwqs.timeinterval as timeinterval,
    notes_note_view_dxsktx.annotation as annotation,
    organisation_organisationauthority_pt_bhiiwk.specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xjjksa.*) AS timeinterval
  from master_join master_join_emkrit
  join shared.timesheet_view shared_timesheet_lat_xjjksa on master_join_emkrit.target_id = shared_timesheet_lat_xjjksa.id
  where master_join_emkrit.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_zquwqs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pgsqnz.*) AS annotation
  from master_join master_join_hlamre
  join notes.note_view notes_note_lat_pgsqnz on master_join_hlamre.target_id = notes_note_lat_pgsqnz.id
  where master_join_hlamre.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_dxsktx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lchaby.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lchaby.title AS varchar), '(' || organisation_organisationauthority_lat_lchaby.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lchaby.href
  )) as specialdateauthority  from master_join master_join_roygxt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lchaby on master_join_roygxt.target_id = organisation_organisationauthority_lat_lchaby.id
  where master_join_roygxt.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_bhiiwk on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_xjvbyq.timeinterval as timeinterval,
    notes_note_view_rnpiub.annotation as annotation,
    organisation_organisationauthority_pt_jmaolg.specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ozrcza.*) AS timeinterval
  from master_join master_join_mhpmbk
  join shared.timesheet_view shared_timesheet_lat_ozrcza on master_join_mhpmbk.target_id = shared_timesheet_lat_ozrcza.id
  where master_join_mhpmbk.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_xjvbyq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqrmaa.*) AS annotation
  from master_join master_join_rxzeij
  join notes.note_view notes_note_lat_aqrmaa on master_join_rxzeij.target_id = notes_note_lat_aqrmaa.id
  where master_join_rxzeij.source_id = service.serviceoperationalstatus.id
) as notes_note_view_rnpiub on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qaiory.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qaiory.title AS varchar), '(' || organisation_organisationauthority_lat_qaiory.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qaiory.href
  )) as specialdateauthority  from master_join master_join_ydlzcf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qaiory on master_join_ydlzcf.target_id = organisation_organisationauthority_lat_qaiory.id
  where master_join_ydlzcf.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_jmaolg on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_dsobze.timeinterval as timeinterval,
    notes_note_view_ierwxu.annotation as annotation,
    organisation_organisationauthority_pt_dyawhz.specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qmbpgf.*) AS timeinterval
  from master_join master_join_kqcluz
  join shared.timesheet_view shared_timesheet_lat_qmbpgf on master_join_kqcluz.target_id = shared_timesheet_lat_qmbpgf.id
  where master_join_kqcluz.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_dsobze on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zkufkx.*) AS annotation
  from master_join master_join_bnofkw
  join notes.note_view notes_note_lat_zkufkx on master_join_bnofkw.target_id = notes_note_lat_zkufkx.id
  where master_join_bnofkw.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_ierwxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dsrlfr.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dsrlfr.title AS varchar), '(' || organisation_organisationauthority_lat_dsrlfr.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dsrlfr.href
  )) as specialdateauthority  from master_join master_join_jbzant
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dsrlfr on master_join_jbzant.target_id = organisation_organisationauthority_lat_dsrlfr.id
  where master_join_jbzant.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_dyawhz on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    (row_number() OVER ())::integer AS row,
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    shared_timesheet_view_jqtvuz.timeinterval as timeinterval,
    notes_note_view_xluhae.annotation as annotation,
    organisation_organisationauthority_pt_syufrv.specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jhpred.*) AS timeinterval
  from master_join master_join_kujcap
  join shared.timesheet_view shared_timesheet_lat_jhpred on master_join_kujcap.target_id = shared_timesheet_lat_jhpred.id
  where master_join_kujcap.source_id = shared.telephonecontact.id
) as shared_timesheet_view_jqtvuz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chhnbe.*) AS annotation
  from master_join master_join_trtvxj
  join notes.note_view notes_note_lat_chhnbe on master_join_trtvxj.target_id = notes_note_lat_chhnbe.id
  where master_join_trtvxj.source_id = shared.telephonecontact.id
) as notes_note_view_xluhae on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_truurs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_truurs.title AS varchar), '(' || organisation_organisationauthority_lat_truurs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_truurs.href
  )) as specialdateauthority  from master_join master_join_wyxbhf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_truurs on master_join_wyxbhf.target_id = organisation_organisationauthority_lat_truurs.id
  where master_join_wyxbhf.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_syufrv on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_suoayo.timeinterval as timeinterval,
    notes_note_view_yqilag.annotation as annotation,
    organisation_organisationauthority_pt_kajogp.specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_olrsbz.*) AS timeinterval
  from master_join master_join_xhmjzw
  join shared.timesheet_view shared_timesheet_lat_olrsbz on master_join_xhmjzw.target_id = shared_timesheet_lat_olrsbz.id
  where master_join_xhmjzw.source_id = organisation.unitavailability.id
) as shared_timesheet_view_suoayo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wldxgl.*) AS annotation
  from master_join master_join_sblvdt
  join notes.note_view notes_note_lat_wldxgl on master_join_sblvdt.target_id = notes_note_lat_wldxgl.id
  where master_join_sblvdt.source_id = organisation.unitavailability.id
) as notes_note_view_yqilag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nfhlis.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nfhlis.title AS varchar), '(' || organisation_organisationauthority_lat_nfhlis.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nfhlis.href
  )) as specialdateauthority  from master_join master_join_cvpzcr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nfhlis on master_join_cvpzcr.target_id = organisation_organisationauthority_lat_nfhlis.id
  where master_join_cvpzcr.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_kajogp on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    shared_timesheet_view_vtobhe.timeinterval as timeinterval,
    notes_note_view_opbctg.annotation as annotation,
    organisation_organisationauthority_pt_mnbleq.specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ukoymf.*) AS timeinterval
  from master_join master_join_tibbbz
  join shared.timesheet_view shared_timesheet_lat_ukoymf on master_join_tibbbz.target_id = shared_timesheet_lat_ukoymf.id
  where master_join_tibbbz.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_vtobhe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osaxwd.*) AS annotation
  from master_join master_join_hnfwmh
  join notes.note_view notes_note_lat_osaxwd on master_join_hnfwmh.target_id = notes_note_lat_osaxwd.id
  where master_join_hnfwmh.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_opbctg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_srxxko.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_srxxko.title AS varchar), '(' || organisation_organisationauthority_lat_srxxko.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_srxxko.href
  )) as specialdateauthority  from master_join master_join_nnvpmj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_srxxko on master_join_nnvpmj.target_id = organisation_organisationauthority_lat_srxxko.id
  where master_join_nnvpmj.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_mnbleq on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'shared.timesheet_view', 'geometry.elevatedcurve_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    geometry_elevatedpoint_view_jelnbw.geom AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_jelnbw.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_jelnbw.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_jelnbw.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_jelnbw.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_jelnbw.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_jelnbw.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_jelnbw.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_ymvgbf.geom AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_ymvgbf.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_ymvgbf.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_ymvgbf.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_ymvgbf.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_ymvgbf.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_oojpio.geom AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_oojpio.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_oojpio.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_oojpio.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_oojpio.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_oojpio.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_rhjoit.timeinterval as timeinterval,
    notes_note_view_hzolxn.annotation as annotation,
    organisation_organisationauthority_pt_uwkyhg.specialdateauthority as specialdateauthority,
    shared_lightelement_pt_ssrxaj.lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jelnbw on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_jelnbw.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_ymvgbf on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_ymvgbf.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oojpio on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_oojpio.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mjwits.*) AS timeinterval
  from master_join master_join_gtkksx
  join shared.timesheet_view shared_timesheet_lat_mjwits on master_join_gtkksx.target_id = shared_timesheet_lat_mjwits.id
  where master_join_gtkksx.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_rhjoit on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_noslfr.*) AS annotation
  from master_join master_join_qyccqb
  join notes.note_view notes_note_lat_noslfr on master_join_qyccqb.target_id = notes_note_lat_noslfr.id
  where master_join_qyccqb.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_hzolxn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_evbtjp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_evbtjp.title AS varchar), '(' || organisation_organisationauthority_lat_evbtjp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_evbtjp.href
  )) as specialdateauthority  from master_join master_join_mmltkx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_evbtjp on master_join_mmltkx.target_id = organisation_organisationauthority_lat_evbtjp.id
  where master_join_mmltkx.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_uwkyhg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hpngkm.id) as lighting
  from master_join master_join_iaosom
  join shared.lightelement_pt shared_lightelement_lat_hpngkm on master_join_iaosom.target_id = shared_lightelement_lat_hpngkm.id
  where master_join_iaosom.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_ssrxaj on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    shared_timesheet_view_npnnwr.timeinterval as timeinterval,
    notes_note_view_vhokpp.annotation as annotation,
    organisation_organisationauthority_pt_vvuwsw.specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lrvhiq.*) AS timeinterval
  from master_join master_join_nrimze
  join shared.timesheet_view shared_timesheet_lat_lrvhiq on master_join_nrimze.target_id = shared_timesheet_lat_lrvhiq.id
  where master_join_nrimze.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_npnnwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mzcasb.*) AS annotation
  from master_join master_join_zzjlkt
  join notes.note_view notes_note_lat_mzcasb on master_join_zzjlkt.target_id = notes_note_lat_mzcasb.id
  where master_join_zzjlkt.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_vhokpp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_aphrnx.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_aphrnx.title AS varchar), '(' || organisation_organisationauthority_lat_aphrnx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_aphrnx.href
  )) as specialdateauthority  from master_join master_join_dzsncc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_aphrnx on master_join_dzsncc.target_id = organisation_organisationauthority_lat_aphrnx.id
  where master_join_dzsncc.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_vvuwsw on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['notes.note_view', 'shared.onlinecontact_view', 'shared.telephonecontact_view', 'shared.postaladdress_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_bxrnud.id) AS selection,
    notes_note_view_ikyohv.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_bxrnud on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_bxrnud.id
left join lateral(
  select
  from master_join master_join_jtzlpw
  join shared.contactinformation_view shared_contactinformation_lat_djgayy on master_join_jtzlpw.target_id = shared_contactinformation_lat_djgayy.id
  where master_join_jtzlpw.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_hrlqon on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zhtwmp.*) AS annotation
  from master_join master_join_qfdgpj
  join notes.note_view notes_note_lat_zhtwmp on master_join_qfdgpj.target_id = notes_note_lat_zhtwmp.id
  where master_join_qfdgpj.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_ikyohv on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_lanboq.id) AS selection,
    notes_note_view_ujkcul.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_lanboq on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_lanboq.id
left join lateral(
  select
  from master_join master_join_ortfht
  join shared.contactinformation_view shared_contactinformation_lat_pdsfrl on master_join_ortfht.target_id = shared_contactinformation_lat_pdsfrl.id
  where master_join_ortfht.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_zlyoea on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ljqpfu.*) AS annotation
  from master_join master_join_opnqcu
  join notes.note_view notes_note_lat_ljqpfu on master_join_opnqcu.target_id = notes_note_lat_ljqpfu.id
  where master_join_opnqcu.source_id = airport_heliport.apronareausage.id
) as notes_note_view_ujkcul on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    routes_flightroutingelement_pt_bnikjt.routeelement as routeelement,
    notes_note_view_uspglz.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_egpozq.id) as routeelement
  from master_join master_join_fxtgfl
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_egpozq on master_join_fxtgfl.target_id = routes_flightroutingelement_lat_egpozq.id
  where master_join_fxtgfl.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_bnikjt on TRUE
left join lateral(
  select
  from master_join master_join_phpqsw
  join shared.contactinformation_view shared_contactinformation_lat_fblepr on master_join_phpqsw.target_id = shared_contactinformation_lat_fblepr.id
  where master_join_phpqsw.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_jgfqtl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qugbdw.*) AS annotation
  from master_join master_join_tbpcrh
  join notes.note_view notes_note_lat_qugbdw on master_join_tbpcrh.target_id = notes_note_lat_qugbdw.id
  where master_join_tbpcrh.source_id = routes.flightrestrictionroute.id
) as notes_note_view_uspglz on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_inmrsg.id) AS selection,
    notes_note_view_bxbxjx.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_inmrsg on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_inmrsg.id
left join lateral(
  select
  from master_join master_join_ezsxih
  join shared.contactinformation_view shared_contactinformation_lat_ebvkzf on master_join_ezsxih.target_id = shared_contactinformation_lat_ebvkzf.id
  where master_join_ezsxih.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_gkwtaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obutmx.*) AS annotation
  from master_join master_join_rhvhdy
  join notes.note_view notes_note_lat_obutmx on master_join_rhvhdy.target_id = notes_note_lat_obutmx.id
  where master_join_rhvhdy.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_bxbxjx on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'notes.note_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'routes.routeavailability_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_aktfyy.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_aktfyy.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_aktfyy.href AS oppositetrack_href,
    routes_routeavailability_view_oiefmb.availability as availability,
    airspace_airspace_pt_fgrspn.protectingairspace as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_bqqetg.track as track,
    aerial_refuelling_aerialrefuellinganchor_view_tydzff.anchor as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_oikukv.managingorganisation as managingorganisation,
    notes_note_view_jlfrze.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_aktfyy on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_aktfyy.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_bgsptr.*) as availability
  from master_join master_join_rkigpn
  join routes.routeavailability_view routes_routeavailability_lat_bgsptr on master_join_rkigpn.target_id = routes_routeavailability_lat_bgsptr.id
  where master_join_rkigpn.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_oiefmb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_nzpfbh.id,
      'title', coalesce(cast(airspace_airspace_lat_nzpfbh.title AS varchar), '(' || airspace_airspace_lat_nzpfbh.nilreason[1] || ')'),
      'href', airspace_airspace_lat_nzpfbh.href
  )) as protectingairspace  from master_join master_join_mjmlkx
  join airspace.airspace_pt airspace_airspace_lat_nzpfbh on master_join_mjmlkx.target_id = airspace_airspace_lat_nzpfbh.id
  where master_join_mjmlkx.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_fgrspn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_cnfcfe.*) as track
  from master_join master_join_ysenht
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_cnfcfe on master_join_ysenht.target_id = aerial_refuelling_aerialrefuellingtrack_lat_cnfcfe.id
  where master_join_ysenht.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_bqqetg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_djoghu.*) as anchor
  from master_join master_join_mpsdvx
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_djoghu on master_join_mpsdvx.target_id = aerial_refuelling_aerialrefuellinganchor_lat_djoghu.id
  where master_join_mpsdvx.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_tydzff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_akurgs.*) as managingorganisation
  from master_join master_join_jdnmbc
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_akurgs on master_join_jdnmbc.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_akurgs.id
  where master_join_jdnmbc.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_oikukv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_enijcg.*) AS annotation
  from master_join master_join_rwivax
  join notes.note_view notes_note_lat_enijcg on master_join_rwivax.target_id = notes_note_lat_enijcg.id
  where master_join_rwivax.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_jlfrze on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_vhikcv.title as varchar), '(' || obstacles_verticalstructure_pt_vhikcv.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_vhikcv.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hvxuzs.title as varchar), '(' || airport_heliport_airportheliport_pt_hvxuzs.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_hvxuzs.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_iapdmd.geom AS location_geom,
    geometry_elevatedpoint_view_iapdmd.longitude AS location_longitude,
    geometry_elevatedpoint_view_iapdmd.latitude AS location_latitude,
    geometry_elevatedpoint_view_iapdmd.elevation AS location_elevation,
    geometry_elevatedpoint_view_iapdmd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iapdmd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iapdmd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iapdmd.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_pkmovs.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_vhikcv on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_vhikcv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hvxuzs on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_hvxuzs.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iapdmd on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_iapdmd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fjvsze.*) AS annotation
  from master_join master_join_iwepnn
  join notes.note_view notes_note_lat_fjvsze on master_join_iwepnn.target_id = notes_note_lat_fjvsze.id
  where master_join_iwepnn.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_pkmovs on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_wdfjtr.geom AS location_geom,
    geometry_elevatedpoint_view_wdfjtr.longitude AS location_longitude,
    geometry_elevatedpoint_view_wdfjtr.latitude AS location_latitude,
    geometry_elevatedpoint_view_wdfjtr.elevation AS location_elevation,
    geometry_elevatedpoint_view_wdfjtr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wdfjtr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wdfjtr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wdfjtr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zkgeph.title as varchar), '(' || organisation_unit_pt_zkgeph.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_zkgeph.href AS serviceprovider_href,
    service_callsigndetail_view_gtdgvw.callsign as callsign,
    service_radiocommunicationchannel_pt_oisicc.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ckclis.availability as availability,
    notes_note_view_giktib.annotation as annotation,
    airport_heliport_airportheliport_pt_plqwcm.airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wdfjtr on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_wdfjtr.id
left join organisation.unit_pt organisation_unit_pt_zkgeph on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_zkgeph.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_jlnawt.*) as callsign
  from master_join master_join_jfldgu
  join service.callsigndetail_view service_callsigndetail_lat_jlnawt on master_join_jfldgu.target_id = service_callsigndetail_lat_jlnawt.id
  where master_join_jfldgu.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_gtdgvw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_erhycb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_erhycb.title AS varchar), '(' || service_radiocommunicationchannel_lat_erhycb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_erhycb.href
  )) as radiocommunication  from master_join master_join_yposer
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_erhycb on master_join_yposer.target_id = service_radiocommunicationchannel_lat_erhycb.id
  where master_join_yposer.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_oisicc on TRUE
left join lateral(
  select
  from master_join master_join_dhiumj
  join shared.contactinformation_view shared_contactinformation_lat_ooqzyu on master_join_dhiumj.target_id = shared_contactinformation_lat_ooqzyu.id
  where master_join_dhiumj.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_pnpihj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_zyugpj.*) as availability
  from master_join master_join_khrexe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_zyugpj on master_join_khrexe.target_id = service_serviceoperationalstatus_lat_zyugpj.id
  where master_join_khrexe.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_ckclis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gmvciv.*) AS annotation
  from master_join master_join_lftcts
  join notes.note_view notes_note_lat_gmvciv on master_join_lftcts.target_id = notes_note_lat_gmvciv.id
  where master_join_lftcts.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_giktib on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_atdiys.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_atdiys.title AS varchar), '(' || airport_heliport_airportheliport_lat_atdiys.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_atdiys.href
  )) as airportheliport  from master_join master_join_fksuxl
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_atdiys on master_join_fksuxl.target_id = airport_heliport_airportheliport_lat_atdiys.id
  where master_join_fksuxl.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_plqwcm on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.aircraftstandcontamination_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jxxnzu.*) AS surfaceproperties,
    geometry_elevatedpoint_view_zjeajp.geom AS location_geom,
    geometry_elevatedpoint_view_zjeajp.longitude AS location_longitude,
    geometry_elevatedpoint_view_zjeajp.latitude AS location_latitude,
    geometry_elevatedpoint_view_zjeajp.elevation AS location_elevation,
    geometry_elevatedpoint_view_zjeajp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zjeajp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zjeajp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zjeajp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_gvsmlp.title as varchar), '(' || airport_heliport_apronelement_pt_gvsmlp.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_gvsmlp.href AS apronlocation_href,
    geometry_elevatedsurface_view_qwmgzm.geom AS extent_geom,
    geometry_elevatedsurface_view_qwmgzm.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qwmgzm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qwmgzm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qwmgzm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qwmgzm.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_mfahyt.contaminant as contaminant,
    notes_note_view_yoczpy.annotation as annotation,
    airport_heliport_apronareaavailability_view_aphjtv.availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jxxnzu on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jxxnzu.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zjeajp on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_zjeajp.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_gvsmlp on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_gvsmlp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qwmgzm on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_qwmgzm.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_obeopf.*) as contaminant
  from master_join master_join_qnfffn
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_obeopf on master_join_qnfffn.target_id = airport_heliport_aircraftstandcontamination_lat_obeopf.id
  where master_join_qnfffn.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_mfahyt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pbjywz.*) AS annotation
  from master_join master_join_aapwyx
  join notes.note_view notes_note_lat_pbjywz on master_join_aapwyx.target_id = notes_note_lat_pbjywz.id
  where master_join_aapwyx.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_yoczpy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_ipegpa.*) as availability
  from master_join master_join_lrmrih
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_ipegpa on master_join_lrmrih.target_id = airport_heliport_apronareaavailability_lat_ipegpa.id
  where master_join_lrmrih.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_aphjtv on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_npfzxt.geom AS location_geom,
    geometry_elevatedpoint_view_npfzxt.longitude AS location_longitude,
    geometry_elevatedpoint_view_npfzxt.latitude AS location_latitude,
    geometry_elevatedpoint_view_npfzxt.elevation AS location_elevation,
    geometry_elevatedpoint_view_npfzxt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_npfzxt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_npfzxt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_npfzxt.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zmptsl.title as varchar), '(' || organisation_unit_pt_zmptsl.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_zmptsl.href AS serviceprovider_href,
    service_callsigndetail_view_fovcva.callsign as callsign,
    service_radiocommunicationchannel_pt_wzataq.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_cmbhap.availability as availability,
    notes_note_view_kpkpyi.annotation as annotation,
    airport_heliport_airportheliport_pt_vfgylc.airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_npfzxt on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_npfzxt.id
left join organisation.unit_pt organisation_unit_pt_zmptsl on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_zmptsl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ubxtrp.*) as callsign
  from master_join master_join_dglkuz
  join service.callsigndetail_view service_callsigndetail_lat_ubxtrp on master_join_dglkuz.target_id = service_callsigndetail_lat_ubxtrp.id
  where master_join_dglkuz.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_fovcva on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_rnxtxa.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_rnxtxa.title AS varchar), '(' || service_radiocommunicationchannel_lat_rnxtxa.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_rnxtxa.href
  )) as radiocommunication  from master_join master_join_vixwkq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_rnxtxa on master_join_vixwkq.target_id = service_radiocommunicationchannel_lat_rnxtxa.id
  where master_join_vixwkq.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_wzataq on TRUE
left join lateral(
  select
  from master_join master_join_hsvxmh
  join shared.contactinformation_view shared_contactinformation_lat_lvsfcd on master_join_hsvxmh.target_id = shared_contactinformation_lat_lvsfcd.id
  where master_join_hsvxmh.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_aztauk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ozlhek.*) as availability
  from master_join master_join_khcruu
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ozlhek on master_join_khcruu.target_id = service_serviceoperationalstatus_lat_ozlhek.id
  where master_join_khcruu.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_cmbhap on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvqjts.*) AS annotation
  from master_join master_join_fvrnzz
  join notes.note_view notes_note_lat_bvqjts on master_join_fvrnzz.target_id = notes_note_lat_bvqjts.id
  where master_join_fvrnzz.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_kpkpyi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_jykmnt.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_jykmnt.title AS varchar), '(' || airport_heliport_airportheliport_lat_jykmnt.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_jykmnt.href
  )) as airportheliport  from master_join master_join_iozqub
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_jykmnt on master_join_iozqub.target_id = airport_heliport_airportheliport_lat_jykmnt.id
  where master_join_iozqub.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_vfgylc on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_lvhobv.title as varchar), '(' || airport_heliport_airportheliport_pt_lvhobv.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_lvhobv.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lbbnob.title as varchar), '(' || airport_heliport_airportheliport_pt_lbbnob.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_lbbnob.href AS dependentairport_href,
    notes_note_view_aoxqbc.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lvhobv on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_lvhobv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lbbnob on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_lbbnob.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wspidh.*) AS annotation
  from master_join master_join_fjoqis
  join notes.note_view notes_note_lat_wspidh on master_join_fjoqis.target_id = notes_note_lat_wspidh.id
  where master_join_fjoqis.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_aoxqbc on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['airport_heliport.airportheliportresponsibilityorganisation_view', 'notes.note_view', 'airport_heliport.city_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportavailability_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_vqzsys.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_echiph.geom AS arp_geom,
    geometry_elevatedpoint_view_echiph.longitude AS arp_longitude,
    geometry_elevatedpoint_view_echiph.latitude AS arp_latitude,
    geometry_elevatedpoint_view_echiph.elevation AS arp_elevation,
    geometry_elevatedpoint_view_echiph.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_echiph.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_echiph.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_echiph.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_dbqbkf.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_dbqbkf.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_dbqbkf.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_dbqbkf.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_dbqbkf.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_dbqbkf.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_gvjlxg.contaminant as contaminant,
    airport_heliport_city_view_xnurok.servedcity as servedcity,
    airport_heliport_altimetersource_pt_vyspcx.altimetersource as altimetersource,
    airport_heliport_airportheliportavailability_view_agfkhv.availability as availability,
    notes_note_view_vggslg.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_vqzsys on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_vqzsys.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_echiph on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_echiph.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dbqbkf on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_dbqbkf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_pbhhfb.*) as contaminant
  from master_join master_join_cbgqke
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_pbhhfb on master_join_cbgqke.target_id = airport_heliport_airportheliportcontamination_lat_pbhhfb.id
  where master_join_cbgqke.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_gvjlxg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_hivtfg.*) as servedcity
  from master_join master_join_yaseiq
  join airport_heliport.city_view airport_heliport_city_lat_hivtfg on master_join_yaseiq.target_id = airport_heliport_city_lat_hivtfg.id
  where master_join_yaseiq.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_xnurok on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_ioeips.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_ioeips.title AS varchar), '(' || airport_heliport_altimetersource_lat_ioeips.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_ioeips.href
  )) as altimetersource  from master_join master_join_xguesy
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_ioeips on master_join_xguesy.target_id = airport_heliport_altimetersource_lat_ioeips.id
  where master_join_xguesy.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_vyspcx on TRUE
left join lateral(
  select
  from master_join master_join_dqfauf
  join shared.contactinformation_view shared_contactinformation_lat_tvonbs on master_join_dqfauf.target_id = shared_contactinformation_lat_tvonbs.id
  where master_join_dqfauf.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_lptrqh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_gfxkuo.*) as availability
  from master_join master_join_lekelp
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_gfxkuo on master_join_lekelp.target_id = airport_heliport_airportheliportavailability_lat_gfxkuo.id
  where master_join_lekelp.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_agfkhv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oybnvd.*) AS annotation
  from master_join master_join_ljkaro
  join notes.note_view notes_note_lat_oybnvd on master_join_ljkaro.target_id = notes_note_lat_oybnvd.id
  where master_join_ljkaro.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_vggslg on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_vifnkp.geom AS area_geom,
    geometry_elevatedsurface_view_vifnkp.elevation AS area_elevation,
    geometry_elevatedsurface_view_vifnkp.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_vifnkp.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_vifnkp.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_vifnkp.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_nbmclb.title as varchar), '(' || airport_heliport_airportheliport_pt_nbmclb.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_nbmclb.href AS affectedairport_href,
    notes_note_view_ajtvko.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vifnkp on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_vifnkp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nbmclb on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_nbmclb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jakzmu.*) AS annotation
  from master_join master_join_tecfkj
  join notes.note_view notes_note_lat_jakzmu on master_join_tecfkj.target_id = notes_note_lat_jakzmu.id
  where master_join_tecfkj.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_ajtvko on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    airport_heliport_markingelement_view_faxmhn.element as element,
    notes_note_view_jjjrwt.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ibzqdn.*) as element
  from master_join master_join_kwgqbt
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ibzqdn on master_join_kwgqbt.target_id = airport_heliport_markingelement_lat_ibzqdn.id
  where master_join_kwgqbt.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_faxmhn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hozwna.*) AS annotation
  from master_join master_join_lbzaot
  join notes.note_view notes_note_lat_hozwna on master_join_lbzaot.target_id = notes_note_lat_hozwna.id
  where master_join_lbzaot.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_jjjrwt on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['service.fuel_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'service.nitrogen_view', 'service.oxygen_view', 'geometry.elevatedpoint_view', 'service.oil_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_vggbyd.geom AS location_geom,
    geometry_elevatedpoint_view_vggbyd.longitude AS location_longitude,
    geometry_elevatedpoint_view_vggbyd.latitude AS location_latitude,
    geometry_elevatedpoint_view_vggbyd.elevation AS location_elevation,
    geometry_elevatedpoint_view_vggbyd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vggbyd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vggbyd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vggbyd.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_lkdpts.title as varchar), '(' || organisation_unit_pt_lkdpts.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_lkdpts.href AS serviceprovider_href,
    service_callsigndetail_view_rfsdij.callsign as callsign,
    service_radiocommunicationchannel_pt_poqymy.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_xlfveh.availability as availability,
    notes_note_view_rgcyce.annotation as annotation,
    airport_heliport_airportheliport_pt_bnheux.airportheliport as airportheliport,
    service_fuel_view_vwqxdk.fuelsupply as fuelsupply,
    service_oil_view_vpvwak.oilsupply as oilsupply,
    service_nitrogen_view_hswofj.nitrogensupply as nitrogensupply,
    service_oxygen_view_pnlzkq.oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vggbyd on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_vggbyd.id
left join organisation.unit_pt organisation_unit_pt_lkdpts on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_lkdpts.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_asivbt.*) as callsign
  from master_join master_join_suntkf
  join service.callsigndetail_view service_callsigndetail_lat_asivbt on master_join_suntkf.target_id = service_callsigndetail_lat_asivbt.id
  where master_join_suntkf.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_rfsdij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_fljxcb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_fljxcb.title AS varchar), '(' || service_radiocommunicationchannel_lat_fljxcb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_fljxcb.href
  )) as radiocommunication  from master_join master_join_zcadeo
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_fljxcb on master_join_zcadeo.target_id = service_radiocommunicationchannel_lat_fljxcb.id
  where master_join_zcadeo.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_poqymy on TRUE
left join lateral(
  select
  from master_join master_join_ohutfl
  join shared.contactinformation_view shared_contactinformation_lat_kfwuiu on master_join_ohutfl.target_id = shared_contactinformation_lat_kfwuiu.id
  where master_join_ohutfl.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_bimmid on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_xsfvbs.*) as availability
  from master_join master_join_ewywtd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_xsfvbs on master_join_ewywtd.target_id = service_serviceoperationalstatus_lat_xsfvbs.id
  where master_join_ewywtd.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_xlfveh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mkgvbj.*) AS annotation
  from master_join master_join_iapjfc
  join notes.note_view notes_note_lat_mkgvbj on master_join_iapjfc.target_id = notes_note_lat_mkgvbj.id
  where master_join_iapjfc.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_rgcyce on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zlibns.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zlibns.title AS varchar), '(' || airport_heliport_airportheliport_lat_zlibns.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zlibns.href
  )) as airportheliport  from master_join master_join_eymmck
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zlibns on master_join_eymmck.target_id = airport_heliport_airportheliport_lat_zlibns.id
  where master_join_eymmck.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_bnheux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_vixdhz.*) as fuelsupply
  from master_join master_join_rixyde
  join service.fuel_view service_fuel_lat_vixdhz on master_join_rixyde.target_id = service_fuel_lat_vixdhz.id
  where master_join_rixyde.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_vwqxdk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_ppeqov.*) as oilsupply
  from master_join master_join_lpqlrh
  join service.oil_view service_oil_lat_ppeqov on master_join_lpqlrh.target_id = service_oil_lat_ppeqov.id
  where master_join_lpqlrh.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_vpvwak on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_lmcqxp.*) as nitrogensupply
  from master_join master_join_kzgrqh
  join service.nitrogen_view service_nitrogen_lat_lmcqxp on master_join_kzgrqh.target_id = service_nitrogen_lat_lmcqxp.id
  where master_join_kzgrqh.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_hswofj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_gfuapr.*) as oxygensupply
  from master_join master_join_sdgdgu
  join service.oxygen_view service_oxygen_lat_gfuapr on master_join_sdgdgu.target_id = service_oxygen_lat_gfuapr.id
  where master_join_sdgdgu.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_pnlzkq on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_trajtx.title as varchar), '(' || airspace_airspace_pt_trajtx.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_trajtx.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_ogmefa.title as varchar), '(' || airspace_airspace_pt_ogmefa.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_ogmefa.href AS enteredairspace_href,
    notes_note_view_ifpxhc.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_trajtx on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_trajtx.id
left join airspace.airspace_pt airspace_airspace_pt_ogmefa on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_ogmefa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fusigo.*) AS annotation
  from master_join master_join_ohvqhk
  join notes.note_view notes_note_lat_fusigo on master_join_ohvqhk.target_id = notes_note_lat_fusigo.id
  where master_join_ohvqhk.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_ifpxhc on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacegeometrycomponent_view', 'notes.note_view', 'airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_tpdezy.title as varchar), '(' || routes_route_pt_tpdezy.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_tpdezy.href AS protectedroute_href,
    airspace_airspacelayerclass_view_kjoays.clazz as clazz,
    airspace_airspacegeometrycomponent_view_ubtfvz.geometrycomponent as geometrycomponent,
    airspace_airspaceactivation_view_mntsnr.activation as activation,
    notes_note_view_strtyz.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_tpdezy on airspace.airspace_ts.protectedroute_id = routes_route_pt_tpdezy.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_yzysoz.*) as clazz
  from master_join master_join_uupwpv
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_yzysoz on master_join_uupwpv.target_id = airspace_airspacelayerclass_lat_yzysoz.id
  where master_join_uupwpv.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_kjoays on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_igmlay.*) as geometrycomponent
  from master_join master_join_vgkdjw
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_igmlay on master_join_vgkdjw.target_id = airspace_airspacegeometrycomponent_lat_igmlay.id
  where master_join_vgkdjw.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_ubtfvz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_clvltx.*) as activation
  from master_join master_join_gcsoss
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_clvltx on master_join_gcsoss.target_id = airspace_airspaceactivation_lat_clvltx.id
  where master_join_gcsoss.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_mntsnr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ctawxz.*) AS annotation
  from master_join master_join_erhbqk
  join notes.note_view notes_note_lat_ctawxz on master_join_erhbqk.target_id = notes_note_lat_ctawxz.id
  where master_join_erhbqk.source_id = airspace.airspace_ts.id
) as notes_note_view_strtyz on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['routes.routeportion_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_tiaeyv.geom AS location_geom,
    geometry_elevatedpoint_view_tiaeyv.longitude AS location_longitude,
    geometry_elevatedpoint_view_tiaeyv.latitude AS location_latitude,
    geometry_elevatedpoint_view_tiaeyv.elevation AS location_elevation,
    geometry_elevatedpoint_view_tiaeyv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tiaeyv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tiaeyv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tiaeyv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kjsuim.title as varchar), '(' || organisation_unit_pt_kjsuim.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_kjsuim.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_ibbdzg.title as varchar), '(' || navaids_points_directionfinder_pt_ibbdzg.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_ibbdzg.href AS aircraftlocator_href,
    service_callsigndetail_view_szixbs.callsign as callsign,
    service_radiocommunicationchannel_pt_ybvant.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_bdhmxs.availability as availability,
    notes_note_view_rdrwbq.annotation as annotation,
    airport_heliport_airportheliport_pt_gjwzyh.clientairport as clientairport,
    airspace_airspace_pt_qxsskx.clientairspace as clientairspace,
    routes_routeportion_view_fcylpw.clientroute as clientroute,
    holding_holdingpattern_pt_iuwtve.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_bezlwp.clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tiaeyv on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_tiaeyv.id
left join organisation.unit_pt organisation_unit_pt_kjsuim on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_kjsuim.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_ibbdzg on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_ibbdzg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_srerph.*) as callsign
  from master_join master_join_qmcdei
  join service.callsigndetail_view service_callsigndetail_lat_srerph on master_join_qmcdei.target_id = service_callsigndetail_lat_srerph.id
  where master_join_qmcdei.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_szixbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_edadrz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_edadrz.title AS varchar), '(' || service_radiocommunicationchannel_lat_edadrz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_edadrz.href
  )) as radiocommunication  from master_join master_join_oksqhs
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_edadrz on master_join_oksqhs.target_id = service_radiocommunicationchannel_lat_edadrz.id
  where master_join_oksqhs.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_ybvant on TRUE
left join lateral(
  select
  from master_join master_join_xbnhuy
  join shared.contactinformation_view shared_contactinformation_lat_ntdske on master_join_xbnhuy.target_id = shared_contactinformation_lat_ntdske.id
  where master_join_xbnhuy.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_qfpmmi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_nzeeee.*) as availability
  from master_join master_join_jexkla
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_nzeeee on master_join_jexkla.target_id = service_serviceoperationalstatus_lat_nzeeee.id
  where master_join_jexkla.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_bdhmxs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evyqis.*) AS annotation
  from master_join master_join_dkbbim
  join notes.note_view notes_note_lat_evyqis on master_join_dkbbim.target_id = notes_note_lat_evyqis.id
  where master_join_dkbbim.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_rdrwbq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xbjzha.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xbjzha.title AS varchar), '(' || airport_heliport_airportheliport_lat_xbjzha.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xbjzha.href
  )) as clientairport  from master_join master_join_mghkzf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xbjzha on master_join_mghkzf.target_id = airport_heliport_airportheliport_lat_xbjzha.id
  where master_join_mghkzf.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_gjwzyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_btodmu.id,
      'title', coalesce(cast(airspace_airspace_lat_btodmu.title AS varchar), '(' || airspace_airspace_lat_btodmu.nilreason[1] || ')'),
      'href', airspace_airspace_lat_btodmu.href
  )) as clientairspace  from master_join master_join_ulktws
  join airspace.airspace_pt airspace_airspace_lat_btodmu on master_join_ulktws.target_id = airspace_airspace_lat_btodmu.id
  where master_join_ulktws.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_qxsskx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_hxcdjq.*) as clientroute
  from master_join master_join_uuxatm
  join routes.routeportion_view routes_routeportion_lat_hxcdjq on master_join_uuxatm.target_id = routes_routeportion_lat_hxcdjq.id
  where master_join_uuxatm.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_fcylpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ysyxwx.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ysyxwx.title AS varchar), '(' || holding_holdingpattern_lat_ysyxwx.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ysyxwx.href
  )) as clientholding  from master_join master_join_stixrd
  join holding.holdingpattern_pt holding_holdingpattern_lat_ysyxwx on master_join_stixrd.target_id = holding_holdingpattern_lat_ysyxwx.id
  where master_join_stixrd.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_iuwtve on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_iqbwkm.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_iqbwkm.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_iqbwkm.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_iqbwkm.href
  )) as clientaerialrefuelling  from master_join master_join_jhcmxo
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_iqbwkm on master_join_jhcmxo.target_id = aerial_refuelling_aerialrefuelling_lat_iqbwkm.id
  where master_join_jhcmxo.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_bezlwp on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['routes.routeportion_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_whuikc.geom AS location_geom,
    geometry_elevatedpoint_view_whuikc.longitude AS location_longitude,
    geometry_elevatedpoint_view_whuikc.latitude AS location_latitude,
    geometry_elevatedpoint_view_whuikc.elevation AS location_elevation,
    geometry_elevatedpoint_view_whuikc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_whuikc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_whuikc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_whuikc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_dcscao.title as varchar), '(' || organisation_unit_pt_dcscao.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_dcscao.href AS serviceprovider_href,
    service_callsigndetail_view_mvvhck.callsign as callsign,
    service_radiocommunicationchannel_pt_mxjyex.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_qmntdk.availability as availability,
    notes_note_view_xjjoog.annotation as annotation,
    airspace_airspace_pt_fnlquz.clientairspace as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_zyogvo.clientaerialrefuelling as clientaerialrefuelling,
    routes_routeportion_view_ppklun.clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_whuikc on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_whuikc.id
left join organisation.unit_pt organisation_unit_pt_dcscao on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_dcscao.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dnqnei.*) as callsign
  from master_join master_join_sjszkm
  join service.callsigndetail_view service_callsigndetail_lat_dnqnei on master_join_sjszkm.target_id = service_callsigndetail_lat_dnqnei.id
  where master_join_sjszkm.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_mvvhck on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_immvak.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_immvak.title AS varchar), '(' || service_radiocommunicationchannel_lat_immvak.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_immvak.href
  )) as radiocommunication  from master_join master_join_nsqxgf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_immvak on master_join_nsqxgf.target_id = service_radiocommunicationchannel_lat_immvak.id
  where master_join_nsqxgf.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_mxjyex on TRUE
left join lateral(
  select
  from master_join master_join_dzpvch
  join shared.contactinformation_view shared_contactinformation_lat_adqszi on master_join_dzpvch.target_id = shared_contactinformation_lat_adqszi.id
  where master_join_dzpvch.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_zqahmw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_caukkj.*) as availability
  from master_join master_join_zwvlop
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_caukkj on master_join_zwvlop.target_id = service_serviceoperationalstatus_lat_caukkj.id
  where master_join_zwvlop.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_qmntdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivqijs.*) AS annotation
  from master_join master_join_nlhbac
  join notes.note_view notes_note_lat_ivqijs on master_join_nlhbac.target_id = notes_note_lat_ivqijs.id
  where master_join_nlhbac.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_xjjoog on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_fdfdzo.id,
      'title', coalesce(cast(airspace_airspace_lat_fdfdzo.title AS varchar), '(' || airspace_airspace_lat_fdfdzo.nilreason[1] || ')'),
      'href', airspace_airspace_lat_fdfdzo.href
  )) as clientairspace  from master_join master_join_pumoco
  join airspace.airspace_pt airspace_airspace_lat_fdfdzo on master_join_pumoco.target_id = airspace_airspace_lat_fdfdzo.id
  where master_join_pumoco.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_fnlquz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_wofyyv.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_wofyyv.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_wofyyv.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_wofyyv.href
  )) as clientaerialrefuelling  from master_join master_join_qesscs
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_wofyyv on master_join_qesscs.target_id = aerial_refuelling_aerialrefuelling_lat_wofyyv.id
  where master_join_qesscs.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_zyogvo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_ziqqva.*) as clientroute
  from master_join master_join_lokhbl
  join routes.routeportion_view routes_routeportion_lat_ziqqva on master_join_lokhbl.target_id = routes_routeportion_lat_ziqqva.id
  where master_join_lokhbl.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_ppklun on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['notes.note_view', 'airport_heliport.altimetersourcestatus_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    airport_heliport_altimetersourcestatus_view_ydxrlo.availability as availability,
    notes_note_view_entysn.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_vprfyq.*) as availability
  from master_join master_join_xlclqg
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_vprfyq on master_join_xlclqg.target_id = airport_heliport_altimetersourcestatus_lat_vprfyq.id
  where master_join_xlclqg.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_ydxrlo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfuyqu.*) AS annotation
  from master_join master_join_klpblk
  join notes.note_view notes_note_lat_lfuyqu on master_join_klpblk.target_id = notes_note_lat_lfuyqu.id
  where master_join_klpblk.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_entysn on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_quwzbu.title as varchar), '(' || navaids_points_designatedpoint_pt_quwzbu.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_quwzbu.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cynayr.title as varchar), '(' || navaids_points_designatedpoint_pt_cynayr.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_cynayr.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gjfjbb.title as varchar), '(' || navaids_points_navaid_pt_gjfjbb.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_gjfjbb.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_evbuul.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_evbuul.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_evbuul.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_npsnrn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_npsnrn.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_npsnrn.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uwnrlv.title as varchar), '(' || airport_heliport_airportheliport_pt_uwnrlv.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_uwnrlv.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_iflzut.geom AS pointchoiceposition_geom,
    geometry_point_view_iflzut.longitude AS pointchoiceposition_longitude,
    geometry_point_view_iflzut.latitude AS pointchoiceposition_latitude,
    geometry_point_view_iflzut.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_zotrnv.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_quwzbu on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_quwzbu.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cynayr on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cynayr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gjfjbb on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_gjfjbb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_evbuul on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_evbuul.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_npsnrn on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_npsnrn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uwnrlv on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_uwnrlv.id
left join geometry.point_view geometry_point_view_iflzut on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_iflzut.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkiarq.*) AS annotation
  from master_join master_join_nwmfhd
  join notes.note_view notes_note_lat_rkiarq on master_join_nwmfhd.target_id = notes_note_lat_rkiarq.id
  where master_join_nwmfhd.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_zotrnv on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_udgmfd.title as varchar), '(' || airport_heliport_runwaydirection_pt_udgmfd.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_udgmfd.href AS servedrunwaydirection_href,
    shared_lightelement_view_jrfmmk.element as element,
    airport_heliport_groundlightingavailability_view_wyklsn.availability as availability,
    notes_note_view_gpffhp.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_udgmfd on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_udgmfd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_gnxfuw.*) as element
  from master_join master_join_uojbgb
  join shared.lightelement_view shared_lightelement_lat_gnxfuw on master_join_uojbgb.target_id = shared_lightelement_lat_gnxfuw.id
  where master_join_uojbgb.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_jrfmmk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_zntbca.*) as availability
  from master_join master_join_pgtjfo
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_zntbca on master_join_pgtjfo.target_id = airport_heliport_groundlightingavailability_lat_zntbca.id
  where master_join_pgtjfo.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_wyklsn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vsmlfh.*) AS annotation
  from master_join master_join_xczpue
  join notes.note_view notes_note_lat_vsmlfh on master_join_xczpue.target_id = notes_note_lat_vsmlfh.id
  where master_join_xczpue.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_gpffhp on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_hbzuig.title as varchar), '(' || airport_heliport_apron_pt_hbzuig.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_hbzuig.href AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_pmzfca.*) AS surfaceproperties,
    geometry_elevatedsurface_view_xhioxg.geom AS extent_geom,
    geometry_elevatedsurface_view_xhioxg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xhioxg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xhioxg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xhioxg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xhioxg.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_ikmkrc.supplyservice as supplyservice,
    notes_note_view_hykget.annotation as annotation,
    airport_heliport_apronareaavailability_view_vzuleo.availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_hbzuig on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_hbzuig.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_pmzfca on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_pmzfca.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xhioxg on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_xhioxg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_wttzyl.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_wttzyl.title AS varchar), '(' || service_airportsuppliesservice_lat_wttzyl.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_wttzyl.href
  )) as supplyservice  from master_join master_join_razmhn
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_wttzyl on master_join_razmhn.target_id = service_airportsuppliesservice_lat_wttzyl.id
  where master_join_razmhn.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_ikmkrc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_berpwm.*) AS annotation
  from master_join master_join_uzsjle
  join notes.note_view notes_note_lat_berpwm on master_join_uzsjle.target_id = notes_note_lat_berpwm.id
  where master_join_uzsjle.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_hykget on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_vcwixk.*) as availability
  from master_join master_join_insqrs
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_vcwixk on master_join_insqrs.target_id = airport_heliport_apronareaavailability_lat_vcwixk.id
  where master_join_insqrs.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_vzuleo on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_wgzagk.title as varchar), '(' || airport_heliport_apron_pt_wgzagk.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_wgzagk.href AS lightedapron_href,
    shared_lightelement_view_wflpsk.element as element,
    airport_heliport_groundlightingavailability_view_ttcqui.availability as availability,
    notes_note_view_fmogmi.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_wgzagk on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_wgzagk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vpreri.*) as element
  from master_join master_join_hetwsy
  join shared.lightelement_view shared_lightelement_lat_vpreri on master_join_hetwsy.target_id = shared_lightelement_lat_vpreri.id
  where master_join_hetwsy.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_wflpsk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qbbrvy.*) as availability
  from master_join master_join_ouszga
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qbbrvy on master_join_ouszga.target_id = airport_heliport_groundlightingavailability_lat_qbbrvy.id
  where master_join_ouszga.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ttcqui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ngmhsf.*) AS annotation
  from master_join master_join_hikjrz
  join notes.note_view notes_note_lat_ngmhsf on master_join_hikjrz.target_id = notes_note_lat_ngmhsf.id
  where master_join_hikjrz.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_fmogmi on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_xxuoja.title as varchar), '(' || airport_heliport_apron_pt_xxuoja.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_xxuoja.href AS markedapron_href,
    airport_heliport_markingelement_view_ujcbif.element as element,
    notes_note_view_ldylsm.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_xxuoja on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_xxuoja.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_cdyxlk.*) as element
  from master_join master_join_tpzdyj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_cdyxlk on master_join_tpzdyj.target_id = airport_heliport_markingelement_lat_cdyxlk.id
  where master_join_tpzdyj.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_ujcbif on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ylxasv.*) AS annotation
  from master_join master_join_codlon
  join notes.note_view notes_note_lat_ylxasv on master_join_codlon.target_id = notes_note_lat_ylxasv.id
  where master_join_codlon.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_ldylsm on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.aproncontamination_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_dgshut.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_gulwxl.title as varchar), '(' || airport_heliport_airportheliport_pt_gulwxl.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_gulwxl.href AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_omijzp.contaminant as contaminant,
    notes_note_view_kovdra.annotation as annotation,
    airport_heliport_apronareaavailability_view_hsfsod.availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_dgshut on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_dgshut.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gulwxl on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_gulwxl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_oggtxy.*) as contaminant
  from master_join master_join_qovlqu
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_oggtxy on master_join_qovlqu.target_id = airport_heliport_aproncontamination_lat_oggtxy.id
  where master_join_qovlqu.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_omijzp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xiodow.*) AS annotation
  from master_join master_join_vecikp
  join notes.note_view notes_note_lat_xiodow on master_join_vecikp.target_id = notes_note_lat_xiodow.id
  where master_join_vecikp.source_id = airport_heliport.apron_ts.id
) as notes_note_view_kovdra on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_jsqtjp.*) as availability
  from master_join master_join_utbwxv
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_jsqtjp on master_join_utbwxv.target_id = airport_heliport_apronareaavailability_lat_jsqtjp.id
  where master_join_utbwxv.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_hsfsod on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bjifhb.*) AS surfaceproperties,
    geometry_elevatedcurve_view_jranex.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_jranex.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_jranex.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_jranex.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_jranex.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_jranex.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_djjvvm.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_djjvvm.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_djjvvm.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_djjvvm.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_djjvvm.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_djjvvm.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_xirfdd.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_xirfdd.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_xirfdd.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_xirfdd.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_xirfdd.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_xirfdd.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_xirfdd.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_xirfdd.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_zpregx.runwaydirection as runwaydirection,
    notes_note_view_eggbkb.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bjifhb on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bjifhb.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_jranex on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_jranex.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_djjvvm on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_djjvvm.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xirfdd on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_xirfdd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_bojexd.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_bojexd.title AS varchar), '(' || airport_heliport_runwaydirection_lat_bojexd.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_bojexd.href
  )) as runwaydirection  from master_join master_join_gzpelm
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_bojexd on master_join_gzpelm.target_id = airport_heliport_runwaydirection_lat_bojexd.id
  where master_join_gzpelm.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_zpregx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jjlxsx.*) AS annotation
  from master_join master_join_fkohpd
  join notes.note_view notes_note_lat_jjlxsx on master_join_fkohpd.target_id = notes_note_lat_jjlxsx.id
  where master_join_fkohpd.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_eggbkb on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kpmstb.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hooggu.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ghswqt.*) AS arccentre,
    geometry_curve_view_vunhbj.geom AS trajectory_geom,
    geometry_curve_view_vunhbj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qbioog.title as varchar), '(' || navaids_points_angleindication_pt_qbioog.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_qbioog.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_hkotax.title as varchar), '(' || navaids_points_distanceindication_pt_hkotax.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_hkotax.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_wvzekh.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_fthutq.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_fthutq.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_fthutq.href AS approach_href,
    shared_aircraftcharacteristic_view_aunqai.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_pkjcfc.designsurface as designsurface,
    notes_note_view_upyxoh.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kpmstb on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_kpmstb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hooggu on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_hooggu.id
left join geometry.curve_view geometry_curve_view_vunhbj on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_vunhbj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ghswqt on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ghswqt.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qbioog on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_qbioog.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_hkotax on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_hkotax.id
left join procedure.holdinguse_view procedure_holdinguse_view_wvzekh on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_wvzekh.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_fthutq on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_fthutq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_njhyna.*) as aircraftcategory
  from master_join master_join_vucdcl
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_njhyna on master_join_vucdcl.target_id = shared_aircraftcharacteristic_lat_njhyna.id
  where master_join_vucdcl.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_aunqai on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fdxanq.*) as designsurface
  from master_join master_join_wtkwyb
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fdxanq on master_join_wtkwyb.target_id = shared_obstacleassessmentarea_lat_fdxanq.id
  where master_join_wtkwyb.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_pkjcfc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vvcorj.*) AS annotation
  from master_join master_join_uvvrnp
  join notes.note_view notes_note_lat_vvcorj on master_join_uvvrnp.target_id = notes_note_lat_vvcorj.id
  where master_join_uvvrnp.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_upyxoh on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sgayzb.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kqnpom.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tnfhos.*) AS arccentre,
    geometry_curve_view_idwrjd.geom AS trajectory_geom,
    geometry_curve_view_idwrjd.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_fbkpaw.title as varchar), '(' || navaids_points_angleindication_pt_fbkpaw.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_fbkpaw.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_oscdmk.title as varchar), '(' || navaids_points_distanceindication_pt_oscdmk.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_oscdmk.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_qkqpkm.*) AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_vnsevw.title as varchar), '(' || procedure_standardinstrumentarrival_pt_vnsevw.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_vnsevw.href AS arrival_href,
    shared_aircraftcharacteristic_view_kjsmib.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_zadcle.designsurface as designsurface,
    notes_note_view_yvcfnt.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sgayzb on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_sgayzb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kqnpom on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_kqnpom.id
left join geometry.curve_view geometry_curve_view_idwrjd on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_idwrjd.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tnfhos on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_tnfhos.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_fbkpaw on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_fbkpaw.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_oscdmk on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_oscdmk.id
left join procedure.holdinguse_view procedure_holdinguse_view_qkqpkm on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_qkqpkm.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_vnsevw on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_vnsevw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ihzgbb.*) as aircraftcategory
  from master_join master_join_gikafq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ihzgbb on master_join_gikafq.target_id = shared_aircraftcharacteristic_lat_ihzgbb.id
  where master_join_gikafq.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_kjsmib on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_wydjcl.*) as designsurface
  from master_join master_join_ilygow
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_wydjcl on master_join_ilygow.target_id = shared_obstacleassessmentarea_lat_wydjcl.id
  where master_join_ilygow.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_zadcle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gkzubt.*) AS annotation
  from master_join master_join_afbqyc
  join notes.note_view notes_note_lat_gkzubt on master_join_afbqyc.target_id = notes_note_lat_gkzubt.id
  where master_join_afbqyc.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_yvcfnt on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_xcphsb.title as varchar), '(' || organisation_organisationauthority_pt_xcphsb.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_xcphsb.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_awhari.title as varchar), '(' || airspace_airspace_pt_awhari.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_awhari.href AS assignedairspace_href,
    notes_note_view_yjxwrn.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xcphsb on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_xcphsb.id
left join airspace.airspace_pt airspace_airspace_pt_awhari on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_awhari.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gphhag.*) AS annotation
  from master_join master_join_ycscoy
  join notes.note_view notes_note_lat_gphhag on master_join_ycscoy.target_id = notes_note_lat_gphhag.id
  where master_join_ycscoy.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_yjxwrn on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_qrbpdn.geom AS location_geom,
    geometry_elevatedpoint_view_qrbpdn.longitude AS location_longitude,
    geometry_elevatedpoint_view_qrbpdn.latitude AS location_latitude,
    geometry_elevatedpoint_view_qrbpdn.elevation AS location_elevation,
    geometry_elevatedpoint_view_qrbpdn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qrbpdn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qrbpdn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qrbpdn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rtvwea.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_sjekbg.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_dybfcv.availability as availability,
    notes_note_view_arqogq.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qrbpdn on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_qrbpdn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_keyaqh.*) as authority
  from master_join master_join_vjxqgo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_keyaqh on master_join_vjxqgo.target_id = navaids_points_authorityfornavaidequipment_lat_keyaqh.id
  where master_join_vjxqgo.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_rtvwea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lshmzq.*) as monitoring
  from master_join master_join_plersz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lshmzq on master_join_plersz.target_id = navaids_points_navaidequipmentmonitoring_lat_lshmzq.id
  where master_join_plersz.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_sjekbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xhthap.*) as availability
  from master_join master_join_hzyedm
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xhthap on master_join_hzyedm.target_id = navaids_points_navaidoperationalstatus_lat_xhthap.id
  where master_join_hzyedm.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_dybfcv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hgckxo.*) AS annotation
  from master_join master_join_gljjrx
  join notes.note_view notes_note_lat_hgckxo on master_join_gljjrx.target_id = notes_note_lat_hgckxo.id
  where master_join_gljjrx.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_arqogq on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['routes.routeportion_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_lriaud.title as varchar), '(' || navaids_points_designatedpoint_pt_lriaud.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_lriaud.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qxhlni.title as varchar), '(' || navaids_points_navaid_pt_qxhlni.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_qxhlni.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rzzuiy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rzzuiy.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_rzzuiy.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lwigch.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lwigch.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lwigch.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mdqnvp.title as varchar), '(' || airport_heliport_airportheliport_pt_mdqnvp.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_mdqnvp.href AS locationairportreferencepoint_href,
    geometry_point_view_wduetu.geom AS locationposition_geom,
    geometry_point_view_wduetu.longitude AS locationposition_longitude,
    geometry_point_view_wduetu.latitude AS locationposition_latitude,
    geometry_point_view_wduetu.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_fjxpan.*) AS applicablerouteportion,
    notes_note_view_aqahpx.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lriaud on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lriaud.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qxhlni on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_qxhlni.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rzzuiy on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rzzuiy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lwigch on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lwigch.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mdqnvp on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_mdqnvp.id
left join geometry.point_view geometry_point_view_wduetu on routes.changeoverpoint_ts.location_position_id = geometry_point_view_wduetu.id
left join routes.routeportion_view routes_routeportion_view_fjxpan on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_fjxpan.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oonxts.*) AS annotation
  from master_join master_join_ggpctt
  join notes.note_view notes_note_lat_oonxts on master_join_ggpctt.target_id = notes_note_lat_oonxts.id
  where master_join_ggpctt.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_aqahpx on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_wiajld.geom AS position_geom,
    geometry_elevatedpoint_view_wiajld.longitude AS position_longitude,
    geometry_elevatedpoint_view_wiajld.latitude AS position_latitude,
    geometry_elevatedpoint_view_wiajld.elevation AS position_elevation,
    geometry_elevatedpoint_view_wiajld.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_wiajld.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_wiajld.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_wiajld.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_ammtbv.title as varchar), '(' || airport_heliport_airportheliport_pt_ammtbv.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_ammtbv.href AS airportheliport_href,
    notes_note_view_hfuusn.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wiajld on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_wiajld.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ammtbv on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_ammtbv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ohglqz.*) AS annotation
  from master_join master_join_rnqinb
  join notes.note_view notes_note_lat_ohglqz on master_join_rnqinb.target_id = notes_note_lat_ohglqz.id
  where master_join_rnqinb.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_hfuusn on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_teeofp.geom AS position_geom,
    geometry_elevatedpoint_view_teeofp.longitude AS position_longitude,
    geometry_elevatedpoint_view_teeofp.latitude AS position_latitude,
    geometry_elevatedpoint_view_teeofp.elevation AS position_elevation,
    geometry_elevatedpoint_view_teeofp.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_teeofp.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_teeofp.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_teeofp.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_fpnsmo.title as varchar), '(' || airport_heliport_airportheliport_pt_fpnsmo.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_fpnsmo.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_wvyirf.title as varchar), '(' || navaids_points_vor_pt_wvyirf.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_wvyirf.href AS checkpointfacility_href,
    notes_note_view_liqpmd.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_teeofp on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_teeofp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fpnsmo on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_fpnsmo.id
left join navaids_points.vor_pt navaids_points_vor_pt_wvyirf on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_wvyirf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwqtww.*) AS annotation
  from master_join master_join_aqqhxj
  join notes.note_view notes_note_lat_qwqtww on master_join_aqqhxj.target_id = notes_note_lat_qwqtww.id
  where master_join_aqqhxj.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_liqpmd on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'shared.obstacleassessmentarea_view', 'geometry.surface_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_kavszl.geom AS extent_geom,
    geometry_surface_view_kavszl.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_wrrkyb.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_wrrkyb.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_wrrkyb.href AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_wvcrjw.*) AS aircraftcategory,
    procedure_approachcondition_view_kwbqdm.condition as condition,
    shared_obstacleassessmentarea_view_exkbop.designsurface as designsurface,
    notes_note_view_ytyvwd.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_kavszl on public.circlingarea_ts.extent_id = geometry_surface_view_kavszl.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_wrrkyb on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_wrrkyb.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_wvcrjw on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_wvcrjw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_trptry.*) as condition
  from master_join master_join_brrlre
  join procedure.approachcondition_view procedure_approachcondition_lat_trptry on master_join_brrlre.target_id = procedure_approachcondition_lat_trptry.id
  where master_join_brrlre.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_kwbqdm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_giycze.*) as designsurface
  from master_join master_join_lmwsgk
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_giycze on master_join_lmwsgk.target_id = shared_obstacleassessmentarea_lat_giycze.id
  where master_join_lmwsgk.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_exkbop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_odyjwt.*) AS annotation
  from master_join master_join_rdobtc
  join notes.note_view notes_note_lat_odyjwt on master_join_rdobtc.target_id = notes_note_lat_odyjwt.id
  where master_join_rdobtc.source_id = public.circlingarea_ts.id
) as notes_note_view_ytyvwd on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_kbxahp.title as varchar), '(' || airport_heliport_deicingarea_pt_kbxahp.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_kbxahp.href AS markeddeicingarea_href,
    airport_heliport_markingelement_view_uhnoyq.element as element,
    notes_note_view_rktjyz.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_kbxahp on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_kbxahp.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dujkwz.*) as element
  from master_join master_join_hulkpm
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_dujkwz on master_join_hulkpm.target_id = airport_heliport_markingelement_lat_dujkwz.id
  where master_join_hulkpm.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_uhnoyq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dgvetl.*) AS annotation
  from master_join master_join_rivtsc
  join notes.note_view notes_note_lat_dgvetl on master_join_rivtsc.target_id = notes_note_lat_dgvetl.id
  where master_join_rivtsc.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_rktjyz on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_uwjldj.title as varchar), '(' || airport_heliport_apron_pt_uwjldj.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_uwjldj.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_uokhdd.title as varchar), '(' || airport_heliport_taxiway_pt_uokhdd.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_uokhdd.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_zyissj.title as varchar), '(' || airport_heliport_aircraftstand_pt_zyissj.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_zyissj.href AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_dwztct.*) AS surfaceproperties,
    geometry_elevatedsurface_view_yyrpdv.geom AS extent_geom,
    geometry_elevatedsurface_view_yyrpdv.elevation AS extent_elevation,
    geometry_elevatedsurface_view_yyrpdv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_yyrpdv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_yyrpdv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_yyrpdv.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_woracb.annotation as annotation,
    airport_heliport_apronareaavailability_view_pktfcg.availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_uwjldj on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_uwjldj.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_uokhdd on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_uokhdd.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_zyissj on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_zyissj.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_dwztct on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_dwztct.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yyrpdv on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_yyrpdv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qthmtl.*) AS annotation
  from master_join master_join_dsgbvv
  join notes.note_view notes_note_lat_qthmtl on master_join_dsgbvv.target_id = notes_note_lat_qthmtl.id
  where master_join_dsgbvv.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_woracb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_yxetgx.*) as availability
  from master_join master_join_zagtlv
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_yxetgx on master_join_zagtlv.target_id = airport_heliport_apronareaavailability_lat_yxetgx.id
  where master_join_zagtlv.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_pktfcg on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_egbfbl.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vgaujp.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zhsgrg.*) AS arccentre,
    geometry_curve_view_nkvhqc.geom AS trajectory_geom,
    geometry_curve_view_nkvhqc.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_hchhfc.title as varchar), '(' || navaids_points_angleindication_pt_hchhfc.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_hchhfc.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jkvsnj.title as varchar), '(' || navaids_points_distanceindication_pt_jkvsnj.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_jkvsnj.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_lcocmv.*) AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_jrbdue.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_jrbdue.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_jrbdue.href AS departure_href,
    shared_aircraftcharacteristic_view_ehkybt.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_rmsfcu.designsurface as designsurface,
    notes_note_view_dsgukz.annotation as annotation,
    procedure_departurearrivalcondition_view_peppgk.condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_egbfbl on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_egbfbl.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vgaujp on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_vgaujp.id
left join geometry.curve_view geometry_curve_view_nkvhqc on procedure.departureleg_ts.trajectory_id = geometry_curve_view_nkvhqc.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zhsgrg on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zhsgrg.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_hchhfc on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_hchhfc.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jkvsnj on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_jkvsnj.id
left join procedure.holdinguse_view procedure_holdinguse_view_lcocmv on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_lcocmv.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_jrbdue on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_jrbdue.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ajhncv.*) as aircraftcategory
  from master_join master_join_vipzpg
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ajhncv on master_join_vipzpg.target_id = shared_aircraftcharacteristic_lat_ajhncv.id
  where master_join_vipzpg.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_ehkybt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_zwaowr.*) as designsurface
  from master_join master_join_boseeg
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_zwaowr on master_join_boseeg.target_id = shared_obstacleassessmentarea_lat_zwaowr.id
  where master_join_boseeg.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_rmsfcu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_efrgso.*) AS annotation
  from master_join master_join_uppusj
  join notes.note_view notes_note_lat_efrgso on master_join_uppusj.target_id = notes_note_lat_efrgso.id
  where master_join_uppusj.source_id = procedure.departureleg_ts.id
) as notes_note_view_dsgukz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_onjhfu.*) as condition
  from master_join master_join_quiexs
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_onjhfu on master_join_quiexs.target_id = procedure_departurearrivalcondition_lat_onjhfu.id
  where master_join_quiexs.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_peppgk on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_sozeuu.geom AS location_geom,
    geometry_point_view_sozeuu.longitude AS location_longitude,
    geometry_point_view_sozeuu.latitude AS location_latitude,
    geometry_point_view_sozeuu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fiwbww.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fiwbww.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_fiwbww.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jjbxky.title as varchar), '(' || airport_heliport_airportheliport_pt_jjbxky.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_jjbxky.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_goqmht.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_goqmht.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_goqmht.href AS runwaypoint_href,
    notes_note_view_gdpvvj.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_sozeuu on navaids_points.designatedpoint_ts.location_id = geometry_point_view_sozeuu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fiwbww on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_fiwbww.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jjbxky on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_jjbxky.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_goqmht on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_goqmht.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jpnbho.*) AS annotation
  from master_join master_join_klfneb
  join notes.note_view notes_note_lat_jpnbho on master_join_klfneb.target_id = notes_note_lat_jpnbho.id
  where master_join_klfneb.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_gdpvvj on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_oqcgfi.geom AS location_geom,
    geometry_elevatedpoint_view_oqcgfi.longitude AS location_longitude,
    geometry_elevatedpoint_view_oqcgfi.latitude AS location_latitude,
    geometry_elevatedpoint_view_oqcgfi.elevation AS location_elevation,
    geometry_elevatedpoint_view_oqcgfi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oqcgfi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oqcgfi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oqcgfi.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hutufv.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_gfhiqw.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_gamzte.availability as availability,
    notes_note_view_oxrifa.annotation as annotation,
    service_informationservice_pt_jqhsvd.informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oqcgfi on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_oqcgfi.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_rvkavx.*) as authority
  from master_join master_join_ttadek
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_rvkavx on master_join_ttadek.target_id = navaids_points_authorityfornavaidequipment_lat_rvkavx.id
  where master_join_ttadek.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_hutufv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lqgpin.*) as monitoring
  from master_join master_join_hqbdjb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lqgpin on master_join_hqbdjb.target_id = navaids_points_navaidequipmentmonitoring_lat_lqgpin.id
  where master_join_hqbdjb.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_gfhiqw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qilmnr.*) as availability
  from master_join master_join_qgzlwo
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qilmnr on master_join_qgzlwo.target_id = navaids_points_navaidoperationalstatus_lat_qilmnr.id
  where master_join_qgzlwo.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_gamzte on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_idiktu.*) AS annotation
  from master_join master_join_mtluvq
  join notes.note_view notes_note_lat_idiktu on master_join_mtluvq.target_id = notes_note_lat_idiktu.id
  where master_join_mtluvq.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_oxrifa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_eqspoy.id,
      'title', coalesce(cast(service_informationservice_lat_eqspoy.title AS varchar), '(' || service_informationservice_lat_eqspoy.nilreason[1] || ')'),
      'href', service_informationservice_lat_eqspoy.href
  )) as informationprovision  from master_join master_join_ypkzku
  join service.informationservice_pt service_informationservice_lat_eqspoy on master_join_ypkzku.target_id = service_informationservice_lat_eqspoy.id
  where master_join_ypkzku.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_jqhsvd on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_lwmquv.title as varchar), '(' || navaids_points_designatedpoint_pt_lwmquv.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_lwmquv.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_snhhpd.title as varchar), '(' || navaids_points_designatedpoint_pt_snhhpd.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_snhhpd.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pcprzr.title as varchar), '(' || navaids_points_navaid_pt_pcprzr.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_pcprzr.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jgltng.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jgltng.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_jgltng.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wwubvm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wwubvm.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wwubvm.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bhhixe.title as varchar), '(' || airport_heliport_airportheliport_pt_bhhixe.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_bhhixe.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_vttylv.geom AS pointchoiceposition_geom,
    geometry_point_view_vttylv.longitude AS pointchoiceposition_longitude,
    geometry_point_view_vttylv.latitude AS pointchoiceposition_latitude,
    geometry_point_view_vttylv.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_hldagh.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lwmquv on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_lwmquv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_snhhpd on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_snhhpd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pcprzr on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_pcprzr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jgltng on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jgltng.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wwubvm on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wwubvm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bhhixe on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_bhhixe.id
left join geometry.point_view geometry_point_view_vttylv on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_vttylv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wwmzbi.*) AS annotation
  from master_join master_join_dnwoak
  join notes.note_view notes_note_lat_wwmzbi on master_join_dnwoak.target_id = notes_note_lat_wwmzbi.id
  where master_join_dnwoak.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_hldagh on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_oibeht.geom AS location_geom,
    geometry_elevatedpoint_view_oibeht.longitude AS location_longitude,
    geometry_elevatedpoint_view_oibeht.latitude AS location_latitude,
    geometry_elevatedpoint_view_oibeht.elevation AS location_elevation,
    geometry_elevatedpoint_view_oibeht.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oibeht.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oibeht.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oibeht.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kngdgi.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_ozqiqn.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_nbpfxg.availability as availability,
    notes_note_view_orvpwr.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oibeht on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_oibeht.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_qjaccv.*) as authority
  from master_join master_join_cnpgts
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_qjaccv on master_join_cnpgts.target_id = navaids_points_authorityfornavaidequipment_lat_qjaccv.id
  where master_join_cnpgts.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_kngdgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ddaqds.*) as monitoring
  from master_join master_join_uhxdtb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ddaqds on master_join_uhxdtb.target_id = navaids_points_navaidequipmentmonitoring_lat_ddaqds.id
  where master_join_uhxdtb.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ozqiqn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_leymzq.*) as availability
  from master_join master_join_tskmjb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_leymzq on master_join_tskmjb.target_id = navaids_points_navaidoperationalstatus_lat_leymzq.id
  where master_join_tskmjb.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_nbpfxg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rdxicg.*) AS annotation
  from master_join master_join_qyhooe
  join notes.note_view notes_note_lat_rdxicg on master_join_qyhooe.target_id = notes_note_lat_rdxicg.id
  where master_join_qyhooe.source_id = navaids_points.dme_ts.id
) as notes_note_view_orvpwr on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_mjzdmt.geom AS location_geom,
    geometry_elevatedpoint_view_mjzdmt.longitude AS location_longitude,
    geometry_elevatedpoint_view_mjzdmt.latitude AS location_latitude,
    geometry_elevatedpoint_view_mjzdmt.elevation AS location_elevation,
    geometry_elevatedpoint_view_mjzdmt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mjzdmt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mjzdmt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mjzdmt.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wborqc.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_fdzmqe.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_ljrzbn.availability as availability,
    notes_note_view_qpgmqi.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mjzdmt on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_mjzdmt.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_skycsw.*) as authority
  from master_join master_join_izdrnj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_skycsw on master_join_izdrnj.target_id = navaids_points_authorityfornavaidequipment_lat_skycsw.id
  where master_join_izdrnj.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_wborqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_tzeeae.*) as monitoring
  from master_join master_join_dnbbmm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_tzeeae on master_join_dnbbmm.target_id = navaids_points_navaidequipmentmonitoring_lat_tzeeae.id
  where master_join_dnbbmm.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_fdzmqe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_bixgwx.*) as availability
  from master_join master_join_lstvjj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_bixgwx on master_join_lstvjj.target_id = navaids_points_navaidoperationalstatus_lat_bixgwx.id
  where master_join_lstvjj.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_ljrzbn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pplltz.*) AS annotation
  from master_join master_join_euymug
  join notes.note_view notes_note_lat_pplltz on master_join_euymug.target_id = notes_note_lat_pplltz.id
  where master_join_euymug.source_id = navaids_points.elevation_ts.id
) as notes_note_view_qpgmqi on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.point_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'public.fasdatablock_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hekbjh.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hfbvlx.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fmyumx.*) AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tuzzlz.*) AS visualdescentpoint,
    geometry_curve_view_jyydxm.geom AS trajectory_geom,
    geometry_curve_view_jyydxm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_dekhkk.title as varchar), '(' || navaids_points_angleindication_pt_dekhkk.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_dekhkk.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_xqtjmj.title as varchar), '(' || navaids_points_distanceindication_pt_xqtjmj.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_xqtjmj.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_pqyxsw.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ydgcvx.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ydgcvx.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_ydgcvx.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cjmevv.title as varchar), '(' || navaids_points_designatedpoint_pt_cjmevv.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_cjmevv.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nqsunl.title as varchar), '(' || navaids_points_navaid_pt_nqsunl.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_nqsunl.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hpfrtq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hpfrtq.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_hpfrtq.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_iidkix.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_iidkix.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_iidkix.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ndkdfk.title as varchar), '(' || airport_heliport_airportheliport_pt_ndkdfk.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_ndkdfk.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_fzixpa.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_fzixpa.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_fzixpa.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_fzixpa.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_tvlvsq.*) AS fasdata,
    shared_aircraftcharacteristic_view_bwaohm.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_borynh.designsurface as designsurface,
    notes_note_view_lhbxjs.annotation as annotation,
    procedure_approachcondition_view_zxpdfz.condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hekbjh on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hekbjh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hfbvlx on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_hfbvlx.id
left join geometry.curve_view geometry_curve_view_jyydxm on procedure.finalleg_ts.trajectory_id = geometry_curve_view_jyydxm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fmyumx on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_fmyumx.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_dekhkk on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_dekhkk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_xqtjmj on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_xqtjmj.id
left join procedure.holdinguse_view procedure_holdinguse_view_pqyxsw on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_pqyxsw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ydgcvx on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ydgcvx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cjmevv on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cjmevv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nqsunl on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_nqsunl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hpfrtq on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hpfrtq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_iidkix on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_iidkix.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ndkdfk on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ndkdfk.id
left join geometry.point_view geometry_point_view_fzixpa on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_fzixpa.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tuzzlz on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_tuzzlz.id
left join public.fasdatablock_view public_fasdatablock_view_tvlvsq on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_tvlvsq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xvzxco.*) as aircraftcategory
  from master_join master_join_ssghft
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xvzxco on master_join_ssghft.target_id = shared_aircraftcharacteristic_lat_xvzxco.id
  where master_join_ssghft.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_bwaohm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xjmgfb.*) as designsurface
  from master_join master_join_ehvxee
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_xjmgfb on master_join_ehvxee.target_id = shared_obstacleassessmentarea_lat_xjmgfb.id
  where master_join_ehvxee.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_borynh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ggwmtw.*) AS annotation
  from master_join master_join_mrumer
  join notes.note_view notes_note_lat_ggwmtw on master_join_mrumer.target_id = notes_note_lat_ggwmtw.id
  where master_join_mrumer.source_id = procedure.finalleg_ts.id
) as notes_note_view_lhbxjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_jwrggd.*) as condition
  from master_join master_join_dfjgwo
  join procedure.approachcondition_view procedure_approachcondition_lat_jwrggd on master_join_dfjgwo.target_id = procedure_approachcondition_lat_jwrggd.id
  where master_join_dfjgwo.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_zxpdfz on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_cnvxfy.geom AS location_geom,
    geometry_elevatedpoint_view_cnvxfy.longitude AS location_longitude,
    geometry_elevatedpoint_view_cnvxfy.latitude AS location_latitude,
    geometry_elevatedpoint_view_cnvxfy.elevation AS location_elevation,
    geometry_elevatedpoint_view_cnvxfy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cnvxfy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cnvxfy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cnvxfy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qpjffr.title as varchar), '(' || organisation_unit_pt_qpjffr.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_qpjffr.href AS serviceprovider_href,
    service_callsigndetail_view_nwqfuc.callsign as callsign,
    service_radiocommunicationchannel_pt_elbcbq.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_wjitlw.availability as availability,
    notes_note_view_efjemt.annotation as annotation,
    airport_heliport_airportheliport_pt_mhmfof.airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cnvxfy on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_cnvxfy.id
left join organisation.unit_pt organisation_unit_pt_qpjffr on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_qpjffr.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tybtpn.*) as callsign
  from master_join master_join_fflyqg
  join service.callsigndetail_view service_callsigndetail_lat_tybtpn on master_join_fflyqg.target_id = service_callsigndetail_lat_tybtpn.id
  where master_join_fflyqg.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_nwqfuc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_nritnl.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_nritnl.title AS varchar), '(' || service_radiocommunicationchannel_lat_nritnl.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_nritnl.href
  )) as radiocommunication  from master_join master_join_kkbtps
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_nritnl on master_join_kkbtps.target_id = service_radiocommunicationchannel_lat_nritnl.id
  where master_join_kkbtps.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_elbcbq on TRUE
left join lateral(
  select
  from master_join master_join_sdjfzn
  join shared.contactinformation_view shared_contactinformation_lat_tfmubt on master_join_sdjfzn.target_id = shared_contactinformation_lat_tfmubt.id
  where master_join_sdjfzn.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_puznuv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_rbcakt.*) as availability
  from master_join master_join_wqargj
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_rbcakt on master_join_wqargj.target_id = service_serviceoperationalstatus_lat_rbcakt.id
  where master_join_wqargj.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_wjitlw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_peemfb.*) AS annotation
  from master_join master_join_vozhrn
  join notes.note_view notes_note_lat_peemfb on master_join_vozhrn.target_id = notes_note_lat_peemfb.id
  where master_join_vozhrn.source_id = service.firefightingservice_ts.id
) as notes_note_view_efjemt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xgbxow.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xgbxow.title AS varchar), '(' || airport_heliport_airportheliport_lat_xgbxow.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xgbxow.href
  )) as airportheliport  from master_join master_join_orfrcz
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xgbxow on master_join_orfrcz.target_id = airport_heliport_airportheliport_lat_xgbxow.id
  where master_join_orfrcz.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_mhmfof on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightconditioncombination_view', 'notes.note_view', 'routes.flightrestrictionroute_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    to_jsonb(routes_flightconditioncombination_view_hlpzxa.*) AS flight,
    routes_flightrestrictionroute_view_jbiesc.regulatedroute as regulatedroute,
    notes_note_view_zcdyoi.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_hlpzxa on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_hlpzxa.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_zgjlaf.*) as regulatedroute
  from master_join master_join_eqhapf
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_zgjlaf on master_join_eqhapf.target_id = routes_flightrestrictionroute_lat_zgjlaf.id
  where master_join_eqhapf.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_jbiesc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pfhlyz.*) AS annotation
  from master_join master_join_wdqxca
  join notes.note_view notes_note_lat_pfhlyz on master_join_wdqxca.target_id = notes_note_lat_pfhlyz.id
  where master_join_wdqxca.source_id = routes.flightrestriction_ts.id
) as notes_note_view_zcdyoi on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_xqdlvg.geom AS extent_geom,
    geometry_elevatedsurface_view_xqdlvg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xqdlvg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xqdlvg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xqdlvg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xqdlvg.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_sxlmxr.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xqdlvg on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_xqdlvg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iapocq.*) AS annotation
  from master_join master_join_wrvquz
  join notes.note_view notes_note_lat_iapocq on master_join_wrvquz.target_id = notes_note_lat_iapocq.id
  where master_join_wrvquz.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_sxlmxr on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_lrzftl.geom AS border_geom,
    geometry_curve_view_lrzftl.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_oerres.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_lrzftl on airspace.geoborder_ts.border_id = geometry_curve_view_lrzftl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wysuom.*) AS annotation
  from master_join master_join_aqwsrq
  join notes.note_view notes_note_lat_wysuom on master_join_aqwsrq.target_id = notes_note_lat_wysuom.id
  where master_join_aqwsrq.source_id = airspace.geoborder_ts.id
) as notes_note_view_oerres on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_xmxahh.geom AS location_geom,
    geometry_elevatedpoint_view_xmxahh.longitude AS location_longitude,
    geometry_elevatedpoint_view_xmxahh.latitude AS location_latitude,
    geometry_elevatedpoint_view_xmxahh.elevation AS location_elevation,
    geometry_elevatedpoint_view_xmxahh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xmxahh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xmxahh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xmxahh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_yumrgc.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_mzqneu.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_rpbtff.availability as availability,
    notes_note_view_whhcwn.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xmxahh on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_xmxahh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_usuaoo.*) as authority
  from master_join master_join_uoeyti
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_usuaoo on master_join_uoeyti.target_id = navaids_points_authorityfornavaidequipment_lat_usuaoo.id
  where master_join_uoeyti.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_yumrgc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_iithca.*) as monitoring
  from master_join master_join_vumnib
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_iithca on master_join_vumnib.target_id = navaids_points_navaidequipmentmonitoring_lat_iithca.id
  where master_join_vumnib.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mzqneu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_cuyqhc.*) as availability
  from master_join master_join_yvqfjb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_cuyqhc on master_join_yvqfjb.target_id = navaids_points_navaidoperationalstatus_lat_cuyqhc.id
  where master_join_yvqfjb.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_rpbtff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_htfykk.*) AS annotation
  from master_join master_join_idokjj
  join notes.note_view notes_note_lat_htfykk on master_join_idokjj.target_id = notes_note_lat_htfykk.id
  where master_join_idokjj.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_whhcwn on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_ntfyur.geom AS location_geom,
    geometry_elevatedpoint_view_ntfyur.longitude AS location_longitude,
    geometry_elevatedpoint_view_ntfyur.latitude AS location_latitude,
    geometry_elevatedpoint_view_ntfyur.elevation AS location_elevation,
    geometry_elevatedpoint_view_ntfyur.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ntfyur.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ntfyur.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ntfyur.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wwcakb.title as varchar), '(' || organisation_unit_pt_wwcakb.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_wwcakb.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xjtyqm.title as varchar), '(' || airport_heliport_airportheliport_pt_xjtyqm.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_xjtyqm.href AS clientairport_href,
    service_callsigndetail_view_nhxemx.callsign as callsign,
    service_radiocommunicationchannel_pt_lvlxje.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_tcofbv.availability as availability,
    notes_note_view_ghakaj.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ntfyur on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ntfyur.id
left join organisation.unit_pt organisation_unit_pt_wwcakb on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_wwcakb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xjtyqm on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_xjtyqm.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_hxfyjs.*) as callsign
  from master_join master_join_jjcjqh
  join service.callsigndetail_view service_callsigndetail_lat_hxfyjs on master_join_jjcjqh.target_id = service_callsigndetail_lat_hxfyjs.id
  where master_join_jjcjqh.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_nhxemx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_uydavd.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_uydavd.title AS varchar), '(' || service_radiocommunicationchannel_lat_uydavd.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_uydavd.href
  )) as radiocommunication  from master_join master_join_ektltq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_uydavd on master_join_ektltq.target_id = service_radiocommunicationchannel_lat_uydavd.id
  where master_join_ektltq.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_lvlxje on TRUE
left join lateral(
  select
  from master_join master_join_ccztbi
  join shared.contactinformation_view shared_contactinformation_lat_lwkioz on master_join_ccztbi.target_id = shared_contactinformation_lat_lwkioz.id
  where master_join_ccztbi.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_yzafdx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jvduic.*) as availability
  from master_join master_join_dkjbaz
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_jvduic on master_join_dkjbaz.target_id = service_serviceoperationalstatus_lat_jvduic.id
  where master_join_dkjbaz.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_tcofbv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xqwypk.*) AS annotation
  from master_join master_join_ruwwlk
  join notes.note_view notes_note_lat_xqwypk on master_join_ruwwlk.target_id = notes_note_lat_xqwypk.id
  where master_join_ruwwlk.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_ghakaj on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_imngbi.title as varchar), '(' || airport_heliport_guidanceline_pt_imngbi.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_imngbi.href AS lightedguidanceline_href,
    shared_lightelement_view_jwhqbf.element as element,
    airport_heliport_groundlightingavailability_view_rkajnq.availability as availability,
    notes_note_view_vgxddk.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_imngbi on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_imngbi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_dcntwg.*) as element
  from master_join master_join_lbzxwp
  join shared.lightelement_view shared_lightelement_lat_dcntwg on master_join_lbzxwp.target_id = shared_lightelement_lat_dcntwg.id
  where master_join_lbzxwp.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_jwhqbf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_fqlquh.*) as availability
  from master_join master_join_hcfajn
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_fqlquh on master_join_hcfajn.target_id = airport_heliport_groundlightingavailability_lat_fqlquh.id
  where master_join_hcfajn.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_rkajnq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uqsbsb.*) AS annotation
  from master_join master_join_weuibq
  join notes.note_view notes_note_lat_uqsbsb on master_join_weuibq.target_id = notes_note_lat_uqsbsb.id
  where master_join_weuibq.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_vgxddk on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_ytpcxq.title as varchar), '(' || airport_heliport_guidanceline_pt_ytpcxq.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_ytpcxq.href AS markedguidanceline_href,
    airport_heliport_markingelement_view_eqltnx.element as element,
    notes_note_view_wdmrcx.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_ytpcxq on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_ytpcxq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_zfnlwq.*) as element
  from master_join master_join_derbex
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_zfnlwq on master_join_derbex.target_id = airport_heliport_markingelement_lat_zfnlwq.id
  where master_join_derbex.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_eqltnx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egiied.*) AS annotation
  from master_join master_join_dbclmf
  join notes.note_view notes_note_lat_egiied on master_join_dbclmf.target_id = notes_note_lat_egiied.id
  where master_join_dbclmf.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_wdmrcx on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_zmybdf.geom AS extent_geom,
    geometry_elevatedcurve_view_zmybdf.elevation AS extent_elevation,
    geometry_elevatedcurve_view_zmybdf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_zmybdf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_zmybdf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_zmybdf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_ztxnvs.connectedtouchdownliftoff as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_acprnu.connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_fzccqw.connectedapron as connectedapron,
    airport_heliport_aircraftstand_pt_ctgczn.connectedstand as connectedstand,
    airport_heliport_taxiway_pt_ouivrt.connectedtaxiway as connectedtaxiway,
    notes_note_view_pgedpq.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_zmybdf on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_zmybdf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_zqcvui.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_zqcvui.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_zqcvui.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_zqcvui.href
  )) as connectedtouchdownliftoff  from master_join master_join_jojniv
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_zqcvui on master_join_jojniv.target_id = airport_heliport_touchdownliftoff_lat_zqcvui.id
  where master_join_jojniv.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_ztxnvs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_qbmtkp.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_qbmtkp.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_qbmtkp.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_qbmtkp.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_xkrtsz
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_qbmtkp on master_join_xkrtsz.target_id = airport_heliport_runwaycentrelinepoint_lat_qbmtkp.id
  where master_join_xkrtsz.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_acprnu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_eslzrw.id,
      'title', coalesce(cast(airport_heliport_apron_lat_eslzrw.title AS varchar), '(' || airport_heliport_apron_lat_eslzrw.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_eslzrw.href
  )) as connectedapron  from master_join master_join_porcqk
  join airport_heliport.apron_pt airport_heliport_apron_lat_eslzrw on master_join_porcqk.target_id = airport_heliport_apron_lat_eslzrw.id
  where master_join_porcqk.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_fzccqw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_jlvfxv.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_jlvfxv.title AS varchar), '(' || airport_heliport_aircraftstand_lat_jlvfxv.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_jlvfxv.href
  )) as connectedstand  from master_join master_join_qftxkc
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_jlvfxv on master_join_qftxkc.target_id = airport_heliport_aircraftstand_lat_jlvfxv.id
  where master_join_qftxkc.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_ctgczn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_aspaii.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_aspaii.title AS varchar), '(' || airport_heliport_taxiway_lat_aspaii.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_aspaii.href
  )) as connectedtaxiway  from master_join master_join_zihxpj
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_aspaii on master_join_zihxpj.target_id = airport_heliport_taxiway_lat_aspaii.id
  where master_join_zihxpj.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_ouivrt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ecfbtw.*) AS annotation
  from master_join master_join_ctiazt
  join notes.note_view notes_note_lat_ecfbtw on master_join_ctiazt.target_id = notes_note_lat_ecfbtw.id
  where master_join_ctiazt.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_pgedpq on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_dpmbxv.title as varchar), '(' || holding_unplannedholding_pt_dpmbxv.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_dpmbxv.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_uymbja.title as varchar), '(' || holding_holdingpattern_pt_uymbja.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_uymbja.href AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_fxlpie.obstacleassessment as obstacleassessment,
    notes_note_view_oekzwb.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_dpmbxv on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_dpmbxv.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_uymbja on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_uymbja.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_nbmtri.*) as obstacleassessment
  from master_join master_join_ookqll
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_nbmtri on master_join_ookqll.target_id = shared_obstacleassessmentarea_lat_nbmtri.id
  where master_join_ookqll.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_fxlpie on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tnlygn.*) AS annotation
  from master_join master_join_copque
  join notes.note_view notes_note_lat_tnlygn on master_join_copque.target_id = notes_note_lat_tnlygn.id
  where master_join_copque.source_id = shared.holdingassessment_ts.id
) as notes_note_view_oekzwb on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatterndistance_view', 'notes.note_view', 'holding.holdingpatternduration_view', 'geometry.curve_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_emzytt.*) AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_pxprdh.*) AS outboundlegspanenddistance,
    geometry_curve_view_lmvvaa.geom AS extent_geom,
    geometry_curve_view_lmvvaa.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_kpnpta.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_emzytt on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_emzytt.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_pxprdh on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_pxprdh.id
left join geometry.curve_view geometry_curve_view_lmvvaa on holding.holdingpattern_ts.extent_id = geometry_curve_view_lmvvaa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfdhai.*) AS annotation
  from master_join master_join_eorccm
  join notes.note_view notes_note_lat_tfdhai on master_join_eorccm.target_id = notes_note_lat_tfdhai.id
  where master_join_eorccm.source_id = holding.holdingpattern_ts.id
) as notes_note_view_kpnpta on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['routes.routeportion_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_kcceoy.geom AS location_geom,
    geometry_elevatedpoint_view_kcceoy.longitude AS location_longitude,
    geometry_elevatedpoint_view_kcceoy.latitude AS location_latitude,
    geometry_elevatedpoint_view_kcceoy.elevation AS location_elevation,
    geometry_elevatedpoint_view_kcceoy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kcceoy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kcceoy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kcceoy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hlbenm.title as varchar), '(' || organisation_unit_pt_hlbenm.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_hlbenm.href AS serviceprovider_href,
    service_callsigndetail_view_vpican.callsign as callsign,
    service_radiocommunicationchannel_pt_knxffq.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ejchqw.availability as availability,
    notes_note_view_nxszap.annotation as annotation,
    navaids_points_vor_pt_ciesml.navaidbroadcast as navaidbroadcast,
    airspace_airspace_pt_wxeozu.clientairspace as clientairspace,
    airport_heliport_airportheliport_pt_kyawjj.clientairport as clientairport,
    routes_routeportion_view_dtpiwy.clientroute as clientroute,
    holding_holdingpattern_pt_gacrdh.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_knazwv.clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kcceoy on service.informationservice_ts.location_id = geometry_elevatedpoint_view_kcceoy.id
left join organisation.unit_pt organisation_unit_pt_hlbenm on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_hlbenm.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_egahhv.*) as callsign
  from master_join master_join_wntcyk
  join service.callsigndetail_view service_callsigndetail_lat_egahhv on master_join_wntcyk.target_id = service_callsigndetail_lat_egahhv.id
  where master_join_wntcyk.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_vpican on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mjwkha.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mjwkha.title AS varchar), '(' || service_radiocommunicationchannel_lat_mjwkha.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mjwkha.href
  )) as radiocommunication  from master_join master_join_jjsvac
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mjwkha on master_join_jjsvac.target_id = service_radiocommunicationchannel_lat_mjwkha.id
  where master_join_jjsvac.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_knxffq on TRUE
left join lateral(
  select
  from master_join master_join_wfqrsh
  join shared.contactinformation_view shared_contactinformation_lat_sqahrm on master_join_wfqrsh.target_id = shared_contactinformation_lat_sqahrm.id
  where master_join_wfqrsh.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_merumi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_pyisap.*) as availability
  from master_join master_join_jmviqk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_pyisap on master_join_jmviqk.target_id = service_serviceoperationalstatus_lat_pyisap.id
  where master_join_jmviqk.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_ejchqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izdwze.*) AS annotation
  from master_join master_join_payboj
  join notes.note_view notes_note_lat_izdwze on master_join_payboj.target_id = notes_note_lat_izdwze.id
  where master_join_payboj.source_id = service.informationservice_ts.id
) as notes_note_view_nxszap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_vskxkv.id,
      'title', coalesce(cast(navaids_points_vor_lat_vskxkv.title AS varchar), '(' || navaids_points_vor_lat_vskxkv.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_vskxkv.href
  )) as navaidbroadcast  from master_join master_join_klhyyd
  join navaids_points.vor_pt navaids_points_vor_lat_vskxkv on master_join_klhyyd.target_id = navaids_points_vor_lat_vskxkv.id
  where master_join_klhyyd.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_ciesml on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_nmbyno.id,
      'title', coalesce(cast(airspace_airspace_lat_nmbyno.title AS varchar), '(' || airspace_airspace_lat_nmbyno.nilreason[1] || ')'),
      'href', airspace_airspace_lat_nmbyno.href
  )) as clientairspace  from master_join master_join_gzljty
  join airspace.airspace_pt airspace_airspace_lat_nmbyno on master_join_gzljty.target_id = airspace_airspace_lat_nmbyno.id
  where master_join_gzljty.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_wxeozu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_auzzgi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_auzzgi.title AS varchar), '(' || airport_heliport_airportheliport_lat_auzzgi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_auzzgi.href
  )) as clientairport  from master_join master_join_asnzrq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_auzzgi on master_join_asnzrq.target_id = airport_heliport_airportheliport_lat_auzzgi.id
  where master_join_asnzrq.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_kyawjj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_wfpcnf.*) as clientroute
  from master_join master_join_zofywv
  join routes.routeportion_view routes_routeportion_lat_wfpcnf on master_join_zofywv.target_id = routes_routeportion_lat_wfpcnf.id
  where master_join_zofywv.source_id = service.informationservice_ts.id
) as routes_routeportion_view_dtpiwy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_qhqbwo.id,
      'title', coalesce(cast(holding_holdingpattern_lat_qhqbwo.title AS varchar), '(' || holding_holdingpattern_lat_qhqbwo.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_qhqbwo.href
  )) as clientholding  from master_join master_join_xirfny
  join holding.holdingpattern_pt holding_holdingpattern_lat_qhqbwo on master_join_xirfny.target_id = holding_holdingpattern_lat_qhqbwo.id
  where master_join_xirfny.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_gacrdh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_gkqpny.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_gkqpny.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_gkqpny.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_gkqpny.href
  )) as clientaerialrefuelling  from master_join master_join_mydcap
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_gkqpny on master_join_mydcap.target_id = aerial_refuelling_aerialrefuelling_lat_gkqpny.id
  where master_join_mydcap.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_knazwv on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nhhnua.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zkvkkb.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nfpauf.*) AS arccentre,
    geometry_curve_view_jaeuvz.geom AS trajectory_geom,
    geometry_curve_view_jaeuvz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_dvvyeo.title as varchar), '(' || navaids_points_angleindication_pt_dvvyeo.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_dvvyeo.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_emnhgy.title as varchar), '(' || navaids_points_distanceindication_pt_emnhgy.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_emnhgy.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_ukdqyt.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_csmole.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_csmole.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_csmole.href AS approach_href,
    shared_aircraftcharacteristic_view_skoacg.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_akxdzr.designsurface as designsurface,
    notes_note_view_pnbpvl.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nhhnua on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_nhhnua.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zkvkkb on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_zkvkkb.id
left join geometry.curve_view geometry_curve_view_jaeuvz on procedure.initialleg_ts.trajectory_id = geometry_curve_view_jaeuvz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nfpauf on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_nfpauf.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_dvvyeo on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_dvvyeo.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_emnhgy on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_emnhgy.id
left join procedure.holdinguse_view procedure_holdinguse_view_ukdqyt on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_ukdqyt.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_csmole on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_csmole.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zoytun.*) as aircraftcategory
  from master_join master_join_zygfax
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_zoytun on master_join_zygfax.target_id = shared_aircraftcharacteristic_lat_zoytun.id
  where master_join_zygfax.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_skoacg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qzajhs.*) as designsurface
  from master_join master_join_oysvlu
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qzajhs on master_join_oysvlu.target_id = shared_obstacleassessmentarea_lat_qzajhs.id
  where master_join_oysvlu.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_akxdzr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_azqaqe.*) AS annotation
  from master_join master_join_vaojul
  join notes.note_view notes_note_lat_azqaqe on master_join_vaojul.target_id = notes_note_lat_azqaqe.id
  where master_join_vaojul.source_id = procedure.initialleg_ts.id
) as notes_note_view_pnbpvl on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'procedure.finalprofile_view', 'notes.note_view', 'procedure.procedureavailability_view', 'procedure.missedapproachgroup_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_micidv.title as varchar), '(' || navaids_points_navaid_pt_micidv.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_micidv.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ckegdj.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ckegdj.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ckegdj.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_jdhjfg.title as varchar), '(' || surveillance_radarsystem_pt_jdhjfg.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_jdhjfg.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_wdrlsl.title as varchar), '(' || procedure_safealtitudearea_pt_wdrlsl.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_wdrlsl.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_orbmvh.*) AS landing,
    to_jsonb(procedure_finalprofile_view_bxefoo.*) AS finalprofile,
    procedure_procedureavailability_view_ctqgoe.availability as availability,
    airport_heliport_airportheliport_pt_saxevl.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_xwidnk.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_mwadpj.flighttransition as flighttransition,
    notes_note_view_ymxgdy.annotation as annotation,
    procedure_missedapproachgroup_view_ayvpyk.missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_micidv on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_micidv.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ckegdj on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ckegdj.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_jdhjfg on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_jdhjfg.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_wdrlsl on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_wdrlsl.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_orbmvh on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_orbmvh.id
left join procedure.finalprofile_view procedure_finalprofile_view_bxefoo on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_bxefoo.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_bbxrad.*) as availability
  from master_join master_join_rreknr
  join procedure.procedureavailability_view procedure_procedureavailability_lat_bbxrad on master_join_rreknr.target_id = procedure_procedureavailability_lat_bbxrad.id
  where master_join_rreknr.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_ctqgoe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fafguq.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fafguq.title AS varchar), '(' || airport_heliport_airportheliport_lat_fafguq.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fafguq.href
  )) as airportheliport  from master_join master_join_vfctaa
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fafguq on master_join_vfctaa.target_id = airport_heliport_airportheliport_lat_fafguq.id
  where master_join_vfctaa.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_saxevl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_tabaga.*) as aircraftcharacteristic
  from master_join master_join_jlwfic
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_tabaga on master_join_jlwfic.target_id = shared_aircraftcharacteristic_lat_tabaga.id
  where master_join_jlwfic.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_xwidnk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_mkgrrt.*) as flighttransition
  from master_join master_join_tzwomn
  join procedure.proceduretransition_view procedure_proceduretransition_lat_mkgrrt on master_join_tzwomn.target_id = procedure_proceduretransition_lat_mkgrrt.id
  where master_join_tzwomn.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_mwadpj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eplwts.*) AS annotation
  from master_join master_join_cdzeps
  join notes.note_view notes_note_lat_eplwts on master_join_cdzeps.target_id = notes_note_lat_eplwts.id
  where master_join_cdzeps.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_ymxgdy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_lkckiy.*) as missedinstruction
  from master_join master_join_fvmrjq
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_lkckiy on master_join_fvmrjq.target_id = procedure_missedapproachgroup_lat_lkckiy.id
  where master_join_fvmrjq.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_ayvpyk on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nhdxxb.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wwsbyp.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vsgyyd.*) AS arccentre,
    geometry_curve_view_aosoov.geom AS trajectory_geom,
    geometry_curve_view_aosoov.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_upixzk.title as varchar), '(' || navaids_points_angleindication_pt_upixzk.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_upixzk.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tolyhb.title as varchar), '(' || navaids_points_distanceindication_pt_tolyhb.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_tolyhb.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_mjautv.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_sdjxbu.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_sdjxbu.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_sdjxbu.href AS approach_href,
    shared_aircraftcharacteristic_view_etcwdy.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_tyltqp.designsurface as designsurface,
    notes_note_view_yyyxmy.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nhdxxb on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_nhdxxb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wwsbyp on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_wwsbyp.id
left join geometry.curve_view geometry_curve_view_aosoov on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_aosoov.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vsgyyd on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vsgyyd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_upixzk on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_upixzk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tolyhb on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_tolyhb.id
left join procedure.holdinguse_view procedure_holdinguse_view_mjautv on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_mjautv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_sdjxbu on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_sdjxbu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jiqjbe.*) as aircraftcategory
  from master_join master_join_bgeudm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_jiqjbe on master_join_bgeudm.target_id = shared_aircraftcharacteristic_lat_jiqjbe.id
  where master_join_bgeudm.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_etcwdy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_oqthtj.*) as designsurface
  from master_join master_join_qmnhdg
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_oqthtj on master_join_qmnhdg.target_id = shared_obstacleassessmentarea_lat_oqthtj.id
  where master_join_qmnhdg.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_tyltqp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gnarzj.*) AS annotation
  from master_join master_join_otlojd
  join notes.note_view notes_note_lat_gnarzj on master_join_otlojd.target_id = notes_note_lat_gnarzj.id
  where master_join_otlojd.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_yyyxmy on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_vgpqql.geom AS location_geom,
    geometry_elevatedpoint_view_vgpqql.longitude AS location_longitude,
    geometry_elevatedpoint_view_vgpqql.latitude AS location_latitude,
    geometry_elevatedpoint_view_vgpqql.elevation AS location_elevation,
    geometry_elevatedpoint_view_vgpqql.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vgpqql.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vgpqql.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vgpqql.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wbiwql.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_qgvrjm.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_ohdwmh.availability as availability,
    notes_note_view_hiapwj.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vgpqql on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_vgpqql.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jbljog.*) as authority
  from master_join master_join_nidoch
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jbljog on master_join_nidoch.target_id = navaids_points_authorityfornavaidequipment_lat_jbljog.id
  where master_join_nidoch.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_wbiwql on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_whtwef.*) as monitoring
  from master_join master_join_dlnxvq
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_whtwef on master_join_dlnxvq.target_id = navaids_points_navaidequipmentmonitoring_lat_whtwef.id
  where master_join_dlnxvq.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_qgvrjm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lbwkpp.*) as availability
  from master_join master_join_msdxcz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_lbwkpp on master_join_msdxcz.target_id = navaids_points_navaidoperationalstatus_lat_lbwkpp.id
  where master_join_msdxcz.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_ohdwmh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqtbyt.*) AS annotation
  from master_join master_join_bpeoat
  join notes.note_view notes_note_lat_gqtbyt on master_join_bpeoat.target_id = notes_note_lat_gqtbyt.id
  where master_join_bpeoat.source_id = navaids_points.localizer_ts.id
) as notes_note_view_hiapwj on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_acofjw.geom AS location_geom,
    geometry_elevatedpoint_view_acofjw.longitude AS location_longitude,
    geometry_elevatedpoint_view_acofjw.latitude AS location_latitude,
    geometry_elevatedpoint_view_acofjw.elevation AS location_elevation,
    geometry_elevatedpoint_view_acofjw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_acofjw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_acofjw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_acofjw.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_nlbeqf.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_poxgqh.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_xpxigk.availability as availability,
    notes_note_view_tupqtx.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_acofjw on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_acofjw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aowzjs.*) as authority
  from master_join master_join_nnapuc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_aowzjs on master_join_nnapuc.target_id = navaids_points_authorityfornavaidequipment_lat_aowzjs.id
  where master_join_nnapuc.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_nlbeqf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_oilzvn.*) as monitoring
  from master_join master_join_fstarh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_oilzvn on master_join_fstarh.target_id = navaids_points_navaidequipmentmonitoring_lat_oilzvn.id
  where master_join_fstarh.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_poxgqh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_aybagw.*) as availability
  from master_join master_join_kiphko
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_aybagw on master_join_kiphko.target_id = navaids_points_navaidoperationalstatus_lat_aybagw.id
  where master_join_kiphko.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_xpxigk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbgqpl.*) AS annotation
  from master_join master_join_ratbts
  join notes.note_view notes_note_lat_cbgqpl on master_join_ratbts.target_id = notes_note_lat_cbgqpl.id
  where master_join_ratbts.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_tupqtx on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_enxexd.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_enxexd.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_enxexd.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_uoezml.geom AS location_geom,
    geometry_elevatedpoint_view_uoezml.longitude AS location_longitude,
    geometry_elevatedpoint_view_uoezml.latitude AS location_latitude,
    geometry_elevatedpoint_view_uoezml.elevation AS location_elevation,
    geometry_elevatedpoint_view_uoezml.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uoezml.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uoezml.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uoezml.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xxudks.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_enxexd on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_enxexd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uoezml on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_uoezml.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edyepu.*) AS annotation
  from master_join master_join_lxltut
  join notes.note_view notes_note_lat_edyepu on master_join_lxltut.target_id = notes_note_lat_edyepu.id
  where master_join_lxltut.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_xxudks on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vquccv.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xcqbmj.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wbqorn.*) AS arccentre,
    geometry_curve_view_hzgblj.geom AS trajectory_geom,
    geometry_curve_view_hzgblj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_cazhxi.title as varchar), '(' || navaids_points_angleindication_pt_cazhxi.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_cazhxi.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_cbtjbm.title as varchar), '(' || navaids_points_distanceindication_pt_cbtjbm.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_cbtjbm.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_ndrjbn.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_wosazg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_wosazg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_wosazg.href AS approach_href,
    shared_aircraftcharacteristic_view_xxrjxw.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_ezufhe.designsurface as designsurface,
    notes_note_view_oxrqvg.annotation as annotation,
    procedure_approachcondition_view_jarvmz.condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vquccv on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vquccv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xcqbmj on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_xcqbmj.id
left join geometry.curve_view geometry_curve_view_hzgblj on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_hzgblj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wbqorn on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_wbqorn.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_cazhxi on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_cazhxi.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_cbtjbm on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_cbtjbm.id
left join procedure.holdinguse_view procedure_holdinguse_view_ndrjbn on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_ndrjbn.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_wosazg on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_wosazg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_prwfxz.*) as aircraftcategory
  from master_join master_join_ccsnuc
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_prwfxz on master_join_ccsnuc.target_id = shared_aircraftcharacteristic_lat_prwfxz.id
  where master_join_ccsnuc.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_xxrjxw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_oxsnnk.*) as designsurface
  from master_join master_join_tswwmo
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_oxsnnk on master_join_tswwmo.target_id = shared_obstacleassessmentarea_lat_oxsnnk.id
  where master_join_tswwmo.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_ezufhe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xtzjpj.*) AS annotation
  from master_join master_join_esistx
  join notes.note_view notes_note_lat_xtzjpj on master_join_esistx.target_id = notes_note_lat_xtzjpj.id
  where master_join_esistx.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_oxrqvg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_qkbhtq.*) as condition
  from master_join master_join_jspege
  join procedure.approachcondition_view procedure_approachcondition_lat_qkbhtq on master_join_jspege.target_id = procedure_approachcondition_lat_qkbhtq.id
  where master_join_jspege.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_jarvmz on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_mogugu.geom AS location_geom,
    geometry_elevatedpoint_view_mogugu.longitude AS location_longitude,
    geometry_elevatedpoint_view_mogugu.latitude AS location_latitude,
    geometry_elevatedpoint_view_mogugu.elevation AS location_elevation,
    geometry_elevatedpoint_view_mogugu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mogugu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mogugu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mogugu.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_fqipci.touchdownliftoff as touchdownliftoff,
    navaids_points_navaidcomponent_view_aetezq.navaidequipment as navaidequipment,
    airport_heliport_runwaydirection_pt_kdbgit.runwaydirection as runwaydirection,
    airport_heliport_airportheliport_pt_nwcqcm.servedairport as servedairport,
    navaids_points_navaidoperationalstatus_view_oalozu.availability as availability,
    notes_note_view_jeioyh.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mogugu on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_mogugu.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_whcwje.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_whcwje.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_whcwje.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_whcwje.href
  )) as touchdownliftoff  from master_join master_join_dzixrj
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_whcwje on master_join_dzixrj.target_id = airport_heliport_touchdownliftoff_lat_whcwje.id
  where master_join_dzixrj.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_fqipci on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_ptyvue.*) as navaidequipment
  from master_join master_join_ajjzvr
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_ptyvue on master_join_ajjzvr.target_id = navaids_points_navaidcomponent_lat_ptyvue.id
  where master_join_ajjzvr.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_aetezq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ucmttn.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ucmttn.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ucmttn.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ucmttn.href
  )) as runwaydirection  from master_join master_join_lxtdgc
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ucmttn on master_join_lxtdgc.target_id = airport_heliport_runwaydirection_lat_ucmttn.id
  where master_join_lxtdgc.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_kdbgit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_jzhsny.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_jzhsny.title AS varchar), '(' || airport_heliport_airportheliport_lat_jzhsny.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_jzhsny.href
  )) as servedairport  from master_join master_join_keiejs
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_jzhsny on master_join_keiejs.target_id = airport_heliport_airportheliport_lat_jzhsny.id
  where master_join_keiejs.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_nwcqcm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wghtbc.*) as availability
  from master_join master_join_eurmcd
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wghtbc on master_join_eurmcd.target_id = navaids_points_navaidoperationalstatus_lat_wghtbc.id
  where master_join_eurmcd.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_oalozu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ndafmc.*) AS annotation
  from master_join master_join_diapqg
  join notes.note_view notes_note_lat_ndafmc on master_join_diapqg.target_id = notes_note_lat_ndafmc.id
  where master_join_diapqg.source_id = navaids_points.navaid_ts.id
) as notes_note_view_jeioyh on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['notes.note_view', 'shared.circlesector_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    to_jsonb(shared_obstacleassessmentarea_view_zmfnrb.*) AS designsurface,
    to_jsonb(shared_circlesector_view_bhrbyb.*) AS sectordefinition,
    notes_note_view_eaefyj.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_zmfnrb on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_zmfnrb.id
left join shared.circlesector_view shared_circlesector_view_bhrbyb on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_bhrbyb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bitmtc.*) AS annotation
  from master_join master_join_qoxywi
  join notes.note_view notes_note_lat_bitmtc on master_join_qoxywi.target_id = notes_note_lat_bitmtc.id
  where master_join_qoxywi.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_eaefyj on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['procedure.navigationareasector_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_mpzmcu.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_mpzmcu.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_mpzmcu.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_lqefnz.title as varchar), '(' || navaids_points_designatedpoint_pt_lqefnz.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_lqefnz.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gcdkdd.title as varchar), '(' || navaids_points_navaid_pt_gcdkdd.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_gcdkdd.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vyywmz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vyywmz.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_vyywmz.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bnsdlh.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bnsdlh.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bnsdlh.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lzlnra.title as varchar), '(' || airport_heliport_airportheliport_pt_lzlnra.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_lzlnra.href AS centrepointairportreferencepoint_href,
    geometry_point_view_sytbey.geom AS centrepointposition_geom,
    geometry_point_view_sytbey.longitude AS centrepointposition_longitude,
    geometry_point_view_sytbey.latitude AS centrepointposition_latitude,
    geometry_point_view_sytbey.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_oiejrh.sector as sector,
    notes_note_view_vnlpab.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_mpzmcu on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_mpzmcu.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lqefnz on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lqefnz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gcdkdd on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_gcdkdd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vyywmz on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vyywmz.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bnsdlh on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bnsdlh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lzlnra on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_lzlnra.id
left join geometry.point_view geometry_point_view_sytbey on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_sytbey.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_gykihk.*) as sector
  from master_join master_join_uswhyz
  join procedure.navigationareasector_view procedure_navigationareasector_lat_gykihk on master_join_uswhyz.target_id = procedure_navigationareasector_lat_gykihk.id
  where master_join_uswhyz.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_oiejrh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nqmmna.*) AS annotation
  from master_join master_join_nqbccl
  join notes.note_view notes_note_lat_nqmmna on master_join_nqbccl.target_id = notes_note_lat_nqmmna.id
  where master_join_nqbccl.source_id = procedure.navigationarea_ts.id
) as notes_note_view_vnlpab on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_hwawjs.geom AS location_geom,
    geometry_elevatedpoint_view_hwawjs.longitude AS location_longitude,
    geometry_elevatedpoint_view_hwawjs.latitude AS location_latitude,
    geometry_elevatedpoint_view_hwawjs.elevation AS location_elevation,
    geometry_elevatedpoint_view_hwawjs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hwawjs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hwawjs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hwawjs.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_bxirkc.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_jqiegk.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_mrbbnq.availability as availability,
    notes_note_view_hfhkhp.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hwawjs on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_hwawjs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_qswvzw.*) as authority
  from master_join master_join_fghgoz
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_qswvzw on master_join_fghgoz.target_id = navaids_points_authorityfornavaidequipment_lat_qswvzw.id
  where master_join_fghgoz.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_bxirkc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ygugpj.*) as monitoring
  from master_join master_join_hgrkgh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ygugpj on master_join_hgrkgh.target_id = navaids_points_navaidequipmentmonitoring_lat_ygugpj.id
  where master_join_hgrkgh.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jqiegk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yavkqi.*) as availability
  from master_join master_join_xeozqg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yavkqi on master_join_xeozqg.target_id = navaids_points_navaidoperationalstatus_lat_yavkqi.id
  where master_join_xeozqg.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_mrbbnq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jffxoy.*) AS annotation
  from master_join master_join_xdypyu
  join notes.note_view notes_note_lat_jffxoy on master_join_xdypyu.target_id = notes_note_lat_jffxoy.id
  where master_join_xdypyu.source_id = navaids_points.ndb_ts.id
) as notes_note_view_hfhkhp on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_auoevu.title as varchar), '(' || airport_heliport_airportheliport_pt_auoevu.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_auoevu.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_ftnrcv.geom AS extent_geom,
    geometry_elevatedsurface_view_ftnrcv.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ftnrcv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ftnrcv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ftnrcv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ftnrcv.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_rvfjnf.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_auoevu on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_auoevu.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ftnrcv on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_ftnrcv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_veetzo.*) AS annotation
  from master_join master_join_bvpwpn
  join notes.note_view notes_note_lat_veetzo on master_join_bvpwpn.target_id = notes_note_lat_veetzo.id
  where master_join_bvpwpn.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_rvfjnf on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_xoyikv.title as varchar), '(' || airport_heliport_airportheliport_pt_xoyikv.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_xoyikv.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_oqfukm.title as varchar), '(' || airport_heliport_runwaydirection_pt_oqfukm.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_oqfukm.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_mwwrwk.title as varchar), '(' || organisation_organisationauthority_pt_mwwrwk.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_mwwrwk.href AS referenceownerorganisation_href,
    geometry_surface_view_tyfyuf.geom AS surfaceextent_geom,
    geometry_surface_view_tyfyuf.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_aejigp.obstacle as obstacle,
    notes_note_view_xvzpmc.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xoyikv on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_xoyikv.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_oqfukm on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_oqfukm.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mwwrwk on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_mwwrwk.id
left join geometry.surface_view geometry_surface_view_tyfyuf on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_tyfyuf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_bdnekx.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_bdnekx.title AS varchar), '(' || obstacles_verticalstructure_lat_bdnekx.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_bdnekx.href
  )) as obstacle  from master_join master_join_unmpyu
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_bdnekx on master_join_unmpyu.target_id = obstacles_verticalstructure_lat_bdnekx.id
  where master_join_unmpyu.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_aejigp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yqfuzd.*) AS annotation
  from master_join master_join_reaubr
  join notes.note_view notes_note_lat_yqfuzd on master_join_reaubr.target_id = notes_note_lat_yqfuzd.id
  where master_join_reaubr.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_xvzpmc on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    organisation_organisationauthorityassociation_view_pvnkum.relatedorganisationauthority as relatedorganisationauthority,
    notes_note_view_eclqkl.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_llklli
  join shared.contactinformation_view shared_contactinformation_lat_ilbcpj on master_join_llklli.target_id = shared_contactinformation_lat_ilbcpj.id
  where master_join_llklli.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_glumwf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_grcikc.*) as relatedorganisationauthority
  from master_join master_join_ikhaln
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_grcikc on master_join_ikhaln.target_id = organisation_organisationauthorityassociation_lat_grcikc.id
  where master_join_ikhaln.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_pvnkum on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gwjiee.*) AS annotation
  from master_join master_join_oaigyc
  join notes.note_view notes_note_lat_gwjiee on master_join_oaigyc.target_id = notes_note_lat_gwjiee.id
  where master_join_oaigyc.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_eclqkl on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_dunfcg.geom AS extent_geom,
    geometry_elevatedsurface_view_dunfcg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dunfcg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dunfcg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dunfcg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dunfcg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_vmlzzc.associatedstand as associatedstand,
    notes_note_view_oduddl.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dunfcg on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_dunfcg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_rfpazo.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_rfpazo.title AS varchar), '(' || airport_heliport_aircraftstand_lat_rfpazo.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_rfpazo.href
  )) as associatedstand  from master_join master_join_vuanqw
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_rfpazo on master_join_vuanqw.target_id = airport_heliport_aircraftstand_lat_rfpazo.id
  where master_join_vuanqw.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_vmlzzc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqrrvk.*) AS annotation
  from master_join master_join_hsjzlw
  join notes.note_view notes_note_lat_kqrrvk on master_join_hsjzlw.target_id = notes_note_lat_kqrrvk.id
  where master_join_hsjzlw.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_oduddl on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_onlaai.geom AS location_geom,
    geometry_elevatedpoint_view_onlaai.longitude AS location_longitude,
    geometry_elevatedpoint_view_onlaai.latitude AS location_latitude,
    geometry_elevatedpoint_view_onlaai.elevation AS location_elevation,
    geometry_elevatedpoint_view_onlaai.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_onlaai.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_onlaai.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_onlaai.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vozkve.title as varchar), '(' || organisation_unit_pt_vozkve.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_vozkve.href AS serviceprovider_href,
    service_callsigndetail_view_ygsuoh.callsign as callsign,
    service_radiocommunicationchannel_pt_kimxod.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ydghdc.availability as availability,
    notes_note_view_uuekil.annotation as annotation,
    airport_heliport_airportheliport_pt_hjkioy.airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_onlaai on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_onlaai.id
left join organisation.unit_pt organisation_unit_pt_vozkve on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_vozkve.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_nvfdfm.*) as callsign
  from master_join master_join_jrtsiv
  join service.callsigndetail_view service_callsigndetail_lat_nvfdfm on master_join_jrtsiv.target_id = service_callsigndetail_lat_nvfdfm.id
  where master_join_jrtsiv.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_ygsuoh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ucvudk.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ucvudk.title AS varchar), '(' || service_radiocommunicationchannel_lat_ucvudk.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ucvudk.href
  )) as radiocommunication  from master_join master_join_paxhet
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ucvudk on master_join_paxhet.target_id = service_radiocommunicationchannel_lat_ucvudk.id
  where master_join_paxhet.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_kimxod on TRUE
left join lateral(
  select
  from master_join master_join_xeerpx
  join shared.contactinformation_view shared_contactinformation_lat_qeatgf on master_join_xeerpx.target_id = shared_contactinformation_lat_qeatgf.id
  where master_join_xeerpx.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_qstisk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bjmtln.*) as availability
  from master_join master_join_bdybbg
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bjmtln on master_join_bdybbg.target_id = service_serviceoperationalstatus_lat_bjmtln.id
  where master_join_bdybbg.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_ydghdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ponorz.*) AS annotation
  from master_join master_join_rwvucq
  join notes.note_view notes_note_lat_ponorz on master_join_rwvucq.target_id = notes_note_lat_ponorz.id
  where master_join_rwvucq.source_id = service.passengerservice_ts.id
) as notes_note_view_uuekil on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vjdogj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vjdogj.title AS varchar), '(' || airport_heliport_airportheliport_lat_vjdogj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vjdogj.href
  )) as airportheliport  from master_join master_join_kqgvzb
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vjdogj on master_join_kqgvzb.target_id = airport_heliport_airportheliport_lat_vjdogj.id
  where master_join_kqgvzb.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_hjkioy on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    airport_heliport_lightactivation_view_flsnhw.controlledlightintensity as controlledlightintensity,
    notes_note_view_khvpyk.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_mmnrox.*) as controlledlightintensity
  from master_join master_join_yzxtmy
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_mmnrox on master_join_yzxtmy.target_id = airport_heliport_lightactivation_lat_mmnrox.id
  where master_join_yzxtmy.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_flsnhw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kteelg.*) AS annotation
  from master_join master_join_jlikon
  join notes.note_view notes_note_lat_kteelg on master_join_jlikon.target_id = notes_note_lat_kteelg.id
  where master_join_jlikon.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_khvpyk on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.reflector_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_hilglu.geom AS location_geom,
    geometry_elevatedpoint_view_hilglu.longitude AS location_longitude,
    geometry_elevatedpoint_view_hilglu.latitude AS location_latitude,
    geometry_elevatedpoint_view_hilglu.elevation AS location_elevation,
    geometry_elevatedpoint_view_hilglu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hilglu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hilglu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hilglu.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ukzztd.annotation as annotation,
    surveillance_reflector_view_dcvzhu.reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hilglu on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_hilglu.id
left join lateral(
  select
  from master_join master_join_dlvoqh
  join shared.contactinformation_view shared_contactinformation_lat_ukguag on master_join_dlvoqh.target_id = shared_contactinformation_lat_ukguag.id
  where master_join_dlvoqh.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_adhdrr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fngwaq.*) AS annotation
  from master_join master_join_eictxz
  join notes.note_view notes_note_lat_fngwaq on master_join_eictxz.target_id = notes_note_lat_fngwaq.id
  where master_join_eictxz.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_ukzztd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_hftgfn.*) as reflector
  from master_join master_join_ryxbyd
  join surveillance.reflector_view surveillance_reflector_lat_hftgfn on master_join_ryxbyd.target_id = surveillance_reflector_lat_hftgfn.id
  where master_join_ryxbyd.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_dcvzhu on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'notes.note_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_ueqanw.geom AS location_geom,
    geometry_elevatedpoint_view_ueqanw.longitude AS location_longitude,
    geometry_elevatedpoint_view_ueqanw.latitude AS location_latitude,
    geometry_elevatedpoint_view_ueqanw.elevation AS location_elevation,
    geometry_elevatedpoint_view_ueqanw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ueqanw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ueqanw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ueqanw.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_bfaxli.annotation as annotation,
    surveillance_surveillancegroundstation_view_vwitid.groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ueqanw on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ueqanw.id
left join lateral(
  select
  from master_join master_join_imriqh
  join shared.contactinformation_view shared_contactinformation_lat_iqcjyg on master_join_imriqh.target_id = shared_contactinformation_lat_iqcjyg.id
  where master_join_imriqh.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_cfviga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nieumb.*) AS annotation
  from master_join master_join_gwwqde
  join notes.note_view notes_note_lat_nieumb on master_join_gwwqde.target_id = notes_note_lat_nieumb.id
  where master_join_gwwqde.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_bfaxli on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_candre.*) as groundstation
  from master_join master_join_uuxyty
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_candre on master_join_uuxyty.target_id = surveillance_surveillancegroundstation_lat_candre.id
  where master_join_uuxyty.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_vwitid on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_zafqma.title as varchar), '(' || navaids_points_dme_pt_zafqma.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_zafqma.href AS dme_href,
    notes_note_view_rbezhs.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_zafqma on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_zafqma.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dztlba.*) AS annotation
  from master_join master_join_albhwr
  join notes.note_view notes_note_lat_dztlba on master_join_albhwr.target_id = notes_note_lat_dztlba.id
  where master_join_albhwr.source_id = procedure.proceduredme_ts.id
) as notes_note_view_rbezhs on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_bjtkcu.title as varchar), '(' || airport_heliport_airportheliport_pt_bjtkcu.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_bjtkcu.href AS airportheliport_href,
    geometry_elevatedpoint_view_peywjp.geom AS location_geom,
    geometry_elevatedpoint_view_peywjp.longitude AS location_longitude,
    geometry_elevatedpoint_view_peywjp.latitude AS location_latitude,
    geometry_elevatedpoint_view_peywjp.elevation AS location_elevation,
    geometry_elevatedpoint_view_peywjp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_peywjp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_peywjp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_peywjp.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_jkevgu.radarequipment as radarequipment,
    organisation_organisationauthority_pt_qfhpxa.office as office,
    airport_heliport_runway_pt_zlpujo.parrunway as parrunway,
    notes_note_view_zyxkdl.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bjtkcu on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_bjtkcu.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_peywjp on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_peywjp.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_adnxco.*) as radarequipment
  from master_join master_join_jjwuiq
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_adnxco on master_join_jjwuiq.target_id = surveillance_radarcomponent_lat_adnxco.id
  where master_join_jjwuiq.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_jkevgu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_alkrit.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_alkrit.title AS varchar), '(' || organisation_organisationauthority_lat_alkrit.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_alkrit.href
  )) as office  from master_join master_join_bkzhcd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_alkrit on master_join_bkzhcd.target_id = organisation_organisationauthority_lat_alkrit.id
  where master_join_bkzhcd.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_qfhpxa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_xrvdau.id,
      'title', coalesce(cast(airport_heliport_runway_lat_xrvdau.title AS varchar), '(' || airport_heliport_runway_lat_xrvdau.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_xrvdau.href
  )) as parrunway  from master_join master_join_lpbegm
  join airport_heliport.runway_pt airport_heliport_runway_lat_xrvdau on master_join_lpbegm.target_id = airport_heliport_runway_lat_xrvdau.id
  where master_join_lpbegm.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_zlpujo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_esvitj.*) AS annotation
  from master_join master_join_gxeytb
  join notes.note_view notes_note_lat_esvitj on master_join_gxeytb.target_id = notes_note_lat_esvitj.id
  where master_join_gxeytb.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_zyxkdl on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    geometry_elevatedpoint_view_qntzxw.geom as location_geom,
    geometry_elevatedpoint_view_qntzxw.attr as location,
    service_radiocommunicationoperationalstatus_view_kqepvt.availability as availability,
    notes_note_view_adeihx.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_vdddap.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_vdddap.id,
      'longitude', geometry_elevatedpoint_lat_vdddap.longitude,
      'latitude', geometry_elevatedpoint_lat_vdddap.latitude,
      'elevation', geometry_elevatedpoint_lat_vdddap.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_vdddap.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_vdddap.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_vdddap.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_vdddap.horizontalAccuracy
    )) AS attr
  from master_join master_join_ksikmu
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_vdddap on master_join_ksikmu.target_id = geometry_elevatedpoint_lat_vdddap.id
  where master_join_ksikmu.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_qntzxw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_jpzwcj.*) as availability
  from master_join master_join_hetlca
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_jpzwcj on master_join_hetlca.target_id = service_radiocommunicationoperationalstatus_lat_jpzwcj.id
  where master_join_hetlca.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_kqepvt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgdfxn.*) AS annotation
  from master_join master_join_ohkfdf
  join notes.note_view notes_note_lat_lgdfxn on master_join_ohkfdf.target_id = notes_note_lat_lgdfxn.id
  where master_join_ohkfdf.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_adeihx on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['notes.note_view', 'shared.circlesector_view', 'geometry.surface_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_iltigf.title as varchar), '(' || service_radiocommunicationchannel_pt_iltigf.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_iltigf.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_ovlwby.title as varchar), '(' || navaids_points_specialnavigationstation_pt_ovlwby.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_ovlwby.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_vazudm.title as varchar), '(' || surveillance_precisionapproachradar_pt_vazudm.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_vazudm.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_vhlobd.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_vhlobd.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_vhlobd.href AS equipmentradar_href,
    shared_circlesector_view_ddiofb.sector as sector,
    geometry_surface_view_anedwp.geom as extent_geom,
    geometry_surface_view_anedwp.attr as extent,
    notes_note_view_weoila.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_iltigf on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_iltigf.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_ovlwby on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_ovlwby.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_vazudm on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_vazudm.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_vhlobd on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_vhlobd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_tpecja.*) as sector
  from master_join master_join_vxvypx
  join shared.circlesector_view shared_circlesector_lat_tpecja on master_join_vxvypx.target_id = shared_circlesector_lat_tpecja.id
  where master_join_vxvypx.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_ddiofb on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_dtmvcn.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_dtmvcn.id,
      'horizontalAccuracy', geometry_surface_lat_dtmvcn.horizontalAccuracy
    )) AS attr
  from master_join master_join_iwmrbr
  join geometry.surface_view geometry_surface_lat_dtmvcn on master_join_iwmrbr.target_id = geometry_surface_lat_dtmvcn.id
  where master_join_iwmrbr.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_anedwp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsnaqa.*) AS annotation
  from master_join master_join_zrwtae
  join notes.note_view notes_note_lat_bsnaqa on master_join_zrwtae.target_id = notes_note_lat_bsnaqa.id
  where master_join_zrwtae.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_weoila on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_mqytip.title as varchar), '(' || airport_heliport_airportheliport_pt_mqytip.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_mqytip.href AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_trmmzb.*) AS surfaceproperties,
    geometry_elevatedsurface_view_ecoznv.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_ecoznv.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_ecoznv.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_ecoznv.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_ecoznv.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_ecoznv.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_gnjxzy.accessiblestand as accessiblestand,
    notes_note_view_gxbpvj.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mqytip on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_mqytip.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_trmmzb on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_trmmzb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ecoznv on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_ecoznv.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_innisd.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_innisd.title AS varchar), '(' || airport_heliport_aircraftstand_lat_innisd.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_innisd.href
  )) as accessiblestand  from master_join master_join_oxmsux
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_innisd on master_join_oxmsux.target_id = airport_heliport_aircraftstand_lat_innisd.id
  where master_join_oxmsux.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_gnjxzy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eghosg.*) AS annotation
  from master_join master_join_liuoag
  join notes.note_view notes_note_lat_eghosg on master_join_liuoag.target_id = notes_note_lat_eghosg.id
  where master_join_liuoag.source_id = airport_heliport.road_ts.id
) as notes_note_view_gxbpvj on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_bqhkuo.title as varchar), '(' || navaids_points_dme_pt_bqhkuo.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_bqhkuo.href AS referenceddme_href,
    to_jsonb(routes_routeportion_view_ofxpys.*) AS applicablerouteportion,
    notes_note_view_gyuzjd.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_bqhkuo on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_bqhkuo.id
left join routes.routeportion_view routes_routeportion_view_ofxpys on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_ofxpys.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dlhwbw.*) AS annotation
  from master_join master_join_sbmgmm
  join notes.note_view notes_note_lat_dlhwbw on master_join_sbmgmm.target_id = notes_note_lat_dlhwbw.id
  where master_join_sbmgmm.source_id = routes.routedme_ts.id
) as notes_note_view_gyuzjd on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['geometry.curve_view', 'notes.note_view', 'routes.routeavailability_view', 'navaids_points.enroutesegmentpoint_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_ifbslv.*) AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_bmvztw.*) AS end,
    coalesce(cast(routes_route_pt_rjaevh.title as varchar), '(' || routes_route_pt_rjaevh.nilreason[1] || ')') AS routeformed,
    routes_route_pt_rjaevh.href AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_enlyud.*) AS evaluationarea,
    geometry_curve_view_csfyko.geom AS curveextent_geom,
    geometry_curve_view_csfyko.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_wtmbpr.availability as availability,
    notes_note_view_cckfka.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_ifbslv on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_ifbslv.id
left join routes.route_pt routes_route_pt_rjaevh on routes.routesegment_ts.routeformed_id = routes_route_pt_rjaevh.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_enlyud on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_enlyud.id
left join geometry.curve_view geometry_curve_view_csfyko on routes.routesegment_ts.curveextent_id = geometry_curve_view_csfyko.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_bmvztw on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_bmvztw.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_hmaewp.*) as availability
  from master_join master_join_phxtqj
  join routes.routeavailability_view routes_routeavailability_lat_hmaewp on master_join_phxtqj.target_id = routes_routeavailability_lat_hmaewp.id
  where master_join_phxtqj.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_wtmbpr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thhtvj.*) AS annotation
  from master_join master_join_mfdcad
  join notes.note_view notes_note_lat_thhtvj on master_join_mfdcad.target_id = notes_note_lat_thhtvj.id
  where master_join_mfdcad.source_id = routes.routesegment_ts.id
) as notes_note_view_cckfka on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_tfgtub.title as varchar), '(' || organisation_organisationauthority_pt_tfgtub.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_tfgtub.href AS userorganisation_href,
    notes_note_view_yixpfk.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tfgtub on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_tfgtub.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fzgzgj.*) AS annotation
  from master_join master_join_zowewo
  join notes.note_view notes_note_lat_fzgzgj on master_join_zowewo.target_id = notes_note_lat_fzgzgj.id
  where master_join_zowewo.source_id = routes.route_ts.id
) as notes_note_view_yixpfk on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    airport_heliport_airportheliport_pt_ccctjb.affectedlocation as affectedlocation,
    airspace_airspace_pt_fwzlaf.affectedarea as affectedarea,
    notes_note_view_zxwjcp.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fegiuk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fegiuk.title AS varchar), '(' || airport_heliport_airportheliport_lat_fegiuk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fegiuk.href
  )) as affectedlocation  from master_join master_join_zrrfla
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fegiuk on master_join_zrrfla.target_id = airport_heliport_airportheliport_lat_fegiuk.id
  where master_join_zrrfla.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_ccctjb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_vbirze.id,
      'title', coalesce(cast(airspace_airspace_lat_vbirze.title AS varchar), '(' || airspace_airspace_lat_vbirze.nilreason[1] || ')'),
      'href', airspace_airspace_lat_vbirze.href
  )) as affectedarea  from master_join master_join_cdnsnj
  join airspace.airspace_pt airspace_airspace_lat_vbirze on master_join_cdnsnj.target_id = airspace_airspace_lat_vbirze.id
  where master_join_cdnsnj.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_fwzlaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kjmkmp.*) AS annotation
  from master_join master_join_neozag
  join notes.note_view notes_note_lat_kjmkmp on master_join_neozag.target_id = notes_note_lat_kjmkmp.id
  where master_join_neozag.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_zxwjcp on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_qmxykx.title as varchar), '(' || airport_heliport_runwaydirection_pt_qmxykx.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_qmxykx.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_rcrnit.geom AS extent_geom,
    geometry_elevatedsurface_view_rcrnit.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rcrnit.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rcrnit.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rcrnit.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rcrnit.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_itojem.*) AS surfaceproperties,
    notes_note_view_kczmbx.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_qmxykx on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_qmxykx.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rcrnit on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_rcrnit.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_itojem on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_itojem.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wphgad.*) AS annotation
  from master_join master_join_zmzffb
  join notes.note_view notes_note_lat_wphgad on master_join_zmzffb.target_id = notes_note_lat_wphgad.id
  where master_join_zmzffb.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_kczmbx on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.runwaydeclareddistance_view', 'airport_heliport.navaidequipmentdistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_jfzxfe.geom AS location_geom,
    geometry_elevatedpoint_view_jfzxfe.longitude AS location_longitude,
    geometry_elevatedpoint_view_jfzxfe.latitude AS location_latitude,
    geometry_elevatedpoint_view_jfzxfe.elevation AS location_elevation,
    geometry_elevatedpoint_view_jfzxfe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jfzxfe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jfzxfe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jfzxfe.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_dxhbzi.title as varchar), '(' || airport_heliport_runwaydirection_pt_dxhbzi.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_dxhbzi.href AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_erwhuw.associateddeclareddistance as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_nusfqb.navaidequipment as navaidequipment,
    notes_note_view_ywaoec.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jfzxfe on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_jfzxfe.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dxhbzi on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_dxhbzi.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_qpahkv.*) as associateddeclareddistance
  from master_join master_join_bieace
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_qpahkv on master_join_bieace.target_id = airport_heliport_runwaydeclareddistance_lat_qpahkv.id
  where master_join_bieace.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_erwhuw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_avjbil.*) as navaidequipment
  from master_join master_join_djjuwq
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_avjbil on master_join_djjuwq.target_id = airport_heliport_navaidequipmentdistance_lat_avjbil.id
  where master_join_djjuwq.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_nusfqb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqeuld.*) AS annotation
  from master_join master_join_yudknm
  join notes.note_view notes_note_lat_gqeuld on master_join_yudknm.target_id = notes_note_lat_gqeuld.id
  where master_join_yudknm.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_ywaoec on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_lcsfhi.title as varchar), '(' || airport_heliport_runwaydirection_pt_lcsfhi.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_lcsfhi.href AS associatedrunwaydirection_href,
    shared_lightelement_view_sidpqm.element as element,
    airport_heliport_groundlightingavailability_view_nzfmnf.availability as availability,
    notes_note_view_zcgdpt.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_lcsfhi on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_lcsfhi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_henlfj.*) as element
  from master_join master_join_wsdqgt
  join shared.lightelement_view shared_lightelement_lat_henlfj on master_join_wsdqgt.target_id = shared_lightelement_lat_henlfj.id
  where master_join_wsdqgt.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_sidpqm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_woiszs.*) as availability
  from master_join master_join_vptutk
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_woiszs on master_join_vptutk.target_id = airport_heliport_groundlightingavailability_lat_woiszs.id
  where master_join_vptutk.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_nzfmnf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_djtyod.*) AS annotation
  from master_join master_join_pxjzcg
  join notes.note_view notes_note_lat_djtyod on master_join_pxjzcg.target_id = notes_note_lat_djtyod.id
  where master_join_pxjzcg.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_zcgdpt on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_gfdvyb.title as varchar), '(' || airport_heliport_runway_pt_gfdvyb.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_gfdvyb.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_psqrlj.title as varchar), '(' || airport_heliport_runwayelement_pt_psqrlj.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_psqrlj.href AS startingelement_href,
    notes_note_view_bxlszq.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_wwvvle.availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_gfdvyb on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_gfdvyb.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_psqrlj on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_psqrlj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_degboq.*) AS annotation
  from master_join master_join_qvbbtx
  join notes.note_view notes_note_lat_degboq on master_join_qvbbtx.target_id = notes_note_lat_degboq.id
  where master_join_qvbbtx.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_bxlszq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_iyonoi.*) as availability
  from master_join master_join_csemxj
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_iyonoi on master_join_csemxj.target_id = airport_heliport_manoeuvringareaavailability_lat_iyonoi.id
  where master_join_csemxj.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_wwvvle on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_dqwntr.*) AS surfaceproperties,
    geometry_elevatedsurface_view_rdzrhg.geom AS extent_geom,
    geometry_elevatedsurface_view_rdzrhg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rdzrhg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rdzrhg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rdzrhg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rdzrhg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_szllqn.associatedrunway as associatedrunway,
    notes_note_view_oikuxa.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_vespzd.availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_dqwntr on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_dqwntr.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rdzrhg on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_rdzrhg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_iiobvm.id,
      'title', coalesce(cast(airport_heliport_runway_lat_iiobvm.title AS varchar), '(' || airport_heliport_runway_lat_iiobvm.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_iiobvm.href
  )) as associatedrunway  from master_join master_join_ebjzoe
  join airport_heliport.runway_pt airport_heliport_runway_lat_iiobvm on master_join_ebjzoe.target_id = airport_heliport_runway_lat_iiobvm.id
  where master_join_ebjzoe.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_szllqn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qsfpii.*) AS annotation
  from master_join master_join_uunzso
  join notes.note_view notes_note_lat_qsfpii on master_join_uunzso.target_id = notes_note_lat_qsfpii.id
  where master_join_uunzso.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_oikuxa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_jaciqx.*) as availability
  from master_join master_join_phuhkh
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_jaciqx on master_join_phuhkh.target_id = airport_heliport_manoeuvringareaavailability_lat_jaciqx.id
  where master_join_phuhkh.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_vespzd on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_rtyoak.title as varchar), '(' || airport_heliport_runway_pt_rtyoak.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_rtyoak.href AS markedrunway_href,
    airport_heliport_markingelement_view_qbwliv.element as element,
    notes_note_view_hzamjw.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_rtyoak on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_rtyoak.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_akdaep.*) as element
  from master_join master_join_xpjxqr
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_akdaep on master_join_xpjxqr.target_id = airport_heliport_markingelement_lat_akdaep.id
  where master_join_xpjxqr.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_qbwliv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jfnujs.*) AS annotation
  from master_join master_join_fpsoti
  join notes.note_view notes_note_lat_jfnujs on master_join_fpsoti.target_id = notes_note_lat_jfnujs.id
  where master_join_fpsoti.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_hzamjw on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_ezdvsw.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_ezdvsw.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_ezdvsw.href AS lightedarea_href,
    shared_lightelement_view_uxsxxc.element as element,
    airport_heliport_groundlightingavailability_view_ipjyrx.availability as availability,
    notes_note_view_apqgwi.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_ezdvsw on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_ezdvsw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_itwjmn.*) as element
  from master_join master_join_gfncnt
  join shared.lightelement_view shared_lightelement_lat_itwjmn on master_join_gfncnt.target_id = shared_lightelement_lat_itwjmn.id
  where master_join_gfncnt.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_uxsxxc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_whmefc.*) as availability
  from master_join master_join_oxkbao
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_whmefc on master_join_oxkbao.target_id = airport_heliport_groundlightingavailability_lat_whmefc.id
  where master_join_oxkbao.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ipjyrx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wlqxhc.*) AS annotation
  from master_join master_join_aulcxm
  join notes.note_view notes_note_lat_wlqxhc on master_join_aulcxm.target_id = notes_note_lat_wlqxhc.id
  where master_join_aulcxm.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_apqgwi on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_myliin.*) AS surfaceproperties,
    geometry_elevatedsurface_view_eytcff.geom AS extent_geom,
    geometry_elevatedsurface_view_eytcff.elevation AS extent_elevation,
    geometry_elevatedsurface_view_eytcff.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_eytcff.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_eytcff.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_eytcff.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_gqfucb.title as varchar), '(' || airport_heliport_runwaydirection_pt_gqfucb.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_gqfucb.href AS protectedrunwaydirection_href,
    notes_note_view_epfkin.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_myliin on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_myliin.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_eytcff on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_eytcff.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_gqfucb on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_gqfucb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_glocvq.*) AS annotation
  from master_join master_join_owwrpb
  join notes.note_view notes_note_lat_glocvq on master_join_owwrpb.target_id = notes_note_lat_glocvq.id
  where master_join_owwrpb.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_epfkin on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.runwaysectioncontamination_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaycontamination_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_larahs.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_dyhyel.title as varchar), '(' || airport_heliport_airportheliport_pt_dyhyel.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_dyhyel.href AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_odbhnm.overallcontaminant as overallcontaminant,
    notes_note_view_flvlmp.annotation as annotation,
    airport_heliport_runwaysectioncontamination_view_qjuole.areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_larahs on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_larahs.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dyhyel on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_dyhyel.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_pgrmjt.*) as overallcontaminant
  from master_join master_join_igaeof
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_pgrmjt on master_join_igaeof.target_id = airport_heliport_runwaycontamination_lat_pgrmjt.id
  where master_join_igaeof.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_odbhnm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oaqwrk.*) AS annotation
  from master_join master_join_etttgd
  join notes.note_view notes_note_lat_oaqwrk on master_join_etttgd.target_id = notes_note_lat_oaqwrk.id
  where master_join_etttgd.source_id = airport_heliport.runway_ts.id
) as notes_note_view_flvlmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_xamzwg.*) as areacontaminant
  from master_join master_join_swxrbo
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_xamzwg on master_join_swxrbo.target_id = airport_heliport_runwaysectioncontamination_lat_xamzwg.id
  where master_join_swxrbo.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_qjuole on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_nqkcqc.geom AS location_geom,
    geometry_elevatedpoint_view_nqkcqc.longitude AS location_longitude,
    geometry_elevatedpoint_view_nqkcqc.latitude AS location_latitude,
    geometry_elevatedpoint_view_nqkcqc.elevation AS location_elevation,
    geometry_elevatedpoint_view_nqkcqc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nqkcqc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nqkcqc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nqkcqc.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_itkmwm.associatedrunwaydirection as associatedrunwaydirection,
    notes_note_view_ykopxo.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nqkcqc on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_nqkcqc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_jctzvh.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_jctzvh.title AS varchar), '(' || airport_heliport_runwaydirection_lat_jctzvh.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_jctzvh.href
  )) as associatedrunwaydirection  from master_join master_join_ptrjwv
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_jctzvh on master_join_ptrjwv.target_id = airport_heliport_runwaydirection_lat_jctzvh.id
  where master_join_ptrjwv.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_itkmwm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqlewe.*) AS annotation
  from master_join master_join_aygyxp
  join notes.note_view notes_note_lat_aqlewe on master_join_aygyxp.target_id = notes_note_lat_aqlewe.id
  where master_join_aygyxp.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_ykopxo on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['notes.note_view', 'geometry.point_view', 'procedure.safealtitudeareasector_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_nfojev.title as varchar), '(' || navaids_points_designatedpoint_pt_nfojev.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nfojev.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ymzxsy.title as varchar), '(' || navaids_points_navaid_pt_ymzxsy.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_ymzxsy.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_twjrxw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_twjrxw.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_twjrxw.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mffojg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mffojg.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mffojg.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_llaibl.title as varchar), '(' || airport_heliport_airportheliport_pt_llaibl.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_llaibl.href AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_psmcui.location as location,
    geometry_point_view_pfoliy.geom AS centrepointposition_geom,
    geometry_point_view_pfoliy.longitude AS centrepointposition_longitude,
    geometry_point_view_pfoliy.latitude AS centrepointposition_latitude,
    geometry_point_view_pfoliy.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_rqynfk.sector as sector,
    notes_note_view_vsybqc.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nfojev on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nfojev.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ymzxsy on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_ymzxsy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_twjrxw on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_twjrxw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mffojg on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mffojg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_llaibl on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_llaibl.id
left join geometry.point_view geometry_point_view_pfoliy on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_pfoliy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_kdipde.*) as sector
  from master_join master_join_vjfbdy
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_kdipde on master_join_vjfbdy.target_id = procedure_safealtitudeareasector_lat_kdipde.id
  where master_join_vjfbdy.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_rqynfk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ybomdm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ybomdm.title AS varchar), '(' || airport_heliport_airportheliport_lat_ybomdm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ybomdm.href
  )) as location  from master_join master_join_hjautx
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ybomdm on master_join_hjautx.target_id = airport_heliport_airportheliport_lat_ybomdm.id
  where master_join_hjautx.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_psmcui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uefsrn.*) AS annotation
  from master_join master_join_acuzpf
  join notes.note_view notes_note_lat_uefsrn on master_join_acuzpf.target_id = notes_note_lat_uefsrn.id
  where master_join_acuzpf.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_vsybqc on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_ggvwlx.geom AS location_geom,
    geometry_elevatedpoint_view_ggvwlx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ggvwlx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ggvwlx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ggvwlx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ggvwlx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ggvwlx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ggvwlx.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_beuweg.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_dklbxo.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_vtnyvh.availability as availability,
    notes_note_view_dfnobz.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ggvwlx on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_ggvwlx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nkcsym.*) as authority
  from master_join master_join_ylifuo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nkcsym on master_join_ylifuo.target_id = navaids_points_authorityfornavaidequipment_lat_nkcsym.id
  where master_join_ylifuo.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_beuweg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_fdulfm.*) as monitoring
  from master_join master_join_ussmoy
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_fdulfm on master_join_ussmoy.target_id = navaids_points_navaidequipmentmonitoring_lat_fdulfm.id
  where master_join_ussmoy.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_dklbxo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hkzzal.*) as availability
  from master_join master_join_hapmiz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_hkzzal on master_join_hapmiz.target_id = navaids_points_navaidoperationalstatus_lat_hkzzal.id
  where master_join_hapmiz.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_vtnyvh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sdvkqs.*) AS annotation
  from master_join master_join_ynelgm
  join notes.note_view notes_note_lat_sdvkqs on master_join_ynelgm.target_id = notes_note_lat_sdvkqs.id
  where master_join_ynelgm.source_id = navaids_points.sdf_ts.id
) as notes_note_view_dfnobz on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_hgsvtg.geom AS extent_geom,
    geometry_elevatedsurface_view_hgsvtg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hgsvtg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hgsvtg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hgsvtg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hgsvtg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_tlubmz.rampsite as rampsite,
    airport_heliport_floatingdocksite_pt_qvdjxg.docksite as docksite,
    notes_note_view_idnfit.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_aasrqr.availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hgsvtg on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_hgsvtg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_zzcoui.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_zzcoui.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_zzcoui.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_zzcoui.href
  )) as rampsite  from master_join master_join_xmrwpl
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_zzcoui on master_join_xmrwpl.target_id = airport_heliport_seaplanerampsite_lat_zzcoui.id
  where master_join_xmrwpl.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_tlubmz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_hnndlo.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_hnndlo.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_hnndlo.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_hnndlo.href
  )) as docksite  from master_join master_join_ewsfae
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_hnndlo on master_join_ewsfae.target_id = airport_heliport_floatingdocksite_lat_hnndlo.id
  where master_join_ewsfae.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_qvdjxg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vyfxvr.*) AS annotation
  from master_join master_join_afvwwg
  join notes.note_view notes_note_lat_vyfxvr on master_join_afvwwg.target_id = notes_note_lat_vyfxvr.id
  where master_join_afvwwg.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_idnfit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_mytpeb.*) as availability
  from master_join master_join_kirong
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_mytpeb on master_join_kirong.target_id = airport_heliport_manoeuvringareaavailability_lat_mytpeb.id
  where master_join_kirong.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_aasrqr on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_jxgwyj.geom AS extent_geom,
    geometry_elevatedsurface_view_jxgwyj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jxgwyj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jxgwyj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jxgwyj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jxgwyj.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_zcezrx.geom AS centreline_geom,
    geometry_elevatedcurve_view_zcezrx.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_zcezrx.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_zcezrx.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_zcezrx.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_zcezrx.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_oxoexl.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jxgwyj on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_jxgwyj.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_zcezrx on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_zcezrx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wocaif.*) AS annotation
  from master_join master_join_blftlr
  join notes.note_view notes_note_lat_wocaif on master_join_blftlr.target_id = notes_note_lat_wocaif.id
  where master_join_blftlr.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_oxoexl on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['routes.routeportion_view', 'notes.note_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_chzdyf.geom AS location_geom,
    geometry_elevatedpoint_view_chzdyf.longitude AS location_longitude,
    geometry_elevatedpoint_view_chzdyf.latitude AS location_latitude,
    geometry_elevatedpoint_view_chzdyf.elevation AS location_elevation,
    geometry_elevatedpoint_view_chzdyf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_chzdyf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_chzdyf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_chzdyf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_velxgu.title as varchar), '(' || organisation_unit_pt_velxgu.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_velxgu.href AS serviceprovider_href,
    service_callsigndetail_view_angckn.callsign as callsign,
    service_radiocommunicationchannel_pt_rhugus.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_fakilv.availability as availability,
    notes_note_view_schkta.annotation as annotation,
    airspace_airspace_pt_psvsfb.clientairspace as clientairspace,
    routes_routeportion_view_rkkblu.clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_chzdyf on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_chzdyf.id
left join organisation.unit_pt organisation_unit_pt_velxgu on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_velxgu.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_vswlqs.*) as callsign
  from master_join master_join_acfchq
  join service.callsigndetail_view service_callsigndetail_lat_vswlqs on master_join_acfchq.target_id = service_callsigndetail_lat_vswlqs.id
  where master_join_acfchq.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_angckn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_gufzli.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_gufzli.title AS varchar), '(' || service_radiocommunicationchannel_lat_gufzli.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_gufzli.href
  )) as radiocommunication  from master_join master_join_gfsqvp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_gufzli on master_join_gfsqvp.target_id = service_radiocommunicationchannel_lat_gufzli.id
  where master_join_gfsqvp.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_rhugus on TRUE
left join lateral(
  select
  from master_join master_join_qcadus
  join shared.contactinformation_view shared_contactinformation_lat_cdjdqk on master_join_qcadus.target_id = shared_contactinformation_lat_cdjdqk.id
  where master_join_qcadus.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_eyxsvg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hsupjw.*) as availability
  from master_join master_join_ypwcnw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hsupjw on master_join_ypwcnw.target_id = service_serviceoperationalstatus_lat_hsupjw.id
  where master_join_ypwcnw.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_fakilv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jhlnik.*) AS annotation
  from master_join master_join_rhbmnk
  join notes.note_view notes_note_lat_jhlnik on master_join_rhbmnk.target_id = notes_note_lat_jhlnik.id
  where master_join_rhbmnk.source_id = service.searchrescueservice_ts.id
) as notes_note_view_schkta on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_dopoqw.id,
      'title', coalesce(cast(airspace_airspace_lat_dopoqw.title AS varchar), '(' || airspace_airspace_lat_dopoqw.nilreason[1] || ')'),
      'href', airspace_airspace_lat_dopoqw.href
  )) as clientairspace  from master_join master_join_bcowyi
  join airspace.airspace_pt airspace_airspace_lat_dopoqw on master_join_bcowyi.target_id = airspace_airspace_lat_dopoqw.id
  where master_join_bcowyi.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_psvsfb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_brkmcq.*) as clientroute
  from master_join master_join_rcliqz
  join routes.routeportion_view routes_routeportion_lat_brkmcq on master_join_rcliqz.target_id = routes_routeportion_lat_brkmcq.id
  where master_join_rcliqz.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_rkkblu on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'shared.contactinformation_view', 'notes.note_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_ukvmhg.geom AS location_geom,
    geometry_elevatedpoint_view_ukvmhg.longitude AS location_longitude,
    geometry_elevatedpoint_view_ukvmhg.latitude AS location_latitude,
    geometry_elevatedpoint_view_ukvmhg.elevation AS location_elevation,
    geometry_elevatedpoint_view_ukvmhg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ukvmhg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ukvmhg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ukvmhg.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_cgelcu.annotation as annotation,
    surveillance_surveillancegroundstation_view_qadgbl.groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ukvmhg on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ukvmhg.id
left join lateral(
  select
  from master_join master_join_gbsdgn
  join shared.contactinformation_view shared_contactinformation_lat_urzqhw on master_join_gbsdgn.target_id = shared_contactinformation_lat_urzqhw.id
  where master_join_gbsdgn.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_yjndjg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ealaln.*) AS annotation
  from master_join master_join_ktoudy
  join notes.note_view notes_note_lat_ealaln on master_join_ktoudy.target_id = notes_note_lat_ealaln.id
  where master_join_ktoudy.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_cgelcu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_nbkyfo.*) as groundstation
  from master_join master_join_lifxdw
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_nbkyfo on master_join_lifxdw.target_id = surveillance_surveillancegroundstation_lat_nbkyfo.id
  where master_join_lifxdw.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_qadgbl on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_tedekz.title as varchar), '(' || airspace_airspace_pt_tedekz.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_tedekz.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_rjketc.title as varchar), '(' || navaids_points_designatedpoint_pt_rjketc.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rjketc.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_sdzitz.title as varchar), '(' || navaids_points_navaid_pt_sdzitz.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_sdzitz.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ydhspe.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ydhspe.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_ydhspe.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_syupam.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_syupam.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_syupam.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mkoxnf.title as varchar), '(' || airport_heliport_airportheliport_pt_mkoxnf.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_mkoxnf.href AS locationairportreferencepoint_href,
    geometry_point_view_kmcsgj.geom AS locationposition_geom,
    geometry_point_view_kmcsgj.longitude AS locationposition_longitude,
    geometry_point_view_kmcsgj.latitude AS locationposition_latitude,
    geometry_point_view_kmcsgj.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_goloim.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_tedekz on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_tedekz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rjketc on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rjketc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_sdzitz on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_sdzitz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ydhspe on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ydhspe.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_syupam on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_syupam.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mkoxnf on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_mkoxnf.id
left join geometry.point_view geometry_point_view_kmcsgj on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_kmcsgj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gjgspi.*) AS annotation
  from master_join master_join_uolazl
  join notes.note_view notes_note_lat_gjgspi on master_join_uolazl.target_id = notes_note_lat_gjgspi.id
  where master_join_uolazl.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_goloim on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_mnizdv.title as varchar), '(' || organisation_organisationauthority_pt_mnizdv.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_mnizdv.href AS authority_href,
    notes_note_view_yhbhlq.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mnizdv on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_mnizdv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cxbjxf.*) AS annotation
  from master_join master_join_xgujyt
  join notes.note_view notes_note_lat_cxbjxf on master_join_xgujyt.target_id = notes_note_lat_cxbjxf.id
  where master_join_xgujyt.source_id = shared.specialdate_ts.id
) as notes_note_view_yhbhlq on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['navaids_points.authorityforspecialnavigationstation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_yitilo.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_yitilo.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_yitilo.href AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_jzhxkq.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_ybdfwq.geom AS position_geom,
    geometry_elevatedpoint_view_ybdfwq.longitude AS position_longitude,
    geometry_elevatedpoint_view_ybdfwq.latitude AS position_latitude,
    geometry_elevatedpoint_view_ybdfwq.elevation AS position_elevation,
    geometry_elevatedpoint_view_ybdfwq.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ybdfwq.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ybdfwq.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ybdfwq.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_jvstun.availability as availability,
    notes_note_view_qyuohv.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_yitilo on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_yitilo.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_jzhxkq on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_jzhxkq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ybdfwq on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_ybdfwq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_nagorq.*) as availability
  from master_join master_join_eqjhvl
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_nagorq on master_join_eqjhvl.target_id = navaids_points_specialnavigationstationstatus_lat_nagorq.id
  where master_join_eqjhvl.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_jvstun on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ourtsg.*) AS annotation
  from master_join master_join_yiuoxd
  join notes.note_view notes_note_lat_ourtsg on master_join_yiuoxd.target_id = notes_note_lat_ourtsg.id
  where master_join_yiuoxd.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_qyuohv on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_zdwrgv.*) AS responsibleorganisation,
    notes_note_view_dbnwhw.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_zdwrgv on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_zdwrgv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tdtejh.*) AS annotation
  from master_join master_join_gphomm
  join notes.note_view notes_note_lat_tdtejh on master_join_gphomm.target_id = notes_note_lat_tdtejh.id
  where master_join_gphomm.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_dbnwhw on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_spmdxn.title as varchar), '(' || navaids_points_navaid_pt_spmdxn.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_spmdxn.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_oyknlp.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_oyknlp.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_oyknlp.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ankmyu.title as varchar), '(' || surveillance_radarsystem_pt_ankmyu.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_ankmyu.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_rbkrmh.title as varchar), '(' || procedure_safealtitudearea_pt_rbkrmh.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_rbkrmh.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ckaefn.*) AS arrival,
    procedure_procedureavailability_view_yujcju.availability as availability,
    airport_heliport_airportheliport_pt_nlvaim.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_birdnu.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_flutrc.flighttransition as flighttransition,
    notes_note_view_okbnvm.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_spmdxn on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_spmdxn.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_oyknlp on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_oyknlp.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ankmyu on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ankmyu.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_rbkrmh on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_rbkrmh.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ckaefn on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_ckaefn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_jcoddy.*) as availability
  from master_join master_join_ieeckv
  join procedure.procedureavailability_view procedure_procedureavailability_lat_jcoddy on master_join_ieeckv.target_id = procedure_procedureavailability_lat_jcoddy.id
  where master_join_ieeckv.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_yujcju on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_awxtfv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_awxtfv.title AS varchar), '(' || airport_heliport_airportheliport_lat_awxtfv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_awxtfv.href
  )) as airportheliport  from master_join master_join_iapdsp
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_awxtfv on master_join_iapdsp.target_id = airport_heliport_airportheliport_lat_awxtfv.id
  where master_join_iapdsp.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_nlvaim on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_eiuztn.*) as aircraftcharacteristic
  from master_join master_join_gxcluo
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_eiuztn on master_join_gxcluo.target_id = shared_aircraftcharacteristic_lat_eiuztn.id
  where master_join_gxcluo.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_birdnu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_ulowyk.*) as flighttransition
  from master_join master_join_sxkyrn
  join procedure.proceduretransition_view procedure_proceduretransition_lat_ulowyk on master_join_sxkyrn.target_id = procedure_proceduretransition_lat_ulowyk.id
  where master_join_sxkyrn.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_flutrc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kaszdu.*) AS annotation
  from master_join master_join_xnqibp
  join notes.note_view notes_note_lat_kaszdu on master_join_xnqibp.target_id = notes_note_lat_kaszdu.id
  where master_join_xnqibp.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_okbnvm on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'notes.note_view', 'procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_mtyfvm.title as varchar), '(' || navaids_points_navaid_pt_mtyfvm.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_mtyfvm.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qaiqwe.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qaiqwe.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qaiqwe.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_cyenkw.title as varchar), '(' || surveillance_radarsystem_pt_cyenkw.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_cyenkw.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_zlrtoy.title as varchar), '(' || procedure_safealtitudearea_pt_zlrtoy.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_zlrtoy.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_bgkuvq.*) AS takeoff,
    procedure_procedureavailability_view_xahqxj.availability as availability,
    airport_heliport_airportheliport_pt_dwbycz.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_ytppqg.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_ofecos.flighttransition as flighttransition,
    notes_note_view_zrakvi.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mtyfvm on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_mtyfvm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qaiqwe on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qaiqwe.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_cyenkw on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_cyenkw.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_zlrtoy on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_zlrtoy.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_bgkuvq on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_bgkuvq.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_ugdmhj.*) as availability
  from master_join master_join_bsffih
  join procedure.procedureavailability_view procedure_procedureavailability_lat_ugdmhj on master_join_bsffih.target_id = procedure_procedureavailability_lat_ugdmhj.id
  where master_join_bsffih.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_xahqxj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_gvvyja.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_gvvyja.title AS varchar), '(' || airport_heliport_airportheliport_lat_gvvyja.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_gvvyja.href
  )) as airportheliport  from master_join master_join_yafckw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_gvvyja on master_join_yafckw.target_id = airport_heliport_airportheliport_lat_gvvyja.id
  where master_join_yafckw.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_dwbycz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vztntd.*) as aircraftcharacteristic
  from master_join master_join_vgfffl
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_vztntd on master_join_vgfffl.target_id = shared_aircraftcharacteristic_lat_vztntd.id
  where master_join_vgfffl.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_ytppqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_dpianr.*) as flighttransition
  from master_join master_join_ypyjwd
  join procedure.proceduretransition_view procedure_proceduretransition_lat_dpianr on master_join_ypyjwd.target_id = procedure_proceduretransition_lat_dpianr.id
  where master_join_ypyjwd.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_ofecos on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mcczko.*) AS annotation
  from master_join master_join_miebig
  join notes.note_view notes_note_lat_mcczko on master_join_miebig.target_id = notes_note_lat_mcczko.id
  where master_join_miebig.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_zrakvi on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_zrbpah.title as varchar), '(' || shared_standardleveltable_pt_zrbpah.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_zrbpah.href AS leveltable_href,
    shared_standardlevel_view_jqfyzg.level as level,
    notes_note_view_utlbio.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_zrbpah on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_zrbpah.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_qqagcc.*) as level
  from master_join master_join_cdewht
  join shared.standardlevel_view shared_standardlevel_lat_qqagcc on master_join_cdewht.target_id = shared_standardlevel_lat_qqagcc.id
  where master_join_cdewht.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_jqfyzg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bplhmp.*) AS annotation
  from master_join master_join_dnpzkw
  join notes.note_view notes_note_lat_bplhmp on master_join_dnpzkw.target_id = notes_note_lat_bplhmp.id
  where master_join_dnpzkw.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_utlbio on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_yaqwpj.title as varchar), '(' || shared_standardlevelcolumn_pt_yaqwpj.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_yaqwpj.href AS applicablelevelcolumn_href,
    airspace_airspace_pt_wkzzoq.applicableairspace as applicableairspace,
    notes_note_view_spsxml.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_yaqwpj on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_yaqwpj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_enczuy.id,
      'title', coalesce(cast(airspace_airspace_lat_enczuy.title AS varchar), '(' || airspace_airspace_lat_enczuy.nilreason[1] || ')'),
      'href', airspace_airspace_lat_enczuy.href
  )) as applicableairspace  from master_join master_join_ozczbv
  join airspace.airspace_pt airspace_airspace_lat_enczuy on master_join_ozczbv.target_id = airspace_airspace_lat_enczuy.id
  where master_join_ozczbv.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_wkzzoq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_spmfcu.*) AS annotation
  from master_join master_join_hstvtz
  join notes.note_view notes_note_lat_spmfcu on master_join_hstvtz.target_id = notes_note_lat_spmfcu.id
  where master_join_hstvtz.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_spsxml on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    notes_note_view_fzoxqr.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jbgbqx.*) AS annotation
  from master_join master_join_nsmwbw
  join notes.note_view notes_note_lat_jbgbqx on master_join_nsmwbw.target_id = notes_note_lat_jbgbqx.id
  where master_join_nsmwbw.source_id = shared.standardleveltable_ts.id
) as notes_note_view_fzoxqr on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_ubrfaa.title as varchar), '(' || airport_heliport_aircraftstand_pt_ubrfaa.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_ubrfaa.href AS markedstand_href,
    airport_heliport_markingelement_view_dklxib.element as element,
    notes_note_view_fgvoux.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_ubrfaa on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_ubrfaa.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ggvbpz.*) as element
  from master_join master_join_qczsdt
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ggvbpz on master_join_qczsdt.target_id = airport_heliport_markingelement_lat_ggvbpz.id
  where master_join_qczsdt.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_dklxib on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwgppl.*) AS annotation
  from master_join master_join_luikju
  join notes.note_view notes_note_lat_nwgppl on master_join_luikju.target_id = notes_note_lat_nwgppl.id
  where master_join_luikju.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_fgvoux on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_ccasux.title as varchar), '(' || airport_heliport_airportheliport_pt_ccasux.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ccasux.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_ubtjtx.geom AS location_geom,
    geometry_elevatedpoint_view_ubtjtx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ubtjtx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ubtjtx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ubtjtx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ubtjtx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ubtjtx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ubtjtx.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_jlqkwz.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ccasux on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ccasux.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ubtjtx on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_ubtjtx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_keicue.*) AS annotation
  from master_join master_join_qktlda
  join notes.note_view notes_note_lat_keicue on master_join_qktlda.target_id = notes_note_lat_keicue.id
  where master_join_qktlda.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_jlqkwz on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_aznvwo.geom AS location_geom,
    geometry_elevatedpoint_view_aznvwo.longitude AS location_longitude,
    geometry_elevatedpoint_view_aznvwo.latitude AS location_latitude,
    geometry_elevatedpoint_view_aznvwo.elevation AS location_elevation,
    geometry_elevatedpoint_view_aznvwo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aznvwo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aznvwo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aznvwo.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_bekxua.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_qjrddh.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_stenvz.availability as availability,
    notes_note_view_mrbiuh.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aznvwo on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_aznvwo.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_kuwxsz.*) as authority
  from master_join master_join_abwuts
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_kuwxsz on master_join_abwuts.target_id = navaids_points_authorityfornavaidequipment_lat_kuwxsz.id
  where master_join_abwuts.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_bekxua on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_jccwrl.*) as monitoring
  from master_join master_join_tsgsdq
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_jccwrl on master_join_tsgsdq.target_id = navaids_points_navaidequipmentmonitoring_lat_jccwrl.id
  where master_join_tsgsdq.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_qjrddh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ubsnup.*) as availability
  from master_join master_join_airwba
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ubsnup on master_join_airwba.target_id = navaids_points_navaidoperationalstatus_lat_ubsnup.id
  where master_join_airwba.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_stenvz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhjhob.*) AS annotation
  from master_join master_join_rbxgkd
  join notes.note_view notes_note_lat_qhjhob on master_join_rbxgkd.target_id = notes_note_lat_qhjhob.id
  where master_join_rbxgkd.source_id = navaids_points.tacan_ts.id
) as notes_note_view_mrbiuh on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_ixydhp.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_ixydhp.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_ixydhp.href AS taxiholding_href,
    shared_lightelement_view_zfsdoo.element as element,
    airport_heliport_groundlightingavailability_view_wxqiwb.availability as availability,
    notes_note_view_xzqpez.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_ixydhp on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_ixydhp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_dawqsc.*) as element
  from master_join master_join_nhypse
  join shared.lightelement_view shared_lightelement_lat_dawqsc on master_join_nhypse.target_id = shared_lightelement_lat_dawqsc.id
  where master_join_nhypse.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_zfsdoo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_pqylzy.*) as availability
  from master_join master_join_fxftwc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_pqylzy on master_join_fxftwc.target_id = airport_heliport_groundlightingavailability_lat_pqylzy.id
  where master_join_fxftwc.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_wxqiwb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brfmgn.*) AS annotation
  from master_join master_join_eodvtd
  join notes.note_view notes_note_lat_brfmgn on master_join_eodvtd.target_id = notes_note_lat_brfmgn.id
  where master_join_eodvtd.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_xzqpez on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_bmwkpg.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_bmwkpg.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_bmwkpg.href AS markedtaxihold_href,
    airport_heliport_markingelement_view_swijhk.element as element,
    notes_note_view_fdqjcc.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_bmwkpg on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_bmwkpg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_zsqlkb.*) as element
  from master_join master_join_ldoavx
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_zsqlkb on master_join_ldoavx.target_id = airport_heliport_markingelement_lat_zsqlkb.id
  where master_join_ldoavx.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_swijhk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jznvxd.*) AS annotation
  from master_join master_join_jthtvw
  join notes.note_view notes_note_lat_jznvxd on master_join_jthtvw.target_id = notes_note_lat_jznvxd.id
  where master_join_jthtvw.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_fdqjcc on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_sqmgiq.title as varchar), '(' || airport_heliport_guidanceline_pt_sqmgiq.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_sqmgiq.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_pekzdr.geom AS location_geom,
    geometry_elevatedpoint_view_pekzdr.longitude AS location_longitude,
    geometry_elevatedpoint_view_pekzdr.latitude AS location_latitude,
    geometry_elevatedpoint_view_pekzdr.elevation AS location_elevation,
    geometry_elevatedpoint_view_pekzdr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pekzdr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pekzdr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pekzdr.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_jejzry.protectedrunway as protectedrunway,
    notes_note_view_kxisym.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_sqmgiq on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_sqmgiq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pekzdr on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_pekzdr.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_nymqmg.id,
      'title', coalesce(cast(airport_heliport_runway_lat_nymqmg.title AS varchar), '(' || airport_heliport_runway_lat_nymqmg.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_nymqmg.href
  )) as protectedrunway  from master_join master_join_bwhlpd
  join airport_heliport.runway_pt airport_heliport_runway_lat_nymqmg on master_join_bwhlpd.target_id = airport_heliport_runway_lat_nymqmg.id
  where master_join_bwhlpd.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_jejzry on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jhqwkm.*) AS annotation
  from master_join master_join_fowjmy
  join notes.note_view notes_note_lat_jhqwkm on master_join_fowjmy.target_id = notes_note_lat_jhqwkm.id
  where master_join_fowjmy.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_kxisym on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mlyono.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_ydhhyg.title as varchar), '(' || airport_heliport_taxiway_pt_ydhhyg.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_ydhhyg.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_yjeaaf.geom AS extent_geom,
    geometry_elevatedsurface_view_yjeaaf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_yjeaaf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_yjeaaf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_yjeaaf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_yjeaaf.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_uexwnf.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_crzdiq.availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mlyono on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mlyono.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_ydhhyg on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_ydhhyg.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yjeaaf on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_yjeaaf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_slivwk.*) AS annotation
  from master_join master_join_byndrt
  join notes.note_view notes_note_lat_slivwk on master_join_byndrt.target_id = notes_note_lat_slivwk.id
  where master_join_byndrt.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_uexwnf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_cfmzcb.*) as availability
  from master_join master_join_pmchiu
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_cfmzcb on master_join_pmchiu.target_id = airport_heliport_manoeuvringareaavailability_lat_cfmzcb.id
  where master_join_pmchiu.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_crzdiq on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_iamqth.title as varchar), '(' || airport_heliport_taxiway_pt_iamqth.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_iamqth.href AS lightedtaxiway_href,
    shared_lightelement_view_nacvvr.element as element,
    airport_heliport_groundlightingavailability_view_yfjxku.availability as availability,
    notes_note_view_guficc.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_iamqth on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_iamqth.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_xehtvt.*) as element
  from master_join master_join_azlrgo
  join shared.lightelement_view shared_lightelement_lat_xehtvt on master_join_azlrgo.target_id = shared_lightelement_lat_xehtvt.id
  where master_join_azlrgo.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_nacvvr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ualnke.*) as availability
  from master_join master_join_xgpllh
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ualnke on master_join_xgpllh.target_id = airport_heliport_groundlightingavailability_lat_ualnke.id
  where master_join_xgpllh.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_yfjxku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_moxpua.*) AS annotation
  from master_join master_join_ojuavu
  join notes.note_view notes_note_lat_moxpua on master_join_ojuavu.target_id = notes_note_lat_moxpua.id
  where master_join_ojuavu.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_guficc on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_jduvzw.title as varchar), '(' || airport_heliport_taxiway_pt_jduvzw.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_jduvzw.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_onljvv.title as varchar), '(' || airport_heliport_taxiwayelement_pt_onljvv.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_onljvv.href AS markedelement_href,
    airport_heliport_markingelement_view_hnyewi.element as element,
    notes_note_view_jtlwby.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_jduvzw on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_jduvzw.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_onljvv on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_onljvv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wmjqro.*) as element
  from master_join master_join_ysluav
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wmjqro on master_join_ysluav.target_id = airport_heliport_markingelement_lat_wmjqro.id
  where master_join_ysluav.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_hnyewi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mysxwm.*) AS annotation
  from master_join master_join_sztlwk
  join notes.note_view notes_note_lat_mysxwm on master_join_sztlwk.target_id = notes_note_lat_mysxwm.id
  where master_join_sztlwk.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_jtlwby on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.taxiwaycontamination_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_psvogi.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_nivrvi.title as varchar), '(' || airport_heliport_airportheliport_pt_nivrvi.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_nivrvi.href AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_orunyb.contaminant as contaminant,
    notes_note_view_sjzhkn.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_thknsl.availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_psvogi on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_psvogi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nivrvi on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_nivrvi.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_nzkmko.*) as contaminant
  from master_join master_join_dhplxk
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_nzkmko on master_join_dhplxk.target_id = airport_heliport_taxiwaycontamination_lat_nzkmko.id
  where master_join_dhplxk.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_orunyb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzraad.*) AS annotation
  from master_join master_join_ltlquo
  join notes.note_view notes_note_lat_wzraad on master_join_ltlquo.target_id = notes_note_lat_wzraad.id
  where master_join_ltlquo.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_sjzhkn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ryzrfu.*) as availability
  from master_join master_join_jqsxte
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ryzrfu on master_join_jqsxte.target_id = airport_heliport_manoeuvringareaavailability_lat_ryzrfu.id
  where master_join_jqsxte.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_thknsl on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['procedure.terminalarrivalareasector_view', 'notes.note_view', 'geometry.point_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_lrmrmk.title as varchar), '(' || navaids_points_designatedpoint_pt_lrmrmk.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_lrmrmk.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_roujzd.title as varchar), '(' || navaids_points_designatedpoint_pt_roujzd.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_roujzd.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_brygkj.title as varchar), '(' || navaids_points_navaid_pt_brygkj.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_brygkj.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_afrywp.title as varchar), '(' || navaids_points_navaid_pt_afrywp.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_afrywp.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xgvujc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xgvujc.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_xgvujc.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tvqczm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tvqczm.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_tvqczm.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_eqadth.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_eqadth.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_eqadth.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rfgxse.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rfgxse.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rfgxse.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yltsuk.title as varchar), '(' || airport_heliport_airportheliport_pt_yltsuk.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_yltsuk.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_svrxqu.title as varchar), '(' || airport_heliport_airportheliport_pt_svrxqu.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_svrxqu.href AS iafairportreferencepoint_href,
    geometry_point_view_vbsvbg.geom AS ifposition_geom,
    geometry_point_view_vbsvbg.longitude AS ifposition_longitude,
    geometry_point_view_vbsvbg.latitude AS ifposition_latitude,
    geometry_point_view_vbsvbg.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_bppbqv.geom AS iafposition_geom,
    geometry_point_view_bppbqv.longitude AS iafposition_longitude,
    geometry_point_view_bppbqv.latitude AS iafposition_latitude,
    geometry_point_view_bppbqv.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_olatgn.geom AS buffer_geom,
    geometry_surface_view_olatgn.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lwyncj.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lwyncj.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_lwyncj.href AS approachrnav_href,
    procedure_terminalarrivalareasector_view_kfaqbt.sector as sector,
    notes_note_view_lwfmcq.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lrmrmk on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lrmrmk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_brygkj on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_brygkj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xgvujc on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xgvujc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_eqadth on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_eqadth.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yltsuk on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_yltsuk.id
left join geometry.point_view geometry_point_view_vbsvbg on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_vbsvbg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_roujzd on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_roujzd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_afrywp on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_afrywp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tvqczm on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tvqczm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rfgxse on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rfgxse.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_svrxqu on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_svrxqu.id
left join geometry.point_view geometry_point_view_bppbqv on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_bppbqv.id
left join geometry.surface_view geometry_surface_view_olatgn on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_olatgn.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lwyncj on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_lwyncj.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_hjjkya.*) as sector
  from master_join master_join_klpigz
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_hjjkya on master_join_klpigz.target_id = procedure_terminalarrivalareasector_lat_hjjkya.id
  where master_join_klpigz.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_kfaqbt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dgdflm.*) AS annotation
  from master_join master_join_wipxut
  join notes.note_view notes_note_lat_dgdflm on master_join_wipxut.target_id = notes_note_lat_dgdflm.id
  where master_join_wipxut.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_lwfmcq on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jnuavs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jnuavs.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_jnuavs.href AS lightedtouchdownliftoff_href,
    shared_lightelement_view_vpsbqh.element as element,
    airport_heliport_groundlightingavailability_view_hmzlnu.availability as availability,
    notes_note_view_setqlr.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jnuavs on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_jnuavs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_efdbdk.*) as element
  from master_join master_join_wjhgif
  join shared.lightelement_view shared_lightelement_lat_efdbdk on master_join_wjhgif.target_id = shared_lightelement_lat_efdbdk.id
  where master_join_wjhgif.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_vpsbqh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vyfscc.*) as availability
  from master_join master_join_jkztuz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_vyfscc on master_join_jkztuz.target_id = airport_heliport_groundlightingavailability_lat_vyfscc.id
  where master_join_jkztuz.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hmzlnu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ilkuwm.*) AS annotation
  from master_join master_join_mogaaf
  join notes.note_view notes_note_lat_ilkuwm on master_join_mogaaf.target_id = notes_note_lat_ilkuwm.id
  where master_join_mogaaf.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_setqlr on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ivoaur.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ivoaur.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ivoaur.href AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_hyuaeo.element as element,
    notes_note_view_nubndb.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ivoaur on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ivoaur.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ofadgh.*) as element
  from master_join master_join_uyibsv
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ofadgh on master_join_uyibsv.target_id = airport_heliport_markingelement_lat_ofadgh.id
  where master_join_uyibsv.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_hyuaeo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iztwgf.*) AS annotation
  from master_join master_join_uadldb
  join notes.note_view notes_note_lat_iztwgf on master_join_uadldb.target_id = notes_note_lat_iztwgf.id
  where master_join_uadldb.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_nubndb on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jzfovs.*) AS surfaceproperties,
    geometry_elevatedsurface_view_tcwldu.geom AS extent_geom,
    geometry_elevatedsurface_view_tcwldu.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tcwldu.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tcwldu.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tcwldu.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tcwldu.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xqnvti.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xqnvti.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xqnvti.href AS protectedtouchdownliftoff_href,
    notes_note_view_falipj.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jzfovs on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jzfovs.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tcwldu on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_tcwldu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xqnvti on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xqnvti.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bffioe.*) AS annotation
  from master_join master_join_iurovc
  join notes.note_view notes_note_lat_bffioe on master_join_iurovc.target_id = notes_note_lat_bffioe.id
  where master_join_iurovc.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_falipj on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_ypgphl.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_ypgphl.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_ypgphl.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_ypgphl.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_ypgphl.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_ypgphl.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_ypgphl.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_ypgphl.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_ksexom.geom AS extent_geom,
    geometry_elevatedsurface_view_ksexom.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ksexom.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ksexom.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ksexom.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ksexom.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_oetdhj.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_epuvqv.title as varchar), '(' || airport_heliport_airportheliport_pt_epuvqv.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_epuvqv.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_fyjdak.title as varchar), '(' || airport_heliport_runway_pt_fyjdak.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_fyjdak.href AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_dkmsio.contaminant as contaminant,
    notes_note_view_zbqveb.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_llzdld.availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ypgphl on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_ypgphl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ksexom on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_ksexom.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_oetdhj on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_oetdhj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_epuvqv on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_epuvqv.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_fyjdak on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_fyjdak.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_xlgbqw.*) as contaminant
  from master_join master_join_qdyruu
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_xlgbqw on master_join_qdyruu.target_id = airport_heliport_touchdownliftoffcontamination_lat_xlgbqw.id
  where master_join_qdyruu.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_dkmsio on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drkkdo.*) AS annotation
  from master_join master_join_beqxna
  join notes.note_view notes_note_lat_drkkdo on master_join_beqxna.target_id = notes_note_lat_drkkdo.id
  where master_join_beqxna.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_zbqveb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_opvmah.*) as availability
  from master_join master_join_rifkai
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_opvmah on master_join_rifkai.target_id = airport_heliport_manoeuvringareaavailability_lat_opvmah.id
  where master_join_rifkai.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_llzdld on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['organisation.unitavailability_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'organisation.unitdependency_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_lwvvfi.geom AS position_geom,
    geometry_elevatedpoint_view_lwvvfi.longitude AS position_longitude,
    geometry_elevatedpoint_view_lwvvfi.latitude AS position_latitude,
    geometry_elevatedpoint_view_lwvvfi.elevation AS position_elevation,
    geometry_elevatedpoint_view_lwvvfi.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_lwvvfi.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_lwvvfi.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_lwvvfi.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_bjlhia.title as varchar), '(' || airport_heliport_airportheliport_pt_bjlhia.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_bjlhia.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_dpnuej.title as varchar), '(' || organisation_organisationauthority_pt_dpnuej.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_dpnuej.href AS ownerorganisation_href,
    organisation_unitdependency_view_dthnvb.relatedunit as relatedunit,
    organisation_unitavailability_view_lqxrit.availability as availability,
    notes_note_view_bazakn.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lwvvfi on organisation.unit_ts.position_id = geometry_elevatedpoint_view_lwvvfi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bjlhia on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_bjlhia.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_dpnuej on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_dpnuej.id
left join lateral(
  select
  from master_join master_join_lwukgh
  join shared.contactinformation_view shared_contactinformation_lat_embtzu on master_join_lwukgh.target_id = shared_contactinformation_lat_embtzu.id
  where master_join_lwukgh.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_voaaqf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_htncje.*) as relatedunit
  from master_join master_join_xdvmqp
  join organisation.unitdependency_view organisation_unitdependency_lat_htncje on master_join_xdvmqp.target_id = organisation_unitdependency_lat_htncje.id
  where master_join_xdvmqp.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_dthnvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_vzyzmg.*) as availability
  from master_join master_join_ykczse
  join organisation.unitavailability_view organisation_unitavailability_lat_vzyzmg on master_join_ykczse.target_id = organisation_unitavailability_lat_vzyzmg.id
  where master_join_ykczse.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_lqxrit on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utqajf.*) AS annotation
  from master_join master_join_txwaue
  join notes.note_view notes_note_lat_utqajf on master_join_txwaue.target_id = notes_note_lat_utqajf.id
  where master_join_txwaue.source_id = organisation.unit_ts.id
) as notes_note_view_bazakn on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    notes_note_view_vuhcfr.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldgdvv.*) AS annotation
  from master_join master_join_gvdnyp
  join notes.note_view notes_note_lat_ldgdvv on master_join_gvdnyp.target_id = notes_note_lat_ldgdvv.id
  where master_join_gvdnyp.source_id = holding.unplannedholding_ts.id
) as notes_note_view_vuhcfr on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['notes.note_view', 'obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_dxuafp.title as varchar), '(' || navaids_points_markerbeacon_pt_dxuafp.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_dxuafp.href AS marker_href,
    obstacles_verticalstructurepart_view_xxioii.part as part,
    service_passengerservice_pt_fjhjcl.hostedpassengerservice as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_ncylbl.hostedspecialnavstation as hostedspecialnavstation,
    organisation_unit_pt_qsxcim.hostedunit as hostedunit,
    organisation_organisationauthority_pt_sjvolo.hostedorganisation as hostedorganisation,
    notes_note_view_nlgnfe.annotation as annotation,
    obstacles_verticalstructurelightingstatus_view_dafkuv.lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_dxuafp on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_dxuafp.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_oudwbl.*) as part
  from master_join master_join_eqwkfh
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_oudwbl on master_join_eqwkfh.target_id = obstacles_verticalstructurepart_lat_oudwbl.id
  where master_join_eqwkfh.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_xxioii on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_plvbun.id,
      'title', coalesce(cast(service_passengerservice_lat_plvbun.title AS varchar), '(' || service_passengerservice_lat_plvbun.nilreason[1] || ')'),
      'href', service_passengerservice_lat_plvbun.href
  )) as hostedpassengerservice  from master_join master_join_jdouut
  join service.passengerservice_pt service_passengerservice_lat_plvbun on master_join_jdouut.target_id = service_passengerservice_lat_plvbun.id
  where master_join_jdouut.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_fjhjcl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_ywlubh.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_ywlubh.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_ywlubh.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_ywlubh.href
  )) as hostedspecialnavstation  from master_join master_join_umiqlg
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_ywlubh on master_join_umiqlg.target_id = navaids_points_specialnavigationstation_lat_ywlubh.id
  where master_join_umiqlg.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_ncylbl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_zwamil.id,
      'title', coalesce(cast(organisation_unit_lat_zwamil.title AS varchar), '(' || organisation_unit_lat_zwamil.nilreason[1] || ')'),
      'href', organisation_unit_lat_zwamil.href
  )) as hostedunit  from master_join master_join_lxwjwk
  join organisation.unit_pt organisation_unit_lat_zwamil on master_join_lxwjwk.target_id = organisation_unit_lat_zwamil.id
  where master_join_lxwjwk.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_qsxcim on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xpxyyc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xpxyyc.title AS varchar), '(' || organisation_organisationauthority_lat_xpxyyc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xpxyyc.href
  )) as hostedorganisation  from master_join master_join_nsszsm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xpxyyc on master_join_nsszsm.target_id = organisation_organisationauthority_lat_xpxyyc.id
  where master_join_nsszsm.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_sjvolo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhjmxc.*) AS annotation
  from master_join master_join_waimpp
  join notes.note_view notes_note_lat_dhjmxc on master_join_waimpp.target_id = notes_note_lat_dhjmxc.id
  where master_join_waimpp.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_nlgnfe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_xjjmep.*) as lightingavailability
  from master_join master_join_ynwaaw
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_xjjmep on master_join_ynwaaw.target_id = obstacles_verticalstructurelightingstatus_lat_xjjmep.id
  where master_join_ynwaaw.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_dafkuv on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_hzrcvi.title as varchar), '(' || airport_heliport_runwaydirection_pt_hzrcvi.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_hzrcvi.href AS runwaydirection_href,
    shared_lightelement_view_pbofks.element as element,
    airport_heliport_groundlightingavailability_view_ijtugv.availability as availability,
    notes_note_view_ebrzfz.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_hzrcvi on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_hzrcvi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cermww.*) as element
  from master_join master_join_jwcjmw
  join shared.lightelement_view shared_lightelement_lat_cermww on master_join_jwcjmw.target_id = shared_lightelement_lat_cermww.id
  where master_join_jwcjmw.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_pbofks on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_twqjwa.*) as availability
  from master_join master_join_vbbvja
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_twqjwa on master_join_vbbvja.target_id = airport_heliport_groundlightingavailability_lat_twqjwa.id
  where master_join_vbbvja.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_ijtugv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evyflz.*) AS annotation
  from master_join master_join_coxsmp
  join notes.note_view notes_note_lat_evyflz on master_join_coxsmp.target_id = notes_note_lat_evyflz.id
  where master_join_coxsmp.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_ebrzfz on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_voraet.geom AS location_geom,
    geometry_elevatedpoint_view_voraet.longitude AS location_longitude,
    geometry_elevatedpoint_view_voraet.latitude AS location_latitude,
    geometry_elevatedpoint_view_voraet.elevation AS location_elevation,
    geometry_elevatedpoint_view_voraet.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_voraet.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_voraet.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_voraet.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rlhogu.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_xiohoo.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_haveky.availability as availability,
    notes_note_view_vxnxvy.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_voraet on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_voraet.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_hucagb.*) as authority
  from master_join master_join_zgqmnw
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_hucagb on master_join_zgqmnw.target_id = navaids_points_authorityfornavaidequipment_lat_hucagb.id
  where master_join_zgqmnw.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_rlhogu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vckipg.*) as monitoring
  from master_join master_join_zuvykh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vckipg on master_join_zuvykh.target_id = navaids_points_navaidequipmentmonitoring_lat_vckipg.id
  where master_join_zuvykh.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xiohoo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wzcxam.*) as availability
  from master_join master_join_xhqevx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wzcxam on master_join_xhqevx.target_id = navaids_points_navaidoperationalstatus_lat_wzcxam.id
  where master_join_xhqevx.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_haveky on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srjnwb.*) AS annotation
  from master_join master_join_enrqgb
  join notes.note_view notes_note_lat_srjnwb on master_join_enrqgb.target_id = notes_note_lat_srjnwb.id
  where master_join_enrqgb.source_id = navaids_points.vor_ts.id
) as notes_note_view_vxnxvy on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.workareaactivity_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_sgkmlh.title as varchar), '(' || airport_heliport_airportheliport_pt_sgkmlh.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_sgkmlh.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_norusq.geom AS extent_geom,
    geometry_elevatedsurface_view_norusq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_norusq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_norusq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_norusq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_norusq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_wwmxdp.activation as activation,
    notes_note_view_barjve.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sgkmlh on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_sgkmlh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_norusq on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_norusq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_eayduv.*) as activation
  from master_join master_join_hpddnt
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_eayduv on master_join_hpddnt.target_id = airport_heliport_workareaactivity_lat_eayduv.id
  where master_join_hpddnt.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_wwmxdp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntuxzb.*) AS annotation
  from master_join master_join_apvzjc
  join notes.note_view notes_note_lat_ntuxzb on master_join_apvzjc.target_id = notes_note_lat_ntuxzb.id
  where master_join_apvzjc.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_barjve on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
