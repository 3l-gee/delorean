-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_yokldo.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ypgkwt.*) AS annotation
  from master_join master_join_sbqjop
  join notes.note_view notes_note_lat_ypgkwt on master_join_sbqjop.target_id = notes_note_lat_ypgkwt.id
  where master_join_sbqjop.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_yokldo on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_fgyxcp.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_vcxvya.layer::jsonb as layer,
    notes_note_view_tukjhr.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_gapyuf.id) as criticalridge
  from master_join master_join_gefzos
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_gapyuf on master_join_gefzos.target_id = airport_heliport_ridge_lat_gapyuf.id
  where master_join_gefzos.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_fgyxcp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_oexkgi.id) as layer
  from master_join master_join_lehzwv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_oexkgi on master_join_lehzwv.target_id = airport_heliport_surfacecontaminationlayer_lat_oexkgi.id
  where master_join_lehzwv.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_vcxvya on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sullda.*) AS annotation
  from master_join master_join_weyzoi
  join notes.note_view notes_note_lat_sullda on master_join_weyzoi.target_id = notes_note_lat_sullda.id
  where master_join_weyzoi.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_tukjhr on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_yetxqo.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_tsdjqv.layer::jsonb as layer,
    notes_note_view_rzkjgj.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_tilcoh.id) as criticalridge
  from master_join master_join_okaors
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_tilcoh on master_join_okaors.target_id = airport_heliport_ridge_lat_tilcoh.id
  where master_join_okaors.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_yetxqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_mwbpwb.id) as layer
  from master_join master_join_potbtw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_mwbpwb on master_join_potbtw.target_id = airport_heliport_surfacecontaminationlayer_lat_mwbpwb.id
  where master_join_potbtw.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_tsdjqv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_trugow.*) AS annotation
  from master_join master_join_xjltie
  join notes.note_view notes_note_lat_trugow on master_join_xjltie.target_id = notes_note_lat_trugow.id
  where master_join_xjltie.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_rzkjgj on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_ojcrtc.id)::jsonb AS theairspacevolume,
    notes_note_view_jbogtq.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_ojcrtc on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_ojcrtc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjazad.*) AS annotation
  from master_join master_join_lednjm
  join notes.note_view notes_note_lat_xjazad on master_join_lednjm.target_id = notes_note_lat_xjazad.id
  where master_join_lednjm.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_jbogtq on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_fsithu.title as varchar), '(' || shared_standardlevelcolumn_pt_fsithu.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_fsithu.href::text AS discretelevelseries_href,
    notes_note_view_vbbnss.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_fsithu on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_fsithu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_urwtun.*) AS annotation
  from master_join master_join_dhrdkw
  join notes.note_view notes_note_lat_urwtun on master_join_dhrdkw.target_id = notes_note_lat_urwtun.id
  where master_join_dhrdkw.source_id = shared.airspacelayer.id
) as notes_note_view_vbbnss on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_ulomxk.title as varchar), '(' || airspace_airspace_pt_ulomxk.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_ulomxk.href::text AS theairspace_href,
    notes_note_view_ujgyut.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_ulomxk on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_ulomxk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_poblso.*) AS annotation
  from master_join master_join_akkjbe
  join notes.note_view notes_note_lat_poblso on master_join_akkjbe.target_id = notes_note_lat_poblso.id
  where master_join_akkjbe.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_ujgyut on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_tmwrje.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dtoibe.*) AS annotation
  from master_join master_join_ebziba
  join notes.note_view notes_note_lat_dtoibe on master_join_ebziba.target_id = notes_note_lat_dtoibe.id
  where master_join_ebziba.source_id = shared.altitudeadjustment.id
) as notes_note_view_tmwrje on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_myojmq.title as varchar), '(' || navaids_points_angleindication_pt_myojmq.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_myojmq.href::text AS theangleindication_href,
    notes_note_view_mxawyw.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_myojmq on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_myojmq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pizpgp.*) AS annotation
  from master_join master_join_xuscuc
  join notes.note_view notes_note_lat_pizpgp on master_join_xuscuc.target_id = notes_note_lat_pizpgp.id
  where master_join_xuscuc.source_id = navaids_points.angleuse.id
) as notes_note_view_mxawyw on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_dktobz.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_loqiss.*) AS annotation
  from master_join master_join_ipkczu
  join notes.note_view notes_note_lat_loqiss on master_join_ipkczu.target_id = notes_note_lat_loqiss.id
  where master_join_ipkczu.source_id = procedure.approachaltitudetable.id
) as notes_note_view_dktobz on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_bdemkj.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_atefyw.title as varchar), '(' || airport_heliport_altimetersource_pt_atefyw.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_atefyw.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_kkmefs.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_dpeydp.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_wcxbuc.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_daeznj.designsurface::jsonb as designsurface,
    notes_note_view_mdmdqq.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_bdemkj on procedure.approachcondition.minimumset_id = procedure_minima_pt_bdemkj.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_atefyw on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_atefyw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_okzygl.id) as circlingrestriction
  from master_join master_join_dwugtj
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_okzygl on master_join_dwugtj.target_id = procedure_circlingrestriction_lat_okzygl.id
  where master_join_dwugtj.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_kkmefs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_kuivqp.id) as aircraftcategory
  from master_join master_join_vwskhj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_kuivqp on master_join_vwskhj.target_id = shared_aircraftcharacteristic_lat_kuivqp.id
  where master_join_vwskhj.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_dpeydp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_ujryat.id) as landingarea
  from master_join master_join_tvydic
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_ujryat on master_join_tvydic.target_id = procedure_landingtakeoffareacollection_lat_ujryat.id
  where master_join_tvydic.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_wcxbuc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_kzzyki.id) as designsurface
  from master_join master_join_wzzhlc
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_kzzyki on master_join_wzzhlc.target_id = shared_obstacleassessmentarea_lat_kzzyki.id
  where master_join_wzzhlc.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_daeznj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qnhuya.*) AS annotation
  from master_join master_join_klzbqq
  join notes.note_view notes_note_lat_qnhuya on master_join_klzbqq.target_id = notes_note_lat_qnhuya.id
  where master_join_klzbqq.source_id = procedure.approachcondition.id
) as notes_note_view_mdmdqq on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_zlvwxy.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjkejr.*) AS annotation
  from master_join master_join_eptfqu
  join notes.note_view notes_note_lat_yjkejr on master_join_eptfqu.target_id = notes_note_lat_yjkejr.id
  where master_join_eptfqu.source_id = procedure.approachdistancetable.id
) as notes_note_view_zlvwxy on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_jqfbpf.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntrmjw.*) AS annotation
  from master_join master_join_pcliyj
  join notes.note_view notes_note_lat_ntrmjw on master_join_pcliyj.target_id = notes_note_lat_ntrmjw.id
  where master_join_pcliyj.source_id = procedure.approachtimingtable.id
) as notes_note_view_jqfbpf on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_coykse.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_dxqzrp.layer::jsonb as layer,
    notes_note_view_ulbxgo.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_hbhsfi.id) as criticalridge
  from master_join master_join_yjfnxo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_hbhsfi on master_join_yjfnxo.target_id = airport_heliport_ridge_lat_hbhsfi.id
  where master_join_yjfnxo.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_coykse on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_twfwqx.id) as layer
  from master_join master_join_ezoekx
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_twfwqx on master_join_ezoekx.target_id = airport_heliport_surfacecontaminationlayer_lat_twfwqx.id
  where master_join_ezoekx.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_dxqzrp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lyolbv.*) AS annotation
  from master_join master_join_aixzfl
  join notes.note_view notes_note_lat_lyolbv on master_join_aixzfl.target_id = notes_note_lat_lyolbv.id
  where master_join_aixzfl.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_ulbxgo on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ckdcfm.title as varchar), '(' || organisation_organisationauthority_pt_ckdcfm.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ckdcfm.href::text AS theorganisationauthority_href,
    notes_note_view_fwcxxc.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ckdcfm on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_ckdcfm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lvitvw.*) AS annotation
  from master_join master_join_zmsudy
  join notes.note_view notes_note_lat_lvitvw on master_join_zmsudy.target_id = notes_note_lat_lvitvw.id
  where master_join_zmsudy.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_fwcxxc on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xiamam.title as varchar), '(' || organisation_organisationauthority_pt_xiamam.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_xiamam.href::text AS theorganisationauthority_href,
    notes_note_view_bjdbbd.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xiamam on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_xiamam.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vyyhgw.*) AS annotation
  from master_join master_join_qtqusc
  join notes.note_view notes_note_lat_vyyhgw on master_join_qtqusc.target_id = notes_note_lat_vyyhgw.id
  where master_join_qtqusc.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_bjdbbd on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_iwbgti.title as varchar), '(' || organisation_organisationauthority_pt_iwbgti.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_iwbgti.href::text AS theorganisationauthority_href,
    notes_note_view_urnyry.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_iwbgti on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_iwbgti.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsbuow.*) AS annotation
  from master_join master_join_ophpfn
  join notes.note_view notes_note_lat_tsbuow on master_join_ophpfn.target_id = notes_note_lat_tsbuow.id
  where master_join_ophpfn.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_urnyry on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_wyglrt.title as varchar), '(' || organisation_organisationauthority_pt_wyglrt.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_wyglrt.href::text AS theorganisationauthority_href,
    notes_note_view_kvxsur.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_wyglrt on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_wyglrt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ubyagw.*) AS annotation
  from master_join master_join_bscyhs
  join notes.note_view notes_note_lat_ubyagw on master_join_bscyhs.target_id = notes_note_lat_ubyagw.id
  where master_join_bscyhs.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_kvxsur on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_yrgkpw.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oulsia.*) AS annotation
  from master_join master_join_pwxrnq
  join notes.note_view notes_note_lat_oulsia on master_join_pwxrnq.target_id = notes_note_lat_oulsia.id
  where master_join_pwxrnq.source_id = service.callsigndetail.id
) as notes_note_view_yrgkpw on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_vryyaw.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yxhdeu.*) AS annotation
  from master_join master_join_xiknxx
  join notes.note_view notes_note_lat_yxhdeu on master_join_xiknxx.target_id = notes_note_lat_yxhdeu.id
  where master_join_xiknxx.source_id = shared.circlesector.id
) as notes_note_view_vryyaw on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_tkzevn.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qsitxs.*) AS annotation
  from master_join master_join_yjxexe
  join notes.note_view notes_note_lat_qsitxs on master_join_yjxexe.target_id = notes_note_lat_qsitxs.id
  where master_join_yjxexe.source_id = airport_heliport.city.id
) as notes_note_view_tkzevn on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_ryldfq.id)::jsonb AS enginetype,
    notes_note_view_jfqdpj.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ryldfq on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_ryldfq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rvgzyl.*) AS annotation
  from master_join master_join_xswfmh
  join notes.note_view notes_note_lat_rvgzyl on master_join_xswfmh.target_id = notes_note_lat_rvgzyl.id
  where master_join_xswfmh.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_jfqdpj on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_jbsage.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_trqtpm.*) AS annotation
  from master_join master_join_dlikpy
  join notes.note_view notes_note_lat_trqtpm on master_join_dlikpy.target_id = notes_note_lat_trqtpm.id
  where master_join_dlikpy.source_id = routes.directflightclass.id
) as notes_note_view_jbsage on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_nlcnwz.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jkvcrc.*) AS annotation
  from master_join master_join_qcwrfn
  join notes.note_view notes_note_lat_jkvcrc on master_join_qcwrfn.target_id = notes_note_lat_jkvcrc.id
  where master_join_qcwrfn.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_nlcnwz on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_ubszks.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_uzjkdd.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_iwdrgm.id) as adjustmentinopcol
  from master_join master_join_ctxuez
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_iwdrgm on master_join_ctxuez.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_iwdrgm.id
  where master_join_ctxuez.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_ubszks on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izjkbs.*) AS annotation
  from master_join master_join_cheqwj
  join notes.note_view notes_note_lat_izjkbs on master_join_cheqwj.target_id = notes_note_lat_izjkbs.id
  where master_join_cheqwj.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_uzjkdd on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_prqcru.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhxwby.*) AS annotation
  from master_join master_join_nptsvs
  join notes.note_view notes_note_lat_qhxwby on master_join_nptsvs.target_id = notes_note_lat_qhxwby.id
  where master_join_nptsvs.source_id = public.fasdatablock.id
) as notes_note_view_prqcru on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_mvmrfz.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_ojbrfa.distance::jsonb as distance,
    procedure_approachtimingtable_pt_rurbsi.timing::jsonb as timing,
    notes_note_view_anduil.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_xkwdzw.id) as altitude
  from master_join master_join_yexkvk
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_xkwdzw on master_join_yexkvk.target_id = procedure_approachaltitudetable_lat_xkwdzw.id
  where master_join_yexkvk.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_mvmrfz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_jtajis.id) as distance
  from master_join master_join_wmcvtk
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_jtajis on master_join_wmcvtk.target_id = procedure_approachdistancetable_lat_jtajis.id
  where master_join_wmcvtk.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_ojbrfa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_lobqrf.id) as timing
  from master_join master_join_hdkflh
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_lobqrf on master_join_hdkflh.target_id = procedure_approachtimingtable_lat_lobqrf.id
  where master_join_hdkflh.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_rurbsi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdjqhy.*) AS annotation
  from master_join master_join_eoruzj
  join notes.note_view notes_note_lat_hdjqhy on master_join_eoruzj.target_id = notes_note_lat_hdjqhy.id
  where master_join_eoruzj.source_id = procedure.finalprofile.id
) as notes_note_view_anduil on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_gmdneo.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_saoyfo.*) AS annotation
  from master_join master_join_ryavbg
  join notes.note_view notes_note_lat_saoyfo on master_join_ryavbg.target_id = notes_note_lat_saoyfo.id
  where master_join_ryavbg.source_id = shared.flightcharacteristic.id
) as notes_note_view_gmdneo on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_dwzylt.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_azxzrd.*) AS annotation
  from master_join master_join_mcgfrf
  join notes.note_view notes_note_lat_azxzrd on master_join_mcgfrf.target_id = notes_note_lat_azxzrd.id
  where master_join_mcgfrf.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_dwzylt on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_jwpehr.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_crhvwn.*) AS annotation
  from master_join master_join_ifahmm
  join notes.note_view notes_note_lat_crhvwn on master_join_ifahmm.target_id = notes_note_lat_crhvwn.id
  where master_join_ifahmm.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_jwpehr on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_ctpbit.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_foowgl.*) AS annotation
  from master_join master_join_cmjtlr
  join notes.note_view notes_note_lat_foowgl on master_join_cmjtlr.target_id = notes_note_lat_foowgl.id
  where master_join_cmjtlr.source_id = service.fuel.id
) as notes_note_view_ctpbit on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_sitftq.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vjbiqz.*) AS annotation
  from master_join master_join_cgvkub
  join notes.note_view notes_note_lat_vjbiqz on master_join_cgvkub.target_id = notes_note_lat_vjbiqz.id
  where master_join_cgvkub.source_id = holding.holdingpatterndistance.id
) as notes_note_view_sitftq on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_sdenbv.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pxbyhb.*) AS annotation
  from master_join master_join_mtztyu
  join notes.note_view notes_note_lat_pxbyhb on master_join_mtztyu.target_id = notes_note_lat_pxbyhb.id
  where master_join_mtztyu.source_id = holding.holdingpatternduration.id
) as notes_note_view_sdenbv on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_nalhlc.title as varchar), '(' || holding_holdingpattern_pt_nalhlc.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_nalhlc.href::text AS theholdingpattern_href,
    notes_note_view_nxkwcw.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_nalhlc on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_nalhlc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lddshl.*) AS annotation
  from master_join master_join_yxhviq
  join notes.note_view notes_note_lat_lddshl on master_join_yxhviq.target_id = notes_note_lat_lddshl.id
  where master_join_yxhviq.source_id = procedure.holdinguse.id
) as notes_note_view_nxkwcw on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_whkven.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_mzwotm.tlof::jsonb as tlof,
    notes_note_view_uaeqeh.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_lmgogt.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_lmgogt.title AS varchar), '(' || airport_heliport_runwaydirection_lat_lmgogt.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_lmgogt.href
  )) as runway  from master_join master_join_ixjxzf
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_lmgogt on master_join_ixjxzf.target_id = airport_heliport_runwaydirection_lat_lmgogt.id
  where master_join_ixjxzf.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_whkven on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_gdwgvz.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_gdwgvz.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_gdwgvz.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_gdwgvz.href
  )) as tlof  from master_join master_join_lwsyqt
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_gdwgvz on master_join_lwsyqt.target_id = airport_heliport_touchdownliftoff_lat_gdwgvz.id
  where master_join_lwsyqt.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_mzwotm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ryghrm.*) AS annotation
  from master_join master_join_stzisp
  join notes.note_view notes_note_lat_ryghrm on master_join_stzisp.target_id = notes_note_lat_ryghrm.id
  where master_join_stzisp.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_uaeqeh on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_ujjffl.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aevuvm.*) AS annotation
  from master_join master_join_pzziuj
  join notes.note_view notes_note_lat_aevuvm on master_join_pzziuj.target_id = notes_note_lat_aevuvm.id
  where master_join_pzziuj.source_id = airport_heliport.lightactivation.id
) as notes_note_view_ujjffl on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_ljyzrn.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpiftj.*) AS annotation
  from master_join master_join_pzjjbl
  join notes.note_view notes_note_lat_gpiftj on master_join_pzjjbl.target_id = notes_note_lat_gpiftj.id
  where master_join_pzjjbl.source_id = shared.meteorology.id
) as notes_note_view_ljyzrn on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_lccytv.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_oblwbq.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_idtpux.id) as adjustmentinop
  from master_join master_join_tppcrb
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_idtpux on master_join_tppcrb.target_id = procedure_equipmentunavailableadjustment_lat_idtpux.id
  where master_join_tppcrb.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_lccytv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uhrtue.*) AS annotation
  from master_join master_join_mafpbk
  join notes.note_view notes_note_lat_uhrtue on master_join_mafpbk.target_id = notes_note_lat_uhrtue.id
  where master_join_mafpbk.source_id = procedure.minima.id
) as notes_note_view_oblwbq on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_ehnymu.altimeter::jsonb as altimeter,
    notes_note_view_bnylwm.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_jcqgso.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_jcqgso.title AS varchar), '(' || airport_heliport_altimetersource_lat_jcqgso.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_jcqgso.href
  )) as altimeter  from master_join master_join_fgkmyd
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_jcqgso on master_join_fgkmyd.target_id = airport_heliport_altimetersource_lat_jcqgso.id
  where master_join_fgkmyd.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_ehnymu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_joveik.*) AS annotation
  from master_join master_join_rqbkky
  join notes.note_view notes_note_lat_joveik on master_join_rqbkky.target_id = notes_note_lat_joveik.id
  where master_join_rqbkky.source_id = procedure.missedapproachgroup.id
) as notes_note_view_bnylwm on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    navaids_points_navaidequipment_pt_chqrwg.thenavaidequipment::jsonb as thenavaidequipment,
    notes_note_view_jlptsx.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_yfrcvb.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_yfrcvb.title AS varchar), '(' || navaids_points_navaidequipment_lat_yfrcvb.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_yfrcvb.href
  )) as thenavaidequipment  from master_join master_join_kphfif
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_yfrcvb on master_join_kphfif.target_id = navaids_points_navaidequipment_lat_yfrcvb.id
  where master_join_kphfif.source_id = navaids_points.navaidcomponent.id
) as navaids_points_navaidequipment_pt_chqrwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obxjpx.*) AS annotation
  from master_join master_join_tdpqez
  join notes.note_view notes_note_lat_obxjpx on master_join_tdpqez.target_id = notes_note_lat_obxjpx.id
  where master_join_tdpqez.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_jlptsx on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    navaids_points_navaidequipment_pt_vzttdj.thenavaidequipment::jsonb as thenavaidequipment,
    notes_note_view_zowfth.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_micggu.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_micggu.title AS varchar), '(' || navaids_points_navaidequipment_lat_micggu.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_micggu.href
  )) as thenavaidequipment  from master_join master_join_ojsgrc
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_micggu on master_join_ojsgrc.target_id = navaids_points_navaidequipment_lat_micggu.id
  where master_join_ojsgrc.source_id = airport_heliport.navaidequipmentdistance.id
) as navaids_points_navaidequipment_pt_vzttdj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zntboq.*) AS annotation
  from master_join master_join_gzqvgu
  join notes.note_view notes_note_lat_zntboq on master_join_gzqvgu.target_id = notes_note_lat_zntboq.id
  where master_join_gzqvgu.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_zowfth on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_vbmdvv.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sbjtfw.*) AS annotation
  from master_join master_join_axpmgn
  join notes.note_view notes_note_lat_sbjtfw on master_join_axpmgn.target_id = notes_note_lat_sbjtfw.id
  where master_join_axpmgn.source_id = service.nitrogen.id
) as notes_note_view_vbmdvv on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_fowdmd.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xntcgp.*) AS annotation
  from master_join master_join_jhzknq
  join notes.note_view notes_note_lat_xntcgp on master_join_jhzknq.target_id = notes_note_lat_xntcgp.id
  where master_join_jhzknq.source_id = shared.obstacleplacement.id
) as notes_note_view_fowdmd on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_sgwqnm.title as varchar), '(' || obstacles_verticalstructure_pt_sgwqnm.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_sgwqnm.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_klzjkg.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_ialndk.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_dfsrgw.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_sgwqnm on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_sgwqnm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_ykuccz.id) as adjustment
  from master_join master_join_nlnece
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_ykuccz on master_join_nlnece.target_id = shared_altitudeadjustment_lat_ykuccz.id
  where master_join_nlnece.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_klzjkg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_npemrn.id) as obstacleplacement
  from master_join master_join_ngjmfw
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_npemrn on master_join_ngjmfw.target_id = shared_obstacleplacement_lat_npemrn.id
  where master_join_ngjmfw.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_ialndk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xzipcc.*) AS annotation
  from master_join master_join_lfnkby
  join notes.note_view notes_note_lat_xzipcc on master_join_lfnkby.target_id = notes_note_lat_xzipcc.id
  where master_join_lfnkby.source_id = shared.obstruction.id
) as notes_note_view_dfsrgw on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_fjptbr.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_glzeky.*) AS annotation
  from master_join master_join_vhtfqu
  join notes.note_view notes_note_lat_glzeky on master_join_vhtfqu.target_id = notes_note_lat_glzeky.id
  where master_join_vhtfqu.source_id = service.oil.id
) as notes_note_view_fjptbr on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_vcnihh.title as varchar), '(' || organisation_organisationauthority_pt_vcnihh.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_vcnihh.href::text AS theorganisationauthority_href,
    notes_note_view_fwuapf.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vcnihh on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_vcnihh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iqvwnm.*) AS annotation
  from master_join master_join_sqbrnc
  join notes.note_view notes_note_lat_iqvwnm on master_join_sqbrnc.target_id = notes_note_lat_iqvwnm.id
  where master_join_sqbrnc.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_fwuapf on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_mqycgo.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfokan.*) AS annotation
  from master_join master_join_vetpbk
  join notes.note_view notes_note_lat_nfokan on master_join_vetpbk.target_id = notes_note_lat_nfokan.id
  where master_join_vetpbk.source_id = service.oxygen.id
) as notes_note_view_mqycgo on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    procedure_segmentleg_pt_ykkmju.thesegmentleg::jsonb as thesegmentleg,
    notes_note_view_kfabou.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_segmentleg_lat_owtkxt.id,
      'title', coalesce(cast(procedure_segmentleg_lat_owtkxt.title AS varchar), '(' || procedure_segmentleg_lat_owtkxt.nilreason[1] || ')'),
      'href', procedure_segmentleg_lat_owtkxt.href
  )) as thesegmentleg  from master_join master_join_gzbipa
  join procedure.segmentleg_pt procedure_segmentleg_lat_owtkxt on master_join_gzbipa.target_id = procedure_segmentleg_lat_owtkxt.id
  where master_join_gzbipa.source_id = procedure.proceduretransitionleg.id
) as procedure_segmentleg_pt_ykkmju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lszyba.*) AS annotation
  from master_join master_join_rcpgxv
  join notes.note_view notes_note_lat_lszyba on master_join_rcpgxv.target_id = notes_note_lat_lszyba.id
  where master_join_rcpgxv.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_kfabou on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    surveillance_radarequipment_pt_bdaoyo.theradarequipment::jsonb as theradarequipment,
    notes_note_view_ehcnac.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', surveillance_radarequipment_lat_xlmlyz.id,
      'title', coalesce(cast(surveillance_radarequipment_lat_xlmlyz.title AS varchar), '(' || surveillance_radarequipment_lat_xlmlyz.nilreason[1] || ')'),
      'href', surveillance_radarequipment_lat_xlmlyz.href
  )) as theradarequipment  from master_join master_join_ogemqe
  join surveillance.radarequipment_pt surveillance_radarequipment_lat_xlmlyz on master_join_ogemqe.target_id = surveillance_radarequipment_lat_xlmlyz.id
  where master_join_ogemqe.source_id = surveillance.radarcomponent.id
) as surveillance_radarequipment_pt_bdaoyo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lttrjp.*) AS annotation
  from master_join master_join_bkblep
  join notes.note_view notes_note_lat_lttrjp on master_join_bkblep.target_id = notes_note_lat_lttrjp.id
  where master_join_bkblep.source_id = surveillance.radarcomponent.id
) as notes_note_view_ehcnac on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_knrucr.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyrftw.*) AS annotation
  from master_join master_join_tckbnd
  join notes.note_view notes_note_lat_pyrftw on master_join_tckbnd.target_id = notes_note_lat_pyrftw.id
  where master_join_tckbnd.source_id = airport_heliport.ridge.id
) as notes_note_view_knrucr on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_txwtkq.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jbywox.layer::jsonb as layer,
    notes_note_view_wzidzs.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_focjgx.id) as criticalridge
  from master_join master_join_nivdbg
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_focjgx on master_join_nivdbg.target_id = airport_heliport_ridge_lat_focjgx.id
  where master_join_nivdbg.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_txwtkq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_vbqmlr.id) as layer
  from master_join master_join_udnceq
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_vbqmlr on master_join_udnceq.target_id = airport_heliport_surfacecontaminationlayer_lat_vbqmlr.id
  where master_join_udnceq.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jbywox on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vzjyqi.*) AS annotation
  from master_join master_join_gjuzfw
  join notes.note_view notes_note_lat_vzjyqi on master_join_gjuzfw.target_id = notes_note_lat_vzjyqi.id
  where master_join_gjuzfw.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_wzidzs on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_dvvjrl.declaredvalue::jsonb as declaredvalue,
    notes_note_view_hbezug.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_oorojy.id) as declaredvalue
  from master_join master_join_mhawer
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_oorojy on master_join_mhawer.target_id = airport_heliport_runwaydeclareddistancevalue_lat_oorojy.id
  where master_join_mhawer.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_dvvjrl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jczwmh.*) AS annotation
  from master_join master_join_bmmzot
  join notes.note_view notes_note_lat_jczwmh on master_join_bmmzot.target_id = notes_note_lat_jczwmh.id
  where master_join_bmmzot.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_hbezug on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_ezzwil.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_bvefmm.layer::jsonb as layer,
    notes_note_view_ccerls.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_aawxqf.id) as criticalridge
  from master_join master_join_ketpqq
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_aawxqf on master_join_ketpqq.target_id = airport_heliport_ridge_lat_aawxqf.id
  where master_join_ketpqq.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_ezzwil on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_jklcpk.id) as layer
  from master_join master_join_ifjmes
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_jklcpk on master_join_ifjmes.target_id = airport_heliport_surfacecontaminationlayer_lat_jklcpk.id
  where master_join_ifjmes.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_bvefmm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tehlxi.*) AS annotation
  from master_join master_join_ntygxr
  join notes.note_view notes_note_lat_tehlxi on master_join_ntygxr.target_id = notes_note_lat_tehlxi.id
  where master_join_ntygxr.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_ccerls on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_pxesde.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jsawqd.*) AS annotation
  from master_join master_join_vffyzu
  join notes.note_view notes_note_lat_jsawqd on master_join_vffyzu.target_id = notes_note_lat_jsawqd.id
  where master_join_vffyzu.source_id = procedure.sectordesign.id
) as notes_note_view_pxesde on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_rqrpli.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujwypn.*) AS annotation
  from master_join master_join_mqsgol
  join notes.note_view notes_note_lat_ujwypn on master_join_mqsgol.target_id = notes_note_lat_ujwypn.id
  where master_join_mqsgol.source_id = shared.standardlevel.id
) as notes_note_view_rqrpli on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_wxmovl.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qzvpfu.*) AS annotation
  from master_join master_join_aptqvv
  join notes.note_view notes_note_lat_qzvpfu on master_join_aptqvv.target_id = notes_note_lat_qzvpfu.id
  where master_join_aptqvv.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_wxmovl on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_lgmkwk.title as varchar), '(' || organisation_unit_pt_lgmkwk.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_lgmkwk.href::text AS theunit_href,
    notes_note_view_udqcxt.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_lgmkwk on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_lgmkwk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_urlqkv.*) AS annotation
  from master_join master_join_tjdrfo
  join notes.note_view notes_note_lat_urlqkv on master_join_tjdrfo.target_id = notes_note_lat_urlqkv.id
  where master_join_tjdrfo.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_udqcxt on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_bqbsfm.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_zoregx.layer::jsonb as layer,
    notes_note_view_turphq.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_morxar.id) as criticalridge
  from master_join master_join_lvexdk
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_morxar on master_join_lvexdk.target_id = airport_heliport_ridge_lat_morxar.id
  where master_join_lvexdk.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_bqbsfm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_fnxdox.id) as layer
  from master_join master_join_gnpfcc
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_fnxdox on master_join_gnpfcc.target_id = airport_heliport_surfacecontaminationlayer_lat_fnxdox.id
  where master_join_gnpfcc.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_zoregx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytpexi.*) AS annotation
  from master_join master_join_bucztt
  join notes.note_view notes_note_lat_ytpexi on master_join_bucztt.target_id = notes_note_lat_ytpexi.id
  where master_join_bucztt.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_turphq on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_doyopf.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_rckkrp.layer::jsonb as layer,
    notes_note_view_hmmimt.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_iogzkz.id) as criticalridge
  from master_join master_join_ecitbf
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_iogzkz on master_join_ecitbf.target_id = airport_heliport_ridge_lat_iogzkz.id
  where master_join_ecitbf.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_doyopf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_tzpolk.id) as layer
  from master_join master_join_ripfix
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_tzpolk on master_join_ripfix.target_id = airport_heliport_surfacecontaminationlayer_lat_tzpolk.id
  where master_join_ripfix.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_rckkrp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szkyds.*) AS annotation
  from master_join master_join_ldqhmz
  join notes.note_view notes_note_lat_szkyds on master_join_ldqhmz.target_id = notes_note_lat_szkyds.id
  where master_join_ldqhmz.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_hmmimt on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_bwdcns.title as varchar), '(' || organisation_unit_pt_bwdcns.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_bwdcns.href::text AS theunit_href,
    notes_note_view_ldhtjq.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_bwdcns on organisation.unitdependency.theunit_id = organisation_unit_pt_bwdcns.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_awqhlp.*) AS annotation
  from master_join master_join_wcwfoa
  join notes.note_view notes_note_lat_awqhlp on master_join_wcwfoa.target_id = notes_note_lat_awqhlp.id
  where master_join_wcwfoa.source_id = organisation.unitdependency.id
) as notes_note_view_ldhtjq on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_qnzarb.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_qnzarb.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_yljlaz.point::jsonb as point,
    shared_airspacelayer_pt_csaygo.verticalextent::jsonb as verticalextent,
    notes_note_view_wedomh.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_qnzarb on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_qnzarb.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_ffmpbc.id) as point
  from master_join master_join_pcxsrs
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_ffmpbc on master_join_pcxsrs.target_id = aerial_refuelling_aerialrefuellingpoint_lat_ffmpbc.id
  where master_join_pcxsrs.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_yljlaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_mnwdyv.id) as verticalextent
  from master_join master_join_yazwqx
  join shared.airspacelayer_pt shared_airspacelayer_lat_mnwdyv on master_join_yazwqx.target_id = shared_airspacelayer_lat_mnwdyv.id
  where master_join_yazwqx.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_csaygo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nyptmz.*) AS annotation
  from master_join master_join_rlyncn
  join notes.note_view notes_note_lat_nyptmz on master_join_rlyncn.target_id = notes_note_lat_nyptmz.id
  where master_join_rlyncn.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_wedomh on TRUE;
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_tcvayn.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_luzmlw.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_luzmlw.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_cfzulp.transitionleg::jsonb as transitionleg,
    notes_note_view_gbjkbm.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_tcvayn on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_tcvayn.id
left join geometry.curve_view geometry_curve_view_luzmlw on procedure.proceduretransition.trajectory_id = geometry_curve_view_luzmlw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_zejptd.id) as transitionleg
  from master_join master_join_cazsdr
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_zejptd on master_join_cazsdr.target_id = procedure_proceduretransitionleg_lat_zejptd.id
  where master_join_cazsdr.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_cfzulp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrazog.*) AS annotation
  from master_join master_join_zxixcl
  join notes.note_view notes_note_lat_vrazog on master_join_zxixcl.target_id = notes_note_lat_vrazog.id
  where master_join_zxixcl.source_id = procedure.proceduretransition.id
) as notes_note_view_gbjkbm on TRUE;
-- LightElementPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_ywpojm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ywpojm.longitude AS location_longitude,
    geometry_elevatedpoint_view_ywpojm.latitude AS location_latitude,
    geometry_elevatedpoint_view_ywpojm.elevation AS location_elevation,
    geometry_elevatedpoint_view_ywpojm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ywpojm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ywpojm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ywpojm.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_wndcfb.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_utlxca.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ywpojm on shared.lightelement.location_id = geometry_elevatedpoint_view_ywpojm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqzsid.*) AS annotation
  from master_join master_join_qymrpa
  join notes.note_view notes_note_lat_kqzsid on master_join_qymrpa.target_id = notes_note_lat_kqzsid.id
  where master_join_qymrpa.source_id = shared.lightelement.id
) as notes_note_view_wndcfb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_etvjxm.id) as availability
  from master_join master_join_qljydf
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_etvjxm on master_join_qljydf.target_id = shared_lightelementstatus_lat_etvjxm.id
  where master_join_qljydf.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_utlxca on TRUE;
-- ReflectorPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_labceu.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_labceu.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_labceu.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_labceu.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_labceu.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_labceu.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_labceu.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_labceu.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_ymmgww.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_labceu on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_labceu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_trzium.*) AS annotation
  from master_join master_join_hgyaox
  join notes.note_view notes_note_lat_trzium on master_join_hgyaox.target_id = notes_note_lat_trzium.id
  where master_join_hgyaox.source_id = surveillance.reflector.id
) as notes_note_view_ymmgww on TRUE;
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_klxmla.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_klxmla.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_klxmla.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_klxmla.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_klxmla.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_klxmla.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_tvukox.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_tvukox.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_tvukox.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_tvukox.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_tvukox.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_tvukox.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_dabwuy.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_dabwuy.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_dabwuy.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_dabwuy.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_dabwuy.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_dabwuy.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_dabwuy.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_dabwuy.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_gvlvkl.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_klxmla on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_klxmla.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_tvukox on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_tvukox.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dabwuy on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_dabwuy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xfkixw.*) AS annotation
  from master_join master_join_gansaa
  join notes.note_view notes_note_lat_xfkixw on master_join_gansaa.target_id = notes_note_lat_xfkixw.id
  where master_join_gansaa.source_id = airport_heliport.markingelement.id
) as notes_note_view_gvlvkl on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_vuiafx.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_vuiafx.attr::jsonb  as extent,
    notes_note_view_hszffi.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_pwbnsw.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_pwbnsw.id,
      'elevation', geometry_elevatedsurface_lat_pwbnsw.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_pwbnsw.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_pwbnsw.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_pwbnsw.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_pwbnsw.horizontalAccuracy
    )) AS attr
  from master_join master_join_jsrart
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_pwbnsw on master_join_jsrart.target_id = geometry_elevatedsurface_lat_pwbnsw.id
  where master_join_jsrart.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_vuiafx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plmcsm.*) AS annotation
  from master_join master_join_plowvf
  join notes.note_view notes_note_lat_plmcsm on master_join_plowvf.target_id = notes_note_lat_plmcsm.id
  where master_join_plowvf.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_hszffi on TRUE;
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_lpzpjv.title as varchar), '(' || navaids_points_designatedpoint_pt_lpzpjv.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_lpzpjv.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jzgafp.title as varchar), '(' || navaids_points_navaid_pt_jzgafp.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jzgafp.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fwajkq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fwajkq.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_fwajkq.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fpcvxx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fpcvxx.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fpcvxx.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_czopps.title as varchar), '(' || airport_heliport_airportheliport_pt_czopps.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_czopps.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_tvlody.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_tvlody.longitude AS pointchoiceposition_longitude,
    geometry_point_view_tvlody.latitude AS pointchoiceposition_latitude,
    geometry_point_view_tvlody.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_wtirhz.title as varchar), '(' || shared_radiofrequencyarea_pt_wtirhz.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_wtirhz.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_cvdzob.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_igwqbu.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lpzpjv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lpzpjv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jzgafp on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_jzgafp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fwajkq on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fwajkq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fpcvxx on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fpcvxx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_czopps on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_czopps.id
left join geometry.point_view geometry_point_view_tvlody on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_tvlody.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_wtirhz on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_wtirhz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_vfxgvv.id) as facilitymakeup
  from master_join master_join_mpvpru
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_vfxgvv on master_join_mpvpru.target_id = navaids_points_pointreference_lat_vfxgvv.id
  where master_join_mpvpru.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_cvdzob on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_npdkpu.*) AS annotation
  from master_join master_join_johgdb
  join notes.note_view notes_note_lat_npdkpu on master_join_johgdb.target_id = notes_note_lat_npdkpu.id
  where master_join_johgdb.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_igwqbu on TRUE;
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_yshxml.title as varchar), '(' || navaids_points_designatedpoint_pt_yshxml.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_yshxml.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_emyvzw.title as varchar), '(' || navaids_points_designatedpoint_pt_emyvzw.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_emyvzw.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pexifq.title as varchar), '(' || navaids_points_navaid_pt_pexifq.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_pexifq.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_zxlfki.title as varchar), '(' || navaids_points_navaid_pt_zxlfki.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_zxlfki.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fdfwog.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fdfwog.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_fdfwog.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_odflbw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_odflbw.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_odflbw.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ubgvmf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ubgvmf.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ubgvmf.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dneilu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dneilu.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dneilu.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bkmewf.title as varchar), '(' || airport_heliport_airportheliport_pt_bkmewf.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_bkmewf.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nrqmqd.title as varchar), '(' || airport_heliport_airportheliport_pt_nrqmqd.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_nrqmqd.href::text AS startairportreferencepoint_href,
    geometry_point_view_gjvwiz.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_gjvwiz.longitude AS endposition_longitude,
    geometry_point_view_gjvwiz.latitude AS endposition_latitude,
    geometry_point_view_gjvwiz.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_gxrfae.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_gxrfae.longitude AS startposition_longitude,
    geometry_point_view_gxrfae.latitude AS startposition_latitude,
    geometry_point_view_gxrfae.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_dnhuzl.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_yshxml on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_yshxml.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pexifq on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_pexifq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fdfwog on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fdfwog.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ubgvmf on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ubgvmf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bkmewf on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_bkmewf.id
left join geometry.point_view geometry_point_view_gjvwiz on routes.directflightsegment.end_position_id = geometry_point_view_gjvwiz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_emyvzw on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_emyvzw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zxlfki on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_zxlfki.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_odflbw on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_odflbw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dneilu on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dneilu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nrqmqd on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_nrqmqd.id
left join geometry.point_view geometry_point_view_gxrfae on routes.directflightsegment.start_position_id = geometry_point_view_gxrfae.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ymwzzh.*) AS annotation
  from master_join master_join_krmqcj
  join notes.note_view notes_note_lat_ymwzzh on master_join_krmqcj.target_id = notes_note_lat_ymwzzh.id
  where master_join_krmqcj.source_id = routes.directflightsegment.id
) as notes_note_view_dnhuzl on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_ymmkwi.title as varchar), '(' || navaids_points_designatedpoint_pt_ymmkwi.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ymmkwi.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nycekz.title as varchar), '(' || navaids_points_navaid_pt_nycekz.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_nycekz.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qzoolu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qzoolu.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_qzoolu.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ehifpp.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ehifpp.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ehifpp.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tddkvh.title as varchar), '(' || airport_heliport_airportheliport_pt_tddkvh.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_tddkvh.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_qilwwi.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_qilwwi.longitude AS pointchoiceposition_longitude,
    geometry_point_view_qilwwi.latitude AS pointchoiceposition_latitude,
    geometry_point_view_qilwwi.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_wfpvqp.title as varchar), '(' || shared_radiofrequencyarea_pt_wfpvqp.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_wfpvqp.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_wuzkmd.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_qwgnbb.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ymmkwi on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ymmkwi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nycekz on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_nycekz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qzoolu on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qzoolu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ehifpp on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ehifpp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tddkvh on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_tddkvh.id
left join geometry.point_view geometry_point_view_qilwwi on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_qilwwi.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_wfpvqp on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_wfpvqp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_czrqyj.id) as facilitymakeup
  from master_join master_join_twynzb
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_czrqyj on master_join_twynzb.target_id = navaids_points_pointreference_lat_czrqyj.id
  where master_join_twynzb.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_wuzkmd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ocscii.*) AS annotation
  from master_join master_join_jdusdw
  join notes.note_view notes_note_lat_ocscii on master_join_jdusdw.target_id = notes_note_lat_ocscii.id
  where master_join_jdusdw.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_qwgnbb on TRUE;
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_dznmra.title as varchar), '(' || airport_heliport_airportheliport_pt_dznmra.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_dznmra.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fmmsxd.title as varchar), '(' || airport_heliport_airportheliport_pt_fmmsxd.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_fmmsxd.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_hfcgaa.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_hfcgaa.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_hfcgaa.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_qinrjc.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_zzgctd.title as varchar), '(' || organisation_organisationauthority_pt_zzgctd.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_zzgctd.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_buiqli.title as varchar), '(' || navaids_points_designatedpoint_pt_buiqli.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_buiqli.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lvupjk.title as varchar), '(' || navaids_points_navaid_pt_lvupjk.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_lvupjk.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nfqlgt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nfqlgt.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_nfqlgt.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nujveq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nujveq.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nujveq.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_winool.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_winool.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_winool.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_winool.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_ftqygg.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_mfbjpl.title as varchar), '(' || routes_airspacebordercrossing_pt_mfbjpl.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_mfbjpl.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_fwjepm.title as varchar), '(' || airspace_airspace_pt_fwjepm.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_fwjepm.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_nbvmii.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_nhahnw.title as varchar), '(' || procedure_standardinstrumentarrival_pt_nhahnw.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_nhahnw.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_nkvvvg.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_nhkyuq.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_kpfodp.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_kpfodp.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_kpfodp.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_lehssf.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_dgosco.flightlevel::jsonb as flightlevel,
    notes_note_view_enxkkj.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dznmra on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_dznmra.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_hfcgaa on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_hfcgaa.id
left join routes.routeportion_pt routes_routeportion_pt_qinrjc on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_qinrjc.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zzgctd on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_zzgctd.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_buiqli on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_buiqli.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lvupjk on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_lvupjk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nfqlgt on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nfqlgt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nujveq on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nujveq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fmmsxd on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_fmmsxd.id
left join geometry.point_view geometry_point_view_winool on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_winool.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ftqygg on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_ftqygg.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_mfbjpl on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_mfbjpl.id
left join airspace.airspace_pt airspace_airspace_pt_fwjepm on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_fwjepm.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_nbvmii on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_nbvmii.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_nhahnw on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_nhahnw.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_nkvvvg on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_nkvvvg.id
left join shared.meteorology_pt shared_meteorology_pt_nhkyuq on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_nhkyuq.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_kpfodp on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_kpfodp.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_lehssf on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_lehssf.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_gcqfci.id) as flightlevel
  from master_join master_join_lsuwyl
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_gcqfci on master_join_lsuwyl.target_id = routes_flightrestrictionlevel_lat_gcqfci.id
  where master_join_lsuwyl.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_dgosco on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qbxltp.*) AS annotation
  from master_join master_join_jrznao
  join notes.note_view notes_note_lat_qbxltp on master_join_jrznao.target_id = notes_note_lat_qbxltp.id
  where master_join_jrznao.source_id = routes.flightconditionelement.id
) as notes_note_view_enxkkj on TRUE;
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_mrrgiy.title as varchar), '(' || procedure_standardinstrumentarrival_pt_mrrgiy.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_mrrgiy.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_mpvxyi.title as varchar), '(' || airspace_airspace_pt_mpvxyi.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_mpvxyi.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_abcfxm.title as varchar), '(' || navaids_points_designatedpoint_pt_abcfxm.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_abcfxm.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qcwede.title as varchar), '(' || navaids_points_navaid_pt_qcwede.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_qcwede.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_asxuqj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_asxuqj.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_asxuqj.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_drgavl.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_drgavl.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_drgavl.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tqqhzt.title as varchar), '(' || airport_heliport_airportheliport_pt_tqqhzt.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_tqqhzt.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uubebn.title as varchar), '(' || airport_heliport_airportheliport_pt_uubebn.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_uubebn.href::text AS elementairportheliportelement_href,
    geometry_point_view_zbyaus.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_zbyaus.longitude AS pointelementposition_longitude,
    geometry_point_view_zbyaus.latitude AS pointelementposition_latitude,
    geometry_point_view_zbyaus.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_qyjlxb.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_bujzjl.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_bujzjl.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_bujzjl.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_pegcuj.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_nuvxsw.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_nuvxsw.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_nuvxsw.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_gqddzc.flightlevel::jsonb as flightlevel,
    notes_note_view_yazuzk.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_mrrgiy on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_mrrgiy.id
left join airspace.airspace_pt airspace_airspace_pt_mpvxyi on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_mpvxyi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_abcfxm on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_abcfxm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qcwede on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_qcwede.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_asxuqj on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_asxuqj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_drgavl on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_drgavl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tqqhzt on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_tqqhzt.id
left join geometry.point_view geometry_point_view_zbyaus on routes.flightroutingelement.pointelement_position_id = geometry_point_view_zbyaus.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_qyjlxb on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_qyjlxb.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_bujzjl on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_bujzjl.id
left join routes.routeportion_pt routes_routeportion_pt_pegcuj on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_pegcuj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uubebn on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_uubebn.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_nuvxsw on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_nuvxsw.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_mddaoz.id) as flightlevel
  from master_join master_join_pzrzsd
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_mddaoz on master_join_pzrzsd.target_id = routes_flightrestrictionlevel_lat_mddaoz.id
  where master_join_pzrzsd.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_gqddzc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tyccon.*) AS annotation
  from master_join master_join_hhuqvz
  join notes.note_view notes_note_lat_tyccon on master_join_hhuqvz.target_id = notes_note_lat_tyccon.id
  where master_join_hhuqvz.source_id = routes.flightroutingelement.id
) as notes_note_view_yazuzk on TRUE;
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_jrwtos.title as varchar), '(' || navaids_points_designatedpoint_pt_jrwtos.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jrwtos.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_atppbs.title as varchar), '(' || navaids_points_designatedpoint_pt_atppbs.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_atppbs.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_dviurr.title as varchar), '(' || navaids_points_designatedpoint_pt_dviurr.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dviurr.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_tviuew.title as varchar), '(' || navaids_points_navaid_pt_tviuew.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_tviuew.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_juerxj.title as varchar), '(' || navaids_points_navaid_pt_juerxj.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_juerxj.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_psqzax.title as varchar), '(' || navaids_points_navaid_pt_psqzax.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_psqzax.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tqrnod.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tqrnod.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_tqrnod.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vixdvc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vixdvc.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_vixdvc.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hxpwtd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hxpwtd.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_hxpwtd.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vlgweh.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vlgweh.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vlgweh.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cfcdne.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cfcdne.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cfcdne.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_avlsur.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_avlsur.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_avlsur.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zknagf.title as varchar), '(' || airport_heliport_airportheliport_pt_zknagf.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_zknagf.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_eddryp.title as varchar), '(' || airport_heliport_airportheliport_pt_eddryp.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_eddryp.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_wdswnd.title as varchar), '(' || airport_heliport_airportheliport_pt_wdswnd.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_wdswnd.href::text AS endairportreferencepoint_href,
    geometry_point_view_pebnua.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_pebnua.longitude AS startposition_longitude,
    geometry_point_view_pebnua.latitude AS startposition_latitude,
    geometry_point_view_pebnua.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_fqzmql.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_fqzmql.longitude AS intermediatepointposition_longitude,
    geometry_point_view_fqzmql.latitude AS intermediatepointposition_latitude,
    geometry_point_view_fqzmql.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_spjjta.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_spjjta.longitude AS endposition_longitude,
    geometry_point_view_spjjta.latitude AS endposition_latitude,
    geometry_point_view_spjjta.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_onghfm.title as varchar), '(' || routes_route_pt_onghfm.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_onghfm.href::text AS referencedroute_href,
    notes_note_view_obgftu.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jrwtos on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jrwtos.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tviuew on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_tviuew.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tqrnod on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tqrnod.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vlgweh on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vlgweh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zknagf on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_zknagf.id
left join geometry.point_view geometry_point_view_pebnua on routes.routeportion.start_position_id = geometry_point_view_pebnua.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_atppbs on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_atppbs.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_juerxj on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_juerxj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vixdvc on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vixdvc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cfcdne on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cfcdne.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eddryp on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_eddryp.id
left join geometry.point_view geometry_point_view_fqzmql on routes.routeportion.intermediatepoint_position_id = geometry_point_view_fqzmql.id
left join routes.route_pt routes_route_pt_onghfm on routes.routeportion.referencedroute_id = routes_route_pt_onghfm.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dviurr on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dviurr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_psqzax on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_psqzax.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hxpwtd on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hxpwtd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_avlsur on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_avlsur.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wdswnd on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_wdswnd.id
left join geometry.point_view geometry_point_view_spjjta on routes.routeportion.end_position_id = geometry_point_view_spjjta.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sgtzay.*) AS annotation
  from master_join master_join_jjxbrc
  join notes.note_view notes_note_lat_sgtzay on master_join_jjxbrc.target_id = notes_note_lat_sgtzay.id
  where master_join_jjxbrc.source_id = routes.routeportion.id
) as notes_note_view_obgftu on TRUE;
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_ttkyri.title as varchar), '(' || navaids_points_designatedpoint_pt_ttkyri.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ttkyri.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_akesbj.title as varchar), '(' || navaids_points_navaid_pt_akesbj.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_akesbj.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wfkqcf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wfkqcf.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_wfkqcf.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mlnyhx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mlnyhx.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mlnyhx.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_iuswdg.title as varchar), '(' || airport_heliport_airportheliport_pt_iuswdg.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_iuswdg.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_busejc.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_busejc.longitude AS pointchoiceposition_longitude,
    geometry_point_view_busejc.latitude AS pointchoiceposition_latitude,
    geometry_point_view_busejc.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_pqdsxv.title as varchar), '(' || shared_radiofrequencyarea_pt_pqdsxv.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_pqdsxv.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_uuwqbr.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_oogpuv.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ttkyri on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ttkyri.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_akesbj on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_akesbj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wfkqcf on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wfkqcf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mlnyhx on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mlnyhx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iuswdg on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_iuswdg.id
left join geometry.point_view geometry_point_view_busejc on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_busejc.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_pqdsxv on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_pqdsxv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_geedsp.id) as facilitymakeup
  from master_join master_join_irldud
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_geedsp on master_join_irldud.target_id = navaids_points_pointreference_lat_geedsp.id
  where master_join_irldud.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_uuwqbr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tizyov.*) AS annotation
  from master_join master_join_dvyeud
  join notes.note_view notes_note_lat_tizyov on master_join_dvyeud.target_id = notes_note_lat_tizyov.id
  where master_join_dvyeud.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_oogpuv on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_ykpzbu.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_ykpzbu.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_ohvusw.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_fkrygm.point::jsonb as point,
    notes_note_view_bkxzkd.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_ykpzbu on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_ykpzbu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_oklvjp.id) as verticalextent
  from master_join master_join_dcpwov
  join shared.airspacelayer_pt shared_airspacelayer_lat_oklvjp on master_join_dcpwov.target_id = shared_airspacelayer_lat_oklvjp.id
  where master_join_dcpwov.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_ohvusw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_ahohiy.id) as point
  from master_join master_join_jiytyf
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_ahohiy on master_join_jiytyf.target_id = aerial_refuelling_aerialrefuellingpoint_lat_ahohiy.id
  where master_join_jiytyf.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_fkrygm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qcebkf.*) AS annotation
  from master_join master_join_lzboro
  join notes.note_view notes_note_lat_qcebkf on master_join_lzboro.target_id = notes_note_lat_qcebkf.id
  where master_join_lzboro.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_bkxzkd on TRUE;
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_cxobog.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_cxobog.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_dyokig.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_dyokig.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_oxwmfp.id)::jsonb AS contributorairspace,
    notes_note_view_njnbky.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_cxobog on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_cxobog.id
left join geometry.curve_view geometry_curve_view_dyokig on airspace.airspacevolume.centreline_id = geometry_curve_view_dyokig.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_oxwmfp on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_oxwmfp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ztanms.*) AS annotation
  from master_join master_join_vjkons
  join notes.note_view notes_note_lat_ztanms on master_join_vjkons.target_id = notes_note_lat_ztanms.id
  where master_join_vjkons.source_id = airspace.airspacevolume.id
) as notes_note_view_njnbky on TRUE;
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_rmkpos.id)::jsonb AS sectordefinition,
    geometry_surface_view_alskko.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_alskko.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_dwprjv.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_wqvkwz.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_yuawdk.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_rmkpos on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_rmkpos.id
left join geometry.surface_view geometry_surface_view_alskko on procedure.navigationareasector.extent_id = geometry_surface_view_alskko.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_usgvgi.id) as significantobstacle
  from master_join master_join_agztrp
  join shared.obstruction_pt shared_obstruction_lat_usgvgi on master_join_agztrp.target_id = shared_obstruction_lat_usgvgi.id
  where master_join_agztrp.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_dwprjv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_hwzucq.id) as sectorcriteria
  from master_join master_join_cpnblk
  join procedure.sectordesign_pt procedure_sectordesign_lat_hwzucq on master_join_cpnblk.target_id = procedure_sectordesign_lat_hwzucq.id
  where master_join_cpnblk.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_wqvkwz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_frqyfh.*) AS annotation
  from master_join master_join_fyxrka
  join notes.note_view notes_note_lat_frqyfh on master_join_fyxrka.target_id = notes_note_lat_frqyfh.id
  where master_join_fyxrka.source_id = procedure.navigationareasector.id
) as notes_note_view_yuawdk on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_vgvfmg.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_vgvfmg.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_amqubt.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_amqubt.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_wrmdmi.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_zuzkew.significantobstacle::jsonb as significantobstacle,
    notes_note_view_perjig.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_vgvfmg on shared.obstacleassessmentarea.surface_id = geometry_surface_view_vgvfmg.id
left join geometry.curve_view geometry_curve_view_amqubt on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_amqubt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jdrnxb.id) as aircraftcategory
  from master_join master_join_yfqqck
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_jdrnxb on master_join_yfqqck.target_id = shared_aircraftcharacteristic_lat_jdrnxb.id
  where master_join_yfqqck.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_wrmdmi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_typvkf.id) as significantobstacle
  from master_join master_join_swvzlp
  join shared.obstruction_pt shared_obstruction_lat_typvkf on master_join_swvzlp.target_id = shared_obstruction_lat_typvkf.id
  where master_join_swvzlp.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_zuzkew on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_juubco.*) AS annotation
  from master_join master_join_dyxbba
  join notes.note_view notes_note_lat_juubco on master_join_dyxbba.target_id = notes_note_lat_juubco.id
  where master_join_dyxbba.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_perjig on TRUE;
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_qbdhqg.title as varchar), '(' || navaids_points_designatedpoint_pt_qbdhqg.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_qbdhqg.href::text AS point_href,
    geometry_surface_view_tbykom.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_tbykom.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_epjdjs.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_tqqxno.facilitydistance::jsonb as facilitydistance,
    notes_note_view_yjfpug.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qbdhqg on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_qbdhqg.id
left join geometry.surface_view geometry_surface_view_tbykom on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_tbykom.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_sqocqp.id) as facilityangle
  from master_join master_join_lutscd
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_sqocqp on master_join_lutscd.target_id = navaids_points_angleuse_lat_sqocqp.id
  where master_join_lutscd.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_epjdjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_apflhn.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_apflhn.title AS varchar), '(' || navaids_points_distanceindication_lat_apflhn.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_apflhn.href
  )) as facilitydistance  from master_join master_join_ivnbms
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_apflhn on master_join_ivnbms.target_id = navaids_points_distanceindication_lat_apflhn.id
  where master_join_ivnbms.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_tqqxno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvpfbt.*) AS annotation
  from master_join master_join_apnpbt
  join notes.note_view notes_note_lat_cvpfbt on master_join_apnpbt.target_id = notes_note_lat_cvpfbt.id
  where master_join_apnpbt.source_id = navaids_points.pointreference.id
) as notes_note_view_yjfpug on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_tzurzg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_tzurzg.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_itpzjs.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_fujzeq.significantobstacle::jsonb as significantobstacle,
    notes_note_view_szhxcm.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_tzurzg on procedure.safealtitudeareasector.extent_id = geometry_surface_view_tzurzg.id
left join shared.circlesector_pt shared_circlesector_pt_itpzjs on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_itpzjs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_bqdxdf.id) as significantobstacle
  from master_join master_join_jaokxe
  join shared.obstruction_pt shared_obstruction_lat_bqdxdf on master_join_jaokxe.target_id = shared_obstruction_lat_bqdxdf.id
  where master_join_jaokxe.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_fujzeq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwcnnm.*) AS annotation
  from master_join master_join_qllmly
  join notes.note_view notes_note_lat_hwcnnm on master_join_qllmly.target_id = notes_note_lat_hwcnnm.id
  where master_join_qllmly.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_szhxcm on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_wmmpef.id)::jsonb AS sectordefinition,
    geometry_surface_view_fgeaxl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_fgeaxl.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_zqzxuk.significantobstacle::jsonb as significantobstacle,
    notes_note_view_kepjmn.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_wmmpef on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_wmmpef.id
left join geometry.surface_view geometry_surface_view_fgeaxl on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_fgeaxl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ahhyae.id) as significantobstacle
  from master_join master_join_ixpiwk
  join shared.obstruction_pt shared_obstruction_lat_ahhyae on master_join_ixpiwk.target_id = shared_obstruction_lat_ahhyae.id
  where master_join_ixpiwk.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_zqzxuk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hkofxf.*) AS annotation
  from master_join master_join_sgxifb
  join notes.note_view notes_note_lat_hkofxf on master_join_sgxifb.target_id = notes_note_lat_hkofxf.id
  where master_join_sgxifb.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_kepjmn on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_ofryxn.timeinterval::jsonb as timeinterval,
    notes_note_view_adzbty.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_fkzewb.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_rbhzqt.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uybzij.*) AS timeinterval
  from master_join master_join_ogdiwo
  join shared.timesheet_view shared_timesheet_lat_uybzij on master_join_ogdiwo.target_id = shared_timesheet_lat_uybzij.id
  where master_join_ogdiwo.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_ofryxn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rlqcmv.*) AS annotation
  from master_join master_join_pjxzuv
  join notes.note_view notes_note_lat_rlqcmv on master_join_pjxzuv.target_id = notes_note_lat_rlqcmv.id
  where master_join_pjxzuv.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_adzbty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hweqod.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hweqod.title AS varchar), '(' || organisation_organisationauthority_lat_hweqod.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hweqod.href
  )) as specialdateauthority  from master_join master_join_lxuzzf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hweqod on master_join_lxuzzf.target_id = organisation_organisationauthority_lat_hweqod.id
  where master_join_lxuzzf.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_fkzewb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_ucdemd.id) as usage
  from master_join master_join_nryghl
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_ucdemd on master_join_nryghl.target_id = airport_heliport_airportheliportusage_lat_ucdemd.id
  where master_join_nryghl.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_rbhzqt on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_baowko.title as varchar), '(' || organisation_organisationauthority_pt_baowko.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_baowko.href::text AS theorganisationauthority_href,
    shared_timesheet_view_tjakfa.timeinterval::jsonb as timeinterval,
    notes_note_view_obxlpt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yuhscs.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_baowko on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_baowko.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_idsquj.*) AS timeinterval
  from master_join master_join_rffbdn
  join shared.timesheet_view shared_timesheet_lat_idsquj on master_join_rffbdn.target_id = shared_timesheet_lat_idsquj.id
  where master_join_rffbdn.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_tjakfa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thtqap.*) AS annotation
  from master_join master_join_rvxpbn
  join notes.note_view notes_note_lat_thtqap on master_join_rvxpbn.target_id = notes_note_lat_thtqap.id
  where master_join_rvxpbn.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_obxlpt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ngxrbh.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ngxrbh.title AS varchar), '(' || organisation_organisationauthority_lat_ngxrbh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ngxrbh.href
  )) as specialdateauthority  from master_join master_join_egzfeu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ngxrbh on master_join_egzfeu.target_id = organisation_organisationauthority_lat_ngxrbh.id
  where master_join_egzfeu.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_yuhscs on TRUE;
-- AirspaceActivationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_ojlaup.timeinterval::jsonb as timeinterval,
    notes_note_view_vmeibt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ssvivl.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_vlffkm.user::jsonb as user,
    shared_airspacelayer_pt_ybegqh.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_fhfcjc.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jdecir.*) AS timeinterval
  from master_join master_join_xginzm
  join shared.timesheet_view shared_timesheet_lat_jdecir on master_join_xginzm.target_id = shared_timesheet_lat_jdecir.id
  where master_join_xginzm.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_ojlaup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikufno.*) AS annotation
  from master_join master_join_qybieb
  join notes.note_view notes_note_lat_ikufno on master_join_qybieb.target_id = notes_note_lat_ikufno.id
  where master_join_qybieb.source_id = airspace.airspaceactivation.id
) as notes_note_view_vmeibt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_efjctp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_efjctp.title AS varchar), '(' || organisation_organisationauthority_lat_efjctp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_efjctp.href
  )) as specialdateauthority  from master_join master_join_tpyizs
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_efjctp on master_join_tpyizs.target_id = organisation_organisationauthority_lat_efjctp.id
  where master_join_tpyizs.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_ssvivl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_wjblbg.id) as levels
  from master_join master_join_tfxkhi
  join shared.airspacelayer_pt shared_airspacelayer_lat_wjblbg on master_join_tfxkhi.target_id = shared_airspacelayer_lat_wjblbg.id
  where master_join_tfxkhi.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_ybegqh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gffltt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gffltt.title AS varchar), '(' || organisation_organisationauthority_lat_gffltt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gffltt.href
  )) as user  from master_join master_join_jxsizq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gffltt on master_join_jxsizq.target_id = organisation_organisationauthority_lat_gffltt.id
  where master_join_jxsizq.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_vlffkm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_iyrplx.id) as aircraft
  from master_join master_join_tifjpe
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_iyrplx on master_join_tifjpe.target_id = shared_aircraftcharacteristic_lat_iyrplx.id
  where master_join_tifjpe.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_fhfcjc on TRUE;
-- AirspaceLayerClassPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_pzcjwm.timeinterval::jsonb as timeinterval,
    notes_note_view_rlyjry.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ekwxmi.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_remgrl.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qflkic.*) AS timeinterval
  from master_join master_join_xuwird
  join shared.timesheet_view shared_timesheet_lat_qflkic on master_join_xuwird.target_id = shared_timesheet_lat_qflkic.id
  where master_join_xuwird.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_pzcjwm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_faeour.*) AS annotation
  from master_join master_join_avxtmg
  join notes.note_view notes_note_lat_faeour on master_join_avxtmg.target_id = notes_note_lat_faeour.id
  where master_join_avxtmg.source_id = airspace.airspacelayerclass.id
) as notes_note_view_rlyjry on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vikzex.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vikzex.title AS varchar), '(' || organisation_organisationauthority_lat_vikzex.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vikzex.href
  )) as specialdateauthority  from master_join master_join_qbkvex
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vikzex on master_join_qbkvex.target_id = organisation_organisationauthority_lat_vikzex.id
  where master_join_qbkvex.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_ekwxmi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_dsvuog.id) as associatedlevels
  from master_join master_join_jzjjhn
  join shared.airspacelayer_pt shared_airspacelayer_lat_dsvuog on master_join_jzjjhn.target_id = shared_airspacelayer_lat_dsvuog.id
  where master_join_jzjjhn.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_remgrl on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ipoaxt.timeinterval::jsonb as timeinterval,
    notes_note_view_zcmxal.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bkqzik.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qkmqfv.*) AS timeinterval
  from master_join master_join_btdyub
  join shared.timesheet_view shared_timesheet_lat_qkmqfv on master_join_btdyub.target_id = shared_timesheet_lat_qkmqfv.id
  where master_join_btdyub.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_ipoaxt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fcfjhz.*) AS annotation
  from master_join master_join_tewuwc
  join notes.note_view notes_note_lat_fcfjhz on master_join_tewuwc.target_id = notes_note_lat_fcfjhz.id
  where master_join_tewuwc.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_zcmxal on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hdtwtj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hdtwtj.title AS varchar), '(' || organisation_organisationauthority_lat_hdtwtj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hdtwtj.href
  )) as specialdateauthority  from master_join master_join_apffrm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hdtwtj on master_join_apffrm.target_id = organisation_organisationauthority_lat_hdtwtj.id
  where master_join_apffrm.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_bkqzik on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_furrvh.timeinterval::jsonb as timeinterval,
    notes_note_view_jrejka.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qeqjsf.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_ykfjfm.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bynzeg.*) AS timeinterval
  from master_join master_join_xoijms
  join shared.timesheet_view shared_timesheet_lat_bynzeg on master_join_xoijms.target_id = shared_timesheet_lat_bynzeg.id
  where master_join_xoijms.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_furrvh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tyrqtg.*) AS annotation
  from master_join master_join_wioezj
  join notes.note_view notes_note_lat_tyrqtg on master_join_wioezj.target_id = notes_note_lat_tyrqtg.id
  where master_join_wioezj.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_jrejka on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lfhbzj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lfhbzj.title AS varchar), '(' || organisation_organisationauthority_lat_lfhbzj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lfhbzj.href
  )) as specialdateauthority  from master_join master_join_tlwkpi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lfhbzj on master_join_tlwkpi.target_id = organisation_organisationauthority_lat_lfhbzj.id
  where master_join_tlwkpi.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_qeqjsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_tuqrym.id) as usage
  from master_join master_join_zhhvdo
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_tuqrym on master_join_zhhvdo.target_id = airport_heliport_apronareausage_lat_tuqrym.id
  where master_join_zhhvdo.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_ykfjfm on TRUE;
-- CirclingRestrictionPropertyType
-- ['notes.note_view', 'shared.timesheet_view', 'geometry.surface_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_kgpezt.id)::jsonb AS sectordescription,
    geometry_surface_view_tcwmbu.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_tcwmbu.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_wtkgbu.timeinterval::jsonb as timeinterval,
    notes_note_view_cydgfy.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xosqwh.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_kgpezt on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_kgpezt.id
left join geometry.surface_view geometry_surface_view_tcwmbu on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_tcwmbu.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hvnstv.*) AS timeinterval
  from master_join master_join_eygwts
  join shared.timesheet_view shared_timesheet_lat_hvnstv on master_join_eygwts.target_id = shared_timesheet_lat_hvnstv.id
  where master_join_eygwts.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_wtkgbu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fpjowi.*) AS annotation
  from master_join master_join_pbzafr
  join notes.note_view notes_note_lat_fpjowi on master_join_pbzafr.target_id = notes_note_lat_fpjowi.id
  where master_join_pbzafr.source_id = procedure.circlingrestriction.id
) as notes_note_view_cydgfy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sznaas.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sznaas.title AS varchar), '(' || organisation_organisationauthority_lat_sznaas.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sznaas.href
  )) as specialdateauthority  from master_join master_join_ifypnn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sznaas on master_join_ifypnn.target_id = organisation_organisationauthority_lat_sznaas.id
  where master_join_ifypnn.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_xosqwh on TRUE;
-- ConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_mxgtbi.timeinterval::jsonb as timeinterval,
    notes_note_view_ovkieo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vevsga.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_cxzkux.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_rfeyfe.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_sopaob.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_akfffo.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yxwusp.*) AS timeinterval
  from master_join master_join_aacoch
  join shared.timesheet_view shared_timesheet_lat_yxwusp on master_join_aacoch.target_id = shared_timesheet_lat_yxwusp.id
  where master_join_aacoch.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_mxgtbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbdapo.*) AS annotation
  from master_join master_join_xdusfd
  join notes.note_view notes_note_lat_gbdapo on master_join_xdusfd.target_id = notes_note_lat_gbdapo.id
  where master_join_xdusfd.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_ovkieo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rzbxex.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rzbxex.title AS varchar), '(' || organisation_organisationauthority_lat_rzbxex.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rzbxex.href
  )) as specialdateauthority  from master_join master_join_wdvubb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rzbxex on master_join_wdvubb.target_id = organisation_organisationauthority_lat_rzbxex.id
  where master_join_wdvubb.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_vevsga on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_gwervv.id) as weather
  from master_join master_join_lxdcud
  join shared.meteorology_pt shared_meteorology_lat_gwervv on master_join_lxdcud.target_id = shared_meteorology_lat_gwervv.id
  where master_join_lxdcud.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_cxzkux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bepywd.id) as aircraft
  from master_join master_join_hmivxr
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_bepywd on master_join_hmivxr.target_id = shared_aircraftcharacteristic_lat_bepywd.id
  where master_join_hmivxr.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_rfeyfe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_evtudn.id) as flight
  from master_join master_join_skmgzl
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_evtudn on master_join_skmgzl.target_id = shared_flightcharacteristic_lat_evtudn.id
  where master_join_skmgzl.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_sopaob on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_ejrsfu.id) as subcondition
  from master_join master_join_ljpcdo
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_ejrsfu on master_join_ljpcdo.target_id = airport_heliport_conditioncombination_lat_ejrsfu.id
  where master_join_ljpcdo.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_akfffo on TRUE;
-- FlightConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_baptot.timeinterval::jsonb as timeinterval,
    notes_note_view_llxiaj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_obdeam.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_fsxomn.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ppcdoy.*) AS timeinterval
  from master_join master_join_idykiq
  join shared.timesheet_view shared_timesheet_lat_ppcdoy on master_join_idykiq.target_id = shared_timesheet_lat_ppcdoy.id
  where master_join_idykiq.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_baptot on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klgsfn.*) AS annotation
  from master_join master_join_xniorh
  join notes.note_view notes_note_lat_klgsfn on master_join_xniorh.target_id = notes_note_lat_klgsfn.id
  where master_join_xniorh.source_id = routes.flightconditioncombination.id
) as notes_note_view_llxiaj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rckltk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rckltk.title AS varchar), '(' || organisation_organisationauthority_lat_rckltk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rckltk.href
  )) as specialdateauthority  from master_join master_join_sarwkj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rckltk on master_join_sarwkj.target_id = organisation_organisationauthority_lat_rckltk.id
  where master_join_sarwkj.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_obdeam on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_jjzbiq.id) as element
  from master_join master_join_oblzgh
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_jjzbiq on master_join_oblzgh.target_id = routes_flightconditionelement_lat_jjzbiq.id
  where master_join_oblzgh.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_fsxomn on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_asetzj.timeinterval::jsonb as timeinterval,
    notes_note_view_kklopu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ycosbz.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vclabv.*) AS timeinterval
  from master_join master_join_mzspuy
  join shared.timesheet_view shared_timesheet_lat_vclabv on master_join_mzspuy.target_id = shared_timesheet_lat_vclabv.id
  where master_join_mzspuy.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_asetzj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ezyrtj.*) AS annotation
  from master_join master_join_gewzdg
  join notes.note_view notes_note_lat_ezyrtj on master_join_gewzdg.target_id = notes_note_lat_ezyrtj.id
  where master_join_gewzdg.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_kklopu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qdbnaa.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qdbnaa.title AS varchar), '(' || organisation_organisationauthority_lat_qdbnaa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qdbnaa.href
  )) as specialdateauthority  from master_join master_join_sjonxy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qdbnaa on master_join_sjonxy.target_id = organisation_organisationauthority_lat_qdbnaa.id
  where master_join_sjonxy.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_ycosbz on TRUE;
-- LightElementStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_aopcxx.timeinterval::jsonb as timeinterval,
    notes_note_view_qygicz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lhkhdt.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_iplqqj.*) AS timeinterval
  from master_join master_join_cqunvq
  join shared.timesheet_view shared_timesheet_lat_iplqqj on master_join_cqunvq.target_id = shared_timesheet_lat_iplqqj.id
  where master_join_cqunvq.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_aopcxx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obwvnz.*) AS annotation
  from master_join master_join_efszpj
  join notes.note_view notes_note_lat_obwvnz on master_join_efszpj.target_id = notes_note_lat_obwvnz.id
  where master_join_efszpj.source_id = shared.lightelementstatus.id
) as notes_note_view_qygicz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vkhrjd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vkhrjd.title AS varchar), '(' || organisation_organisationauthority_lat_vkhrjd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vkhrjd.href
  )) as specialdateauthority  from master_join master_join_khaccw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vkhrjd on master_join_khaccw.target_id = organisation_organisationauthority_lat_vkhrjd.id
  where master_join_khaccw.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_lhkhdt on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_jclicw.timeinterval::jsonb as timeinterval,
    notes_note_view_oeqhap.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rwzhdy.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_rusqhy.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dfhhmj.*) AS timeinterval
  from master_join master_join_hvbrpy
  join shared.timesheet_view shared_timesheet_lat_dfhhmj on master_join_hvbrpy.target_id = shared_timesheet_lat_dfhhmj.id
  where master_join_hvbrpy.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_jclicw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_swxkwp.*) AS annotation
  from master_join master_join_lvwyrz
  join notes.note_view notes_note_lat_swxkwp on master_join_lvwyrz.target_id = notes_note_lat_swxkwp.id
  where master_join_lvwyrz.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_oeqhap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uxszap.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uxszap.title AS varchar), '(' || organisation_organisationauthority_lat_uxszap.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uxszap.href
  )) as specialdateauthority  from master_join master_join_vwdedj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uxszap on master_join_vwdedj.target_id = organisation_organisationauthority_lat_uxszap.id
  where master_join_vwdedj.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_rwzhdy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_pwfrvc.id) as usage
  from master_join master_join_njkeuw
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_pwfrvc on master_join_njkeuw.target_id = airport_heliport_manoeuvringareausage_lat_pwfrvc.id
  where master_join_njkeuw.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_rusqhy on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_kbqffb.timeinterval::jsonb as timeinterval,
    notes_note_view_bdqncv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hzktbr.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ahcubw.*) AS timeinterval
  from master_join master_join_lftpvu
  join shared.timesheet_view shared_timesheet_lat_ahcubw on master_join_lftpvu.target_id = shared_timesheet_lat_ahcubw.id
  where master_join_lftpvu.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_kbqffb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ijkeai.*) AS annotation
  from master_join master_join_xscywd
  join notes.note_view notes_note_lat_ijkeai on master_join_xscywd.target_id = notes_note_lat_ijkeai.id
  where master_join_xscywd.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_bdqncv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lqoqml.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lqoqml.title AS varchar), '(' || organisation_organisationauthority_lat_lqoqml.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lqoqml.href
  )) as specialdateauthority  from master_join master_join_iqmwre
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lqoqml on master_join_iqmwre.target_id = organisation_organisationauthority_lat_lqoqml.id
  where master_join_iqmwre.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_hzktbr on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_qsgqcm.timeinterval::jsonb as timeinterval,
    notes_note_view_ehwvlq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_whfqfg.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vnjpdl.*) AS timeinterval
  from master_join master_join_zyqplc
  join shared.timesheet_view shared_timesheet_lat_vnjpdl on master_join_zyqplc.target_id = shared_timesheet_lat_vnjpdl.id
  where master_join_zyqplc.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_qsgqcm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xugbii.*) AS annotation
  from master_join master_join_yuxvqz
  join notes.note_view notes_note_lat_xugbii on master_join_yuxvqz.target_id = notes_note_lat_xugbii.id
  where master_join_yuxvqz.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_ehwvlq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qyxnjw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qyxnjw.title AS varchar), '(' || organisation_organisationauthority_lat_qyxnjw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qyxnjw.href
  )) as specialdateauthority  from master_join master_join_fwxwas
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qyxnjw on master_join_fwxwas.target_id = organisation_organisationauthority_lat_qyxnjw.id
  where master_join_fwxwas.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_whfqfg on TRUE;
-- OnlineContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_balpoa.timeinterval::jsonb as timeinterval,
    notes_note_view_paxkgg.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_driwrm.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vuoftu.*) AS timeinterval
  from master_join master_join_twrxft
  join shared.timesheet_view shared_timesheet_lat_vuoftu on master_join_twrxft.target_id = shared_timesheet_lat_vuoftu.id
  where master_join_twrxft.source_id = shared.onlinecontact.id
) as shared_timesheet_view_balpoa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etuedu.*) AS annotation
  from master_join master_join_ysgtnv
  join notes.note_view notes_note_lat_etuedu on master_join_ysgtnv.target_id = notes_note_lat_etuedu.id
  where master_join_ysgtnv.source_id = shared.onlinecontact.id
) as notes_note_view_paxkgg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gqlskn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gqlskn.title AS varchar), '(' || organisation_organisationauthority_lat_gqlskn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gqlskn.href
  )) as specialdateauthority  from master_join master_join_oritvd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gqlskn on master_join_oritvd.target_id = organisation_organisationauthority_lat_gqlskn.id
  where master_join_oritvd.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_driwrm on TRUE;
-- PostalAddressPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_esxbyf.timeinterval::jsonb as timeinterval,
    notes_note_view_nkzczd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_keoezu.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xoslsg.*) AS timeinterval
  from master_join master_join_eoegpj
  join shared.timesheet_view shared_timesheet_lat_xoslsg on master_join_eoegpj.target_id = shared_timesheet_lat_xoslsg.id
  where master_join_eoegpj.source_id = shared.postaladdress.id
) as shared_timesheet_view_esxbyf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqrizr.*) AS annotation
  from master_join master_join_pzrntm
  join notes.note_view notes_note_lat_sqrizr on master_join_pzrntm.target_id = notes_note_lat_sqrizr.id
  where master_join_pzrntm.source_id = shared.postaladdress.id
) as notes_note_view_nkzczd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tbhxiy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tbhxiy.title AS varchar), '(' || organisation_organisationauthority_lat_tbhxiy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tbhxiy.href
  )) as specialdateauthority  from master_join master_join_ouvmsy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tbhxiy on master_join_ouvmsy.target_id = organisation_organisationauthority_lat_tbhxiy.id
  where master_join_ouvmsy.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_keoezu on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_yzdbcf.timeinterval::jsonb as timeinterval,
    notes_note_view_hclhuc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cfmkci.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jpxuge.*) AS timeinterval
  from master_join master_join_esgrke
  join shared.timesheet_view shared_timesheet_lat_jpxuge on master_join_esgrke.target_id = shared_timesheet_lat_jpxuge.id
  where master_join_esgrke.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_yzdbcf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ipkyea.*) AS annotation
  from master_join master_join_qquinw
  join notes.note_view notes_note_lat_ipkyea on master_join_qquinw.target_id = notes_note_lat_ipkyea.id
  where master_join_qquinw.source_id = procedure.procedureavailability.id
) as notes_note_view_hclhuc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xwftci.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xwftci.title AS varchar), '(' || organisation_organisationauthority_lat_xwftci.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xwftci.href
  )) as specialdateauthority  from master_join master_join_yulsup
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xwftci on master_join_yulsup.target_id = organisation_organisationauthority_lat_xwftci.id
  where master_join_yulsup.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_cfmkci on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_cljmns.timeinterval::jsonb as timeinterval,
    notes_note_view_yxpbmy.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bayeho.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xgyixx.*) AS timeinterval
  from master_join master_join_kvclbw
  join shared.timesheet_view shared_timesheet_lat_xgyixx on master_join_kvclbw.target_id = shared_timesheet_lat_xgyixx.id
  where master_join_kvclbw.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_cljmns on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dvqpns.*) AS annotation
  from master_join master_join_dzodwr
  join notes.note_view notes_note_lat_dvqpns on master_join_dzodwr.target_id = notes_note_lat_dvqpns.id
  where master_join_dzodwr.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_yxpbmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_srhldt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_srhldt.title AS varchar), '(' || organisation_organisationauthority_lat_srhldt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_srhldt.href
  )) as specialdateauthority  from master_join master_join_yjwvis
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_srhldt on master_join_yjwvis.target_id = organisation_organisationauthority_lat_srhldt.id
  where master_join_yjwvis.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_bayeho on TRUE;
-- RouteAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_izogjj.timeinterval::jsonb as timeinterval,
    notes_note_view_lmfemy.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ucxouu.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_vfuyvh.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yvppga.*) AS timeinterval
  from master_join master_join_lzlxnh
  join shared.timesheet_view shared_timesheet_lat_yvppga on master_join_lzlxnh.target_id = shared_timesheet_lat_yvppga.id
  where master_join_lzlxnh.source_id = routes.routeavailability.id
) as shared_timesheet_view_izogjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lpcxis.*) AS annotation
  from master_join master_join_cbdtxi
  join notes.note_view notes_note_lat_lpcxis on master_join_cbdtxi.target_id = notes_note_lat_lpcxis.id
  where master_join_cbdtxi.source_id = routes.routeavailability.id
) as notes_note_view_lmfemy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mvaenf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mvaenf.title AS varchar), '(' || organisation_organisationauthority_lat_mvaenf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mvaenf.href
  )) as specialdateauthority  from master_join master_join_fsjbpj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mvaenf on master_join_fsjbpj.target_id = organisation_organisationauthority_lat_mvaenf.id
  where master_join_fsjbpj.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_ucxouu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_tgiyfj.id) as levels
  from master_join master_join_flhnut
  join shared.airspacelayer_pt shared_airspacelayer_lat_tgiyfj on master_join_flhnut.target_id = shared_airspacelayer_lat_tgiyfj.id
  where master_join_flhnut.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_vfuyvh on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_ywxdza.timeinterval::jsonb as timeinterval,
    notes_note_view_fkydvd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_okhqjf.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_grxmoj.*) AS timeinterval
  from master_join master_join_yyptjv
  join shared.timesheet_view shared_timesheet_lat_grxmoj on master_join_yyptjv.target_id = shared_timesheet_lat_grxmoj.id
  where master_join_yyptjv.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_ywxdza on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wqvvgk.*) AS annotation
  from master_join master_join_bwsglg
  join notes.note_view notes_note_lat_wqvvgk on master_join_bwsglg.target_id = notes_note_lat_wqvvgk.id
  where master_join_bwsglg.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_fkydvd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gqnzwc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gqnzwc.title AS varchar), '(' || organisation_organisationauthority_lat_gqnzwc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gqnzwc.href
  )) as specialdateauthority  from master_join master_join_ydztcw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gqnzwc on master_join_ydztcw.target_id = organisation_organisationauthority_lat_gqnzwc.id
  where master_join_ydztcw.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_okhqjf on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_eaekec.timeinterval::jsonb as timeinterval,
    notes_note_view_yorwgd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xnrojl.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hlaikq.*) AS timeinterval
  from master_join master_join_wzocvv
  join shared.timesheet_view shared_timesheet_lat_hlaikq on master_join_wzocvv.target_id = shared_timesheet_lat_hlaikq.id
  where master_join_wzocvv.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_eaekec on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_otljjm.*) AS annotation
  from master_join master_join_ajrqua
  join notes.note_view notes_note_lat_otljjm on master_join_ajrqua.target_id = notes_note_lat_otljjm.id
  where master_join_ajrqua.source_id = service.serviceoperationalstatus.id
) as notes_note_view_yorwgd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xhpdiy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xhpdiy.title AS varchar), '(' || organisation_organisationauthority_lat_xhpdiy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xhpdiy.href
  )) as specialdateauthority  from master_join master_join_jlmwsu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xhpdiy on master_join_jlmwsu.target_id = organisation_organisationauthority_lat_xhpdiy.id
  where master_join_jlmwsu.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_xnrojl on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ndnikl.timeinterval::jsonb as timeinterval,
    notes_note_view_mkzswb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rqulvj.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ojcjkl.*) AS timeinterval
  from master_join master_join_exkdry
  join shared.timesheet_view shared_timesheet_lat_ojcjkl on master_join_exkdry.target_id = shared_timesheet_lat_ojcjkl.id
  where master_join_exkdry.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_ndnikl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_agylzl.*) AS annotation
  from master_join master_join_smroas
  join notes.note_view notes_note_lat_agylzl on master_join_smroas.target_id = notes_note_lat_agylzl.id
  where master_join_smroas.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_mkzswb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ibcgtv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ibcgtv.title AS varchar), '(' || organisation_organisationauthority_lat_ibcgtv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ibcgtv.href
  )) as specialdateauthority  from master_join master_join_zmdecg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ibcgtv on master_join_zmdecg.target_id = organisation_organisationauthority_lat_ibcgtv.id
  where master_join_zmdecg.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_rqulvj on TRUE;
-- TelephoneContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_mlquyd.timeinterval::jsonb as timeinterval,
    notes_note_view_nybxed.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_empyaw.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_aovbtu.*) AS timeinterval
  from master_join master_join_pyetpt
  join shared.timesheet_view shared_timesheet_lat_aovbtu on master_join_pyetpt.target_id = shared_timesheet_lat_aovbtu.id
  where master_join_pyetpt.source_id = shared.telephonecontact.id
) as shared_timesheet_view_mlquyd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_epzhgj.*) AS annotation
  from master_join master_join_echopr
  join notes.note_view notes_note_lat_epzhgj on master_join_echopr.target_id = notes_note_lat_epzhgj.id
  where master_join_echopr.source_id = shared.telephonecontact.id
) as notes_note_view_nybxed on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rqfrys.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rqfrys.title AS varchar), '(' || organisation_organisationauthority_lat_rqfrys.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rqfrys.href
  )) as specialdateauthority  from master_join master_join_rmsfyc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rqfrys on master_join_rmsfyc.target_id = organisation_organisationauthority_lat_rqfrys.id
  where master_join_rmsfyc.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_empyaw on TRUE;
-- UnitAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qcgoud.timeinterval::jsonb as timeinterval,
    notes_note_view_myledq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_uhxgtb.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bgybqp.*) AS timeinterval
  from master_join master_join_isrbnv
  join shared.timesheet_view shared_timesheet_lat_bgybqp on master_join_isrbnv.target_id = shared_timesheet_lat_bgybqp.id
  where master_join_isrbnv.source_id = organisation.unitavailability.id
) as shared_timesheet_view_qcgoud on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ienyuv.*) AS annotation
  from master_join master_join_buqrzo
  join notes.note_view notes_note_lat_ienyuv on master_join_buqrzo.target_id = notes_note_lat_ienyuv.id
  where master_join_buqrzo.source_id = organisation.unitavailability.id
) as notes_note_view_myledq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tbktni.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tbktni.title AS varchar), '(' || organisation_organisationauthority_lat_tbktni.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tbktni.href
  )) as specialdateauthority  from master_join master_join_qqvhgg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tbktni on master_join_qqvhgg.target_id = organisation_organisationauthority_lat_tbktni.id
  where master_join_qqvhgg.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_uhxgtb on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_vqytci.timeinterval::jsonb as timeinterval,
    notes_note_view_tbpouk.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yemijf.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kzgwlt.*) AS timeinterval
  from master_join master_join_kylejn
  join shared.timesheet_view shared_timesheet_lat_kzgwlt on master_join_kylejn.target_id = shared_timesheet_lat_kzgwlt.id
  where master_join_kylejn.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_vqytci on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwinwy.*) AS annotation
  from master_join master_join_rmbtpw
  join notes.note_view notes_note_lat_hwinwy on master_join_rmbtpw.target_id = notes_note_lat_hwinwy.id
  where master_join_rmbtpw.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_tbpouk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zpkfuf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zpkfuf.title AS varchar), '(' || organisation_organisationauthority_lat_zpkfuf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zpkfuf.href
  )) as specialdateauthority  from master_join master_join_havjxw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zpkfuf on master_join_havjxw.target_id = organisation_organisationauthority_lat_zpkfuf.id
  where master_join_havjxw.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_yemijf on TRUE;
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'shared.timesheet_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_avlzal.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_avlzal.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_avlzal.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_avlzal.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_avlzal.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_avlzal.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_avlzal.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_avlzal.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_axxoux.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_axxoux.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_axxoux.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_axxoux.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_axxoux.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_axxoux.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_txrwyu.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_txrwyu.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_txrwyu.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_txrwyu.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_txrwyu.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_txrwyu.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_bbqixa.timeinterval::jsonb as timeinterval,
    notes_note_view_dppsgc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_czpxfq.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_qqcmrl.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_avlzal on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_avlzal.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_axxoux on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_axxoux.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_txrwyu on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_txrwyu.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_plonoo.*) AS timeinterval
  from master_join master_join_vpjtlt
  join shared.timesheet_view shared_timesheet_lat_plonoo on master_join_vpjtlt.target_id = shared_timesheet_lat_plonoo.id
  where master_join_vpjtlt.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_bbqixa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qthmwc.*) AS annotation
  from master_join master_join_tyzsao
  join notes.note_view notes_note_lat_qthmwc on master_join_tyzsao.target_id = notes_note_lat_qthmwc.id
  where master_join_tyzsao.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_dppsgc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_imhxlz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_imhxlz.title AS varchar), '(' || organisation_organisationauthority_lat_imhxlz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_imhxlz.href
  )) as specialdateauthority  from master_join master_join_ebkucz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_imhxlz on master_join_ebkucz.target_id = organisation_organisationauthority_lat_imhxlz.id
  where master_join_ebkucz.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_czpxfq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jtgbsl.id) as lighting
  from master_join master_join_tnywlv
  join shared.lightelement_pt shared_lightelement_lat_jtgbsl on master_join_tnywlv.target_id = shared_lightelement_lat_jtgbsl.id
  where master_join_tnywlv.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_qqcmrl on TRUE;
-- WorkareaActivityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_djwmdb.timeinterval::jsonb as timeinterval,
    notes_note_view_yvdewv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_epbiqf.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_looynv.*) AS timeinterval
  from master_join master_join_piunwe
  join shared.timesheet_view shared_timesheet_lat_looynv on master_join_piunwe.target_id = shared_timesheet_lat_looynv.id
  where master_join_piunwe.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_djwmdb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_khiwwg.*) AS annotation
  from master_join master_join_bvzgzy
  join notes.note_view notes_note_lat_khiwwg on master_join_bvzgzy.target_id = notes_note_lat_khiwwg.id
  where master_join_bvzgzy.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_yvdewv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_makzdq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_makzdq.title AS varchar), '(' || organisation_organisationauthority_lat_makzdq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_makzdq.href
  )) as specialdateauthority  from master_join master_join_crkamh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_makzdq on master_join_crkamh.target_id = organisation_organisationauthority_lat_makzdq.id
  where master_join_crkamh.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_epbiqf on TRUE;
-- ContactInformationPropertyType
-- ['notes.note_view', 'shared.onlinecontact_view', 'shared.postaladdress_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_kxjrkl.id)::jsonb AS selection,
    notes_note_view_tnrbwv.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_kxjrkl on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_kxjrkl.id
left join lateral(
  select
  from master_join master_join_ihoxao
  join shared.contactinformation_view shared_contactinformation_lat_opazva on master_join_ihoxao.target_id = shared_contactinformation_lat_opazva.id
  where master_join_ihoxao.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_mdtlxf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_saifst.*) AS annotation
  from master_join master_join_niiwhp
  join notes.note_view notes_note_lat_saifst on master_join_niiwhp.target_id = notes_note_lat_saifst.id
  where master_join_niiwhp.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_tnrbwv on TRUE;
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_rsjods.id)::jsonb AS selection,
    notes_note_view_sxsydw.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_rsjods on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_rsjods.id
left join lateral(
  select
  from master_join master_join_egjclv
  join shared.contactinformation_view shared_contactinformation_lat_hciwhn on master_join_egjclv.target_id = shared_contactinformation_lat_hciwhn.id
  where master_join_egjclv.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_olvzht on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aadlin.*) AS annotation
  from master_join master_join_deitjt
  join notes.note_view notes_note_lat_aadlin on master_join_deitjt.target_id = notes_note_lat_aadlin.id
  where master_join_deitjt.source_id = airport_heliport.apronareausage.id
) as notes_note_view_sxsydw on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_pftowe.routeelement::jsonb as routeelement,
    notes_note_view_jongew.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_npomyc.id) as routeelement
  from master_join master_join_vxsobg
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_npomyc on master_join_vxsobg.target_id = routes_flightroutingelement_lat_npomyc.id
  where master_join_vxsobg.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_pftowe on TRUE
left join lateral(
  select
  from master_join master_join_jrniep
  join shared.contactinformation_view shared_contactinformation_lat_uyhdxc on master_join_jrniep.target_id = shared_contactinformation_lat_uyhdxc.id
  where master_join_jrniep.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_kszdts on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykkmai.*) AS annotation
  from master_join master_join_obdsmy
  join notes.note_view notes_note_lat_ykkmai on master_join_obdsmy.target_id = notes_note_lat_ykkmai.id
  where master_join_obdsmy.source_id = routes.flightrestrictionroute.id
) as notes_note_view_jongew on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_xlhuay.id)::jsonb AS selection,
    notes_note_view_jwwhfm.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_xlhuay on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_xlhuay.id
left join lateral(
  select
  from master_join master_join_koxbog
  join shared.contactinformation_view shared_contactinformation_lat_fuonsp on master_join_koxbog.target_id = shared_contactinformation_lat_fuonsp.id
  where master_join_koxbog.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_dnvvqj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xglubm.*) AS annotation
  from master_join master_join_oujwoq
  join notes.note_view notes_note_lat_xglubm on master_join_oujwoq.target_id = notes_note_lat_xglubm.id
  where master_join_oujwoq.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_jwwhfm on TRUE;
-- AerialRefuellingType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'routes.routeavailability_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_cfozzu.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_cfozzu.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_cfozzu.href::text AS oppositetrack_href,
    routes_routeavailability_view_rwyeda.availability::jsonb as availability,
    routes_routeavailability_view_rwyeda.availability_annotation::jsonb as availability_annotation,
    airspace_airspace_pt_amexts.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_kcnspw.track::jsonb as track,
    aerial_refuelling_aerialrefuellingtrack_view_kcnspw.track_annotation::jsonb as track_annotation,
    aerial_refuelling_aerialrefuellinganchor_view_pcugcv.anchor::jsonb as anchor,
    aerial_refuelling_aerialrefuellinganchor_view_pcugcv.anchor_annotation::jsonb as anchor_annotation,
    aerial_refuelling_authorityforaerialrefuelling_view_mtaprx.managingorganisation::jsonb as managingorganisation,
    aerial_refuelling_authorityforaerialrefuelling_view_mtaprx.managingorganisation_annotation::jsonb as managingorganisation_annotation,
    notes_note_view_psqcvm.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_cfozzu on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_cfozzu.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_srsllo.*) as availability,
      jsonb_agg(DISTINCT routes_routeavailability_lat_srsllo.annotation) as availability_annotation  from master_join master_join_vocxgz
  join routes.routeavailability_view routes_routeavailability_lat_srsllo on master_join_vocxgz.target_id = routes_routeavailability_lat_srsllo.id
  where master_join_vocxgz.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_rwyeda on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_jicwaa.id,
      'title', coalesce(cast(airspace_airspace_lat_jicwaa.title AS varchar), '(' || airspace_airspace_lat_jicwaa.nilreason[1] || ')'),
      'href', airspace_airspace_lat_jicwaa.href
  )) as protectingairspace  from master_join master_join_xsuxpo
  join airspace.airspace_pt airspace_airspace_lat_jicwaa on master_join_xsuxpo.target_id = airspace_airspace_lat_jicwaa.id
  where master_join_xsuxpo.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_amexts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_iibkcj.*) as track,
      jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_iibkcj.annotation) as track_annotation  from master_join master_join_ymilca
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_iibkcj on master_join_ymilca.target_id = aerial_refuelling_aerialrefuellingtrack_lat_iibkcj.id
  where master_join_ymilca.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_kcnspw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_xmugkl.*) as anchor,
      jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_xmugkl.annotation) as anchor_annotation  from master_join master_join_fkqspl
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_xmugkl on master_join_fkqspl.target_id = aerial_refuelling_aerialrefuellinganchor_lat_xmugkl.id
  where master_join_fkqspl.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_pcugcv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_rqfhrl.*) as managingorganisation,
      jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_rqfhrl.annotation) as managingorganisation_annotation  from master_join master_join_hoyrkh
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_rqfhrl on master_join_hoyrkh.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_rqfhrl.id
  where master_join_hoyrkh.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_mtaprx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eyldpe.*) AS annotation
  from master_join master_join_hpiisl
  join notes.note_view notes_note_lat_eyldpe on master_join_hpiisl.target_id = notes_note_lat_eyldpe.id
  where master_join_hpiisl.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_psqcvm on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_pgvsqn.title as varchar), '(' || obstacles_verticalstructure_pt_pgvsqn.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_pgvsqn.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_enlyuv.title as varchar), '(' || airport_heliport_airportheliport_pt_enlyuv.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_enlyuv.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_lmkins.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lmkins.longitude AS location_longitude,
    geometry_elevatedpoint_view_lmkins.latitude AS location_latitude,
    geometry_elevatedpoint_view_lmkins.elevation AS location_elevation,
    geometry_elevatedpoint_view_lmkins.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lmkins.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lmkins.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lmkins.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_dqcovb.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_pgvsqn on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_pgvsqn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_enlyuv on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_enlyuv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lmkins on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_lmkins.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dnwtbb.*) AS annotation
  from master_join master_join_edbgmf
  join notes.note_view notes_note_lat_dnwtbb on master_join_edbgmf.target_id = notes_note_lat_dnwtbb.id
  where master_join_edbgmf.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_dqcovb on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_gdqcyl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gdqcyl.longitude AS location_longitude,
    geometry_elevatedpoint_view_gdqcyl.latitude AS location_latitude,
    geometry_elevatedpoint_view_gdqcyl.elevation AS location_elevation,
    geometry_elevatedpoint_view_gdqcyl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gdqcyl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gdqcyl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gdqcyl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_tajmju.title as varchar), '(' || organisation_unit_pt_tajmju.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_tajmju.href::text AS serviceprovider_href,
    service_callsigndetail_view_qyftes.callsign::jsonb as callsign,
    service_callsigndetail_view_qyftes.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_rbmrik.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_bmhucs.availability::jsonb as availability,
    service_serviceoperationalstatus_view_bmhucs.availability_annotation::jsonb as availability_annotation,
    notes_note_view_oduhoy.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_jjjkao.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gdqcyl on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_gdqcyl.id
left join organisation.unit_pt organisation_unit_pt_tajmju on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_tajmju.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_rrdzsu.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_rrdzsu.annotation) as callsign_annotation  from master_join master_join_ztcsmi
  join service.callsigndetail_view service_callsigndetail_lat_rrdzsu on master_join_ztcsmi.target_id = service_callsigndetail_lat_rrdzsu.id
  where master_join_ztcsmi.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_qyftes on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_uywcfw.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_uywcfw.title AS varchar), '(' || service_radiocommunicationchannel_lat_uywcfw.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_uywcfw.href
  )) as radiocommunication  from master_join master_join_elxhfv
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_uywcfw on master_join_elxhfv.target_id = service_radiocommunicationchannel_lat_uywcfw.id
  where master_join_elxhfv.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_rbmrik on TRUE
left join lateral(
  select
  from master_join master_join_zjdbsn
  join shared.contactinformation_view shared_contactinformation_lat_nvwncx on master_join_zjdbsn.target_id = shared_contactinformation_lat_nvwncx.id
  where master_join_zjdbsn.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_bkrylc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_irknoq.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_irknoq.annotation) as availability_annotation  from master_join master_join_vmzbtd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_irknoq on master_join_vmzbtd.target_id = service_serviceoperationalstatus_lat_irknoq.id
  where master_join_vmzbtd.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_bmhucs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vefxgw.*) AS annotation
  from master_join master_join_qnpgca
  join notes.note_view notes_note_lat_vefxgw on master_join_qnpgca.target_id = notes_note_lat_vefxgw.id
  where master_join_qnpgca.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_oduhoy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wnqcxy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wnqcxy.title AS varchar), '(' || airport_heliport_airportheliport_lat_wnqcxy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wnqcxy.href
  )) as airportheliport  from master_join master_join_bneovd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wnqcxy on master_join_bneovd.target_id = airport_heliport_airportheliport_lat_wnqcxy.id
  where master_join_bneovd.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_jjjkao on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.aircraftstandcontamination_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lhmnde.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_lhmnde.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_icgbqv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_icgbqv.longitude AS location_longitude,
    geometry_elevatedpoint_view_icgbqv.latitude AS location_latitude,
    geometry_elevatedpoint_view_icgbqv.elevation AS location_elevation,
    geometry_elevatedpoint_view_icgbqv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_icgbqv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_icgbqv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_icgbqv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_pgrdcv.title as varchar), '(' || airport_heliport_apronelement_pt_pgrdcv.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_pgrdcv.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_wdgiuw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_wdgiuw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_wdgiuw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_wdgiuw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_wdgiuw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_wdgiuw.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_hwsrmx.contaminant::jsonb as contaminant,
    airport_heliport_aircraftstandcontamination_view_hwsrmx.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_rkcfqb.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_tvmfsi.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_tvmfsi.availability_annotation::jsonb as availability_annotation
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lhmnde on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lhmnde.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_icgbqv on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_icgbqv.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_pgrdcv on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_pgrdcv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wdgiuw on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_wdgiuw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_jczznu.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_jczznu.annotation) as contaminant_annotation  from master_join master_join_tlxahj
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_jczznu on master_join_tlxahj.target_id = airport_heliport_aircraftstandcontamination_lat_jczznu.id
  where master_join_tlxahj.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_hwsrmx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iosyvp.*) AS annotation
  from master_join master_join_dztray
  join notes.note_view notes_note_lat_iosyvp on master_join_dztray.target_id = notes_note_lat_iosyvp.id
  where master_join_dztray.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_rkcfqb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_hwjnyn.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_hwjnyn.annotation) as availability_annotation  from master_join master_join_eeqepw
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_hwjnyn on master_join_eeqepw.target_id = airport_heliport_apronareaavailability_lat_hwjnyn.id
  where master_join_eeqepw.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_tvmfsi on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_tevbcd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tevbcd.longitude AS location_longitude,
    geometry_elevatedpoint_view_tevbcd.latitude AS location_latitude,
    geometry_elevatedpoint_view_tevbcd.elevation AS location_elevation,
    geometry_elevatedpoint_view_tevbcd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tevbcd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tevbcd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tevbcd.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ycigjo.title as varchar), '(' || organisation_unit_pt_ycigjo.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ycigjo.href::text AS serviceprovider_href,
    service_callsigndetail_view_pctbxh.callsign::jsonb as callsign,
    service_callsigndetail_view_pctbxh.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_hmanvo.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_weeexp.availability::jsonb as availability,
    service_serviceoperationalstatus_view_weeexp.availability_annotation::jsonb as availability_annotation,
    notes_note_view_pqfxhm.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_itqbhb.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tevbcd on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_tevbcd.id
left join organisation.unit_pt organisation_unit_pt_ycigjo on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_ycigjo.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_souoxv.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_souoxv.annotation) as callsign_annotation  from master_join master_join_cwycty
  join service.callsigndetail_view service_callsigndetail_lat_souoxv on master_join_cwycty.target_id = service_callsigndetail_lat_souoxv.id
  where master_join_cwycty.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_pctbxh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qjdgxu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qjdgxu.title AS varchar), '(' || service_radiocommunicationchannel_lat_qjdgxu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qjdgxu.href
  )) as radiocommunication  from master_join master_join_ezxcee
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qjdgxu on master_join_ezxcee.target_id = service_radiocommunicationchannel_lat_qjdgxu.id
  where master_join_ezxcee.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_hmanvo on TRUE
left join lateral(
  select
  from master_join master_join_augkyx
  join shared.contactinformation_view shared_contactinformation_lat_wgdkrp on master_join_augkyx.target_id = shared_contactinformation_lat_wgdkrp.id
  where master_join_augkyx.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_yhddub on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_imliub.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_imliub.annotation) as availability_annotation  from master_join master_join_cqeovd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_imliub on master_join_cqeovd.target_id = service_serviceoperationalstatus_lat_imliub.id
  where master_join_cqeovd.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_weeexp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_megywr.*) AS annotation
  from master_join master_join_tejngw
  join notes.note_view notes_note_lat_megywr on master_join_tejngw.target_id = notes_note_lat_megywr.id
  where master_join_tejngw.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_pqfxhm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lxinhv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lxinhv.title AS varchar), '(' || airport_heliport_airportheliport_lat_lxinhv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lxinhv.href
  )) as airportheliport  from master_join master_join_hcnpdj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lxinhv on master_join_hcnpdj.target_id = airport_heliport_airportheliport_lat_lxinhv.id
  where master_join_hcnpdj.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_itqbhb on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_yumuab.title as varchar), '(' || airport_heliport_airportheliport_pt_yumuab.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_yumuab.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sjishr.title as varchar), '(' || airport_heliport_airportheliport_pt_sjishr.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_sjishr.href::text AS dependentairport_href,
    notes_note_view_tapakm.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yumuab on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_yumuab.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sjishr on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_sjishr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uzkxnb.*) AS annotation
  from master_join master_join_bhwmxj
  join notes.note_view notes_note_lat_uzkxnb on master_join_bhwmxj.target_id = notes_note_lat_uzkxnb.id
  where master_join_bhwmxj.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_tapakm on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportType
-- ['airport_heliport.airportheliportcontamination_view', 'airport_heliport.city_view', 'notes.note_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'airport_heliport.airportheliportavailability_view', 'shared.contactinformation_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_fnqojh.*)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_fnqojh.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_iqmhjb.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_iqmhjb.longitude AS arp_longitude,
    geometry_elevatedpoint_view_iqmhjb.latitude AS arp_latitude,
    geometry_elevatedpoint_view_iqmhjb.elevation AS arp_elevation,
    geometry_elevatedpoint_view_iqmhjb.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_iqmhjb.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_iqmhjb.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_iqmhjb.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_dlqguw.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_dlqguw.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_dlqguw.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_dlqguw.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_dlqguw.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_dlqguw.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_jynpif.contaminant::jsonb as contaminant,
    airport_heliport_airportheliportcontamination_view_jynpif.contaminant_annotation::jsonb as contaminant_annotation,
    airport_heliport_city_view_kqanep.servedcity::jsonb as servedcity,
    airport_heliport_city_view_kqanep.servedcity_annotation::jsonb as servedcity_annotation,
    airport_heliport_altimetersource_pt_seoekl.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_hdmbla.availability::jsonb as availability,
    airport_heliport_airportheliportavailability_view_hdmbla.availability_annotation::jsonb as availability_annotation,
    notes_note_view_kcqtel.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_fnqojh on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_fnqojh.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iqmhjb on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_iqmhjb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dlqguw on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_dlqguw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_hwkgdt.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_hwkgdt.annotation) as contaminant_annotation  from master_join master_join_orjmio
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_hwkgdt on master_join_orjmio.target_id = airport_heliport_airportheliportcontamination_lat_hwkgdt.id
  where master_join_orjmio.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_jynpif on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_jsnblb.*) as servedcity,
      jsonb_agg(DISTINCT airport_heliport_city_lat_jsnblb.annotation) as servedcity_annotation  from master_join master_join_dqdogr
  join airport_heliport.city_view airport_heliport_city_lat_jsnblb on master_join_dqdogr.target_id = airport_heliport_city_lat_jsnblb.id
  where master_join_dqdogr.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_kqanep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_agjwhq.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_agjwhq.title AS varchar), '(' || airport_heliport_altimetersource_lat_agjwhq.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_agjwhq.href
  )) as altimetersource  from master_join master_join_vbwxot
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_agjwhq on master_join_vbwxot.target_id = airport_heliport_altimetersource_lat_agjwhq.id
  where master_join_vbwxot.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_seoekl on TRUE
left join lateral(
  select
  from master_join master_join_ujaemq
  join shared.contactinformation_view shared_contactinformation_lat_sypqng on master_join_ujaemq.target_id = shared_contactinformation_lat_sypqng.id
  where master_join_ujaemq.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_vxnfny on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_kbgzho.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_kbgzho.annotation) as availability_annotation  from master_join master_join_swpvsq
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_kbgzho on master_join_swpvsq.target_id = airport_heliport_airportheliportavailability_lat_kbgzho.id
  where master_join_swpvsq.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_hdmbla on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pcorjy.*) AS annotation
  from master_join master_join_nfxrtq
  join notes.note_view notes_note_lat_pcorjy on master_join_nfxrtq.target_id = notes_note_lat_pcorjy.id
  where master_join_nfxrtq.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_kcqtel on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_bqcram.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_bqcram.elevation AS area_elevation,
    geometry_elevatedsurface_view_bqcram.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_bqcram.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_bqcram.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_bqcram.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_bnyuac.title as varchar), '(' || airport_heliport_airportheliport_pt_bnyuac.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_bnyuac.href::text AS affectedairport_href,
    notes_note_view_ykccxr.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bqcram on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_bqcram.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bnyuac on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_bnyuac.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_abbegd.*) AS annotation
  from master_join master_join_dklouc
  join notes.note_view notes_note_lat_abbegd on master_join_dklouc.target_id = notes_note_lat_abbegd.id
  where master_join_dklouc.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_ykccxr on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    airport_heliport_airportheliportprotectionarea_pt_fjlcti.markedprotectionarea::jsonb as markedprotectionarea,
    airport_heliport_markingelement_view_msxkke.element::jsonb as element,
    airport_heliport_markingelement_view_msxkke.element_annotation::jsonb as element_annotation,
    notes_note_view_lmtcyy.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliportprotectionarea_lat_cwifdd.id,
      'title', coalesce(cast(airport_heliport_airportheliportprotectionarea_lat_cwifdd.title AS varchar), '(' || airport_heliport_airportheliportprotectionarea_lat_cwifdd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliportprotectionarea_lat_cwifdd.href
  )) as markedprotectionarea  from master_join master_join_zbnazn
  join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_lat_cwifdd on master_join_zbnazn.target_id = airport_heliport_airportheliportprotectionarea_lat_cwifdd.id
  where master_join_zbnazn.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_airportheliportprotectionarea_pt_fjlcti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_jyewds.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_jyewds.annotation) as element_annotation  from master_join master_join_kwhsmn
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_jyewds on master_join_kwhsmn.target_id = airport_heliport_markingelement_lat_jyewds.id
  where master_join_kwhsmn.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_msxkke on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lynjkm.*) AS annotation
  from master_join master_join_hgsgbj
  join notes.note_view notes_note_lat_lynjkm on master_join_hgsgbj.target_id = notes_note_lat_lynjkm.id
  where master_join_hgsgbj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_lmtcyy on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceType
-- ['service.callsigndetail_view', 'service.oxygen_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.nitrogen_view', 'service.serviceoperationalstatus_view', 'service.fuel_view', 'service.oil_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_wiyrjp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wiyrjp.longitude AS location_longitude,
    geometry_elevatedpoint_view_wiyrjp.latitude AS location_latitude,
    geometry_elevatedpoint_view_wiyrjp.elevation AS location_elevation,
    geometry_elevatedpoint_view_wiyrjp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wiyrjp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wiyrjp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wiyrjp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_howurz.title as varchar), '(' || organisation_unit_pt_howurz.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_howurz.href::text AS serviceprovider_href,
    service_callsigndetail_view_mhfnuj.callsign::jsonb as callsign,
    service_callsigndetail_view_mhfnuj.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_afllrb.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_raylrd.availability::jsonb as availability,
    service_serviceoperationalstatus_view_raylrd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_imllgo.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_wqhzgp.airportheliport::jsonb as airportheliport,
    service_fuel_view_epaxir.fuelsupply::jsonb as fuelsupply,
    service_fuel_view_epaxir.fuelsupply_annotation::jsonb as fuelsupply_annotation,
    service_oil_view_mxrecx.oilsupply::jsonb as oilsupply,
    service_oil_view_mxrecx.oilsupply_annotation::jsonb as oilsupply_annotation,
    service_nitrogen_view_cajrty.nitrogensupply::jsonb as nitrogensupply,
    service_nitrogen_view_cajrty.nitrogensupply_annotation::jsonb as nitrogensupply_annotation,
    service_oxygen_view_krndvu.oxygensupply::jsonb as oxygensupply,
    service_oxygen_view_krndvu.oxygensupply_annotation::jsonb as oxygensupply_annotation
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wiyrjp on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_wiyrjp.id
left join organisation.unit_pt organisation_unit_pt_howurz on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_howurz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ilaipu.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_ilaipu.annotation) as callsign_annotation  from master_join master_join_bthcnb
  join service.callsigndetail_view service_callsigndetail_lat_ilaipu on master_join_bthcnb.target_id = service_callsigndetail_lat_ilaipu.id
  where master_join_bthcnb.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_mhfnuj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_owvnit.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_owvnit.title AS varchar), '(' || service_radiocommunicationchannel_lat_owvnit.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_owvnit.href
  )) as radiocommunication  from master_join master_join_gfwdwy
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_owvnit on master_join_gfwdwy.target_id = service_radiocommunicationchannel_lat_owvnit.id
  where master_join_gfwdwy.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_afllrb on TRUE
left join lateral(
  select
  from master_join master_join_nspnfu
  join shared.contactinformation_view shared_contactinformation_lat_macaho on master_join_nspnfu.target_id = shared_contactinformation_lat_macaho.id
  where master_join_nspnfu.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_eroqsn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_grghfo.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_grghfo.annotation) as availability_annotation  from master_join master_join_pseyru
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_grghfo on master_join_pseyru.target_id = service_serviceoperationalstatus_lat_grghfo.id
  where master_join_pseyru.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_raylrd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plyxcd.*) AS annotation
  from master_join master_join_mrhvon
  join notes.note_view notes_note_lat_plyxcd on master_join_mrhvon.target_id = notes_note_lat_plyxcd.id
  where master_join_mrhvon.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_imllgo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_djplsd.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_djplsd.title AS varchar), '(' || airport_heliport_airportheliport_lat_djplsd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_djplsd.href
  )) as airportheliport  from master_join master_join_pawsiv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_djplsd on master_join_pawsiv.target_id = airport_heliport_airportheliport_lat_djplsd.id
  where master_join_pawsiv.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_wqhzgp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_rrgmmk.*) as fuelsupply,
      jsonb_agg(DISTINCT service_fuel_lat_rrgmmk.annotation) as fuelsupply_annotation  from master_join master_join_cdkslu
  join service.fuel_view service_fuel_lat_rrgmmk on master_join_cdkslu.target_id = service_fuel_lat_rrgmmk.id
  where master_join_cdkslu.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_epaxir on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_qpvshz.*) as oilsupply,
      jsonb_agg(DISTINCT service_oil_lat_qpvshz.annotation) as oilsupply_annotation  from master_join master_join_luzlpy
  join service.oil_view service_oil_lat_qpvshz on master_join_luzlpy.target_id = service_oil_lat_qpvshz.id
  where master_join_luzlpy.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_mxrecx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_gjeimf.*) as nitrogensupply,
      jsonb_agg(DISTINCT service_nitrogen_lat_gjeimf.annotation) as nitrogensupply_annotation  from master_join master_join_jwesmk
  join service.nitrogen_view service_nitrogen_lat_gjeimf on master_join_jwesmk.target_id = service_nitrogen_lat_gjeimf.id
  where master_join_jwesmk.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_cajrty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_hmpwfv.*) as oxygensupply,
      jsonb_agg(DISTINCT service_oxygen_lat_hmpwfv.annotation) as oxygensupply_annotation  from master_join master_join_jurhoq
  join service.oxygen_view service_oxygen_lat_hmpwfv on master_join_jurhoq.target_id = service_oxygen_lat_hmpwfv.id
  where master_join_jurhoq.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_krndvu on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_qghaqa.title as varchar), '(' || airspace_airspace_pt_qghaqa.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_qghaqa.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_pxrgvm.title as varchar), '(' || airspace_airspace_pt_pxrgvm.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_pxrgvm.href::text AS enteredairspace_href,
    notes_note_view_ibdoln.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_qghaqa on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_qghaqa.id
left join airspace.airspace_pt airspace_airspace_pt_pxrgvm on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_pxrgvm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_saqamf.*) AS annotation
  from master_join master_join_kxbfmt
  join notes.note_view notes_note_lat_saqamf on master_join_kxbfmt.target_id = notes_note_lat_saqamf.id
  where master_join_kxbfmt.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_ibdoln on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceType
-- ['notes.note_view', 'airspace.airspaceactivation_view', 'airspace.airspacelayerclass_view', 'airspace.airspacegeometrycomponent_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_passfu.title as varchar), '(' || routes_route_pt_passfu.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_passfu.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_scudpe.clazz::jsonb as clazz,
    airspace_airspacelayerclass_view_scudpe.clazz_annotation::jsonb as clazz_annotation,
    airspace_airspacegeometrycomponent_view_giyebi.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspacegeometrycomponent_view_giyebi.geometrycomponent_annotation::jsonb as geometrycomponent_annotation,
    airspace_airspaceactivation_view_dybrgl.activation::jsonb as activation,
    airspace_airspaceactivation_view_dybrgl.activation_annotation::jsonb as activation_annotation,
    notes_note_view_jvxrxg.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_passfu on airspace.airspace_ts.protectedroute_id = routes_route_pt_passfu.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_nsyaue.*) as clazz,
      jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_nsyaue.annotation) as clazz_annotation  from master_join master_join_ebsrpk
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_nsyaue on master_join_ebsrpk.target_id = airspace_airspacelayerclass_lat_nsyaue.id
  where master_join_ebsrpk.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_scudpe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_sxeyiz.*) as geometrycomponent,
      jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_sxeyiz.annotation) as geometrycomponent_annotation  from master_join master_join_obamxp
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_sxeyiz on master_join_obamxp.target_id = airspace_airspacegeometrycomponent_lat_sxeyiz.id
  where master_join_obamxp.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_giyebi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_xwdhhn.*) as activation,
      jsonb_agg(DISTINCT airspace_airspaceactivation_lat_xwdhhn.annotation) as activation_annotation  from master_join master_join_hrvfny
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_xwdhhn on master_join_hrvfny.target_id = airspace_airspaceactivation_lat_xwdhhn.id
  where master_join_hrvfny.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_dybrgl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjymgb.*) AS annotation
  from master_join master_join_teckuc
  join notes.note_view notes_note_lat_qjymgb on master_join_teckuc.target_id = notes_note_lat_qjymgb.id
  where master_join_teckuc.source_id = airspace.airspace_ts.id
) as notes_note_view_jvxrxg on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_upwrhv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_upwrhv.longitude AS location_longitude,
    geometry_elevatedpoint_view_upwrhv.latitude AS location_latitude,
    geometry_elevatedpoint_view_upwrhv.elevation AS location_elevation,
    geometry_elevatedpoint_view_upwrhv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_upwrhv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_upwrhv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_upwrhv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_sukbxa.title as varchar), '(' || organisation_unit_pt_sukbxa.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_sukbxa.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_dzuovs.title as varchar), '(' || navaids_points_directionfinder_pt_dzuovs.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_dzuovs.href::text AS aircraftlocator_href,
    service_callsigndetail_view_qtspen.callsign::jsonb as callsign,
    service_callsigndetail_view_qtspen.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_wffkmf.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_plzidn.availability::jsonb as availability,
    service_serviceoperationalstatus_view_plzidn.availability_annotation::jsonb as availability_annotation,
    notes_note_view_feqrsb.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_pnyntm.clientairport::jsonb as clientairport,
    airspace_airspace_pt_lmujqq.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_zyzino.clientroute::jsonb as clientroute,
    routes_routeportion_view_zyzino.clientroute_annotation::jsonb as clientroute_annotation,
    procedure_procedure_pt_inxiti.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_ujtpzk.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_ttntxe.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_upwrhv on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_upwrhv.id
left join organisation.unit_pt organisation_unit_pt_sukbxa on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_sukbxa.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_dzuovs on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_dzuovs.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_vdohrm.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_vdohrm.annotation) as callsign_annotation  from master_join master_join_zxqdiw
  join service.callsigndetail_view service_callsigndetail_lat_vdohrm on master_join_zxqdiw.target_id = service_callsigndetail_lat_vdohrm.id
  where master_join_zxqdiw.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_qtspen on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_tjzeea.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_tjzeea.title AS varchar), '(' || service_radiocommunicationchannel_lat_tjzeea.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_tjzeea.href
  )) as radiocommunication  from master_join master_join_swbmks
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_tjzeea on master_join_swbmks.target_id = service_radiocommunicationchannel_lat_tjzeea.id
  where master_join_swbmks.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_wffkmf on TRUE
left join lateral(
  select
  from master_join master_join_xfxunn
  join shared.contactinformation_view shared_contactinformation_lat_kohlxq on master_join_xfxunn.target_id = shared_contactinformation_lat_kohlxq.id
  where master_join_xfxunn.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_lpbajk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_lzjdri.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_lzjdri.annotation) as availability_annotation  from master_join master_join_fojgcu
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_lzjdri on master_join_fojgcu.target_id = service_serviceoperationalstatus_lat_lzjdri.id
  where master_join_fojgcu.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_plzidn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mabesq.*) AS annotation
  from master_join master_join_lpnawj
  join notes.note_view notes_note_lat_mabesq on master_join_lpnawj.target_id = notes_note_lat_mabesq.id
  where master_join_lpnawj.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_feqrsb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_egkloe.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_egkloe.title AS varchar), '(' || airport_heliport_airportheliport_lat_egkloe.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_egkloe.href
  )) as clientairport  from master_join master_join_xhitgh
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_egkloe on master_join_xhitgh.target_id = airport_heliport_airportheliport_lat_egkloe.id
  where master_join_xhitgh.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_pnyntm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_aiealk.id,
      'title', coalesce(cast(airspace_airspace_lat_aiealk.title AS varchar), '(' || airspace_airspace_lat_aiealk.nilreason[1] || ')'),
      'href', airspace_airspace_lat_aiealk.href
  )) as clientairspace  from master_join master_join_etjtku
  join airspace.airspace_pt airspace_airspace_lat_aiealk on master_join_etjtku.target_id = airspace_airspace_lat_aiealk.id
  where master_join_etjtku.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_lmujqq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_flmegu.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_flmegu.annotation) as clientroute_annotation  from master_join master_join_oharrn
  join routes.routeportion_view routes_routeportion_lat_flmegu on master_join_oharrn.target_id = routes_routeportion_lat_flmegu.id
  where master_join_oharrn.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_zyzino on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_kfzzie.id,
      'title', coalesce(cast(procedure_procedure_lat_kfzzie.title AS varchar), '(' || procedure_procedure_lat_kfzzie.nilreason[1] || ')'),
      'href', procedure_procedure_lat_kfzzie.href
  )) as clientprocedure  from master_join master_join_qinunz
  join procedure.procedure_pt procedure_procedure_lat_kfzzie on master_join_qinunz.target_id = procedure_procedure_lat_kfzzie.id
  where master_join_qinunz.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_inxiti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ccwyoq.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ccwyoq.title AS varchar), '(' || holding_holdingpattern_lat_ccwyoq.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ccwyoq.href
  )) as clientholding  from master_join master_join_moactj
  join holding.holdingpattern_pt holding_holdingpattern_lat_ccwyoq on master_join_moactj.target_id = holding_holdingpattern_lat_ccwyoq.id
  where master_join_moactj.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_ujtpzk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_nkesdf.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_nkesdf.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_nkesdf.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_nkesdf.href
  )) as clientaerialrefuelling  from master_join master_join_ahdtkz
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_nkesdf on master_join_ahdtkz.target_id = aerial_refuelling_aerialrefuelling_lat_nkesdf.id
  where master_join_ahdtkz.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_ttntxe on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_eufota.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_eufota.longitude AS location_longitude,
    geometry_elevatedpoint_view_eufota.latitude AS location_latitude,
    geometry_elevatedpoint_view_eufota.elevation AS location_elevation,
    geometry_elevatedpoint_view_eufota.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_eufota.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_eufota.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_eufota.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_lepqvh.title as varchar), '(' || organisation_unit_pt_lepqvh.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_lepqvh.href::text AS serviceprovider_href,
    service_callsigndetail_view_qqilrl.callsign::jsonb as callsign,
    service_callsigndetail_view_qqilrl.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_xwmdsu.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xgcklb.availability::jsonb as availability,
    service_serviceoperationalstatus_view_xgcklb.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ouaisw.annotation::jsonb as annotation,
    airspace_airspace_pt_bskigr.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_kxkvgi.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_iltghh.clientroute::jsonb as clientroute,
    routes_routeportion_view_iltghh.clientroute_annotation::jsonb as clientroute_annotation
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_eufota on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_eufota.id
left join organisation.unit_pt organisation_unit_pt_lepqvh on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_lepqvh.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_lpnfgo.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_lpnfgo.annotation) as callsign_annotation  from master_join master_join_gojswy
  join service.callsigndetail_view service_callsigndetail_lat_lpnfgo on master_join_gojswy.target_id = service_callsigndetail_lat_lpnfgo.id
  where master_join_gojswy.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_qqilrl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_jiwqej.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_jiwqej.title AS varchar), '(' || service_radiocommunicationchannel_lat_jiwqej.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_jiwqej.href
  )) as radiocommunication  from master_join master_join_exfedp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_jiwqej on master_join_exfedp.target_id = service_radiocommunicationchannel_lat_jiwqej.id
  where master_join_exfedp.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_xwmdsu on TRUE
left join lateral(
  select
  from master_join master_join_wjffub
  join shared.contactinformation_view shared_contactinformation_lat_vmjnhn on master_join_wjffub.target_id = shared_contactinformation_lat_vmjnhn.id
  where master_join_wjffub.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_iqglvz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_svfgtl.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_svfgtl.annotation) as availability_annotation  from master_join master_join_ruqosb
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_svfgtl on master_join_ruqosb.target_id = service_serviceoperationalstatus_lat_svfgtl.id
  where master_join_ruqosb.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_xgcklb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gwtgvj.*) AS annotation
  from master_join master_join_hqbmnw
  join notes.note_view notes_note_lat_gwtgvj on master_join_hqbmnw.target_id = notes_note_lat_gwtgvj.id
  where master_join_hqbmnw.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_ouaisw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_szgpxy.id,
      'title', coalesce(cast(airspace_airspace_lat_szgpxy.title AS varchar), '(' || airspace_airspace_lat_szgpxy.nilreason[1] || ')'),
      'href', airspace_airspace_lat_szgpxy.href
  )) as clientairspace  from master_join master_join_yyhcsk
  join airspace.airspace_pt airspace_airspace_lat_szgpxy on master_join_yyhcsk.target_id = airspace_airspace_lat_szgpxy.id
  where master_join_yyhcsk.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_bskigr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_tcuams.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_tcuams.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_tcuams.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_tcuams.href
  )) as clientaerialrefuelling  from master_join master_join_zbigji
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_tcuams on master_join_zbigji.target_id = aerial_refuelling_aerialrefuelling_lat_tcuams.id
  where master_join_zbigji.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_kxkvgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_grzsdp.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_grzsdp.annotation) as clientroute_annotation  from master_join master_join_nwtmuy
  join routes.routeportion_view routes_routeportion_lat_grzsdp on master_join_nwtmuy.target_id = routes_routeportion_lat_grzsdp.id
  where master_join_nwtmuy.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_iltghh on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceType
-- ['notes.note_view', 'airport_heliport.altimetersourcestatus_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_nxxfav.availability::jsonb as availability,
    airport_heliport_altimetersourcestatus_view_nxxfav.availability_annotation::jsonb as availability_annotation,
    notes_note_view_rrbhjc.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_xszwiu.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_xszwiu.annotation) as availability_annotation  from master_join master_join_lhzwsj
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_xszwiu on master_join_lhzwsj.target_id = airport_heliport_altimetersourcestatus_lat_xszwiu.id
  where master_join_lhzwsj.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_nxxfav on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nlchtb.*) AS annotation
  from master_join master_join_onwvsl
  join notes.note_view notes_note_lat_nlchtb on master_join_onwvsl.target_id = notes_note_lat_nlchtb.id
  where master_join_onwvsl.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_rrbhjc on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_ooywef.title as varchar), '(' || navaids_points_designatedpoint_pt_ooywef.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_ooywef.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ggbiss.title as varchar), '(' || navaids_points_designatedpoint_pt_ggbiss.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ggbiss.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vpoxtb.title as varchar), '(' || navaids_points_navaid_pt_vpoxtb.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_vpoxtb.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ugvytj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ugvytj.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ugvytj.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qpwopu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qpwopu.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qpwopu.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hcwdfm.title as varchar), '(' || airport_heliport_airportheliport_pt_hcwdfm.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hcwdfm.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_dgqdbn.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_dgqdbn.longitude AS pointchoiceposition_longitude,
    geometry_point_view_dgqdbn.latitude AS pointchoiceposition_latitude,
    geometry_point_view_dgqdbn.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_uljgdv.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ooywef on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_ooywef.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ggbiss on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ggbiss.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vpoxtb on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_vpoxtb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ugvytj on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ugvytj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qpwopu on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qpwopu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hcwdfm on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_hcwdfm.id
left join geometry.point_view geometry_point_view_dgqdbn on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_dgqdbn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_odifco.*) AS annotation
  from master_join master_join_uaausx
  join notes.note_view notes_note_lat_odifco on master_join_uaausx.target_id = notes_note_lat_odifco.id
  where master_join_uaausx.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_uljgdv on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_utxlaz.title as varchar), '(' || airport_heliport_runwaydirection_pt_utxlaz.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_utxlaz.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_wkposq.element::jsonb as element,
    shared_lightelement_view_wkposq.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_ergluc.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_ergluc.availability_annotation::jsonb as availability_annotation,
    notes_note_view_zgicqb.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_utxlaz on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_utxlaz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_wacwlr.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_wacwlr.annotation) as element_annotation  from master_join master_join_iaqosh
  join shared.lightelement_view shared_lightelement_lat_wacwlr on master_join_iaqosh.target_id = shared_lightelement_lat_wacwlr.id
  where master_join_iaqosh.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_wkposq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vuwtda.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vuwtda.annotation) as availability_annotation  from master_join master_join_lwnvfk
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_vuwtda on master_join_lwnvfk.target_id = airport_heliport_groundlightingavailability_lat_vuwtda.id
  where master_join_lwnvfk.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ergluc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwqtrb.*) AS annotation
  from master_join master_join_tazzeb
  join notes.note_view notes_note_lat_nwqtrb on master_join_tazzeb.target_id = notes_note_lat_nwqtrb.id
  where master_join_tazzeb.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_zgicqb on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_brdgek.title as varchar), '(' || airport_heliport_apron_pt_brdgek.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_brdgek.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qdttyy.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_qdttyy.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_djlmqj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_djlmqj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_djlmqj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_djlmqj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_djlmqj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_djlmqj.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_htaxyv.supplyservice::jsonb as supplyservice,
    notes_note_view_gxbbjz.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_xtlwqo.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_xtlwqo.availability_annotation::jsonb as availability_annotation
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_brdgek on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_brdgek.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qdttyy on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qdttyy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_djlmqj on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_djlmqj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_efembn.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_efembn.title AS varchar), '(' || service_airportsuppliesservice_lat_efembn.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_efembn.href
  )) as supplyservice  from master_join master_join_fmgdii
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_efembn on master_join_fmgdii.target_id = service_airportsuppliesservice_lat_efembn.id
  where master_join_fmgdii.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_htaxyv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cleohk.*) AS annotation
  from master_join master_join_okopqg
  join notes.note_view notes_note_lat_cleohk on master_join_okopqg.target_id = notes_note_lat_cleohk.id
  where master_join_okopqg.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_gxbbjz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_sjmuwi.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_sjmuwi.annotation) as availability_annotation  from master_join master_join_nfhgae
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_sjmuwi on master_join_nfhgae.target_id = airport_heliport_apronareaavailability_lat_sjmuwi.id
  where master_join_nfhgae.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_xtlwqo on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_aidwtz.title as varchar), '(' || airport_heliport_apron_pt_aidwtz.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_aidwtz.href::text AS lightedapron_href,
    shared_lightelement_view_sufamc.element::jsonb as element,
    shared_lightelement_view_sufamc.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_gcbgoc.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_gcbgoc.availability_annotation::jsonb as availability_annotation,
    notes_note_view_zlenwj.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_aidwtz on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_aidwtz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_oqtdzn.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_oqtdzn.annotation) as element_annotation  from master_join master_join_jwnezd
  join shared.lightelement_view shared_lightelement_lat_oqtdzn on master_join_jwnezd.target_id = shared_lightelement_lat_oqtdzn.id
  where master_join_jwnezd.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_sufamc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_jgdtps.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_jgdtps.annotation) as availability_annotation  from master_join master_join_dbyoqu
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_jgdtps on master_join_dbyoqu.target_id = airport_heliport_groundlightingavailability_lat_jgdtps.id
  where master_join_dbyoqu.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_gcbgoc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibrabw.*) AS annotation
  from master_join master_join_kxdlyb
  join notes.note_view notes_note_lat_ibrabw on master_join_kxdlyb.target_id = notes_note_lat_ibrabw.id
  where master_join_kxdlyb.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_zlenwj on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_pphngi.title as varchar), '(' || airport_heliport_apron_pt_pphngi.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_pphngi.href::text AS markedapron_href,
    airport_heliport_markingelement_view_pwougw.element::jsonb as element,
    airport_heliport_markingelement_view_pwougw.element_annotation::jsonb as element_annotation,
    notes_note_view_zvgndx.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_pphngi on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_pphngi.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_iuzhxz.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_iuzhxz.annotation) as element_annotation  from master_join master_join_tzmiop
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_iuzhxz on master_join_tzmiop.target_id = airport_heliport_markingelement_lat_iuzhxz.id
  where master_join_tzmiop.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_pwougw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lmjttd.*) AS annotation
  from master_join master_join_iqwiwa
  join notes.note_view notes_note_lat_lmjttd on master_join_iqwiwa.target_id = notes_note_lat_lmjttd.id
  where master_join_iqwiwa.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_zvgndx on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bkjxkx.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_bkjxkx.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_hgavrc.title as varchar), '(' || airport_heliport_airportheliport_pt_hgavrc.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hgavrc.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_dwkpjj.contaminant::jsonb as contaminant,
    airport_heliport_aproncontamination_view_dwkpjj.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_fwlmxt.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_gfhyvj.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_gfhyvj.availability_annotation::jsonb as availability_annotation
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bkjxkx on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bkjxkx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hgavrc on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hgavrc.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_nncbjs.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_nncbjs.annotation) as contaminant_annotation  from master_join master_join_mmedqz
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_nncbjs on master_join_mmedqz.target_id = airport_heliport_aproncontamination_lat_nncbjs.id
  where master_join_mmedqz.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_dwkpjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_caarov.*) AS annotation
  from master_join master_join_vsnmzu
  join notes.note_view notes_note_lat_caarov on master_join_vsnmzu.target_id = notes_note_lat_caarov.id
  where master_join_vsnmzu.source_id = airport_heliport.apron_ts.id
) as notes_note_view_fwlmxt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_mjvetz.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_mjvetz.annotation) as availability_annotation  from master_join master_join_teiltv
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_mjvetz on master_join_teiltv.target_id = airport_heliport_apronareaavailability_lat_mjvetz.id
  where master_join_teiltv.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_gfhyvj on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_skplts.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_skplts.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_egdeqs.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_egdeqs.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_egdeqs.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_egdeqs.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_egdeqs.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_egdeqs.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_mtpshx.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_mtpshx.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_mtpshx.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_mtpshx.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_mtpshx.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_mtpshx.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_fwgfaq.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_fwgfaq.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_fwgfaq.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_fwgfaq.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_fwgfaq.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_fwgfaq.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_fwgfaq.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_fwgfaq.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_enfzbm.runwaydirection::jsonb as runwaydirection,
    notes_note_view_otgiif.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_skplts on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_skplts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_egdeqs on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_egdeqs.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mtpshx on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_mtpshx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fwgfaq on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_fwgfaq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ztstsq.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ztstsq.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ztstsq.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ztstsq.href
  )) as runwaydirection  from master_join master_join_sagadq
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ztstsq on master_join_sagadq.target_id = airport_heliport_runwaydirection_lat_ztstsq.id
  where master_join_sagadq.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_enfzbm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oukbea.*) AS annotation
  from master_join master_join_zmfxnn
  join notes.note_view notes_note_lat_oukbea on master_join_zmfxnn.target_id = notes_note_lat_oukbea.id
  where master_join_zmfxnn.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_otgiif on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hshidd.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_hshidd.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ecweiq.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_ecweiq.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cijltl.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_cijltl.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_xprxck.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_xprxck.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qvefzj.title as varchar), '(' || navaids_points_angleindication_pt_qvefzj.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qvefzj.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_izbrmn.title as varchar), '(' || navaids_points_distanceindication_pt_izbrmn.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_izbrmn.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_lygqkf.*)::jsonb AS holding,
    procedure_holdinguse_view_lygqkf.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_peufbq.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_peufbq.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_peufbq.href::text AS approach_href,
    shared_aircraftcharacteristic_view_caswjt.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_caswjt.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_yrokgw.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_yrokgw.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_wmsitl.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hshidd on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hshidd.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ecweiq on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ecweiq.id
left join geometry.curve_view geometry_curve_view_xprxck on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_xprxck.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cijltl on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_cijltl.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qvefzj on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_qvefzj.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_izbrmn on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_izbrmn.id
left join procedure.holdinguse_view procedure_holdinguse_view_lygqkf on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_lygqkf.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_peufbq on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_peufbq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jtxmob.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jtxmob.annotation) as aircraftcategory_annotation  from master_join master_join_lvaoob
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_jtxmob on master_join_lvaoob.target_id = shared_aircraftcharacteristic_lat_jtxmob.id
  where master_join_lvaoob.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_caswjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_chxgkn.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_chxgkn.annotation) as designsurface_annotation  from master_join master_join_pktawz
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_chxgkn on master_join_pktawz.target_id = shared_obstacleassessmentarea_lat_chxgkn.id
  where master_join_pktawz.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_yrokgw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjntil.*) AS annotation
  from master_join master_join_otrjir
  join notes.note_view notes_note_lat_rjntil on master_join_otrjir.target_id = notes_note_lat_rjntil.id
  where master_join_otrjir.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_wmsitl on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_njgvzq.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_njgvzq.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_klgjiw.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_klgjiw.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_gnbapr.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_gnbapr.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_rpekqz.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_rpekqz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_woesew.title as varchar), '(' || navaids_points_angleindication_pt_woesew.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_woesew.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_dekpfp.title as varchar), '(' || navaids_points_distanceindication_pt_dekpfp.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_dekpfp.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_nmhadw.*)::jsonb AS holding,
    procedure_holdinguse_view_nmhadw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_pkkvbw.title as varchar), '(' || procedure_standardinstrumentarrival_pt_pkkvbw.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_pkkvbw.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_rlihcv.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_rlihcv.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_mnfdsr.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_mnfdsr.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_xsvfiu.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_njgvzq on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_njgvzq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_klgjiw on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_klgjiw.id
left join geometry.curve_view geometry_curve_view_rpekqz on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_rpekqz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_gnbapr on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_gnbapr.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_woesew on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_woesew.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_dekpfp on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_dekpfp.id
left join procedure.holdinguse_view procedure_holdinguse_view_nmhadw on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_nmhadw.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_pkkvbw on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_pkkvbw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qstnyl.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qstnyl.annotation) as aircraftcategory_annotation  from master_join master_join_cbbafi
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qstnyl on master_join_cbbafi.target_id = shared_aircraftcharacteristic_lat_qstnyl.id
  where master_join_cbbafi.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_rlihcv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bbwaci.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bbwaci.annotation) as designsurface_annotation  from master_join master_join_ovuyii
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_bbwaci on master_join_ovuyii.target_id = shared_obstacleassessmentarea_lat_bbwaci.id
  where master_join_ovuyii.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_mnfdsr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gedjul.*) AS annotation
  from master_join master_join_mighcl
  join notes.note_view notes_note_lat_gedjul on master_join_mighcl.target_id = notes_note_lat_gedjul.id
  where master_join_mighcl.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_xsvfiu on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xszlsu.title as varchar), '(' || organisation_organisationauthority_pt_xszlsu.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_xszlsu.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_dryjnw.title as varchar), '(' || airspace_airspace_pt_dryjnw.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_dryjnw.href::text AS assignedairspace_href,
    notes_note_view_pozsdk.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xszlsu on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_xszlsu.id
left join airspace.airspace_pt airspace_airspace_pt_dryjnw on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_dryjnw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bcwmlo.*) AS annotation
  from master_join master_join_brifrn
  join notes.note_view notes_note_lat_bcwmlo on master_join_brifrn.target_id = notes_note_lat_bcwmlo.id
  where master_join_brifrn.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_pozsdk on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_vipwoh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vipwoh.longitude AS location_longitude,
    geometry_elevatedpoint_view_vipwoh.latitude AS location_latitude,
    geometry_elevatedpoint_view_vipwoh.elevation AS location_elevation,
    geometry_elevatedpoint_view_vipwoh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vipwoh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vipwoh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vipwoh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_twbvvp.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_twbvvp.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_zxtfxu.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_zxtfxu.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_pnzgjz.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_pnzgjz.availability_annotation::jsonb as availability_annotation,
    notes_note_view_thsxnd.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vipwoh on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_vipwoh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vszojn.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vszojn.annotation) as authority_annotation  from master_join master_join_zzjyfb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_vszojn on master_join_zzjyfb.target_id = navaids_points_authorityfornavaidequipment_lat_vszojn.id
  where master_join_zzjyfb.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_twbvvp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mqujzk.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mqujzk.annotation) as monitoring_annotation  from master_join master_join_jvavkj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mqujzk on master_join_jvavkj.target_id = navaids_points_navaidequipmentmonitoring_lat_mqujzk.id
  where master_join_jvavkj.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_zxtfxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hniggl.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hniggl.annotation) as availability_annotation  from master_join master_join_qapgns
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_hniggl on master_join_qapgns.target_id = navaids_points_navaidoperationalstatus_lat_hniggl.id
  where master_join_qapgns.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_pnzgjz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yknxhi.*) AS annotation
  from master_join master_join_cqiwuv
  join notes.note_view notes_note_lat_yknxhi on master_join_cqiwuv.target_id = notes_note_lat_yknxhi.id
  where master_join_cqiwuv.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_thsxnd on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointType
-- ['routes.routeportion_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_mzfqdj.title as varchar), '(' || navaids_points_designatedpoint_pt_mzfqdj.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_mzfqdj.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wgdxay.title as varchar), '(' || navaids_points_navaid_pt_wgdxay.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_wgdxay.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mpyhnk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mpyhnk.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_mpyhnk.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vcwkae.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vcwkae.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vcwkae.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vlydks.title as varchar), '(' || airport_heliport_airportheliport_pt_vlydks.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_vlydks.href::text AS locationairportreferencepoint_href,
    geometry_point_view_pemkwh.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_pemkwh.longitude AS locationposition_longitude,
    geometry_point_view_pemkwh.latitude AS locationposition_latitude,
    geometry_point_view_pemkwh.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_tmlxzw.*)::jsonb AS applicablerouteportion,
    routes_routeportion_view_tmlxzw.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_zfupml.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mzfqdj on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mzfqdj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wgdxay on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_wgdxay.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mpyhnk on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mpyhnk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vcwkae on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vcwkae.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vlydks on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_vlydks.id
left join geometry.point_view geometry_point_view_pemkwh on routes.changeoverpoint_ts.location_position_id = geometry_point_view_pemkwh.id
left join routes.routeportion_view routes_routeportion_view_tmlxzw on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_tmlxzw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqfznc.*) AS annotation
  from master_join master_join_qekfbs
  join notes.note_view notes_note_lat_jqfznc on master_join_qekfbs.target_id = notes_note_lat_jqfznc.id
  where master_join_qekfbs.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_zfupml on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_ccxzqk.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_ccxzqk.longitude AS position_longitude,
    geometry_elevatedpoint_view_ccxzqk.latitude AS position_latitude,
    geometry_elevatedpoint_view_ccxzqk.elevation AS position_elevation,
    geometry_elevatedpoint_view_ccxzqk.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ccxzqk.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ccxzqk.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ccxzqk.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_aweded.title as varchar), '(' || airport_heliport_airportheliport_pt_aweded.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_aweded.href::text AS airportheliport_href,
    notes_note_view_zdvjxa.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ccxzqk on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_ccxzqk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aweded on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_aweded.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_awfvrv.*) AS annotation
  from master_join master_join_wrqgsq
  join notes.note_view notes_note_lat_awfvrv on master_join_wrqgsq.target_id = notes_note_lat_awfvrv.id
  where master_join_wrqgsq.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_zdvjxa on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_lxhkps.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_lxhkps.longitude AS position_longitude,
    geometry_elevatedpoint_view_lxhkps.latitude AS position_latitude,
    geometry_elevatedpoint_view_lxhkps.elevation AS position_elevation,
    geometry_elevatedpoint_view_lxhkps.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_lxhkps.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_lxhkps.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_lxhkps.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_pbormc.title as varchar), '(' || airport_heliport_airportheliport_pt_pbormc.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_pbormc.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_fjubco.title as varchar), '(' || navaids_points_vor_pt_fjubco.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_fjubco.href::text AS checkpointfacility_href,
    notes_note_view_wiymdf.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lxhkps on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_lxhkps.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pbormc on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_pbormc.id
left join navaids_points.vor_pt navaids_points_vor_pt_fjubco on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_fjubco.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ozfpib.*) AS annotation
  from master_join master_join_zdktys
  join notes.note_view notes_note_lat_ozfpib on master_join_zdktys.target_id = notes_note_lat_ozfpib.id
  where master_join_zdktys.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_wiymdf on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaType
-- ['shared.obstacleassessmentarea_view', 'geometry.surface_view', 'notes.note_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_bogrrd.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_bogrrd.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_rbgtmj.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_rbgtmj.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_rbgtmj.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_jivmem.*)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_jivmem.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_utfpfb.condition::jsonb as condition,
    procedure_approachcondition_view_utfpfb.condition_annotation::jsonb as condition_annotation,
    shared_obstacleassessmentarea_view_mhabxy.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_mhabxy.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_bqyauv.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_bogrrd on public.circlingarea_ts.extent_id = geometry_surface_view_bogrrd.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_rbgtmj on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_rbgtmj.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_jivmem on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_jivmem.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_ttgfhi.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_ttgfhi.annotation) as condition_annotation  from master_join master_join_tcoswb
  join procedure.approachcondition_view procedure_approachcondition_lat_ttgfhi on master_join_tcoswb.target_id = procedure_approachcondition_lat_ttgfhi.id
  where master_join_tcoswb.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_utfpfb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_deaxtp.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_deaxtp.annotation) as designsurface_annotation  from master_join master_join_zpbdbl
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_deaxtp on master_join_zpbdbl.target_id = shared_obstacleassessmentarea_lat_deaxtp.id
  where master_join_zpbdbl.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_mhabxy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jpafxb.*) AS annotation
  from master_join master_join_rufmsm
  join notes.note_view notes_note_lat_jpafxb on master_join_rufmsm.target_id = notes_note_lat_jpafxb.id
  where master_join_rufmsm.source_id = public.circlingarea_ts.id
) as notes_note_view_bqyauv on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_hcusuk.title as varchar), '(' || airport_heliport_deicingarea_pt_hcusuk.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_hcusuk.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_nphfes.element::jsonb as element,
    airport_heliport_markingelement_view_nphfes.element_annotation::jsonb as element_annotation,
    notes_note_view_cgmhne.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_hcusuk on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_hcusuk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ynyubx.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ynyubx.annotation) as element_annotation  from master_join master_join_hyksyp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ynyubx on master_join_hyksyp.target_id = airport_heliport_markingelement_lat_ynyubx.id
  where master_join_hyksyp.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_nphfes on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsmmzl.*) AS annotation
  from master_join master_join_oualby
  join notes.note_view notes_note_lat_rsmmzl on master_join_oualby.target_id = notes_note_lat_rsmmzl.id
  where master_join_oualby.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_cgmhne on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_cxjkot.title as varchar), '(' || airport_heliport_apron_pt_cxjkot.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_cxjkot.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_hhkqgp.title as varchar), '(' || airport_heliport_taxiway_pt_hhkqgp.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_hhkqgp.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_ecdbub.title as varchar), '(' || airport_heliport_aircraftstand_pt_ecdbub.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_ecdbub.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gujhdq.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_gujhdq.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_drhwnb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_drhwnb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_drhwnb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_drhwnb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_drhwnb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_drhwnb.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_vbvsbi.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_jxgrdm.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_jxgrdm.availability_annotation::jsonb as availability_annotation
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_cxjkot on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_cxjkot.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_hhkqgp on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_hhkqgp.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_ecdbub on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_ecdbub.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gujhdq on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gujhdq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_drhwnb on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_drhwnb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vtpqbf.*) AS annotation
  from master_join master_join_jcrmxk
  join notes.note_view notes_note_lat_vtpqbf on master_join_jcrmxk.target_id = notes_note_lat_vtpqbf.id
  where master_join_jcrmxk.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_vbvsbi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_vjglxg.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_vjglxg.annotation) as availability_annotation  from master_join master_join_gbztmx
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_vjglxg on master_join_gbztmx.target_id = airport_heliport_apronareaavailability_lat_vjglxg.id
  where master_join_gbztmx.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_jxgrdm on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ttahhv.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ttahhv.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nezeqi.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_nezeqi.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wwkrwl.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_wwkrwl.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_hobbmu.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_hobbmu.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_vqhsie.title as varchar), '(' || navaids_points_angleindication_pt_vqhsie.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_vqhsie.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_rqxtki.title as varchar), '(' || navaids_points_distanceindication_pt_rqxtki.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_rqxtki.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_htqczl.*)::jsonb AS holding,
    procedure_holdinguse_view_htqczl.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_aadfga.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_aadfga.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_aadfga.href::text AS departure_href,
    shared_aircraftcharacteristic_view_yvqnjk.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_yvqnjk.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_luxdrh.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_luxdrh.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_xhwuio.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_xamsrc.condition::jsonb as condition,
    procedure_departurearrivalcondition_view_xamsrc.condition_annotation::jsonb as condition_annotation
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ttahhv on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ttahhv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nezeqi on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_nezeqi.id
left join geometry.curve_view geometry_curve_view_hobbmu on procedure.departureleg_ts.trajectory_id = geometry_curve_view_hobbmu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wwkrwl on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_wwkrwl.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vqhsie on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_vqhsie.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_rqxtki on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_rqxtki.id
left join procedure.holdinguse_view procedure_holdinguse_view_htqczl on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_htqczl.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_aadfga on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_aadfga.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_rcgskb.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_rcgskb.annotation) as aircraftcategory_annotation  from master_join master_join_qombun
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_rcgskb on master_join_qombun.target_id = shared_aircraftcharacteristic_lat_rcgskb.id
  where master_join_qombun.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_yvqnjk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xtcebh.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xtcebh.annotation) as designsurface_annotation  from master_join master_join_uwqtwe
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_xtcebh on master_join_uwqtwe.target_id = shared_obstacleassessmentarea_lat_xtcebh.id
  where master_join_uwqtwe.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_luxdrh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pllfqb.*) AS annotation
  from master_join master_join_xgjveu
  join notes.note_view notes_note_lat_pllfqb on master_join_xgjveu.target_id = notes_note_lat_pllfqb.id
  where master_join_xgjveu.source_id = procedure.departureleg_ts.id
) as notes_note_view_xhwuio on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_rkscwy.*) as condition,
      jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_rkscwy.annotation) as condition_annotation  from master_join master_join_wlqybz
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_rkscwy on master_join_wlqybz.target_id = procedure_departurearrivalcondition_lat_rkscwy.id
  where master_join_wlqybz.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_xamsrc on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_kjtefp.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_kjtefp.longitude AS location_longitude,
    geometry_point_view_kjtefp.latitude AS location_latitude,
    geometry_point_view_kjtefp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zdyeef.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zdyeef.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_zdyeef.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_elapms.title as varchar), '(' || airport_heliport_airportheliport_pt_elapms.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_elapms.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wjnutt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wjnutt.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wjnutt.href::text AS runwaypoint_href,
    notes_note_view_pbswzg.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_kjtefp on navaids_points.designatedpoint_ts.location_id = geometry_point_view_kjtefp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zdyeef on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_zdyeef.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_elapms on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_elapms.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wjnutt on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wjnutt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrhgan.*) AS annotation
  from master_join master_join_wbczqd
  join notes.note_view notes_note_lat_yrhgan on master_join_wbczqd.target_id = notes_note_lat_yrhgan.id
  where master_join_wbczqd.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_pbswzg on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_qgiiqz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qgiiqz.longitude AS location_longitude,
    geometry_elevatedpoint_view_qgiiqz.latitude AS location_latitude,
    geometry_elevatedpoint_view_qgiiqz.elevation AS location_elevation,
    geometry_elevatedpoint_view_qgiiqz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qgiiqz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qgiiqz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qgiiqz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_okipyu.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_okipyu.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_ilrdgn.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_ilrdgn.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_wnjjdd.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_wnjjdd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_yguqgi.annotation::jsonb as annotation,
    service_informationservice_pt_zczmhi.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qgiiqz on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_qgiiqz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jslvxr.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jslvxr.annotation) as authority_annotation  from master_join master_join_idvdgg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jslvxr on master_join_idvdgg.target_id = navaids_points_authorityfornavaidequipment_lat_jslvxr.id
  where master_join_idvdgg.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_okipyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ffeeap.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ffeeap.annotation) as monitoring_annotation  from master_join master_join_nqddnn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ffeeap on master_join_nqddnn.target_id = navaids_points_navaidequipmentmonitoring_lat_ffeeap.id
  where master_join_nqddnn.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ilrdgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zziqyg.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zziqyg.annotation) as availability_annotation  from master_join master_join_effqic
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zziqyg on master_join_effqic.target_id = navaids_points_navaidoperationalstatus_lat_zziqyg.id
  where master_join_effqic.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_wnjjdd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bdanjq.*) AS annotation
  from master_join master_join_dwqpet
  join notes.note_view notes_note_lat_bdanjq on master_join_dwqpet.target_id = notes_note_lat_bdanjq.id
  where master_join_dwqpet.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_yguqgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_dzeobj.id,
      'title', coalesce(cast(service_informationservice_lat_dzeobj.title AS varchar), '(' || service_informationservice_lat_dzeobj.nilreason[1] || ')'),
      'href', service_informationservice_lat_dzeobj.href
  )) as informationprovision  from master_join master_join_guhnae
  join service.informationservice_pt service_informationservice_lat_dzeobj on master_join_guhnae.target_id = service_informationservice_lat_dzeobj.id
  where master_join_guhnae.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_zczmhi on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_bpyfyr.title as varchar), '(' || navaids_points_designatedpoint_pt_bpyfyr.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_bpyfyr.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ripnxr.title as varchar), '(' || navaids_points_designatedpoint_pt_ripnxr.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ripnxr.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nhxsyk.title as varchar), '(' || navaids_points_navaid_pt_nhxsyk.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_nhxsyk.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ijoqak.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ijoqak.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ijoqak.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_euvlpv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_euvlpv.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_euvlpv.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lawsto.title as varchar), '(' || airport_heliport_airportheliport_pt_lawsto.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_lawsto.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_rgxhnx.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_rgxhnx.longitude AS pointchoiceposition_longitude,
    geometry_point_view_rgxhnx.latitude AS pointchoiceposition_latitude,
    geometry_point_view_rgxhnx.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_qcwzbr.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bpyfyr on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_bpyfyr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ripnxr on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ripnxr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nhxsyk on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_nhxsyk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ijoqak on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ijoqak.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_euvlpv on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_euvlpv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lawsto on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_lawsto.id
left join geometry.point_view geometry_point_view_rgxhnx on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_rgxhnx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfympm.*) AS annotation
  from master_join master_join_zhioaf
  join notes.note_view notes_note_lat_nfympm on master_join_zhioaf.target_id = notes_note_lat_nfympm.id
  where master_join_zhioaf.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_qcwzbr on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMEType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_zlzfbh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zlzfbh.longitude AS location_longitude,
    geometry_elevatedpoint_view_zlzfbh.latitude AS location_latitude,
    geometry_elevatedpoint_view_zlzfbh.elevation AS location_elevation,
    geometry_elevatedpoint_view_zlzfbh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zlzfbh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zlzfbh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zlzfbh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wnodsy.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_wnodsy.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_kqdhhe.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_kqdhhe.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_xqlkpv.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_xqlkpv.availability_annotation::jsonb as availability_annotation,
    notes_note_view_xvmlry.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zlzfbh on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_zlzfbh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dlpbcq.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dlpbcq.annotation) as authority_annotation  from master_join master_join_lzathg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dlpbcq on master_join_lzathg.target_id = navaids_points_authorityfornavaidequipment_lat_dlpbcq.id
  where master_join_lzathg.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_wnodsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qwfwwy.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qwfwwy.annotation) as monitoring_annotation  from master_join master_join_gnghfn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qwfwwy on master_join_gnghfn.target_id = navaids_points_navaidequipmentmonitoring_lat_qwfwwy.id
  where master_join_gnghfn.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_kqdhhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hzjacs.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_hzjacs.annotation) as availability_annotation  from master_join master_join_lvrrdk
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_hzjacs on master_join_lvrrdk.target_id = navaids_points_navaidoperationalstatus_lat_hzjacs.id
  where master_join_lvrrdk.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_xqlkpv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mfigmj.*) AS annotation
  from master_join master_join_dgjcvd
  join notes.note_view notes_note_lat_mfigmj on master_join_dgjcvd.target_id = notes_note_lat_mfigmj.id
  where master_join_dgjcvd.source_id = navaids_points.dme_ts.id
) as notes_note_view_xvmlry on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_fvfhse.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fvfhse.longitude AS location_longitude,
    geometry_elevatedpoint_view_fvfhse.latitude AS location_latitude,
    geometry_elevatedpoint_view_fvfhse.elevation AS location_elevation,
    geometry_elevatedpoint_view_fvfhse.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fvfhse.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fvfhse.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fvfhse.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_osjcro.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_osjcro.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_cjurof.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_cjurof.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_pmlkwv.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_pmlkwv.availability_annotation::jsonb as availability_annotation,
    notes_note_view_biqyki.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fvfhse on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_fvfhse.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lizudd.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lizudd.annotation) as authority_annotation  from master_join master_join_gkqufm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lizudd on master_join_gkqufm.target_id = navaids_points_authorityfornavaidequipment_lat_lizudd.id
  where master_join_gkqufm.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_osjcro on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mzaawx.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mzaawx.annotation) as monitoring_annotation  from master_join master_join_djrwfn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mzaawx on master_join_djrwfn.target_id = navaids_points_navaidequipmentmonitoring_lat_mzaawx.id
  where master_join_djrwfn.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_cjurof on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gbdplr.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gbdplr.annotation) as availability_annotation  from master_join master_join_jouahz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_gbdplr on master_join_jouahz.target_id = navaids_points_navaidoperationalstatus_lat_gbdplr.id
  where master_join_jouahz.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_pmlkwv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qyagrr.*) AS annotation
  from master_join master_join_qlmdru
  join notes.note_view notes_note_lat_qyagrr on master_join_qlmdru.target_id = notes_note_lat_qyagrr.id
  where master_join_qlmdru.source_id = navaids_points.elevation_ts.id
) as notes_note_view_biqyki on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'geometry.point_view', 'public.fasdatablock_view', 'geometry.curve_view', 'notes.note_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ktdwkd.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ktdwkd.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hzspca.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_hzspca.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jsseit.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_jsseit.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_czadgr.*)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_czadgr.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_wgrzou.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_wgrzou.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ugkmgm.title as varchar), '(' || navaids_points_angleindication_pt_ugkmgm.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ugkmgm.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_sruvex.title as varchar), '(' || navaids_points_distanceindication_pt_sruvex.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_sruvex.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ozicrx.*)::jsonb AS holding,
    procedure_holdinguse_view_ozicrx.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_dvhiiw.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_dvhiiw.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_dvhiiw.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_tsbtgx.title as varchar), '(' || navaids_points_designatedpoint_pt_tsbtgx.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_tsbtgx.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_uiufec.title as varchar), '(' || navaids_points_navaid_pt_uiufec.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_uiufec.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uhudrm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uhudrm.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_uhudrm.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_smyscc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_smyscc.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_smyscc.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_loqehg.title as varchar), '(' || airport_heliport_airportheliport_pt_loqehg.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_loqehg.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_brmvmw.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_brmvmw.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_brmvmw.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_brmvmw.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_cnkllu.*)::jsonb AS fasdata,
    public_fasdatablock_view_cnkllu.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_pbzork.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_pbzork.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_zistwg.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_zistwg.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_qulxsq.annotation::jsonb as annotation,
    procedure_approachcondition_view_dxskvo.condition::jsonb as condition,
    procedure_approachcondition_view_dxskvo.condition_annotation::jsonb as condition_annotation
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ktdwkd on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ktdwkd.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hzspca on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_hzspca.id
left join geometry.curve_view geometry_curve_view_wgrzou on procedure.finalleg_ts.trajectory_id = geometry_curve_view_wgrzou.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jsseit on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jsseit.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ugkmgm on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_ugkmgm.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_sruvex on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_sruvex.id
left join procedure.holdinguse_view procedure_holdinguse_view_ozicrx on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_ozicrx.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_dvhiiw on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_dvhiiw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_tsbtgx on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_tsbtgx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uiufec on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_uiufec.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uhudrm on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_uhudrm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_smyscc on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_smyscc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_loqehg on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_loqehg.id
left join geometry.point_view geometry_point_view_brmvmw on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_brmvmw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_czadgr on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_czadgr.id
left join public.fasdatablock_view public_fasdatablock_view_cnkllu on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_cnkllu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_erbbne.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_erbbne.annotation) as aircraftcategory_annotation  from master_join master_join_bvjxfw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_erbbne on master_join_bvjxfw.target_id = shared_aircraftcharacteristic_lat_erbbne.id
  where master_join_bvjxfw.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_pbzork on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ncburx.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ncburx.annotation) as designsurface_annotation  from master_join master_join_jklzwr
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ncburx on master_join_jklzwr.target_id = shared_obstacleassessmentarea_lat_ncburx.id
  where master_join_jklzwr.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_zistwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nkgxkn.*) AS annotation
  from master_join master_join_egduuk
  join notes.note_view notes_note_lat_nkgxkn on master_join_egduuk.target_id = notes_note_lat_nkgxkn.id
  where master_join_egduuk.source_id = procedure.finalleg_ts.id
) as notes_note_view_qulxsq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_wntgrg.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_wntgrg.annotation) as condition_annotation  from master_join master_join_ckmlap
  join procedure.approachcondition_view procedure_approachcondition_lat_wntgrg on master_join_ckmlap.target_id = procedure_approachcondition_lat_wntgrg.id
  where master_join_ckmlap.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_dxskvo on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_oaihlb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_oaihlb.longitude AS location_longitude,
    geometry_elevatedpoint_view_oaihlb.latitude AS location_latitude,
    geometry_elevatedpoint_view_oaihlb.elevation AS location_elevation,
    geometry_elevatedpoint_view_oaihlb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oaihlb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oaihlb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oaihlb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_gzxjbh.title as varchar), '(' || organisation_unit_pt_gzxjbh.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_gzxjbh.href::text AS serviceprovider_href,
    service_callsigndetail_view_gysxwj.callsign::jsonb as callsign,
    service_callsigndetail_view_gysxwj.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_aevoep.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ttzgbf.availability::jsonb as availability,
    service_serviceoperationalstatus_view_ttzgbf.availability_annotation::jsonb as availability_annotation,
    notes_note_view_rknlbi.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_wrbufw.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oaihlb on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_oaihlb.id
left join organisation.unit_pt organisation_unit_pt_gzxjbh on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_gzxjbh.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_nsqpwx.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_nsqpwx.annotation) as callsign_annotation  from master_join master_join_njlrfx
  join service.callsigndetail_view service_callsigndetail_lat_nsqpwx on master_join_njlrfx.target_id = service_callsigndetail_lat_nsqpwx.id
  where master_join_njlrfx.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_gysxwj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_hemmfr.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_hemmfr.title AS varchar), '(' || service_radiocommunicationchannel_lat_hemmfr.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_hemmfr.href
  )) as radiocommunication  from master_join master_join_sznhyr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_hemmfr on master_join_sznhyr.target_id = service_radiocommunicationchannel_lat_hemmfr.id
  where master_join_sznhyr.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_aevoep on TRUE
left join lateral(
  select
  from master_join master_join_haqovg
  join shared.contactinformation_view shared_contactinformation_lat_kwaaet on master_join_haqovg.target_id = shared_contactinformation_lat_kwaaet.id
  where master_join_haqovg.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_cnndns on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_snapys.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_snapys.annotation) as availability_annotation  from master_join master_join_wjdifk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_snapys on master_join_wjdifk.target_id = service_serviceoperationalstatus_lat_snapys.id
  where master_join_wjdifk.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_ttzgbf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpqzgj.*) AS annotation
  from master_join master_join_hhylyb
  join notes.note_view notes_note_lat_wpqzgj on master_join_hhylyb.target_id = notes_note_lat_wpqzgj.id
  where master_join_hhylyb.source_id = service.firefightingservice_ts.id
) as notes_note_view_rknlbi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_dcxxpg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_dcxxpg.title AS varchar), '(' || airport_heliport_airportheliport_lat_dcxxpg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_dcxxpg.href
  )) as airportheliport  from master_join master_join_cwqcmd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_dcxxpg on master_join_cwqcmd.target_id = airport_heliport_airportheliport_lat_dcxxpg.id
  where master_join_cwqcmd.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_wrbufw on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionType
-- ['notes.note_view', 'routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_jorlji.*)::jsonb AS flight,
    routes_flightconditioncombination_view_jorlji.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_mgzdlh.regulatedroute::jsonb as regulatedroute,
    routes_flightrestrictionroute_view_mgzdlh.regulatedroute_annotation::jsonb as regulatedroute_annotation,
    notes_note_view_rjzbqm.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_jorlji on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_jorlji.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_rznuze.*) as regulatedroute,
      jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_rznuze.annotation) as regulatedroute_annotation  from master_join master_join_zzfhst
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_rznuze on master_join_zzfhst.target_id = routes_flightrestrictionroute_lat_rznuze.id
  where master_join_zzfhst.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_mgzdlh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jyxvbr.*) AS annotation
  from master_join master_join_nohhuz
  join notes.note_view notes_note_lat_jyxvbr on master_join_nohhuz.target_id = notes_note_lat_jyxvbr.id
  where master_join_nohhuz.source_id = routes.flightrestriction_ts.id
) as notes_note_view_rjzbqm on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_ixbmji.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ixbmji.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ixbmji.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ixbmji.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ixbmji.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ixbmji.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_enaklz.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ixbmji on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_ixbmji.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wiqkir.*) AS annotation
  from master_join master_join_mfizjs
  join notes.note_view notes_note_lat_wiqkir on master_join_mfizjs.target_id = notes_note_lat_wiqkir.id
  where master_join_mfizjs.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_enaklz on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_tbddms.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_tbddms.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_qkrntm.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_tbddms on airspace.geoborder_ts.border_id = geometry_curve_view_tbddms.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrerje.*) AS annotation
  from master_join master_join_mmcnej
  join notes.note_view notes_note_lat_hrerje on master_join_mmcnej.target_id = notes_note_lat_hrerje.id
  where master_join_mmcnej.source_id = airspace.geoborder_ts.id
) as notes_note_view_qkrntm on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_zrrsfk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zrrsfk.longitude AS location_longitude,
    geometry_elevatedpoint_view_zrrsfk.latitude AS location_latitude,
    geometry_elevatedpoint_view_zrrsfk.elevation AS location_elevation,
    geometry_elevatedpoint_view_zrrsfk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zrrsfk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zrrsfk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zrrsfk.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ullaim.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_ullaim.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_xujrlu.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_xujrlu.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_jobach.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_jobach.availability_annotation::jsonb as availability_annotation,
    notes_note_view_pasmau.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zrrsfk on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_zrrsfk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fwzdfg.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fwzdfg.annotation) as authority_annotation  from master_join master_join_sqbngz
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fwzdfg on master_join_sqbngz.target_id = navaids_points_authorityfornavaidequipment_lat_fwzdfg.id
  where master_join_sqbngz.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_ullaim on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_aytyny.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_aytyny.annotation) as monitoring_annotation  from master_join master_join_npyslo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_aytyny on master_join_npyslo.target_id = navaids_points_navaidequipmentmonitoring_lat_aytyny.id
  where master_join_npyslo.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xujrlu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gvnbdp.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gvnbdp.annotation) as availability_annotation  from master_join master_join_bnsont
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_gvnbdp on master_join_bnsont.target_id = navaids_points_navaidoperationalstatus_lat_gvnbdp.id
  where master_join_bnsont.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_jobach on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yzrjnq.*) AS annotation
  from master_join master_join_rqbqdi
  join notes.note_view notes_note_lat_yzrjnq on master_join_rqbqdi.target_id = notes_note_lat_yzrjnq.id
  where master_join_rqbqdi.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_pasmau on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_uqlqrm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_uqlqrm.longitude AS location_longitude,
    geometry_elevatedpoint_view_uqlqrm.latitude AS location_latitude,
    geometry_elevatedpoint_view_uqlqrm.elevation AS location_elevation,
    geometry_elevatedpoint_view_uqlqrm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uqlqrm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uqlqrm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uqlqrm.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_bgfivz.title as varchar), '(' || organisation_unit_pt_bgfivz.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_bgfivz.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hwagff.title as varchar), '(' || airport_heliport_airportheliport_pt_hwagff.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_hwagff.href::text AS clientairport_href,
    service_callsigndetail_view_yhvovm.callsign::jsonb as callsign,
    service_callsigndetail_view_yhvovm.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_efumgc.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xfaksj.availability::jsonb as availability,
    service_serviceoperationalstatus_view_xfaksj.availability_annotation::jsonb as availability_annotation,
    notes_note_view_dpszps.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uqlqrm on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_uqlqrm.id
left join organisation.unit_pt organisation_unit_pt_bgfivz on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_bgfivz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hwagff on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_hwagff.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_zjrewp.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_zjrewp.annotation) as callsign_annotation  from master_join master_join_kufelc
  join service.callsigndetail_view service_callsigndetail_lat_zjrewp on master_join_kufelc.target_id = service_callsigndetail_lat_zjrewp.id
  where master_join_kufelc.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_yhvovm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mxaumz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mxaumz.title AS varchar), '(' || service_radiocommunicationchannel_lat_mxaumz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mxaumz.href
  )) as radiocommunication  from master_join master_join_oinhxi
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mxaumz on master_join_oinhxi.target_id = service_radiocommunicationchannel_lat_mxaumz.id
  where master_join_oinhxi.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_efumgc on TRUE
left join lateral(
  select
  from master_join master_join_qirtzt
  join shared.contactinformation_view shared_contactinformation_lat_akkgzv on master_join_qirtzt.target_id = shared_contactinformation_lat_akkgzv.id
  where master_join_qirtzt.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_qwnnjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jyvwgr.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jyvwgr.annotation) as availability_annotation  from master_join master_join_gghgwm
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_jyvwgr on master_join_gghgwm.target_id = service_serviceoperationalstatus_lat_jyvwgr.id
  where master_join_gghgwm.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_xfaksj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_opjdrh.*) AS annotation
  from master_join master_join_qocdin
  join notes.note_view notes_note_lat_opjdrh on master_join_qocdin.target_id = notes_note_lat_opjdrh.id
  where master_join_qocdin.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_dpszps on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_yiqoya.title as varchar), '(' || airport_heliport_guidanceline_pt_yiqoya.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_yiqoya.href::text AS lightedguidanceline_href,
    shared_lightelement_view_rusdbl.element::jsonb as element,
    shared_lightelement_view_rusdbl.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_pjyyof.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_pjyyof.availability_annotation::jsonb as availability_annotation,
    notes_note_view_nrwmqr.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_yiqoya on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_yiqoya.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jjbaig.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_jjbaig.annotation) as element_annotation  from master_join master_join_nsqcng
  join shared.lightelement_view shared_lightelement_lat_jjbaig on master_join_nsqcng.target_id = shared_lightelement_lat_jjbaig.id
  where master_join_nsqcng.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_rusdbl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mxmqmz.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mxmqmz.annotation) as availability_annotation  from master_join master_join_czwmvo
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mxmqmz on master_join_czwmvo.target_id = airport_heliport_groundlightingavailability_lat_mxmqmz.id
  where master_join_czwmvo.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_pjyyof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oeoedl.*) AS annotation
  from master_join master_join_pxiqwd
  join notes.note_view notes_note_lat_oeoedl on master_join_pxiqwd.target_id = notes_note_lat_oeoedl.id
  where master_join_pxiqwd.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_nrwmqr on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_pwddtk.title as varchar), '(' || airport_heliport_guidanceline_pt_pwddtk.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_pwddtk.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_oaqqqy.element::jsonb as element,
    airport_heliport_markingelement_view_oaqqqy.element_annotation::jsonb as element_annotation,
    notes_note_view_fakgrg.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_pwddtk on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_pwddtk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ecarkz.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ecarkz.annotation) as element_annotation  from master_join master_join_urjsol
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ecarkz on master_join_urjsol.target_id = airport_heliport_markingelement_lat_ecarkz.id
  where master_join_urjsol.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_oaqqqy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iqtzgp.*) AS annotation
  from master_join master_join_frqrhj
  join notes.note_view notes_note_lat_iqtzgp on master_join_frqrhj.target_id = notes_note_lat_iqtzgp.id
  where master_join_frqrhj.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_fakgrg on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_eizgmh.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_eizgmh.elevation AS extent_elevation,
    geometry_elevatedcurve_view_eizgmh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_eizgmh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_eizgmh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_eizgmh.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_wsyigw.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_laueuw.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_lprrdw.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_mmpwni.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_erjdae.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_surqjt.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_eizgmh on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_eizgmh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_mcneas.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_mcneas.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_mcneas.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_mcneas.href
  )) as connectedtouchdownliftoff  from master_join master_join_fnzdxr
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_mcneas on master_join_fnzdxr.target_id = airport_heliport_touchdownliftoff_lat_mcneas.id
  where master_join_fnzdxr.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_wsyigw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_cihtpl.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_cihtpl.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_cihtpl.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_cihtpl.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_ocebwk
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_cihtpl on master_join_ocebwk.target_id = airport_heliport_runwaycentrelinepoint_lat_cihtpl.id
  where master_join_ocebwk.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_laueuw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_pcprxr.id,
      'title', coalesce(cast(airport_heliport_apron_lat_pcprxr.title AS varchar), '(' || airport_heliport_apron_lat_pcprxr.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_pcprxr.href
  )) as connectedapron  from master_join master_join_foccfp
  join airport_heliport.apron_pt airport_heliport_apron_lat_pcprxr on master_join_foccfp.target_id = airport_heliport_apron_lat_pcprxr.id
  where master_join_foccfp.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_lprrdw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_rrayfr.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_rrayfr.title AS varchar), '(' || airport_heliport_aircraftstand_lat_rrayfr.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_rrayfr.href
  )) as connectedstand  from master_join master_join_qbuxhd
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_rrayfr on master_join_qbuxhd.target_id = airport_heliport_aircraftstand_lat_rrayfr.id
  where master_join_qbuxhd.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_mmpwni on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_ujhpol.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_ujhpol.title AS varchar), '(' || airport_heliport_taxiway_lat_ujhpol.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_ujhpol.href
  )) as connectedtaxiway  from master_join master_join_ukjevo
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_ujhpol on master_join_ukjevo.target_id = airport_heliport_taxiway_lat_ujhpol.id
  where master_join_ukjevo.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_erjdae on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntziwv.*) AS annotation
  from master_join master_join_wvnijc
  join notes.note_view notes_note_lat_ntziwv on master_join_wvnijc.target_id = notes_note_lat_ntziwv.id
  where master_join_wvnijc.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_surqjt on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_vrnklo.title as varchar), '(' || holding_unplannedholding_pt_vrnklo.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_vrnklo.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_afvksg.title as varchar), '(' || holding_holdingpattern_pt_afvksg.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_afvksg.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_rxkyxn.obstacleassessment::jsonb as obstacleassessment,
    shared_obstacleassessmentarea_view_rxkyxn.obstacleassessment_annotation::jsonb as obstacleassessment_annotation,
    notes_note_view_cxeetm.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_vrnklo on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_vrnklo.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_afvksg on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_afvksg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_akqewb.*) as obstacleassessment,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_akqewb.annotation) as obstacleassessment_annotation  from master_join master_join_jntgbb
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_akqewb on master_join_jntgbb.target_id = shared_obstacleassessmentarea_lat_akqewb.id
  where master_join_jntgbb.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_rxkyxn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyrmoe.*) AS annotation
  from master_join master_join_swpple
  join notes.note_view notes_note_lat_pyrmoe on master_join_swpple.target_id = notes_note_lat_pyrmoe.id
  where master_join_swpple.source_id = shared.holdingassessment_ts.id
) as notes_note_view_cxeetm on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternType
-- ['geometry.curve_view', 'holding.holdingpatternduration_view', 'notes.note_view', 'holding.holdingpatterndistance_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_scqpwo.*)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_scqpwo.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_nqqxue.*)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_nqqxue.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_nuubge.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_nuubge.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_gzunsf.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_scqpwo on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_scqpwo.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_nqqxue on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_nqqxue.id
left join geometry.curve_view geometry_curve_view_nuubge on holding.holdingpattern_ts.extent_id = geometry_curve_view_nuubge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_knnahw.*) AS annotation
  from master_join master_join_xtslpe
  join notes.note_view notes_note_lat_knnahw on master_join_xtslpe.target_id = notes_note_lat_knnahw.id
  where master_join_xtslpe.source_id = holding.holdingpattern_ts.id
) as notes_note_view_gzunsf on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_avmzxz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_avmzxz.longitude AS location_longitude,
    geometry_elevatedpoint_view_avmzxz.latitude AS location_latitude,
    geometry_elevatedpoint_view_avmzxz.elevation AS location_elevation,
    geometry_elevatedpoint_view_avmzxz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_avmzxz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_avmzxz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_avmzxz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_dpichb.title as varchar), '(' || organisation_unit_pt_dpichb.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_dpichb.href::text AS serviceprovider_href,
    service_callsigndetail_view_bptkxa.callsign::jsonb as callsign,
    service_callsigndetail_view_bptkxa.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_lrxggw.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_kqbcar.availability::jsonb as availability,
    service_serviceoperationalstatus_view_kqbcar.availability_annotation::jsonb as availability_annotation,
    notes_note_view_hwantw.annotation::jsonb as annotation,
    navaids_points_vor_pt_rnjptv.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_oirklc.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_tlqdgo.clientairport::jsonb as clientairport,
    routes_routeportion_view_hmeujk.clientroute::jsonb as clientroute,
    routes_routeportion_view_hmeujk.clientroute_annotation::jsonb as clientroute_annotation,
    procedure_procedure_pt_uafuti.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_rgjjyk.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_tatbjg.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_avmzxz on service.informationservice_ts.location_id = geometry_elevatedpoint_view_avmzxz.id
left join organisation.unit_pt organisation_unit_pt_dpichb on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_dpichb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_mkedzg.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_mkedzg.annotation) as callsign_annotation  from master_join master_join_unyhar
  join service.callsigndetail_view service_callsigndetail_lat_mkedzg on master_join_unyhar.target_id = service_callsigndetail_lat_mkedzg.id
  where master_join_unyhar.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_bptkxa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_jadntj.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_jadntj.title AS varchar), '(' || service_radiocommunicationchannel_lat_jadntj.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_jadntj.href
  )) as radiocommunication  from master_join master_join_csdtpq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_jadntj on master_join_csdtpq.target_id = service_radiocommunicationchannel_lat_jadntj.id
  where master_join_csdtpq.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_lrxggw on TRUE
left join lateral(
  select
  from master_join master_join_apsejf
  join shared.contactinformation_view shared_contactinformation_lat_iizybn on master_join_apsejf.target_id = shared_contactinformation_lat_iizybn.id
  where master_join_apsejf.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_ihczla on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ueopzy.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ueopzy.annotation) as availability_annotation  from master_join master_join_herrph
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ueopzy on master_join_herrph.target_id = service_serviceoperationalstatus_lat_ueopzy.id
  where master_join_herrph.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_kqbcar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oeyktz.*) AS annotation
  from master_join master_join_dcoeqa
  join notes.note_view notes_note_lat_oeyktz on master_join_dcoeqa.target_id = notes_note_lat_oeyktz.id
  where master_join_dcoeqa.source_id = service.informationservice_ts.id
) as notes_note_view_hwantw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_frvnxv.id,
      'title', coalesce(cast(navaids_points_vor_lat_frvnxv.title AS varchar), '(' || navaids_points_vor_lat_frvnxv.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_frvnxv.href
  )) as navaidbroadcast  from master_join master_join_alicjk
  join navaids_points.vor_pt navaids_points_vor_lat_frvnxv on master_join_alicjk.target_id = navaids_points_vor_lat_frvnxv.id
  where master_join_alicjk.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_rnjptv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_wokijm.id,
      'title', coalesce(cast(airspace_airspace_lat_wokijm.title AS varchar), '(' || airspace_airspace_lat_wokijm.nilreason[1] || ')'),
      'href', airspace_airspace_lat_wokijm.href
  )) as clientairspace  from master_join master_join_jmvves
  join airspace.airspace_pt airspace_airspace_lat_wokijm on master_join_jmvves.target_id = airspace_airspace_lat_wokijm.id
  where master_join_jmvves.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_oirklc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bosolv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bosolv.title AS varchar), '(' || airport_heliport_airportheliport_lat_bosolv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bosolv.href
  )) as clientairport  from master_join master_join_hbgkfj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bosolv on master_join_hbgkfj.target_id = airport_heliport_airportheliport_lat_bosolv.id
  where master_join_hbgkfj.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_tlqdgo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_jtpumm.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_jtpumm.annotation) as clientroute_annotation  from master_join master_join_yrpdfx
  join routes.routeportion_view routes_routeportion_lat_jtpumm on master_join_yrpdfx.target_id = routes_routeportion_lat_jtpumm.id
  where master_join_yrpdfx.source_id = service.informationservice_ts.id
) as routes_routeportion_view_hmeujk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_cykmjj.id,
      'title', coalesce(cast(procedure_procedure_lat_cykmjj.title AS varchar), '(' || procedure_procedure_lat_cykmjj.nilreason[1] || ')'),
      'href', procedure_procedure_lat_cykmjj.href
  )) as clientprocedure  from master_join master_join_yxzbbb
  join procedure.procedure_pt procedure_procedure_lat_cykmjj on master_join_yxzbbb.target_id = procedure_procedure_lat_cykmjj.id
  where master_join_yxzbbb.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_uafuti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_julfqa.id,
      'title', coalesce(cast(holding_holdingpattern_lat_julfqa.title AS varchar), '(' || holding_holdingpattern_lat_julfqa.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_julfqa.href
  )) as clientholding  from master_join master_join_qhppvd
  join holding.holdingpattern_pt holding_holdingpattern_lat_julfqa on master_join_qhppvd.target_id = holding_holdingpattern_lat_julfqa.id
  where master_join_qhppvd.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_rgjjyk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_drpesp.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_drpesp.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_drpesp.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_drpesp.href
  )) as clientaerialrefuelling  from master_join master_join_yzlipz
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_drpesp on master_join_yzlipz.target_id = aerial_refuelling_aerialrefuelling_lat_drpesp.id
  where master_join_yzlipz.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_tatbjg on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pczwzr.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_pczwzr.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_poumwy.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_poumwy.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ibkpxh.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_ibkpxh.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_jhqbzh.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_jhqbzh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qowpwt.title as varchar), '(' || navaids_points_angleindication_pt_qowpwt.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qowpwt.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ekzdjr.title as varchar), '(' || navaids_points_distanceindication_pt_ekzdjr.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ekzdjr.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qcgxwj.*)::jsonb AS holding,
    procedure_holdinguse_view_qcgxwj.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ibybvc.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ibybvc.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_ibybvc.href::text AS approach_href,
    shared_aircraftcharacteristic_view_ealref.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_ealref.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_wvwnps.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_wvwnps.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_inhbge.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pczwzr on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_pczwzr.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_poumwy on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_poumwy.id
left join geometry.curve_view geometry_curve_view_jhqbzh on procedure.initialleg_ts.trajectory_id = geometry_curve_view_jhqbzh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ibkpxh on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ibkpxh.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qowpwt on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_qowpwt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ekzdjr on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_ekzdjr.id
left join procedure.holdinguse_view procedure_holdinguse_view_qcgxwj on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_qcgxwj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ibybvc on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ibybvc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hphaqs.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hphaqs.annotation) as aircraftcategory_annotation  from master_join master_join_zpjdin
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_hphaqs on master_join_zpjdin.target_id = shared_aircraftcharacteristic_lat_hphaqs.id
  where master_join_zpjdin.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_ealref on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dbsjmd.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dbsjmd.annotation) as designsurface_annotation  from master_join master_join_esjaqh
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_dbsjmd on master_join_esjaqh.target_id = shared_obstacleassessmentarea_lat_dbsjmd.id
  where master_join_esjaqh.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_wvwnps on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hguprf.*) AS annotation
  from master_join master_join_gandhk
  join notes.note_view notes_note_lat_hguprf on master_join_gandhk.target_id = notes_note_lat_hguprf.id
  where master_join_gandhk.source_id = procedure.initialleg_ts.id
) as notes_note_view_inhbge on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.missedapproachgroup_view', 'notes.note_view', 'procedure.proceduretransition_view', 'procedure.finalprofile_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_vsjvqm.title as varchar), '(' || navaids_points_navaid_pt_vsjvqm.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_vsjvqm.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_tgjvvy.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_tgjvvy.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_tgjvvy.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_euxtcg.title as varchar), '(' || surveillance_radarsystem_pt_euxtcg.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_euxtcg.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_nvlrys.title as varchar), '(' || procedure_safealtitudearea_pt_nvlrys.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_nvlrys.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_bjsywi.*)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_bjsywi.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_hntkgs.*)::jsonb AS finalprofile,
    procedure_finalprofile_view_hntkgs.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_teizjx.availability::jsonb as availability,
    procedure_procedureavailability_view_teizjx.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_gyacjd.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_efaelf.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_efaelf.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_kwbefd.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_kwbefd.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_zgdama.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_uilroo.missedinstruction::jsonb as missedinstruction,
    procedure_missedapproachgroup_view_uilroo.missedinstruction_annotation::jsonb as missedinstruction_annotation
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vsjvqm on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_vsjvqm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_tgjvvy on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_tgjvvy.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_euxtcg on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_euxtcg.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_nvlrys on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_nvlrys.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_bjsywi on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_bjsywi.id
left join procedure.finalprofile_view procedure_finalprofile_view_hntkgs on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_hntkgs.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_sclebg.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_sclebg.annotation) as availability_annotation  from master_join master_join_apbfdt
  join procedure.procedureavailability_view procedure_procedureavailability_lat_sclebg on master_join_apbfdt.target_id = procedure_procedureavailability_lat_sclebg.id
  where master_join_apbfdt.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_teizjx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fuuynb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fuuynb.title AS varchar), '(' || airport_heliport_airportheliport_lat_fuuynb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fuuynb.href
  )) as airportheliport  from master_join master_join_syxhvv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fuuynb on master_join_syxhvv.target_id = airport_heliport_airportheliport_lat_fuuynb.id
  where master_join_syxhvv.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_gyacjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_txmdpd.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_txmdpd.annotation) as aircraftcharacteristic_annotation  from master_join master_join_dzdqam
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_txmdpd on master_join_dzdqam.target_id = shared_aircraftcharacteristic_lat_txmdpd.id
  where master_join_dzdqam.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_efaelf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_xgtarc.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_xgtarc.annotation) as flighttransition_annotation  from master_join master_join_dmbrxg
  join procedure.proceduretransition_view procedure_proceduretransition_lat_xgtarc on master_join_dmbrxg.target_id = procedure_proceduretransition_lat_xgtarc.id
  where master_join_dmbrxg.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_kwbefd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sppyuq.*) AS annotation
  from master_join master_join_rwdfbw
  join notes.note_view notes_note_lat_sppyuq on master_join_rwdfbw.target_id = notes_note_lat_sppyuq.id
  where master_join_rwdfbw.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_zgdama on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_gblnma.*) as missedinstruction,
      jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_gblnma.annotation) as missedinstruction_annotation  from master_join master_join_mnqumj
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_gblnma on master_join_mnqumj.target_id = procedure_missedapproachgroup_lat_gblnma.id
  where master_join_mnqumj.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_uilroo on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_occwjg.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_occwjg.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ypyqpf.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_ypyqpf.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zudemx.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_zudemx.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_lnrsba.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_lnrsba.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_isblig.title as varchar), '(' || navaids_points_angleindication_pt_isblig.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_isblig.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ltlspa.title as varchar), '(' || navaids_points_distanceindication_pt_ltlspa.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ltlspa.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_rtijww.*)::jsonb AS holding,
    procedure_holdinguse_view_rtijww.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_oldpjt.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_oldpjt.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_oldpjt.href::text AS approach_href,
    shared_aircraftcharacteristic_view_srboui.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_srboui.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_hsbubl.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_hsbubl.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_xkcwjy.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_occwjg on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_occwjg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ypyqpf on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ypyqpf.id
left join geometry.curve_view geometry_curve_view_lnrsba on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_lnrsba.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zudemx on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zudemx.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_isblig on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_isblig.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ltlspa on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_ltlspa.id
left join procedure.holdinguse_view procedure_holdinguse_view_rtijww on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_rtijww.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_oldpjt on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_oldpjt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pypple.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pypple.annotation) as aircraftcategory_annotation  from master_join master_join_ynlxmc
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_pypple on master_join_ynlxmc.target_id = shared_aircraftcharacteristic_lat_pypple.id
  where master_join_ynlxmc.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_srboui on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_mzenyk.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_mzenyk.annotation) as designsurface_annotation  from master_join master_join_cnffnm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_mzenyk on master_join_cnffnm.target_id = shared_obstacleassessmentarea_lat_mzenyk.id
  where master_join_cnffnm.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_hsbubl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kcqyzh.*) AS annotation
  from master_join master_join_kyeoaq
  join notes.note_view notes_note_lat_kcqyzh on master_join_kyeoaq.target_id = notes_note_lat_kcqyzh.id
  where master_join_kyeoaq.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_xkcwjy on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_hknutc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_hknutc.longitude AS location_longitude,
    geometry_elevatedpoint_view_hknutc.latitude AS location_latitude,
    geometry_elevatedpoint_view_hknutc.elevation AS location_elevation,
    geometry_elevatedpoint_view_hknutc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hknutc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hknutc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hknutc.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fuwkux.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_fuwkux.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_dxhweg.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_dxhweg.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_wtdftn.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_wtdftn.availability_annotation::jsonb as availability_annotation,
    notes_note_view_tmmmlq.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hknutc on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_hknutc.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_pxiuav.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_pxiuav.annotation) as authority_annotation  from master_join master_join_fkezoq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_pxiuav on master_join_fkezoq.target_id = navaids_points_authorityfornavaidequipment_lat_pxiuav.id
  where master_join_fkezoq.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_fuwkux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pmthlo.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pmthlo.annotation) as monitoring_annotation  from master_join master_join_odxvzi
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pmthlo on master_join_odxvzi.target_id = navaids_points_navaidequipmentmonitoring_lat_pmthlo.id
  where master_join_odxvzi.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_dxhweg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ibdvxg.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ibdvxg.annotation) as availability_annotation  from master_join master_join_vmvhsf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ibdvxg on master_join_vmvhsf.target_id = navaids_points_navaidoperationalstatus_lat_ibdvxg.id
  where master_join_vmvhsf.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_wtdftn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_akzkrc.*) AS annotation
  from master_join master_join_pmscqt
  join notes.note_view notes_note_lat_akzkrc on master_join_pmscqt.target_id = notes_note_lat_akzkrc.id
  where master_join_pmscqt.source_id = navaids_points.localizer_ts.id
) as notes_note_view_tmmmlq on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_iwxmla.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_iwxmla.longitude AS location_longitude,
    geometry_elevatedpoint_view_iwxmla.latitude AS location_latitude,
    geometry_elevatedpoint_view_iwxmla.elevation AS location_elevation,
    geometry_elevatedpoint_view_iwxmla.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iwxmla.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iwxmla.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iwxmla.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_dplqow.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_dplqow.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_kzkeen.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_kzkeen.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_dqnvrm.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_dqnvrm.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ugxdpn.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iwxmla on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_iwxmla.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_muibgu.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_muibgu.annotation) as authority_annotation  from master_join master_join_ruawqy
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_muibgu on master_join_ruawqy.target_id = navaids_points_authorityfornavaidequipment_lat_muibgu.id
  where master_join_ruawqy.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_dplqow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pefcgj.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pefcgj.annotation) as monitoring_annotation  from master_join master_join_huyggh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pefcgj on master_join_huyggh.target_id = navaids_points_navaidequipmentmonitoring_lat_pefcgj.id
  where master_join_huyggh.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_kzkeen on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_uifmat.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_uifmat.annotation) as availability_annotation  from master_join master_join_mdwpux
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_uifmat on master_join_mdwpux.target_id = navaids_points_navaidoperationalstatus_lat_uifmat.id
  where master_join_mdwpux.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_dqnvrm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyablq.*) AS annotation
  from master_join master_join_gluvfz
  join notes.note_view notes_note_lat_pyablq on master_join_gluvfz.target_id = notes_note_lat_pyablq.id
  where master_join_gluvfz.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_ugxdpn on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_xtbqsd.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_xtbqsd.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_xtbqsd.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_nhudim.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nhudim.longitude AS location_longitude,
    geometry_elevatedpoint_view_nhudim.latitude AS location_latitude,
    geometry_elevatedpoint_view_nhudim.elevation AS location_elevation,
    geometry_elevatedpoint_view_nhudim.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nhudim.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nhudim.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nhudim.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_yzeixz.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_xtbqsd on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_xtbqsd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nhudim on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_nhudim.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzugjs.*) AS annotation
  from master_join master_join_pmalda
  join notes.note_view notes_note_lat_wzugjs on master_join_pmalda.target_id = notes_note_lat_wzugjs.id
  where master_join_pmalda.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_yzeixz on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegType
-- ['shared.obstacleassessmentarea_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'notes.note_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vdmscq.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_vdmscq.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rlrlge.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rlrlge.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tibpsk.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_tibpsk.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_pxipow.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_pxipow.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_dmzjzf.title as varchar), '(' || navaids_points_angleindication_pt_dmzjzf.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_dmzjzf.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_pwtxxk.title as varchar), '(' || navaids_points_distanceindication_pt_pwtxxk.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_pwtxxk.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_sjvcyw.*)::jsonb AS holding,
    procedure_holdinguse_view_sjvcyw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_xvxpli.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_xvxpli.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_xvxpli.href::text AS approach_href,
    shared_aircraftcharacteristic_view_oorvnr.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_oorvnr.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_jztoeg.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_jztoeg.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_qoqsps.annotation::jsonb as annotation,
    procedure_approachcondition_view_hruyeq.condition::jsonb as condition,
    procedure_approachcondition_view_hruyeq.condition_annotation::jsonb as condition_annotation
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vdmscq on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vdmscq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rlrlge on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rlrlge.id
left join geometry.curve_view geometry_curve_view_pxipow on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_pxipow.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tibpsk on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_tibpsk.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_dmzjzf on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_dmzjzf.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_pwtxxk on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_pwtxxk.id
left join procedure.holdinguse_view procedure_holdinguse_view_sjvcyw on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_sjvcyw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_xvxpli on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_xvxpli.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_innzwq.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_innzwq.annotation) as aircraftcategory_annotation  from master_join master_join_jalwjo
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_innzwq on master_join_jalwjo.target_id = shared_aircraftcharacteristic_lat_innzwq.id
  where master_join_jalwjo.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_oorvnr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_vbllqg.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_vbllqg.annotation) as designsurface_annotation  from master_join master_join_qtoapp
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_vbllqg on master_join_qtoapp.target_id = shared_obstacleassessmentarea_lat_vbllqg.id
  where master_join_qtoapp.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_jztoeg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dufkjr.*) AS annotation
  from master_join master_join_yrccek
  join notes.note_view notes_note_lat_dufkjr on master_join_yrccek.target_id = notes_note_lat_dufkjr.id
  where master_join_yrccek.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_qoqsps on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_nhiiws.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_nhiiws.annotation) as condition_annotation  from master_join master_join_crrsev
  join procedure.approachcondition_view procedure_approachcondition_lat_nhiiws on master_join_crrsev.target_id = procedure_approachcondition_lat_nhiiws.id
  where master_join_crrsev.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_hruyeq on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidType
-- ['notes.note_view', 'navaids_points.navaidcomponent_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_igeyxw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_igeyxw.longitude AS location_longitude,
    geometry_elevatedpoint_view_igeyxw.latitude AS location_latitude,
    geometry_elevatedpoint_view_igeyxw.elevation AS location_elevation,
    geometry_elevatedpoint_view_igeyxw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_igeyxw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_igeyxw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_igeyxw.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_xuzqvp.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_sftaoa.navaidequipment::jsonb as navaidequipment,
    navaids_points_navaidcomponent_view_sftaoa.navaidequipment_annotation::jsonb as navaidequipment_annotation,
    airport_heliport_runwaydirection_pt_wuzbun.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_rsqoml.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_kwjvfo.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_kwjvfo.availability_annotation::jsonb as availability_annotation,
    notes_note_view_rlpisp.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_igeyxw on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_igeyxw.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_bpsiqy.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_bpsiqy.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_bpsiqy.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_bpsiqy.href
  )) as touchdownliftoff  from master_join master_join_nboikw
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_bpsiqy on master_join_nboikw.target_id = airport_heliport_touchdownliftoff_lat_bpsiqy.id
  where master_join_nboikw.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_xuzqvp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_ldkfxu.*) as navaidequipment,
      jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_ldkfxu.annotation) as navaidequipment_annotation  from master_join master_join_vdsxzu
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_ldkfxu on master_join_vdsxzu.target_id = navaids_points_navaidcomponent_lat_ldkfxu.id
  where master_join_vdsxzu.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_sftaoa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ukgicz.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ukgicz.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ukgicz.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ukgicz.href
  )) as runwaydirection  from master_join master_join_rbqabk
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ukgicz on master_join_rbqabk.target_id = airport_heliport_runwaydirection_lat_ukgicz.id
  where master_join_rbqabk.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_wuzbun on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zlilxz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zlilxz.title AS varchar), '(' || airport_heliport_airportheliport_lat_zlilxz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zlilxz.href
  )) as servedairport  from master_join master_join_vgafrb
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zlilxz on master_join_vgafrb.target_id = airport_heliport_airportheliport_lat_zlilxz.id
  where master_join_vgafrb.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_rsqoml on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lokbfx.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lokbfx.annotation) as availability_annotation  from master_join master_join_xdtxry
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_lokbfx on master_join_xdtxry.target_id = navaids_points_navaidoperationalstatus_lat_lokbfx.id
  where master_join_xdtxry.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_kwjvfo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jmthki.*) AS annotation
  from master_join master_join_oywhtv
  join notes.note_view notes_note_lat_jmthki on master_join_oywhtv.target_id = notes_note_lat_jmthki.id
  where master_join_oywhtv.source_id = navaids_points.navaid_ts.id
) as notes_note_view_rlpisp on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionType
-- ['shared.circlesector_view', 'shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_ncowzc.*)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_ncowzc.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_njruez.*)::jsonb AS sectordefinition,
    shared_circlesector_view_njruez.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_somnty.procedure::jsonb as procedure,
    notes_note_view_amdwlb.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ncowzc on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_ncowzc.id
left join shared.circlesector_view shared_circlesector_view_njruez on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_njruez.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_lzqwvm.id,
      'title', coalesce(cast(procedure_procedure_lat_lzqwvm.title AS varchar), '(' || procedure_procedure_lat_lzqwvm.nilreason[1] || ')'),
      'href', procedure_procedure_lat_lzqwvm.href
  )) as procedure  from master_join master_join_gcrena
  join procedure.procedure_pt procedure_procedure_lat_lzqwvm on master_join_gcrena.target_id = procedure_procedure_lat_lzqwvm.id
  where master_join_gcrena.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_somnty on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_atwjsl.*) AS annotation
  from master_join master_join_ggbjrp
  join notes.note_view notes_note_lat_atwjsl on master_join_ggbjrp.target_id = notes_note_lat_atwjsl.id
  where master_join_ggbjrp.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_amdwlb on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaType
-- ['notes.note_view', 'procedure.navigationareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_vgxthi.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_vgxthi.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_vgxthi.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jndeic.title as varchar), '(' || navaids_points_designatedpoint_pt_jndeic.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jndeic.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_heqcjd.title as varchar), '(' || navaids_points_navaid_pt_heqcjd.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_heqcjd.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tswjdg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tswjdg.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_tswjdg.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_emidxf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_emidxf.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_emidxf.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xegjbx.title as varchar), '(' || airport_heliport_airportheliport_pt_xegjbx.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_xegjbx.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_fzjcyg.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_fzjcyg.longitude AS centrepointposition_longitude,
    geometry_point_view_fzjcyg.latitude AS centrepointposition_latitude,
    geometry_point_view_fzjcyg.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_wzfbxl.sector::jsonb as sector,
    procedure_navigationareasector_view_wzfbxl.sector_annotation::jsonb as sector_annotation,
    notes_note_view_srykaa.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_vgxthi on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_vgxthi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jndeic on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jndeic.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_heqcjd on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_heqcjd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tswjdg on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tswjdg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_emidxf on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_emidxf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xegjbx on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xegjbx.id
left join geometry.point_view geometry_point_view_fzjcyg on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_fzjcyg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_wygnzk.*) as sector,
      jsonb_agg(DISTINCT procedure_navigationareasector_lat_wygnzk.annotation) as sector_annotation  from master_join master_join_zwfnbc
  join procedure.navigationareasector_view procedure_navigationareasector_lat_wygnzk on master_join_zwfnbc.target_id = procedure_navigationareasector_lat_wygnzk.id
  where master_join_zwfnbc.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_wzfbxl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osfhtk.*) AS annotation
  from master_join master_join_qexcig
  join notes.note_view notes_note_lat_osfhtk on master_join_qexcig.target_id = notes_note_lat_osfhtk.id
  where master_join_qexcig.source_id = procedure.navigationarea_ts.id
) as notes_note_view_srykaa on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_khtykw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_khtykw.longitude AS location_longitude,
    geometry_elevatedpoint_view_khtykw.latitude AS location_latitude,
    geometry_elevatedpoint_view_khtykw.elevation AS location_elevation,
    geometry_elevatedpoint_view_khtykw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_khtykw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_khtykw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_khtykw.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_eewcjg.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_eewcjg.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_vznjnw.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_vznjnw.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_keatcb.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_keatcb.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ntqium.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_khtykw on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_khtykw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_mvpymr.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_mvpymr.annotation) as authority_annotation  from master_join master_join_emzuft
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_mvpymr on master_join_emzuft.target_id = navaids_points_authorityfornavaidequipment_lat_mvpymr.id
  where master_join_emzuft.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_eewcjg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ifvhnc.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ifvhnc.annotation) as monitoring_annotation  from master_join master_join_llheec
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ifvhnc on master_join_llheec.target_id = navaids_points_navaidequipmentmonitoring_lat_ifvhnc.id
  where master_join_llheec.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_vznjnw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_sxziwc.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_sxziwc.annotation) as availability_annotation  from master_join master_join_wiuqkw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_sxziwc on master_join_wiuqkw.target_id = navaids_points_navaidoperationalstatus_lat_sxziwc.id
  where master_join_wiuqkw.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_keatcb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ttjdhx.*) AS annotation
  from master_join master_join_nvtywa
  join notes.note_view notes_note_lat_ttjdhx on master_join_nvtywa.target_id = notes_note_lat_ttjdhx.id
  where master_join_nvtywa.source_id = navaids_points.ndb_ts.id
) as notes_note_view_ntqium on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_hlcsbu.title as varchar), '(' || airport_heliport_airportheliport_pt_hlcsbu.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hlcsbu.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_wuvrhk.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_wuvrhk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_wuvrhk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_wuvrhk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_wuvrhk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_wuvrhk.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ihaddj.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hlcsbu on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hlcsbu.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wuvrhk on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_wuvrhk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gsxgrz.*) AS annotation
  from master_join master_join_zkcbte
  join notes.note_view notes_note_lat_gsxgrz on master_join_zkcbte.target_id = notes_note_lat_gsxgrz.id
  where master_join_zkcbte.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_ihaddj on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_tzsrgz.title as varchar), '(' || airport_heliport_airportheliport_pt_tzsrgz.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_tzsrgz.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_hrozkt.title as varchar), '(' || airport_heliport_runwaydirection_pt_hrozkt.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_hrozkt.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_ndxbxe.title as varchar), '(' || organisation_organisationauthority_pt_ndxbxe.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_ndxbxe.href::text AS referenceownerorganisation_href,
    geometry_surface_view_rdgjji.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_rdgjji.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_qseuws.obstacle::jsonb as obstacle,
    notes_note_view_tkiizo.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tzsrgz on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_tzsrgz.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_hrozkt on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_hrozkt.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ndxbxe on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_ndxbxe.id
left join geometry.surface_view geometry_surface_view_rdgjji on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_rdgjji.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_egxuuj.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_egxuuj.title AS varchar), '(' || obstacles_verticalstructure_lat_egxuuj.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_egxuuj.href
  )) as obstacle  from master_join master_join_swdwel
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_egxuuj on master_join_swdwel.target_id = obstacles_verticalstructure_lat_egxuuj.id
  where master_join_swdwel.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_qseuws on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_daosmw.*) AS annotation
  from master_join master_join_hpuuoq
  join notes.note_view notes_note_lat_daosmw on master_join_hpuuoq.target_id = notes_note_lat_daosmw.id
  where master_join_hpuuoq.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_tkiizo on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityType
-- ['notes.note_view', 'organisation.organisationauthorityassociation_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_wanxku.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    organisation_organisationauthorityassociation_view_wanxku.relatedorganisationauthority_annotation::jsonb as relatedorganisationauthority_annotation,
    notes_note_view_hbmzzt.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_yhlqdq
  join shared.contactinformation_view shared_contactinformation_lat_mcqgzo on master_join_yhlqdq.target_id = shared_contactinformation_lat_mcqgzo.id
  where master_join_yhlqdq.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_hwlnnu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_aeidal.*) as relatedorganisationauthority,
      jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_aeidal.annotation) as relatedorganisationauthority_annotation  from master_join master_join_bnogao
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_aeidal on master_join_bnogao.target_id = organisation_organisationauthorityassociation_lat_aeidal.id
  where master_join_bnogao.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_wanxku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wtksqj.*) AS annotation
  from master_join master_join_iklqsb
  join notes.note_view notes_note_lat_wtksqj on master_join_iklqsb.target_id = notes_note_lat_wtksqj.id
  where master_join_iklqsb.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_hbmzzt on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_lksrgi.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_lksrgi.elevation AS extent_elevation,
    geometry_elevatedsurface_view_lksrgi.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_lksrgi.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_lksrgi.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_lksrgi.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_fbzfeq.associatedstand::jsonb as associatedstand,
    notes_note_view_colmbs.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lksrgi on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_lksrgi.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_kfkhaz.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_kfkhaz.title AS varchar), '(' || airport_heliport_aircraftstand_lat_kfkhaz.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_kfkhaz.href
  )) as associatedstand  from master_join master_join_ynhurx
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_kfkhaz on master_join_ynhurx.target_id = airport_heliport_aircraftstand_lat_kfkhaz.id
  where master_join_ynhurx.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_fbzfeq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bobzhr.*) AS annotation
  from master_join master_join_cxdddw
  join notes.note_view notes_note_lat_bobzhr on master_join_cxdddw.target_id = notes_note_lat_bobzhr.id
  where master_join_cxdddw.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_colmbs on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_sfhpyz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_sfhpyz.longitude AS location_longitude,
    geometry_elevatedpoint_view_sfhpyz.latitude AS location_latitude,
    geometry_elevatedpoint_view_sfhpyz.elevation AS location_elevation,
    geometry_elevatedpoint_view_sfhpyz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sfhpyz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sfhpyz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sfhpyz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_xveylb.title as varchar), '(' || organisation_unit_pt_xveylb.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_xveylb.href::text AS serviceprovider_href,
    service_callsigndetail_view_ctpfrw.callsign::jsonb as callsign,
    service_callsigndetail_view_ctpfrw.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_mhvaxj.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_jejqqd.availability::jsonb as availability,
    service_serviceoperationalstatus_view_jejqqd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_qzwcoz.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_drcxps.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sfhpyz on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_sfhpyz.id
left join organisation.unit_pt organisation_unit_pt_xveylb on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_xveylb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dhfpjc.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_dhfpjc.annotation) as callsign_annotation  from master_join master_join_altlve
  join service.callsigndetail_view service_callsigndetail_lat_dhfpjc on master_join_altlve.target_id = service_callsigndetail_lat_dhfpjc.id
  where master_join_altlve.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_ctpfrw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_uwsrau.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_uwsrau.title AS varchar), '(' || service_radiocommunicationchannel_lat_uwsrau.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_uwsrau.href
  )) as radiocommunication  from master_join master_join_awljbl
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_uwsrau on master_join_awljbl.target_id = service_radiocommunicationchannel_lat_uwsrau.id
  where master_join_awljbl.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_mhvaxj on TRUE
left join lateral(
  select
  from master_join master_join_dmeddv
  join shared.contactinformation_view shared_contactinformation_lat_rckpys on master_join_dmeddv.target_id = shared_contactinformation_lat_rckpys.id
  where master_join_dmeddv.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_ismsrb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ytdidi.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ytdidi.annotation) as availability_annotation  from master_join master_join_xcdnsb
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ytdidi on master_join_xcdnsb.target_id = service_serviceoperationalstatus_lat_ytdidi.id
  where master_join_xcdnsb.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_jejqqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wblyua.*) AS annotation
  from master_join master_join_ugznjd
  join notes.note_view notes_note_lat_wblyua on master_join_ugznjd.target_id = notes_note_lat_wblyua.id
  where master_join_ugznjd.source_id = service.passengerservice_ts.id
) as notes_note_view_qzwcoz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wblgqk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wblgqk.title AS varchar), '(' || airport_heliport_airportheliport_lat_wblgqk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wblgqk.href
  )) as airportheliport  from master_join master_join_hdztde
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wblgqk on master_join_hdztde.target_id = airport_heliport_airportheliport_lat_wblgqk.id
  where master_join_hdztde.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_drcxps on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_ujgsqc.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_lightactivation_view_ujgsqc.controlledlightintensity_annotation::jsonb as controlledlightintensity_annotation,
    airport_heliport_groundlightsystem_pt_uwxzen.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_rtggzr.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_jixlvn.*) as controlledlightintensity,
      jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_jixlvn.annotation) as controlledlightintensity_annotation  from master_join master_join_dfwbwz
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_jixlvn on master_join_dfwbwz.target_id = airport_heliport_lightactivation_lat_jixlvn.id
  where master_join_dfwbwz.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_ujgsqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_ozyehf.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_ozyehf.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_ozyehf.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_ozyehf.href
  )) as activatedgroundlighting  from master_join master_join_leoqha
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_ozyehf on master_join_leoqha.target_id = airport_heliport_groundlightsystem_lat_ozyehf.id
  where master_join_leoqha.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_uwxzen on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwboef.*) AS annotation
  from master_join master_join_dhpron
  join notes.note_view notes_note_lat_nwboef on master_join_dhpron.target_id = notes_note_lat_nwboef.id
  where master_join_dhpron.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_rtggzr on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'surveillance.reflector_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_ibvkha.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ibvkha.longitude AS location_longitude,
    geometry_elevatedpoint_view_ibvkha.latitude AS location_latitude,
    geometry_elevatedpoint_view_ibvkha.elevation AS location_elevation,
    geometry_elevatedpoint_view_ibvkha.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ibvkha.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ibvkha.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ibvkha.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_siewnm.annotation::jsonb as annotation,
    surveillance_reflector_view_mtwgot.reflector::jsonb as reflector,
    surveillance_reflector_view_mtwgot.reflector_annotation::jsonb as reflector_annotation
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ibvkha on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_ibvkha.id
left join lateral(
  select
  from master_join master_join_urxllo
  join shared.contactinformation_view shared_contactinformation_lat_clttqk on master_join_urxllo.target_id = shared_contactinformation_lat_clttqk.id
  where master_join_urxllo.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_npjkzl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obrrqs.*) AS annotation
  from master_join master_join_spxtct
  join notes.note_view notes_note_lat_obrrqs on master_join_spxtct.target_id = notes_note_lat_obrrqs.id
  where master_join_spxtct.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_siewnm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_niujdj.*) as reflector,
      jsonb_agg(DISTINCT surveillance_reflector_lat_niujdj.annotation) as reflector_annotation  from master_join master_join_mwvoga
  join surveillance.reflector_view surveillance_reflector_lat_niujdj on master_join_mwvoga.target_id = surveillance_reflector_lat_niujdj.id
  where master_join_mwvoga.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_mtwgot on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_ymggos.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ymggos.longitude AS location_longitude,
    geometry_elevatedpoint_view_ymggos.latitude AS location_latitude,
    geometry_elevatedpoint_view_ymggos.elevation AS location_elevation,
    geometry_elevatedpoint_view_ymggos.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ymggos.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ymggos.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ymggos.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_mwpuyd.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_yrqprh.groundstation::jsonb as groundstation,
    surveillance_surveillancegroundstation_view_yrqprh.groundstation_annotation::jsonb as groundstation_annotation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ymggos on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ymggos.id
left join lateral(
  select
  from master_join master_join_ggwohm
  join shared.contactinformation_view shared_contactinformation_lat_jrhqfu on master_join_ggwohm.target_id = shared_contactinformation_lat_jrhqfu.id
  where master_join_ggwohm.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_cabjcd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rxnolc.*) AS annotation
  from master_join master_join_jpzzyx
  join notes.note_view notes_note_lat_rxnolc on master_join_jpzzyx.target_id = notes_note_lat_rxnolc.id
  where master_join_jpzzyx.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_mwpuyd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_jqpyop.*) as groundstation,
      jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_jqpyop.annotation) as groundstation_annotation  from master_join master_join_lvgyxq
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_jqpyop on master_join_lvgyxq.target_id = surveillance_surveillancegroundstation_lat_jqpyop.id
  where master_join_lvgyxq.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_yrqprh on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_cyagth.title as varchar), '(' || navaids_points_dme_pt_cyagth.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_cyagth.href::text AS dme_href,
    procedure_segmentleg_pt_zqshor.segmentleg::jsonb as segmentleg,
    notes_note_view_odyzux.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_cyagth on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_cyagth.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_segmentleg_lat_mwjpcg.id,
      'title', coalesce(cast(procedure_segmentleg_lat_mwjpcg.title AS varchar), '(' || procedure_segmentleg_lat_mwjpcg.nilreason[1] || ')'),
      'href', procedure_segmentleg_lat_mwjpcg.href
  )) as segmentleg  from master_join master_join_ilbozc
  join procedure.segmentleg_pt procedure_segmentleg_lat_mwjpcg on master_join_ilbozc.target_id = procedure_segmentleg_lat_mwjpcg.id
  where master_join_ilbozc.source_id = procedure.proceduredme_ts.id
) as procedure_segmentleg_pt_zqshor on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vsbfot.*) AS annotation
  from master_join master_join_oxylcg
  join notes.note_view notes_note_lat_vsbfot on master_join_oxylcg.target_id = notes_note_lat_vsbfot.id
  where master_join_oxylcg.source_id = procedure.proceduredme_ts.id
) as notes_note_view_odyzux on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemType
-- ['notes.note_view', 'surveillance.radarcomponent_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_vzfvxa.title as varchar), '(' || airport_heliport_airportheliport_pt_vzfvxa.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_vzfvxa.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_yxwdlf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yxwdlf.longitude AS location_longitude,
    geometry_elevatedpoint_view_yxwdlf.latitude AS location_latitude,
    geometry_elevatedpoint_view_yxwdlf.elevation AS location_elevation,
    geometry_elevatedpoint_view_yxwdlf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yxwdlf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yxwdlf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yxwdlf.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_nbzboi.radarequipment::jsonb as radarequipment,
    surveillance_radarcomponent_view_nbzboi.radarequipment_annotation::jsonb as radarequipment_annotation,
    organisation_organisationauthority_pt_ffjprj.office::jsonb as office,
    airport_heliport_runway_pt_paiyip.parrunway::jsonb as parrunway,
    notes_note_view_metult.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vzfvxa on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_vzfvxa.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yxwdlf on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_yxwdlf.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_qevjyl.*) as radarequipment,
      jsonb_agg(DISTINCT surveillance_radarcomponent_lat_qevjyl.annotation) as radarequipment_annotation  from master_join master_join_slkvrp
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_qevjyl on master_join_slkvrp.target_id = surveillance_radarcomponent_lat_qevjyl.id
  where master_join_slkvrp.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_nbzboi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hydbft.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hydbft.title AS varchar), '(' || organisation_organisationauthority_lat_hydbft.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hydbft.href
  )) as office  from master_join master_join_wsjkpa
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hydbft on master_join_wsjkpa.target_id = organisation_organisationauthority_lat_hydbft.id
  where master_join_wsjkpa.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_ffjprj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_dghjaz.id,
      'title', coalesce(cast(airport_heliport_runway_lat_dghjaz.title AS varchar), '(' || airport_heliport_runway_lat_dghjaz.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_dghjaz.href
  )) as parrunway  from master_join master_join_hbfbrq
  join airport_heliport.runway_pt airport_heliport_runway_lat_dghjaz on master_join_hbfbrq.target_id = airport_heliport_runway_lat_dghjaz.id
  where master_join_hbfbrq.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_paiyip on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_knxvay.*) AS annotation
  from master_join master_join_gzyixr
  join notes.note_view notes_note_lat_knxvay on master_join_gzyixr.target_id = notes_note_lat_knxvay.id
  where master_join_gzyixr.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_metult on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelType
-- ['notes.note_view', 'service.radiocommunicationoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_tfdcif.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_tfdcif.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_wyadad.availability::jsonb as availability,
    service_radiocommunicationoperationalstatus_view_wyadad.availability_annotation::jsonb as availability_annotation,
    notes_note_view_lhoeac.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_tgmcci.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_tgmcci.id,
      'longitude', geometry_elevatedpoint_lat_tgmcci.longitude,
      'latitude', geometry_elevatedpoint_lat_tgmcci.latitude,
      'elevation', geometry_elevatedpoint_lat_tgmcci.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_tgmcci.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_tgmcci.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_tgmcci.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_tgmcci.horizontalAccuracy
    )) AS attr
  from master_join master_join_uhahxz
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_tgmcci on master_join_uhahxz.target_id = geometry_elevatedpoint_lat_tgmcci.id
  where master_join_uhahxz.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_tfdcif on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_wkeffv.*) as availability,
      jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_wkeffv.annotation) as availability_annotation  from master_join master_join_nqwqup
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_wkeffv on master_join_nqwqup.target_id = service_radiocommunicationoperationalstatus_lat_wkeffv.id
  where master_join_nqwqup.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_wyadad on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjffnb.*) AS annotation
  from master_join master_join_fhnmfu
  join notes.note_view notes_note_lat_yjffnb on master_join_fhnmfu.target_id = notes_note_lat_yjffnb.id
  where master_join_fhnmfu.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_lhoeac on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    navaids_points_navaidequipment_pt_vcohrj.equipmentnavaidequipment::jsonb as equipmentnavaidequipment,
    coalesce(cast(service_radiocommunicationchannel_pt_lhbyeu.title as varchar), '(' || service_radiocommunicationchannel_pt_lhbyeu.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_lhbyeu.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_rtcypz.title as varchar), '(' || navaids_points_specialnavigationstation_pt_rtcypz.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_rtcypz.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_zbyvxs.title as varchar), '(' || surveillance_precisionapproachradar_pt_zbyvxs.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_zbyvxs.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_mgvndf.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_mgvndf.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_mgvndf.href::text AS equipmentradar_href,
    shared_circlesector_view_cakenu.sector::jsonb as sector,
    shared_circlesector_view_cakenu.sector_annotation::jsonb as sector_annotation,
    geometry_surface_view_wlgtbs.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_wlgtbs.attr::jsonb as extent,
    notes_note_view_jtcwpg.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_lhbyeu on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_lhbyeu.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_rtcypz on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_rtcypz.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_zbyvxs on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_zbyvxs.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_mgvndf on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_mgvndf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_wfccin.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_wfccin.title AS varchar), '(' || navaids_points_navaidequipment_lat_wfccin.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_wfccin.href
  )) as equipmentnavaidequipment  from master_join master_join_ptluvu
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_wfccin on master_join_ptluvu.target_id = navaids_points_navaidequipment_lat_wfccin.id
  where master_join_ptluvu.source_id = shared.radiofrequencyarea_ts.id
) as navaids_points_navaidequipment_pt_vcohrj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_buyzma.*) as sector,
      jsonb_agg(DISTINCT shared_circlesector_lat_buyzma.annotation) as sector_annotation  from master_join master_join_fagnfu
  join shared.circlesector_view shared_circlesector_lat_buyzma on master_join_fagnfu.target_id = shared_circlesector_lat_buyzma.id
  where master_join_fagnfu.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_cakenu on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_djibpq.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_djibpq.id,
      'horizontalAccuracy', geometry_surface_lat_djibpq.horizontalAccuracy
    )) AS attr
  from master_join master_join_cwknvq
  join geometry.surface_view geometry_surface_lat_djibpq on master_join_cwknvq.target_id = geometry_surface_lat_djibpq.id
  where master_join_cwknvq.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_wlgtbs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iskjme.*) AS annotation
  from master_join master_join_xbixzb
  join notes.note_view notes_note_lat_iskjme on master_join_xbixzb.target_id = notes_note_lat_iskjme.id
  where master_join_xbixzb.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_jtcwpg on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_acxkpj.title as varchar), '(' || airport_heliport_airportheliport_pt_acxkpj.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_acxkpj.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qezjjh.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_qezjjh.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_kvsrgl.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_kvsrgl.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_kvsrgl.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_kvsrgl.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_kvsrgl.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_kvsrgl.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_oqmtot.accessiblestand::jsonb as accessiblestand,
    notes_note_view_asxbtl.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_acxkpj on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_acxkpj.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qezjjh on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qezjjh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kvsrgl on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_kvsrgl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_mpoahf.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_mpoahf.title AS varchar), '(' || airport_heliport_aircraftstand_lat_mpoahf.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_mpoahf.href
  )) as accessiblestand  from master_join master_join_vizwvv
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_mpoahf on master_join_vizwvv.target_id = airport_heliport_aircraftstand_lat_mpoahf.id
  where master_join_vizwvv.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_oqmtot on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bbdesr.*) AS annotation
  from master_join master_join_wdetax
  join notes.note_view notes_note_lat_bbdesr on master_join_wdetax.target_id = notes_note_lat_bbdesr.id
  where master_join_wdetax.source_id = airport_heliport.road_ts.id
) as notes_note_view_asxbtl on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMEType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_btxwfy.title as varchar), '(' || navaids_points_dme_pt_btxwfy.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_btxwfy.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_wxavnl.*)::jsonb AS applicablerouteportion,
    routes_routeportion_view_wxavnl.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_yrjosq.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_btxwfy on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_btxwfy.id
left join routes.routeportion_view routes_routeportion_view_wxavnl on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_wxavnl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_epraow.*) AS annotation
  from master_join master_join_xnrykh
  join notes.note_view notes_note_lat_epraow on master_join_xnrykh.target_id = notes_note_lat_epraow.id
  where master_join_xnrykh.source_id = routes.routedme_ts.id
) as notes_note_view_yrjosq on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentType
-- ['shared.obstacleassessmentarea_view', 'routes.routeavailability_view', 'navaids_points.enroutesegmentpoint_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_zpgdla.*)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_zpgdla.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_hxhkwq.*)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_hxhkwq.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_wtzupz.title as varchar), '(' || routes_route_pt_wtzupz.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_wtzupz.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_fcydwy.*)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_fcydwy.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_obtcaf.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_obtcaf.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_ktdrlv.availability::jsonb as availability,
    routes_routeavailability_view_ktdrlv.availability_annotation::jsonb as availability_annotation,
    notes_note_view_lvayyy.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_zpgdla on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_zpgdla.id
left join routes.route_pt routes_route_pt_wtzupz on routes.routesegment_ts.routeformed_id = routes_route_pt_wtzupz.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_fcydwy on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_fcydwy.id
left join geometry.curve_view geometry_curve_view_obtcaf on routes.routesegment_ts.curveextent_id = geometry_curve_view_obtcaf.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_hxhkwq on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_hxhkwq.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_drzzus.*) as availability,
      jsonb_agg(DISTINCT routes_routeavailability_lat_drzzus.annotation) as availability_annotation  from master_join master_join_seuzkj
  join routes.routeavailability_view routes_routeavailability_lat_drzzus on master_join_seuzkj.target_id = routes_routeavailability_lat_drzzus.id
  where master_join_seuzkj.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_ktdrlv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xdqbis.*) AS annotation
  from master_join master_join_sqtmnm
  join notes.note_view notes_note_lat_xdqbis on master_join_sqtmnm.target_id = notes_note_lat_xdqbis.id
  where master_join_sqtmnm.source_id = routes.routesegment_ts.id
) as notes_note_view_lvayyy on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_oiamdo.title as varchar), '(' || organisation_organisationauthority_pt_oiamdo.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_oiamdo.href::text AS userorganisation_href,
    notes_note_view_dxzhay.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_oiamdo on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_oiamdo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvdzdp.*) AS annotation
  from master_join master_join_kinqhe
  join notes.note_view notes_note_lat_xvdzdp on master_join_kinqhe.target_id = notes_note_lat_xvdzdp.id
  where master_join_kinqhe.source_id = routes.route_ts.id
) as notes_note_view_dxzhay on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_yuuqnh.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_zevatg.affectedarea::jsonb as affectedarea,
    notes_note_view_jjgvcy.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_yyerbo.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_yyerbo.title AS varchar), '(' || airport_heliport_airportheliport_lat_yyerbo.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_yyerbo.href
  )) as affectedlocation  from master_join master_join_oswlns
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_yyerbo on master_join_oswlns.target_id = airport_heliport_airportheliport_lat_yyerbo.id
  where master_join_oswlns.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_yuuqnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_kbrbbv.id,
      'title', coalesce(cast(airspace_airspace_lat_kbrbbv.title AS varchar), '(' || airspace_airspace_lat_kbrbbv.nilreason[1] || ')'),
      'href', airspace_airspace_lat_kbrbbv.href
  )) as affectedarea  from master_join master_join_hwkeka
  join airspace.airspace_pt airspace_airspace_lat_kbrbbv on master_join_hwkeka.target_id = airspace_airspace_lat_kbrbbv.id
  where master_join_hwkeka.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_zevatg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ogpchg.*) AS annotation
  from master_join master_join_ptgoeq
  join notes.note_view notes_note_lat_ogpchg on master_join_ptgoeq.target_id = notes_note_lat_ogpchg.id
  where master_join_ptgoeq.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_jjgvcy on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_jkifax.title as varchar), '(' || airport_heliport_runwaydirection_pt_jkifax.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_jkifax.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_pimtdm.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_pimtdm.elevation AS extent_elevation,
    geometry_elevatedsurface_view_pimtdm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_pimtdm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_pimtdm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_pimtdm.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_hmhttx.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_hmhttx.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_mmfxrx.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_jkifax on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_jkifax.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pimtdm on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_pimtdm.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hmhttx on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hmhttx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mztlgx.*) AS annotation
  from master_join master_join_urmufg
  join notes.note_view notes_note_lat_mztlgx on master_join_urmufg.target_id = notes_note_lat_mztlgx.id
  where master_join_urmufg.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_mmfxrx on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointType
-- ['notes.note_view', 'airport_heliport.navaidequipmentdistance_view', 'geometry.elevatedpoint_view', 'airport_heliport.runwaydeclareddistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_oqjkdw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_oqjkdw.longitude AS location_longitude,
    geometry_elevatedpoint_view_oqjkdw.latitude AS location_latitude,
    geometry_elevatedpoint_view_oqjkdw.elevation AS location_elevation,
    geometry_elevatedpoint_view_oqjkdw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oqjkdw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oqjkdw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oqjkdw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_fvrzsb.title as varchar), '(' || airport_heliport_runwaydirection_pt_fvrzsb.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_fvrzsb.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_uxlpwr.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_runwaydeclareddistance_view_uxlpwr.associateddeclareddistance_annotation::jsonb as associateddeclareddistance_annotation,
    airport_heliport_navaidequipmentdistance_view_ofzzwo.navaidequipment::jsonb as navaidequipment,
    airport_heliport_navaidequipmentdistance_view_ofzzwo.navaidequipment_annotation::jsonb as navaidequipment_annotation,
    notes_note_view_jggpfw.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oqjkdw on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_oqjkdw.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_fvrzsb on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_fvrzsb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_rrqmmv.*) as associateddeclareddistance,
      jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_rrqmmv.annotation) as associateddeclareddistance_annotation  from master_join master_join_fjbqmo
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_rrqmmv on master_join_fjbqmo.target_id = airport_heliport_runwaydeclareddistance_lat_rrqmmv.id
  where master_join_fjbqmo.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_uxlpwr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_ghtjqg.*) as navaidequipment,
      jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_ghtjqg.annotation) as navaidequipment_annotation  from master_join master_join_vbidzo
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_ghtjqg on master_join_vbidzo.target_id = airport_heliport_navaidequipmentdistance_lat_ghtjqg.id
  where master_join_vbidzo.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_ofzzwo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ksoenz.*) AS annotation
  from master_join master_join_qogiia
  join notes.note_view notes_note_lat_ksoenz on master_join_qogiia.target_id = notes_note_lat_ksoenz.id
  where master_join_qogiia.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_jggpfw on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_yzkvkt.title as varchar), '(' || airport_heliport_runwaydirection_pt_yzkvkt.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_yzkvkt.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_zqfhec.element::jsonb as element,
    shared_lightelement_view_zqfhec.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_xncbbg.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_xncbbg.availability_annotation::jsonb as availability_annotation,
    notes_note_view_kzrlib.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_yzkvkt on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_yzkvkt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_xygiyh.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_xygiyh.annotation) as element_annotation  from master_join master_join_cqjway
  join shared.lightelement_view shared_lightelement_lat_xygiyh on master_join_cqjway.target_id = shared_lightelement_lat_xygiyh.id
  where master_join_cqjway.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_zqfhec on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_asqywv.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_asqywv.annotation) as availability_annotation  from master_join master_join_prdnbf
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_asqywv on master_join_prdnbf.target_id = airport_heliport_groundlightingavailability_lat_asqywv.id
  where master_join_prdnbf.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_xncbbg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gxkmcg.*) AS annotation
  from master_join master_join_xkwwfx
  join notes.note_view notes_note_lat_gxkmcg on master_join_xkwwfx.target_id = notes_note_lat_gxkmcg.id
  where master_join_xkwwfx.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_kzrlib on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_fztpsf.title as varchar), '(' || airport_heliport_runway_pt_fztpsf.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_fztpsf.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_qtydkm.title as varchar), '(' || airport_heliport_runwayelement_pt_qtydkm.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_qtydkm.href::text AS startingelement_href,
    notes_note_view_rdylnr.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_mdkbzc.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_mdkbzc.availability_annotation::jsonb as availability_annotation
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_fztpsf on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_fztpsf.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_qtydkm on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_qtydkm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rnioxl.*) AS annotation
  from master_join master_join_ydkbdi
  join notes.note_view notes_note_lat_rnioxl on master_join_ydkbdi.target_id = notes_note_lat_rnioxl.id
  where master_join_ydkbdi.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_rdylnr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_hxyqpi.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_hxyqpi.annotation) as availability_annotation  from master_join master_join_mbwgdt
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_hxyqpi on master_join_mbwgdt.target_id = airport_heliport_manoeuvringareaavailability_lat_hxyqpi.id
  where master_join_mbwgdt.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_mdkbzc on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_uiqsrp.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_uiqsrp.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_tcjida.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_tcjida.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tcjida.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tcjida.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tcjida.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tcjida.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_fwrlgs.associatedrunway::jsonb as associatedrunway,
    notes_note_view_fjsikm.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_nhuiye.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_nhuiye.availability_annotation::jsonb as availability_annotation
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_uiqsrp on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_uiqsrp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tcjida on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_tcjida.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_nlebce.id,
      'title', coalesce(cast(airport_heliport_runway_lat_nlebce.title AS varchar), '(' || airport_heliport_runway_lat_nlebce.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_nlebce.href
  )) as associatedrunway  from master_join master_join_gmfrrg
  join airport_heliport.runway_pt airport_heliport_runway_lat_nlebce on master_join_gmfrrg.target_id = airport_heliport_runway_lat_nlebce.id
  where master_join_gmfrrg.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_fwrlgs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uwbgof.*) AS annotation
  from master_join master_join_wjcyhw
  join notes.note_view notes_note_lat_uwbgof on master_join_wjcyhw.target_id = notes_note_lat_uwbgof.id
  where master_join_wjcyhw.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_fjsikm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_nvwhoy.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_nvwhoy.annotation) as availability_annotation  from master_join master_join_pvlukx
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_nvwhoy on master_join_pvlukx.target_id = airport_heliport_manoeuvringareaavailability_lat_nvwhoy.id
  where master_join_pvlukx.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_nhuiye on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_jbrubh.title as varchar), '(' || airport_heliport_runway_pt_jbrubh.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_jbrubh.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_xqxcbr.element::jsonb as element,
    airport_heliport_markingelement_view_xqxcbr.element_annotation::jsonb as element_annotation,
    notes_note_view_qaeaya.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_jbrubh on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_jbrubh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_scaxyf.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_scaxyf.annotation) as element_annotation  from master_join master_join_vqshyl
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_scaxyf on master_join_vqshyl.target_id = airport_heliport_markingelement_lat_scaxyf.id
  where master_join_vqshyl.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_xqxcbr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikymle.*) AS annotation
  from master_join master_join_hoeetj
  join notes.note_view notes_note_lat_ikymle on master_join_hoeetj.target_id = notes_note_lat_ikymle.id
  where master_join_hoeetj.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_qaeaya on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_fhrqmv.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_fhrqmv.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_fhrqmv.href::text AS lightedarea_href,
    shared_lightelement_view_qnltwr.element::jsonb as element,
    shared_lightelement_view_qnltwr.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_dvclof.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_dvclof.availability_annotation::jsonb as availability_annotation,
    notes_note_view_fjellv.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_fhrqmv on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_fhrqmv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ivrttw.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_ivrttw.annotation) as element_annotation  from master_join master_join_idtzip
  join shared.lightelement_view shared_lightelement_lat_ivrttw on master_join_idtzip.target_id = shared_lightelement_lat_ivrttw.id
  where master_join_idtzip.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_qnltwr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_zmyyqt.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_zmyyqt.annotation) as availability_annotation  from master_join master_join_esjfin
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_zmyyqt on master_join_esjfin.target_id = airport_heliport_groundlightingavailability_lat_zmyyqt.id
  where master_join_esjfin.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_dvclof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fvfxmh.*) AS annotation
  from master_join master_join_uwztkc
  join notes.note_view notes_note_lat_fvfxmh on master_join_uwztkc.target_id = notes_note_lat_fvfxmh.id
  where master_join_uwztkc.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_fjellv on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_tmkaff.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_tmkaff.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_ikglja.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ikglja.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ikglja.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ikglja.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ikglja.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ikglja.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_uqnbbk.title as varchar), '(' || airport_heliport_runwaydirection_pt_uqnbbk.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_uqnbbk.href::text AS protectedrunwaydirection_href,
    notes_note_view_jlgens.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_tmkaff on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_tmkaff.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ikglja on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_ikglja.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_uqnbbk on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_uqnbbk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qmcloi.*) AS annotation
  from master_join master_join_iwxlqw
  join notes.note_view notes_note_lat_qmcloi on master_join_iwxlqw.target_id = notes_note_lat_qmcloi.id
  where master_join_iwxlqw.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_jlgens on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayType
-- ['notes.note_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fofylz.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_fofylz.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_aojnlm.title as varchar), '(' || airport_heliport_airportheliport_pt_aojnlm.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_aojnlm.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_uywpis.overallcontaminant::jsonb as overallcontaminant,
    airport_heliport_runwaycontamination_view_uywpis.overallcontaminant_annotation::jsonb as overallcontaminant_annotation,
    notes_note_view_jctpmy.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_pihtfl.areacontaminant::jsonb as areacontaminant,
    airport_heliport_runwaysectioncontamination_view_pihtfl.areacontaminant_annotation::jsonb as areacontaminant_annotation
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fofylz on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fofylz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aojnlm on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_aojnlm.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_zctdzl.*) as overallcontaminant,
      jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_zctdzl.annotation) as overallcontaminant_annotation  from master_join master_join_qieysq
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_zctdzl on master_join_qieysq.target_id = airport_heliport_runwaycontamination_lat_zctdzl.id
  where master_join_qieysq.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_uywpis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oxxwqt.*) AS annotation
  from master_join master_join_lxxcvm
  join notes.note_view notes_note_lat_oxxwqt on master_join_lxxcvm.target_id = notes_note_lat_oxxwqt.id
  where master_join_lxxcvm.source_id = airport_heliport.runway_ts.id
) as notes_note_view_jctpmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_nqpabw.*) as areacontaminant,
      jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_nqpabw.annotation) as areacontaminant_annotation  from master_join master_join_yrazxq
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_nqpabw on master_join_yrazxq.target_id = airport_heliport_runwaysectioncontamination_lat_nqpabw.id
  where master_join_yrazxq.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_pihtfl on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_bnwidw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bnwidw.longitude AS location_longitude,
    geometry_elevatedpoint_view_bnwidw.latitude AS location_latitude,
    geometry_elevatedpoint_view_bnwidw.elevation AS location_elevation,
    geometry_elevatedpoint_view_bnwidw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bnwidw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bnwidw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bnwidw.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_sqjtwa.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_wszoti.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bnwidw on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_bnwidw.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_hojbnr.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_hojbnr.title AS varchar), '(' || airport_heliport_runwaydirection_lat_hojbnr.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_hojbnr.href
  )) as associatedrunwaydirection  from master_join master_join_vxjpgt
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_hojbnr on master_join_vxjpgt.target_id = airport_heliport_runwaydirection_lat_hojbnr.id
  where master_join_vxjpgt.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_sqjtwa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zesfdo.*) AS annotation
  from master_join master_join_mlyerg
  join notes.note_view notes_note_lat_zesfdo on master_join_mlyerg.target_id = notes_note_lat_zesfdo.id
  where master_join_mlyerg.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_wszoti on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaType
-- ['procedure.safealtitudeareasector_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_ceqhxo.title as varchar), '(' || navaids_points_designatedpoint_pt_ceqhxo.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ceqhxo.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jtozuf.title as varchar), '(' || navaids_points_navaid_pt_jtozuf.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_jtozuf.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lxamen.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lxamen.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_lxamen.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mehayb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mehayb.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mehayb.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hlkzxi.title as varchar), '(' || airport_heliport_airportheliport_pt_hlkzxi.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_hlkzxi.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_pgfnlc.location::jsonb as location,
    geometry_point_view_ygxikd.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_ygxikd.longitude AS centrepointposition_longitude,
    geometry_point_view_ygxikd.latitude AS centrepointposition_latitude,
    geometry_point_view_ygxikd.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_lqqtgv.sector::jsonb as sector,
    procedure_safealtitudeareasector_view_lqqtgv.sector_annotation::jsonb as sector_annotation,
    notes_note_view_gzdali.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ceqhxo on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ceqhxo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jtozuf on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_jtozuf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lxamen on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lxamen.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mehayb on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mehayb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hlkzxi on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hlkzxi.id
left join geometry.point_view geometry_point_view_ygxikd on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_ygxikd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_qefrrj.*) as sector,
      jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_qefrrj.annotation) as sector_annotation  from master_join master_join_kmyjwp
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_qefrrj on master_join_kmyjwp.target_id = procedure_safealtitudeareasector_lat_qefrrj.id
  where master_join_kmyjwp.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_lqqtgv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_muzpzu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_muzpzu.title AS varchar), '(' || airport_heliport_airportheliport_lat_muzpzu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_muzpzu.href
  )) as location  from master_join master_join_rbdozt
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_muzpzu on master_join_rbdozt.target_id = airport_heliport_airportheliport_lat_muzpzu.id
  where master_join_rbdozt.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_pgfnlc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmlwat.*) AS annotation
  from master_join master_join_dsgmxh
  join notes.note_view notes_note_lat_pmlwat on master_join_dsgmxh.target_id = notes_note_lat_pmlwat.id
  where master_join_dsgmxh.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_gzdali on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_lgctpk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lgctpk.longitude AS location_longitude,
    geometry_elevatedpoint_view_lgctpk.latitude AS location_latitude,
    geometry_elevatedpoint_view_lgctpk.elevation AS location_elevation,
    geometry_elevatedpoint_view_lgctpk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lgctpk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lgctpk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lgctpk.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lzjgvl.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_lzjgvl.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_swgqpr.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_swgqpr.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_udpcvj.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_udpcvj.availability_annotation::jsonb as availability_annotation,
    notes_note_view_isensl.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lgctpk on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_lgctpk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fypijo.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fypijo.annotation) as authority_annotation  from master_join master_join_ojgpts
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fypijo on master_join_ojgpts.target_id = navaids_points_authorityfornavaidequipment_lat_fypijo.id
  where master_join_ojgpts.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_lzjgvl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_izikna.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_izikna.annotation) as monitoring_annotation  from master_join master_join_huoymj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_izikna on master_join_huoymj.target_id = navaids_points_navaidequipmentmonitoring_lat_izikna.id
  where master_join_huoymj.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_swgqpr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_csvamu.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_csvamu.annotation) as availability_annotation  from master_join master_join_ykrzlw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_csvamu on master_join_ykrzlw.target_id = navaids_points_navaidoperationalstatus_lat_csvamu.id
  where master_join_ykrzlw.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_udpcvj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_paoomg.*) AS annotation
  from master_join master_join_cjbove
  join notes.note_view notes_note_lat_paoomg on master_join_cjbove.target_id = notes_note_lat_paoomg.id
  where master_join_cjbove.source_id = navaids_points.sdf_ts.id
) as notes_note_view_isensl on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_wrvser.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_wrvser.elevation AS extent_elevation,
    geometry_elevatedsurface_view_wrvser.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_wrvser.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_wrvser.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_wrvser.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_chkqxk.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_knllay.docksite::jsonb as docksite,
    notes_note_view_mchcan.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_xptwop.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_xptwop.availability_annotation::jsonb as availability_annotation
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wrvser on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_wrvser.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_wbnazo.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_wbnazo.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_wbnazo.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_wbnazo.href
  )) as rampsite  from master_join master_join_qkzkgf
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_wbnazo on master_join_qkzkgf.target_id = airport_heliport_seaplanerampsite_lat_wbnazo.id
  where master_join_qkzkgf.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_chkqxk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_fvqijs.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_fvqijs.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_fvqijs.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_fvqijs.href
  )) as docksite  from master_join master_join_gqlnfh
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_fvqijs on master_join_gqlnfh.target_id = airport_heliport_floatingdocksite_lat_fvqijs.id
  where master_join_gqlnfh.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_knllay on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pgtnsv.*) AS annotation
  from master_join master_join_gtvzly
  join notes.note_view notes_note_lat_pgtnsv on master_join_gtvzly.target_id = notes_note_lat_pgtnsv.id
  where master_join_gtvzly.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_mchcan on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_wxusoj.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_wxusoj.annotation) as availability_annotation  from master_join master_join_nejfrr
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_wxusoj on master_join_nejfrr.target_id = airport_heliport_manoeuvringareaavailability_lat_wxusoj.id
  where master_join_nejfrr.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_xptwop on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_hmjflo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_hmjflo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hmjflo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hmjflo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hmjflo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hmjflo.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_htteqo.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_htteqo.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_htteqo.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_htteqo.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_htteqo.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_htteqo.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_gizyhs.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hmjflo on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_hmjflo.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_htteqo on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_htteqo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edppzk.*) AS annotation
  from master_join master_join_tvalgm
  join notes.note_view notes_note_lat_edppzk on master_join_tvalgm.target_id = notes_note_lat_edppzk.id
  where master_join_tvalgm.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_gizyhs on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceType
-- ['service.callsigndetail_view', 'notes.note_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_yljnyl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yljnyl.longitude AS location_longitude,
    geometry_elevatedpoint_view_yljnyl.latitude AS location_latitude,
    geometry_elevatedpoint_view_yljnyl.elevation AS location_elevation,
    geometry_elevatedpoint_view_yljnyl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yljnyl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yljnyl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yljnyl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wrkcqj.title as varchar), '(' || organisation_unit_pt_wrkcqj.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_wrkcqj.href::text AS serviceprovider_href,
    service_callsigndetail_view_vrvefj.callsign::jsonb as callsign,
    service_callsigndetail_view_vrvefj.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_rzngnw.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_boiecr.availability::jsonb as availability,
    service_serviceoperationalstatus_view_boiecr.availability_annotation::jsonb as availability_annotation,
    notes_note_view_nzqdwv.annotation::jsonb as annotation,
    airspace_airspace_pt_tufarz.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_rhtzls.clientroute::jsonb as clientroute,
    routes_routeportion_view_rhtzls.clientroute_annotation::jsonb as clientroute_annotation
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yljnyl on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_yljnyl.id
left join organisation.unit_pt organisation_unit_pt_wrkcqj on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_wrkcqj.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_xscfgc.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_xscfgc.annotation) as callsign_annotation  from master_join master_join_nvaiht
  join service.callsigndetail_view service_callsigndetail_lat_xscfgc on master_join_nvaiht.target_id = service_callsigndetail_lat_xscfgc.id
  where master_join_nvaiht.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_vrvefj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_kxltre.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_kxltre.title AS varchar), '(' || service_radiocommunicationchannel_lat_kxltre.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_kxltre.href
  )) as radiocommunication  from master_join master_join_kzvxiu
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_kxltre on master_join_kzvxiu.target_id = service_radiocommunicationchannel_lat_kxltre.id
  where master_join_kzvxiu.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_rzngnw on TRUE
left join lateral(
  select
  from master_join master_join_aseoeg
  join shared.contactinformation_view shared_contactinformation_lat_ubmsbx on master_join_aseoeg.target_id = shared_contactinformation_lat_ubmsbx.id
  where master_join_aseoeg.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_diokhd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_spuujs.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_spuujs.annotation) as availability_annotation  from master_join master_join_abgrbz
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_spuujs on master_join_abgrbz.target_id = service_serviceoperationalstatus_lat_spuujs.id
  where master_join_abgrbz.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_boiecr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibozbn.*) AS annotation
  from master_join master_join_hhinsd
  join notes.note_view notes_note_lat_ibozbn on master_join_hhinsd.target_id = notes_note_lat_ibozbn.id
  where master_join_hhinsd.source_id = service.searchrescueservice_ts.id
) as notes_note_view_nzqdwv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_zswuhx.id,
      'title', coalesce(cast(airspace_airspace_lat_zswuhx.title AS varchar), '(' || airspace_airspace_lat_zswuhx.nilreason[1] || ')'),
      'href', airspace_airspace_lat_zswuhx.href
  )) as clientairspace  from master_join master_join_irkynq
  join airspace.airspace_pt airspace_airspace_lat_zswuhx on master_join_irkynq.target_id = airspace_airspace_lat_zswuhx.id
  where master_join_irkynq.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_tufarz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_yefqji.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_yefqji.annotation) as clientroute_annotation  from master_join master_join_bvjeuz
  join routes.routeportion_view routes_routeportion_lat_yefqji on master_join_bvjeuz.target_id = routes_routeportion_lat_yefqji.id
  where master_join_bvjeuz.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_rhtzls on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_genuee.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_genuee.longitude AS location_longitude,
    geometry_elevatedpoint_view_genuee.latitude AS location_latitude,
    geometry_elevatedpoint_view_genuee.elevation AS location_elevation,
    geometry_elevatedpoint_view_genuee.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_genuee.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_genuee.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_genuee.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_wydget.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_nedkte.groundstation::jsonb as groundstation,
    surveillance_surveillancegroundstation_view_nedkte.groundstation_annotation::jsonb as groundstation_annotation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_genuee on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_genuee.id
left join lateral(
  select
  from master_join master_join_griqym
  join shared.contactinformation_view shared_contactinformation_lat_mvxnql on master_join_griqym.target_id = shared_contactinformation_lat_mvxnql.id
  where master_join_griqym.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_sbrvkp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tzynvg.*) AS annotation
  from master_join master_join_kjqwzh
  join notes.note_view notes_note_lat_tzynvg on master_join_kjqwzh.target_id = notes_note_lat_tzynvg.id
  where master_join_kjqwzh.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_wydget on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_hshthx.*) as groundstation,
      jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_hshthx.annotation) as groundstation_annotation  from master_join master_join_qgidef
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_hshthx on master_join_qgidef.target_id = surveillance_surveillancegroundstation_lat_hshthx.id
  where master_join_qgidef.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_nedkte on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_evubaw.title as varchar), '(' || airspace_airspace_pt_evubaw.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_evubaw.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vjlpfq.title as varchar), '(' || navaids_points_designatedpoint_pt_vjlpfq.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vjlpfq.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_oknnoe.title as varchar), '(' || navaids_points_navaid_pt_oknnoe.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_oknnoe.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_oviugn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_oviugn.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_oviugn.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_obirzu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_obirzu.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_obirzu.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bajdza.title as varchar), '(' || airport_heliport_airportheliport_pt_bajdza.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_bajdza.href::text AS locationairportreferencepoint_href,
    geometry_point_view_gkftcv.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_gkftcv.longitude AS locationposition_longitude,
    geometry_point_view_gkftcv.latitude AS locationposition_latitude,
    geometry_point_view_gkftcv.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_pyxycp.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_evubaw on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_evubaw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vjlpfq on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vjlpfq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_oknnoe on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_oknnoe.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_oviugn on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_oviugn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_obirzu on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_obirzu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bajdza on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_bajdza.id
left join geometry.point_view geometry_point_view_gkftcv on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_gkftcv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kegeaa.*) AS annotation
  from master_join master_join_gpuaql
  join notes.note_view notes_note_lat_kegeaa on master_join_gpuaql.target_id = notes_note_lat_kegeaa.id
  where master_join_gpuaql.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_pyxycp on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_dbpxgq.title as varchar), '(' || organisation_organisationauthority_pt_dbpxgq.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_dbpxgq.href::text AS authority_href,
    notes_note_view_wpevox.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_dbpxgq on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_dbpxgq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jebezd.*) AS annotation
  from master_join master_join_pzntmg
  join notes.note_view notes_note_lat_jebezd on master_join_pzntmg.target_id = notes_note_lat_jebezd.id
  where master_join_pzntmg.source_id = shared.specialdate_ts.id
) as notes_note_view_wpevox on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationType
-- ['notes.note_view', 'navaids_points.specialnavigationstationstatus_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ipmppd.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ipmppd.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_ipmppd.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_ptptdn.*)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_ptptdn.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_durnog.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_durnog.longitude AS position_longitude,
    geometry_elevatedpoint_view_durnog.latitude AS position_latitude,
    geometry_elevatedpoint_view_durnog.elevation AS position_elevation,
    geometry_elevatedpoint_view_durnog.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_durnog.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_durnog.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_durnog.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_zrqplf.availability::jsonb as availability,
    navaids_points_specialnavigationstationstatus_view_zrqplf.availability_annotation::jsonb as availability_annotation,
    notes_note_view_usgodr.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ipmppd on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_ipmppd.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_ptptdn on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_ptptdn.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_durnog on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_durnog.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_fxzfyi.*) as availability,
      jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_fxzfyi.annotation) as availability_annotation  from master_join master_join_aucweh
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_fxzfyi on master_join_aucweh.target_id = navaids_points_specialnavigationstationstatus_lat_fxzfyi.id
  where master_join_aucweh.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_zrqplf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dlvpwt.*) AS annotation
  from master_join master_join_aoxjqu
  join notes.note_view notes_note_lat_dlvpwt on master_join_aoxjqu.target_id = notes_note_lat_dlvpwt.id
  where master_join_aoxjqu.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_usgodr on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemType
-- ['notes.note_view', 'navaids_points.authorityforspecialnavigationsystem_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_qaorak.*)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_qaorak.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_kncyeh.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_qaorak on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_qaorak.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_stmjda.*) AS annotation
  from master_join master_join_orjvpb
  join notes.note_view notes_note_lat_stmjda on master_join_orjvpb.target_id = notes_note_lat_stmjda.id
  where master_join_orjvpb.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_kncyeh on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'notes.note_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_exgbmy.title as varchar), '(' || navaids_points_navaid_pt_exgbmy.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_exgbmy.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_olqqna.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_olqqna.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_olqqna.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_uixtdr.title as varchar), '(' || surveillance_radarsystem_pt_uixtdr.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_uixtdr.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_skddlz.title as varchar), '(' || procedure_safealtitudearea_pt_skddlz.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_skddlz.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_qthwab.*)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_qthwab.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_bomujt.availability::jsonb as availability,
    procedure_procedureavailability_view_bomujt.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_jozxlf.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_gbcvpf.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_gbcvpf.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_oabwsb.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_oabwsb.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_cssizr.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_exgbmy on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_exgbmy.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_olqqna on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_olqqna.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_uixtdr on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_uixtdr.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_skddlz on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_skddlz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_qthwab on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_qthwab.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_phyifn.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_phyifn.annotation) as availability_annotation  from master_join master_join_kfddsm
  join procedure.procedureavailability_view procedure_procedureavailability_lat_phyifn on master_join_kfddsm.target_id = procedure_procedureavailability_lat_phyifn.id
  where master_join_kfddsm.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_bomujt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_urwfaj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_urwfaj.title AS varchar), '(' || airport_heliport_airportheliport_lat_urwfaj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_urwfaj.href
  )) as airportheliport  from master_join master_join_pksmyo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_urwfaj on master_join_pksmyo.target_id = airport_heliport_airportheliport_lat_urwfaj.id
  where master_join_pksmyo.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_jozxlf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ryjydi.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ryjydi.annotation) as aircraftcharacteristic_annotation  from master_join master_join_kyujdc
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ryjydi on master_join_kyujdc.target_id = shared_aircraftcharacteristic_lat_ryjydi.id
  where master_join_kyujdc.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_gbcvpf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_fyudpx.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_fyudpx.annotation) as flighttransition_annotation  from master_join master_join_vzkzgt
  join procedure.proceduretransition_view procedure_proceduretransition_lat_fyudpx on master_join_vzkzgt.target_id = procedure_proceduretransition_lat_fyudpx.id
  where master_join_vzkzgt.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_oabwsb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlljbz.*) AS annotation
  from master_join master_join_fseoyr
  join notes.note_view notes_note_lat_vlljbz on master_join_fseoyr.target_id = notes_note_lat_vlljbz.id
  where master_join_fseoyr.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_cssizr on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'notes.note_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_hlnxcf.title as varchar), '(' || navaids_points_navaid_pt_hlnxcf.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_hlnxcf.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_zebvat.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_zebvat.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_zebvat.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_qntokp.title as varchar), '(' || surveillance_radarsystem_pt_qntokp.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_qntokp.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_xzbvsz.title as varchar), '(' || procedure_safealtitudearea_pt_xzbvsz.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_xzbvsz.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_muwhop.*)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_muwhop.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_yuaylh.availability::jsonb as availability,
    procedure_procedureavailability_view_yuaylh.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_mrembb.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_wvopcq.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_wvopcq.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_hwdiil.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_hwdiil.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_vunmay.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_hlnxcf on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_hlnxcf.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_zebvat on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_zebvat.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_qntokp on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_qntokp.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_xzbvsz on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_xzbvsz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_muwhop on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_muwhop.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_qjwrfq.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_qjwrfq.annotation) as availability_annotation  from master_join master_join_jkoxvz
  join procedure.procedureavailability_view procedure_procedureavailability_lat_qjwrfq on master_join_jkoxvz.target_id = procedure_procedureavailability_lat_qjwrfq.id
  where master_join_jkoxvz.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_yuaylh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_kgfaog.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_kgfaog.title AS varchar), '(' || airport_heliport_airportheliport_lat_kgfaog.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_kgfaog.href
  )) as airportheliport  from master_join master_join_xoqpvk
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_kgfaog on master_join_xoqpvk.target_id = airport_heliport_airportheliport_lat_kgfaog.id
  where master_join_xoqpvk.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_mrembb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qcnrve.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qcnrve.annotation) as aircraftcharacteristic_annotation  from master_join master_join_czwctc
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qcnrve on master_join_czwctc.target_id = shared_aircraftcharacteristic_lat_qcnrve.id
  where master_join_czwctc.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_wvopcq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_csjvwe.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_csjvwe.annotation) as flighttransition_annotation  from master_join master_join_vjdkdj
  join procedure.proceduretransition_view procedure_proceduretransition_lat_csjvwe on master_join_vjdkdj.target_id = procedure_proceduretransition_lat_csjvwe.id
  where master_join_vjdkdj.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_hwdiil on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hcgvxn.*) AS annotation
  from master_join master_join_skibfg
  join notes.note_view notes_note_lat_hcgvxn on master_join_skibfg.target_id = notes_note_lat_hcgvxn.id
  where master_join_skibfg.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_vunmay on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_euxbuc.title as varchar), '(' || shared_standardleveltable_pt_euxbuc.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_euxbuc.href::text AS leveltable_href,
    shared_standardlevel_view_duiolr.level::jsonb as level,
    shared_standardlevel_view_duiolr.level_annotation::jsonb as level_annotation,
    notes_note_view_ayrrqe.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_euxbuc on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_euxbuc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_tzxnbd.*) as level,
      jsonb_agg(DISTINCT shared_standardlevel_lat_tzxnbd.annotation) as level_annotation  from master_join master_join_godysc
  join shared.standardlevel_view shared_standardlevel_lat_tzxnbd on master_join_godysc.target_id = shared_standardlevel_lat_tzxnbd.id
  where master_join_godysc.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_duiolr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cfxeub.*) AS annotation
  from master_join master_join_ktmhiw
  join notes.note_view notes_note_lat_cfxeub on master_join_ktmhiw.target_id = notes_note_lat_cfxeub.id
  where master_join_ktmhiw.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_ayrrqe on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_dlmkzc.title as varchar), '(' || shared_standardlevelcolumn_pt_dlmkzc.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_dlmkzc.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_xindyx.applicableairspace::jsonb as applicableairspace,
    notes_note_view_aapfjm.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_dlmkzc on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_dlmkzc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_hmftex.id,
      'title', coalesce(cast(airspace_airspace_lat_hmftex.title AS varchar), '(' || airspace_airspace_lat_hmftex.nilreason[1] || ')'),
      'href', airspace_airspace_lat_hmftex.href
  )) as applicableairspace  from master_join master_join_fnkcct
  join airspace.airspace_pt airspace_airspace_lat_hmftex on master_join_fnkcct.target_id = airspace_airspace_lat_hmftex.id
  where master_join_fnkcct.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_xindyx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_unngyt.*) AS annotation
  from master_join master_join_hxsyrn
  join notes.note_view notes_note_lat_unngyt on master_join_hxsyrn.target_id = notes_note_lat_unngyt.id
  where master_join_hxsyrn.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_aapfjm on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_yhprau.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cdypnq.*) AS annotation
  from master_join master_join_ljyakg
  join notes.note_view notes_note_lat_cdypnq on master_join_ljyakg.target_id = notes_note_lat_cdypnq.id
  where master_join_ljyakg.source_id = shared.standardleveltable_ts.id
) as notes_note_view_yhprau on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_nlhnwf.title as varchar), '(' || airport_heliport_aircraftstand_pt_nlhnwf.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_nlhnwf.href::text AS markedstand_href,
    airport_heliport_markingelement_view_jdyjrx.element::jsonb as element,
    airport_heliport_markingelement_view_jdyjrx.element_annotation::jsonb as element_annotation,
    notes_note_view_mvpvke.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_nlhnwf on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_nlhnwf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ocdjdo.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ocdjdo.annotation) as element_annotation  from master_join master_join_yocrft
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ocdjdo on master_join_yocrft.target_id = airport_heliport_markingelement_lat_ocdjdo.id
  where master_join_yocrft.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_jdyjrx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjhqej.*) AS annotation
  from master_join master_join_pfmsti
  join notes.note_view notes_note_lat_xjhqej on master_join_pfmsti.target_id = notes_note_lat_xjhqej.id
  where master_join_pfmsti.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_mvpvke on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_qesgwy.title as varchar), '(' || airport_heliport_airportheliport_pt_qesgwy.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_qesgwy.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_smfvyo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_smfvyo.longitude AS location_longitude,
    geometry_elevatedpoint_view_smfvyo.latitude AS location_latitude,
    geometry_elevatedpoint_view_smfvyo.elevation AS location_elevation,
    geometry_elevatedpoint_view_smfvyo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_smfvyo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_smfvyo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_smfvyo.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_jxgbop.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qesgwy on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_qesgwy.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_smfvyo on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_smfvyo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egbtel.*) AS annotation
  from master_join master_join_vpzzsr
  join notes.note_view notes_note_lat_egbtel on master_join_vpzzsr.target_id = notes_note_lat_egbtel.id
  where master_join_vpzzsr.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_jxgbop on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_zukxdb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zukxdb.longitude AS location_longitude,
    geometry_elevatedpoint_view_zukxdb.latitude AS location_latitude,
    geometry_elevatedpoint_view_zukxdb.elevation AS location_elevation,
    geometry_elevatedpoint_view_zukxdb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zukxdb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zukxdb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zukxdb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_gghusm.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_gghusm.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_rkianf.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_rkianf.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_dndujy.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_dndujy.availability_annotation::jsonb as availability_annotation,
    notes_note_view_fgkkph.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zukxdb on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_zukxdb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_uyqcjm.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_uyqcjm.annotation) as authority_annotation  from master_join master_join_qrfssc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_uyqcjm on master_join_qrfssc.target_id = navaids_points_authorityfornavaidequipment_lat_uyqcjm.id
  where master_join_qrfssc.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_gghusm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_eexils.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_eexils.annotation) as monitoring_annotation  from master_join master_join_jutelz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_eexils on master_join_jutelz.target_id = navaids_points_navaidequipmentmonitoring_lat_eexils.id
  where master_join_jutelz.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_rkianf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ufqayk.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ufqayk.annotation) as availability_annotation  from master_join master_join_yfcbvr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ufqayk on master_join_yfcbvr.target_id = navaids_points_navaidoperationalstatus_lat_ufqayk.id
  where master_join_yfcbvr.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_dndujy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nsuhnm.*) AS annotation
  from master_join master_join_adzsfz
  join notes.note_view notes_note_lat_nsuhnm on master_join_adzsfz.target_id = notes_note_lat_nsuhnm.id
  where master_join_adzsfz.source_id = navaids_points.tacan_ts.id
) as notes_note_view_fgkkph on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_pwhljb.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_pwhljb.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_pwhljb.href::text AS taxiholding_href,
    shared_lightelement_view_viccow.element::jsonb as element,
    shared_lightelement_view_viccow.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_rgxmol.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_rgxmol.availability_annotation::jsonb as availability_annotation,
    notes_note_view_alusqz.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_pwhljb on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_pwhljb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_koyrcb.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_koyrcb.annotation) as element_annotation  from master_join master_join_smnhko
  join shared.lightelement_view shared_lightelement_lat_koyrcb on master_join_smnhko.target_id = shared_lightelement_lat_koyrcb.id
  where master_join_smnhko.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_viccow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_yqwaty.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_yqwaty.annotation) as availability_annotation  from master_join master_join_nfdbsf
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_yqwaty on master_join_nfdbsf.target_id = airport_heliport_groundlightingavailability_lat_yqwaty.id
  where master_join_nfdbsf.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_rgxmol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dfwjku.*) AS annotation
  from master_join master_join_hihgmt
  join notes.note_view notes_note_lat_dfwjku on master_join_hihgmt.target_id = notes_note_lat_dfwjku.id
  where master_join_hihgmt.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_alusqz on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_cageai.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_cageai.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_cageai.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_squlfk.element::jsonb as element,
    airport_heliport_markingelement_view_squlfk.element_annotation::jsonb as element_annotation,
    notes_note_view_wnoivr.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_cageai on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_cageai.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_tpergr.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_tpergr.annotation) as element_annotation  from master_join master_join_kdxiis
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_tpergr on master_join_kdxiis.target_id = airport_heliport_markingelement_lat_tpergr.id
  where master_join_kdxiis.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_squlfk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jlxiyj.*) AS annotation
  from master_join master_join_wrlpdi
  join notes.note_view notes_note_lat_jlxiyj on master_join_wrlpdi.target_id = notes_note_lat_jlxiyj.id
  where master_join_wrlpdi.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_wnoivr on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_qcyqgv.title as varchar), '(' || airport_heliport_guidanceline_pt_qcyqgv.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_qcyqgv.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_jammey.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jammey.longitude AS location_longitude,
    geometry_elevatedpoint_view_jammey.latitude AS location_latitude,
    geometry_elevatedpoint_view_jammey.elevation AS location_elevation,
    geometry_elevatedpoint_view_jammey.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jammey.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jammey.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jammey.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_ctzzba.protectedrunway::jsonb as protectedrunway,
    notes_note_view_dopigx.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_qcyqgv on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_qcyqgv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jammey on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_jammey.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_loqlkp.id,
      'title', coalesce(cast(airport_heliport_runway_lat_loqlkp.title AS varchar), '(' || airport_heliport_runway_lat_loqlkp.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_loqlkp.href
  )) as protectedrunway  from master_join master_join_lybjaz
  join airport_heliport.runway_pt airport_heliport_runway_lat_loqlkp on master_join_lybjaz.target_id = airport_heliport_runway_lat_loqlkp.id
  where master_join_lybjaz.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_ctzzba on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gktagv.*) AS annotation
  from master_join master_join_mqlibr
  join notes.note_view notes_note_lat_gktagv on master_join_mqlibr.target_id = notes_note_lat_gktagv.id
  where master_join_mqlibr.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_dopigx on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lfpcan.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_lfpcan.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_eymilo.title as varchar), '(' || airport_heliport_taxiway_pt_eymilo.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_eymilo.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_vdjxae.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vdjxae.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vdjxae.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vdjxae.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vdjxae.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vdjxae.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_kpbbma.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_uxwcgl.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_uxwcgl.availability_annotation::jsonb as availability_annotation
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lfpcan on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lfpcan.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_eymilo on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_eymilo.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vdjxae on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_vdjxae.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jmblzn.*) AS annotation
  from master_join master_join_aajcdw
  join notes.note_view notes_note_lat_jmblzn on master_join_aajcdw.target_id = notes_note_lat_jmblzn.id
  where master_join_aajcdw.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_kpbbma on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rxhjlk.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rxhjlk.annotation) as availability_annotation  from master_join master_join_qwjpik
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rxhjlk on master_join_qwjpik.target_id = airport_heliport_manoeuvringareaavailability_lat_rxhjlk.id
  where master_join_qwjpik.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_uxwcgl on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_tuwwcm.title as varchar), '(' || airport_heliport_taxiway_pt_tuwwcm.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_tuwwcm.href::text AS lightedtaxiway_href,
    shared_lightelement_view_zsygka.element::jsonb as element,
    shared_lightelement_view_zsygka.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_azkqtj.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_azkqtj.availability_annotation::jsonb as availability_annotation,
    notes_note_view_bvcbvj.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_tuwwcm on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_tuwwcm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_mqgava.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_mqgava.annotation) as element_annotation  from master_join master_join_ygfrfx
  join shared.lightelement_view shared_lightelement_lat_mqgava on master_join_ygfrfx.target_id = shared_lightelement_lat_mqgava.id
  where master_join_ygfrfx.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_zsygka on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_zcziky.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_zcziky.annotation) as availability_annotation  from master_join master_join_eqjtfr
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_zcziky on master_join_eqjtfr.target_id = airport_heliport_groundlightingavailability_lat_zcziky.id
  where master_join_eqjtfr.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_azkqtj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_znbxog.*) AS annotation
  from master_join master_join_kgphbf
  join notes.note_view notes_note_lat_znbxog on master_join_kgphbf.target_id = notes_note_lat_znbxog.id
  where master_join_kgphbf.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_bvcbvj on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_dcfzes.title as varchar), '(' || airport_heliport_taxiway_pt_dcfzes.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_dcfzes.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_ecebpd.title as varchar), '(' || airport_heliport_taxiwayelement_pt_ecebpd.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_ecebpd.href::text AS markedelement_href,
    airport_heliport_markingelement_view_zldxhv.element::jsonb as element,
    airport_heliport_markingelement_view_zldxhv.element_annotation::jsonb as element_annotation,
    notes_note_view_infmdx.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_dcfzes on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_dcfzes.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_ecebpd on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_ecebpd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_mpjyvy.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_mpjyvy.annotation) as element_annotation  from master_join master_join_sotqxn
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_mpjyvy on master_join_sotqxn.target_id = airport_heliport_markingelement_lat_mpjyvy.id
  where master_join_sotqxn.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_zldxhv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vnftux.*) AS annotation
  from master_join master_join_qsnnmm
  join notes.note_view notes_note_lat_vnftux on master_join_qsnnmm.target_id = notes_note_lat_vnftux.id
  where master_join_qsnnmm.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_infmdx on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayType
-- ['notes.note_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_aqykop.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_aqykop.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_wznucs.title as varchar), '(' || airport_heliport_airportheliport_pt_wznucs.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_wznucs.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_cocygx.contaminant::jsonb as contaminant,
    airport_heliport_taxiwaycontamination_view_cocygx.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_eblrnc.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_umjrsi.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_umjrsi.availability_annotation::jsonb as availability_annotation
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_aqykop on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_aqykop.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wznucs on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_wznucs.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_prmdpt.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_prmdpt.annotation) as contaminant_annotation  from master_join master_join_nxtnsi
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_prmdpt on master_join_nxtnsi.target_id = airport_heliport_taxiwaycontamination_lat_prmdpt.id
  where master_join_nxtnsi.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_cocygx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eyrhmj.*) AS annotation
  from master_join master_join_kamgsz
  join notes.note_view notes_note_lat_eyrhmj on master_join_kamgsz.target_id = notes_note_lat_eyrhmj.id
  where master_join_kamgsz.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_eblrnc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ccsfwc.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ccsfwc.annotation) as availability_annotation  from master_join master_join_pdasqp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ccsfwc on master_join_pdasqp.target_id = airport_heliport_manoeuvringareaavailability_lat_ccsfwc.id
  where master_join_pdasqp.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_umjrsi on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaType
-- ['procedure.terminalarrivalareasector_view', 'geometry.surface_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_vfayly.title as varchar), '(' || navaids_points_designatedpoint_pt_vfayly.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_vfayly.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pkmzhd.title as varchar), '(' || navaids_points_designatedpoint_pt_pkmzhd.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_pkmzhd.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_clsypy.title as varchar), '(' || navaids_points_navaid_pt_clsypy.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_clsypy.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_vjfxvm.title as varchar), '(' || navaids_points_navaid_pt_vjfxvm.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_vjfxvm.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yjrybz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yjrybz.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_yjrybz.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zkxctu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zkxctu.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_zkxctu.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dfbrlv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dfbrlv.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dfbrlv.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fjgeuz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fjgeuz.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fjgeuz.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vvqrym.title as varchar), '(' || airport_heliport_airportheliport_pt_vvqrym.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_vvqrym.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qafcjc.title as varchar), '(' || airport_heliport_airportheliport_pt_qafcjc.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_qafcjc.href::text AS iafairportreferencepoint_href,
    geometry_point_view_kgvtba.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_kgvtba.longitude AS ifposition_longitude,
    geometry_point_view_kgvtba.latitude AS ifposition_latitude,
    geometry_point_view_kgvtba.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_knaedj.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_knaedj.longitude AS iafposition_longitude,
    geometry_point_view_knaedj.latitude AS iafposition_latitude,
    geometry_point_view_knaedj.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_pvgdkr.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_pvgdkr.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_vskptg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_vskptg.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_vskptg.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_zrlrww.sector::jsonb as sector,
    procedure_terminalarrivalareasector_view_zrlrww.sector_annotation::jsonb as sector_annotation,
    notes_note_view_ilnyax.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vfayly on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vfayly.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_clsypy on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_clsypy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yjrybz on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_yjrybz.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dfbrlv on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dfbrlv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vvqrym on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_vvqrym.id
left join geometry.point_view geometry_point_view_kgvtba on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_kgvtba.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pkmzhd on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pkmzhd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vjfxvm on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_vjfxvm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zkxctu on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zkxctu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fjgeuz on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fjgeuz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qafcjc on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_qafcjc.id
left join geometry.point_view geometry_point_view_knaedj on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_knaedj.id
left join geometry.surface_view geometry_surface_view_pvgdkr on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_pvgdkr.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_vskptg on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_vskptg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_hrdtqz.*) as sector,
      jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_hrdtqz.annotation) as sector_annotation  from master_join master_join_xrqfyf
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_hrdtqz on master_join_xrqfyf.target_id = procedure_terminalarrivalareasector_lat_hrdtqz.id
  where master_join_xrqfyf.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_zrlrww on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eblmst.*) AS annotation
  from master_join master_join_iapgvi
  join notes.note_view notes_note_lat_eblmst on master_join_iapgvi.target_id = notes_note_lat_eblmst.id
  where master_join_iapgvi.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_ilnyax on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_teuwgr.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_teuwgr.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_teuwgr.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_plrnfg.element::jsonb as element,
    shared_lightelement_view_plrnfg.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_uagxjx.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_uagxjx.availability_annotation::jsonb as availability_annotation,
    notes_note_view_lcxfik.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_teuwgr on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_teuwgr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cwjlpl.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_cwjlpl.annotation) as element_annotation  from master_join master_join_dyoyej
  join shared.lightelement_view shared_lightelement_lat_cwjlpl on master_join_dyoyej.target_id = shared_lightelement_lat_cwjlpl.id
  where master_join_dyoyej.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_plrnfg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_wsfodo.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_wsfodo.annotation) as availability_annotation  from master_join master_join_diyzxi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_wsfodo on master_join_diyzxi.target_id = airport_heliport_groundlightingavailability_lat_wsfodo.id
  where master_join_diyzxi.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_uagxjx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuuekk.*) AS annotation
  from master_join master_join_jmijwi
  join notes.note_view notes_note_lat_vuuekk on master_join_jmijwi.target_id = notes_note_lat_vuuekk.id
  where master_join_jmijwi.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_lcxfik on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hzpqsh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hzpqsh.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_hzpqsh.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_niglki.element::jsonb as element,
    airport_heliport_markingelement_view_niglki.element_annotation::jsonb as element_annotation,
    notes_note_view_bbinkf.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hzpqsh on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_hzpqsh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rctpmt.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rctpmt.annotation) as element_annotation  from master_join master_join_ldjgld
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rctpmt on master_join_ldjgld.target_id = airport_heliport_markingelement_lat_rctpmt.id
  where master_join_ldjgld.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_niglki on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szyabn.*) AS annotation
  from master_join master_join_fgapqo
  join notes.note_view notes_note_lat_szyabn on master_join_fgapqo.target_id = notes_note_lat_szyabn.id
  where master_join_fgapqo.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_bbinkf on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_laybxn.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_laybxn.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_vysycd.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vysycd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vysycd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vysycd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vysycd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vysycd.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rlzpom.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rlzpom.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_rlzpom.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_xnsyww.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_laybxn on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_laybxn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vysycd on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_vysycd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rlzpom on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_rlzpom.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pkmfsp.*) AS annotation
  from master_join master_join_ahbxwx
  join notes.note_view notes_note_lat_pkmfsp on master_join_ahbxwx.target_id = notes_note_lat_pkmfsp.id
  where master_join_ahbxwx.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_xnsyww on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.touchdownliftoffcontamination_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_zsjwlm.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_zsjwlm.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_zsjwlm.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_zsjwlm.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_zsjwlm.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_zsjwlm.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_zsjwlm.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_zsjwlm.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_xnhdmt.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xnhdmt.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xnhdmt.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xnhdmt.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xnhdmt.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xnhdmt.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_svbkxl.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_svbkxl.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_ohppsz.title as varchar), '(' || airport_heliport_airportheliport_pt_ohppsz.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ohppsz.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_simtet.title as varchar), '(' || airport_heliport_runway_pt_simtet.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_simtet.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_daqvsr.contaminant::jsonb as contaminant,
    airport_heliport_touchdownliftoffcontamination_view_daqvsr.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_jjaxrd.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_pvldiw.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_pvldiw.availability_annotation::jsonb as availability_annotation
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zsjwlm on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_zsjwlm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xnhdmt on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_xnhdmt.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_svbkxl on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_svbkxl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ohppsz on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ohppsz.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_simtet on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_simtet.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_iubjcr.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_iubjcr.annotation) as contaminant_annotation  from master_join master_join_utbpqa
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_iubjcr on master_join_utbpqa.target_id = airport_heliport_touchdownliftoffcontamination_lat_iubjcr.id
  where master_join_utbpqa.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_daqvsr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kcmejq.*) AS annotation
  from master_join master_join_gvpoyt
  join notes.note_view notes_note_lat_kcmejq on master_join_gvpoyt.target_id = notes_note_lat_kcmejq.id
  where master_join_gvpoyt.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_jjaxrd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_bdsmgy.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_bdsmgy.annotation) as availability_annotation  from master_join master_join_uujxsy
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_bdsmgy on master_join_uujxsy.target_id = airport_heliport_manoeuvringareaavailability_lat_bdsmgy.id
  where master_join_uujxsy.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_pvldiw on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitType
-- ['organisation.unitdependency_view', 'organisation.unitavailability_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_yvdkdk.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_yvdkdk.longitude AS position_longitude,
    geometry_elevatedpoint_view_yvdkdk.latitude AS position_latitude,
    geometry_elevatedpoint_view_yvdkdk.elevation AS position_elevation,
    geometry_elevatedpoint_view_yvdkdk.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_yvdkdk.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_yvdkdk.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_yvdkdk.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_cauhwy.title as varchar), '(' || airport_heliport_airportheliport_pt_cauhwy.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_cauhwy.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_fsdfhc.title as varchar), '(' || organisation_organisationauthority_pt_fsdfhc.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_fsdfhc.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_xuwcmp.relatedunit::jsonb as relatedunit,
    organisation_unitdependency_view_xuwcmp.relatedunit_annotation::jsonb as relatedunit_annotation,
    organisation_unitavailability_view_rjjpez.availability::jsonb as availability,
    organisation_unitavailability_view_rjjpez.availability_annotation::jsonb as availability_annotation,
    notes_note_view_nyyedp.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yvdkdk on organisation.unit_ts.position_id = geometry_elevatedpoint_view_yvdkdk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cauhwy on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_cauhwy.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_fsdfhc on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_fsdfhc.id
left join lateral(
  select
  from master_join master_join_zisjnh
  join shared.contactinformation_view shared_contactinformation_lat_eugvbh on master_join_zisjnh.target_id = shared_contactinformation_lat_eugvbh.id
  where master_join_zisjnh.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_vbluca on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_njxcxo.*) as relatedunit,
      jsonb_agg(DISTINCT organisation_unitdependency_lat_njxcxo.annotation) as relatedunit_annotation  from master_join master_join_clpovi
  join organisation.unitdependency_view organisation_unitdependency_lat_njxcxo on master_join_clpovi.target_id = organisation_unitdependency_lat_njxcxo.id
  where master_join_clpovi.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_xuwcmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_kaaavh.*) as availability,
      jsonb_agg(DISTINCT organisation_unitavailability_lat_kaaavh.annotation) as availability_annotation  from master_join master_join_csvzda
  join organisation.unitavailability_view organisation_unitavailability_lat_kaaavh on master_join_csvzda.target_id = organisation_unitavailability_lat_kaaavh.id
  where master_join_csvzda.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_rjjpez on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytabtg.*) AS annotation
  from master_join master_join_cgfbey
  join notes.note_view notes_note_lat_ytabtg on master_join_cgfbey.target_id = notes_note_lat_ytabtg.id
  where master_join_cgfbey.source_id = organisation.unit_ts.id
) as notes_note_view_nyyedp on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_boivba.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_caegde.*) AS annotation
  from master_join master_join_usmpem
  join notes.note_view notes_note_lat_caegde on master_join_usmpem.target_id = notes_note_lat_caegde.id
  where master_join_usmpem.source_id = holding.unplannedholding_ts.id
) as notes_note_view_boivba on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureType
-- ['notes.note_view', 'obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_afxaip.title as varchar), '(' || navaids_points_markerbeacon_pt_afxaip.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_afxaip.href::text AS marker_href,
    obstacles_verticalstructurepart_view_aeoqfu.part::jsonb as part,
    obstacles_verticalstructurepart_view_aeoqfu.part_annotation::jsonb as part_annotation,
    service_passengerservice_pt_rswdmm.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_wyebfc.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_impsit.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_rqsmhm.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_olyori.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_qgegng.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_fktvvj.supportedservice::jsonb as supportedservice,
    notes_note_view_ajqnst.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_rcefxp.lightingavailability::jsonb as lightingavailability,
    obstacles_verticalstructurelightingstatus_view_rcefxp.lightingavailability_annotation::jsonb as lightingavailability_annotation
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_afxaip on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_afxaip.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_tdexrg.*) as part,
      jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_tdexrg.annotation) as part_annotation  from master_join master_join_gbtctu
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_tdexrg on master_join_gbtctu.target_id = obstacles_verticalstructurepart_lat_tdexrg.id
  where master_join_gbtctu.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_aeoqfu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_amwyqb.id,
      'title', coalesce(cast(service_passengerservice_lat_amwyqb.title AS varchar), '(' || service_passengerservice_lat_amwyqb.nilreason[1] || ')'),
      'href', service_passengerservice_lat_amwyqb.href
  )) as hostedpassengerservice  from master_join master_join_pystaw
  join service.passengerservice_pt service_passengerservice_lat_amwyqb on master_join_pystaw.target_id = service_passengerservice_lat_amwyqb.id
  where master_join_pystaw.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_rswdmm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_ydbdiv.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_ydbdiv.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_ydbdiv.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_ydbdiv.href
  )) as supportedgroundlight  from master_join master_join_gbnumc
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_ydbdiv on master_join_gbnumc.target_id = airport_heliport_groundlightsystem_lat_ydbdiv.id
  where master_join_gbnumc.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_wyebfc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_nfceth.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_nfceth.title AS varchar), '(' || navaids_points_navaidequipment_lat_nfceth.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_nfceth.href
  )) as hostednavaidequipment  from master_join master_join_lxuncy
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_nfceth on master_join_lxuncy.target_id = navaids_points_navaidequipment_lat_nfceth.id
  where master_join_lxuncy.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_impsit on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_uvhubv.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_uvhubv.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_uvhubv.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_uvhubv.href
  )) as hostedspecialnavstation  from master_join master_join_gauior
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_uvhubv on master_join_gauior.target_id = navaids_points_specialnavigationstation_lat_uvhubv.id
  where master_join_gauior.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_rqsmhm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_sjzrxk.id,
      'title', coalesce(cast(organisation_unit_lat_sjzrxk.title AS varchar), '(' || organisation_unit_lat_sjzrxk.nilreason[1] || ')'),
      'href', organisation_unit_lat_sjzrxk.href
  )) as hostedunit  from master_join master_join_mzaprm
  join organisation.unit_pt organisation_unit_lat_sjzrxk on master_join_mzaprm.target_id = organisation_unit_lat_sjzrxk.id
  where master_join_mzaprm.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_olyori on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uoqhhu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uoqhhu.title AS varchar), '(' || organisation_organisationauthority_lat_uoqhhu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uoqhhu.href
  )) as hostedorganisation  from master_join master_join_rlicvz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uoqhhu on master_join_rlicvz.target_id = organisation_organisationauthority_lat_uoqhhu.id
  where master_join_rlicvz.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_qgegng on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_gofrnk.id,
      'title', coalesce(cast(service_service_lat_gofrnk.title AS varchar), '(' || service_service_lat_gofrnk.nilreason[1] || ')'),
      'href', service_service_lat_gofrnk.href
  )) as supportedservice  from master_join master_join_rwhohh
  join service.service_pt service_service_lat_gofrnk on master_join_rwhohh.target_id = service_service_lat_gofrnk.id
  where master_join_rwhohh.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_fktvvj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wxxagc.*) AS annotation
  from master_join master_join_ircuji
  join notes.note_view notes_note_lat_wxxagc on master_join_ircuji.target_id = notes_note_lat_wxxagc.id
  where master_join_ircuji.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_ajqnst on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_esmwca.*) as lightingavailability,
      jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_esmwca.annotation) as lightingavailability_annotation  from master_join master_join_uelmom
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_esmwca on master_join_uelmom.target_id = obstacles_verticalstructurelightingstatus_lat_esmwca.id
  where master_join_uelmom.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_rcefxp on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorType
-- ['notes.note_view', 'airport_heliport.groundlightingavailability_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_wmvisb.title as varchar), '(' || airport_heliport_runwaydirection_pt_wmvisb.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_wmvisb.href::text AS runwaydirection_href,
    shared_lightelement_view_nkimpj.element::jsonb as element,
    shared_lightelement_view_nkimpj.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_xbgiqz.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_xbgiqz.availability_annotation::jsonb as availability_annotation,
    notes_note_view_rajfpm.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wmvisb on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_wmvisb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_nqcxga.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_nqcxga.annotation) as element_annotation  from master_join master_join_iodjcr
  join shared.lightelement_view shared_lightelement_lat_nqcxga on master_join_iodjcr.target_id = shared_lightelement_lat_nqcxga.id
  where master_join_iodjcr.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_nkimpj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mntzvw.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mntzvw.annotation) as availability_annotation  from master_join master_join_lipepj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mntzvw on master_join_lipepj.target_id = airport_heliport_groundlightingavailability_lat_mntzvw.id
  where master_join_lipepj.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_xbgiqz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xyvtbx.*) AS annotation
  from master_join master_join_wcxwlq
  join notes.note_view notes_note_lat_xyvtbx on master_join_wcxwlq.target_id = notes_note_lat_xyvtbx.id
  where master_join_wcxwlq.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_rajfpm on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_rrnkrr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rrnkrr.longitude AS location_longitude,
    geometry_elevatedpoint_view_rrnkrr.latitude AS location_latitude,
    geometry_elevatedpoint_view_rrnkrr.elevation AS location_elevation,
    geometry_elevatedpoint_view_rrnkrr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rrnkrr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rrnkrr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rrnkrr.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kwfryd.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_kwfryd.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_jbysjy.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_jbysjy.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_keywft.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_keywft.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ubbixb.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rrnkrr on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_rrnkrr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ppvbra.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ppvbra.annotation) as authority_annotation  from master_join master_join_fzsqvx
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ppvbra on master_join_fzsqvx.target_id = navaids_points_authorityfornavaidequipment_lat_ppvbra.id
  where master_join_fzsqvx.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_kwfryd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lxwtim.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lxwtim.annotation) as monitoring_annotation  from master_join master_join_oztqsu
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lxwtim on master_join_oztqsu.target_id = navaids_points_navaidequipmentmonitoring_lat_lxwtim.id
  where master_join_oztqsu.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jbysjy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_miaifh.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_miaifh.annotation) as availability_annotation  from master_join master_join_tzcdqb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_miaifh on master_join_tzcdqb.target_id = navaids_points_navaidoperationalstatus_lat_miaifh.id
  where master_join_tzcdqb.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_keywft on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqajkg.*) AS annotation
  from master_join master_join_dotqto
  join notes.note_view notes_note_lat_jqajkg on master_join_dotqto.target_id = notes_note_lat_jqajkg.id
  where master_join_dotqto.source_id = navaids_points.vor_ts.id
) as notes_note_view_ubbixb on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.workareaactivity_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_zqqweh.title as varchar), '(' || airport_heliport_airportheliport_pt_zqqweh.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zqqweh.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_lxdpcb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_lxdpcb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_lxdpcb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_lxdpcb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_lxdpcb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_lxdpcb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_zizpjg.activation::jsonb as activation,
    airport_heliport_workareaactivity_view_zizpjg.activation_annotation::jsonb as activation_annotation,
    notes_note_view_celpwv.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqqweh on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zqqweh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lxdpcb on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_lxdpcb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_pzjdwx.*) as activation,
      jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_pzjdwx.annotation) as activation_annotation  from master_join master_join_jsppbz
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_pzjdwx on master_join_jsppbz.target_id = airport_heliport_workareaactivity_lat_pzjdwx.id
  where master_join_jsppbz.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_zizpjg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cwnisx.*) AS annotation
  from master_join master_join_yblyfg
  join notes.note_view notes_note_lat_cwnisx on master_join_yblyfg.target_id = notes_note_lat_cwnisx.id
  where master_join_yblyfg.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_celpwv on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
