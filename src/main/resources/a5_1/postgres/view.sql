-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_xqgljh.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_subppd.*) AS annotation
  from master_join master_join_jdrjmc
  join notes.note_view notes_note_lat_subppd on master_join_jdrjmc.target_id = notes_note_lat_subppd.id
  where master_join_jdrjmc.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_xqgljh on TRUE
;
create index if not exists shared_aircraftcharacteristic_id on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_vmlbaz.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_laqfan.layer::jsonb as layer,
    notes_note_view_byvaiv.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ywcsew.id) as criticalridge
  from master_join master_join_scrzhk
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ywcsew on master_join_scrzhk.target_id = airport_heliport_ridge_lat_ywcsew.id
  where master_join_scrzhk.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_vmlbaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_lsbczz.id) as layer
  from master_join master_join_edudkd
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_lsbczz on master_join_edudkd.target_id = airport_heliport_surfacecontaminationlayer_lat_lsbczz.id
  where master_join_edudkd.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_laqfan on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_noajmc.*) AS annotation
  from master_join master_join_nqbeek
  join notes.note_view notes_note_lat_noajmc on master_join_nqbeek.target_id = notes_note_lat_noajmc.id
  where master_join_nqbeek.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_byvaiv on TRUE
;
create index if not exists airport_heliport_aircraftstandcontamination_id on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_ufuwgu.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_nccpas.layer::jsonb as layer,
    notes_note_view_klzoyo.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_iiolmr.id) as criticalridge
  from master_join master_join_bbmwgt
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_iiolmr on master_join_bbmwgt.target_id = airport_heliport_ridge_lat_iiolmr.id
  where master_join_bbmwgt.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_ufuwgu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_frbfas.id) as layer
  from master_join master_join_rmwrqc
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_frbfas on master_join_rmwrqc.target_id = airport_heliport_surfacecontaminationlayer_lat_frbfas.id
  where master_join_rmwrqc.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_nccpas on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uperva.*) AS annotation
  from master_join master_join_wxquuf
  join notes.note_view notes_note_lat_uperva on master_join_wxquuf.target_id = notes_note_lat_uperva.id
  where master_join_wxquuf.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_klzoyo on TRUE
;
create index if not exists airport_heliport_airportheliportcontamination_id on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_hauhvj.id)::jsonb AS theairspacevolume,
    notes_note_view_jqvsue.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_hauhvj on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_hauhvj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edzyrm.*) AS annotation
  from master_join master_join_grrbdo
  join notes.note_view notes_note_lat_edzyrm on master_join_grrbdo.target_id = notes_note_lat_edzyrm.id
  where master_join_grrbdo.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_jqvsue on TRUE
;
create index if not exists airspace_airspacegeometrycomponent_id on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_tcnxti.title as varchar), '(' || shared_standardlevelcolumn_pt_tcnxti.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_tcnxti.href::text AS discretelevelseries_href,
    notes_note_view_dlzhgl.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_tcnxti on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_tcnxti.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ahkafu.*) AS annotation
  from master_join master_join_dkgwfh
  join notes.note_view notes_note_lat_ahkafu on master_join_dkgwfh.target_id = notes_note_lat_ahkafu.id
  where master_join_dkgwfh.source_id = shared.airspacelayer.id
) as notes_note_view_dlzhgl on TRUE
;
create index if not exists shared_airspacelayer_id on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_vmliyp.title as varchar), '(' || airspace_airspace_pt_vmliyp.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_vmliyp.href::text AS theairspace_href,
    notes_note_view_epowas.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_vmliyp on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_vmliyp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lhyvob.*) AS annotation
  from master_join master_join_gnzfpc
  join notes.note_view notes_note_lat_lhyvob on master_join_gnzfpc.target_id = notes_note_lat_lhyvob.id
  where master_join_gnzfpc.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_epowas on TRUE
;
create index if not exists airspace_airspacevolumedependency_id on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_rlcliw.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_csxfpd.*) AS annotation
  from master_join master_join_nvwnxc
  join notes.note_view notes_note_lat_csxfpd on master_join_nvwnxc.target_id = notes_note_lat_csxfpd.id
  where master_join_nvwnxc.source_id = shared.altitudeadjustment.id
) as notes_note_view_rlcliw on TRUE
;
create index if not exists shared_altitudeadjustment_id on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_zxiqkj.title as varchar), '(' || navaids_points_angleindication_pt_zxiqkj.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_zxiqkj.href::text AS theangleindication_href,
    notes_note_view_xnxogb.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_zxiqkj on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_zxiqkj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfvdlv.*) AS annotation
  from master_join master_join_gxctbg
  join notes.note_view notes_note_lat_lfvdlv on master_join_gxctbg.target_id = notes_note_lat_lfvdlv.id
  where master_join_gxctbg.source_id = navaids_points.angleuse.id
) as notes_note_view_xnxogb on TRUE
;
create index if not exists navaids_points_angleuse_id on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_opxafy.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uowrcu.*) AS annotation
  from master_join master_join_zbxnzc
  join notes.note_view notes_note_lat_uowrcu on master_join_zbxnzc.target_id = notes_note_lat_uowrcu.id
  where master_join_zbxnzc.source_id = procedure.approachaltitudetable.id
) as notes_note_view_opxafy on TRUE
;
create index if not exists procedure_approachaltitudetable_id on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_uzuqkh.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_uwvbox.title as varchar), '(' || airport_heliport_altimetersource_pt_uwvbox.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_uwvbox.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_vohocb.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_llayki.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_hjcdjj.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_ikozif.designsurface::jsonb as designsurface,
    notes_note_view_isgpvu.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_uzuqkh on procedure.approachcondition.minimumset_id = procedure_minima_pt_uzuqkh.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_uwvbox on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_uwvbox.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_cadcmb.id) as circlingrestriction
  from master_join master_join_djaiwf
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_cadcmb on master_join_djaiwf.target_id = procedure_circlingrestriction_lat_cadcmb.id
  where master_join_djaiwf.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_vohocb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_axrvex.id) as aircraftcategory
  from master_join master_join_rftwvq
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_axrvex on master_join_rftwvq.target_id = shared_aircraftcharacteristic_lat_axrvex.id
  where master_join_rftwvq.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_llayki on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_ypytuu.id) as landingarea
  from master_join master_join_oyuhxc
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_ypytuu on master_join_oyuhxc.target_id = procedure_landingtakeoffareacollection_lat_ypytuu.id
  where master_join_oyuhxc.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_hjcdjj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_eqfvqh.id) as designsurface
  from master_join master_join_rgxtho
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_eqfvqh on master_join_rgxtho.target_id = shared_obstacleassessmentarea_lat_eqfvqh.id
  where master_join_rgxtho.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_ikozif on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vfpmgc.*) AS annotation
  from master_join master_join_sibalj
  join notes.note_view notes_note_lat_vfpmgc on master_join_sibalj.target_id = notes_note_lat_vfpmgc.id
  where master_join_sibalj.source_id = procedure.approachcondition.id
) as notes_note_view_isgpvu on TRUE
;
create index if not exists procedure_approachcondition_id on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_ateozz.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iiocxj.*) AS annotation
  from master_join master_join_wxlcus
  join notes.note_view notes_note_lat_iiocxj on master_join_wxlcus.target_id = notes_note_lat_iiocxj.id
  where master_join_wxlcus.source_id = procedure.approachdistancetable.id
) as notes_note_view_ateozz on TRUE
;
create index if not exists procedure_approachdistancetable_id on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_pgrtmc.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_abgxci.*) AS annotation
  from master_join master_join_lebusi
  join notes.note_view notes_note_lat_abgxci on master_join_lebusi.target_id = notes_note_lat_abgxci.id
  where master_join_lebusi.source_id = procedure.approachtimingtable.id
) as notes_note_view_pgrtmc on TRUE
;
create index if not exists procedure_approachtimingtable_id on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_saukct.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_xaeeyl.layer::jsonb as layer,
    notes_note_view_jdmpmy.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_gpploq.id) as criticalridge
  from master_join master_join_rfvkvx
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_gpploq on master_join_rfvkvx.target_id = airport_heliport_ridge_lat_gpploq.id
  where master_join_rfvkvx.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_saukct on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_urkzfl.id) as layer
  from master_join master_join_ujyjvm
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_urkzfl on master_join_ujyjvm.target_id = airport_heliport_surfacecontaminationlayer_lat_urkzfl.id
  where master_join_ujyjvm.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_xaeeyl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uuupme.*) AS annotation
  from master_join master_join_fxmrij
  join notes.note_view notes_note_lat_uuupme on master_join_fxmrij.target_id = notes_note_lat_uuupme.id
  where master_join_fxmrij.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_jdmpmy on TRUE
;
create index if not exists airport_heliport_aproncontamination_id on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_gospeu.title as varchar), '(' || organisation_organisationauthority_pt_gospeu.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_gospeu.href::text AS theorganisationauthority_href,
    notes_note_view_zulwyd.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gospeu on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_gospeu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbupvq.*) AS annotation
  from master_join master_join_htzyol
  join notes.note_view notes_note_lat_cbupvq on master_join_htzyol.target_id = notes_note_lat_cbupvq.id
  where master_join_htzyol.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_zulwyd on TRUE
;
create index if not exists aerial_refuelling_authorityforaerialrefuelling_id on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_watcyh.title as varchar), '(' || organisation_organisationauthority_pt_watcyh.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_watcyh.href::text AS theorganisationauthority_href,
    notes_note_view_ixtlnm.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_watcyh on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_watcyh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cjdons.*) AS annotation
  from master_join master_join_ywfnxn
  join notes.note_view notes_note_lat_cjdons on master_join_ywfnxn.target_id = notes_note_lat_cjdons.id
  where master_join_ywfnxn.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_ixtlnm on TRUE
;
create index if not exists navaids_points_authorityfornavaidequipment_id on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_gvyqck.title as varchar), '(' || organisation_organisationauthority_pt_gvyqck.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_gvyqck.href::text AS theorganisationauthority_href,
    notes_note_view_hfesja.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gvyqck on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_gvyqck.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvjgig.*) AS annotation
  from master_join master_join_gdoohs
  join notes.note_view notes_note_lat_xvjgig on master_join_gdoohs.target_id = notes_note_lat_xvjgig.id
  where master_join_gdoohs.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_hfesja on TRUE
;
create index if not exists navaids_points_authorityforspecialnavigationstation_id on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_qtueam.title as varchar), '(' || organisation_organisationauthority_pt_qtueam.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_qtueam.href::text AS theorganisationauthority_href,
    notes_note_view_mhqswc.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qtueam on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_qtueam.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yyoxet.*) AS annotation
  from master_join master_join_prcxlt
  join notes.note_view notes_note_lat_yyoxet on master_join_prcxlt.target_id = notes_note_lat_yyoxet.id
  where master_join_prcxlt.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_mhqswc on TRUE
;
create index if not exists navaids_points_authorityforspecialnavigationsystem_id on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_zuhpuf.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvuhku.*) AS annotation
  from master_join master_join_mpmmjl
  join notes.note_view notes_note_lat_bvuhku on master_join_mpmmjl.target_id = notes_note_lat_bvuhku.id
  where master_join_mpmmjl.source_id = service.callsigndetail.id
) as notes_note_view_zuhpuf on TRUE
;
create index if not exists service_callsigndetail_id on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_jrteei.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eistkz.*) AS annotation
  from master_join master_join_iywftb
  join notes.note_view notes_note_lat_eistkz on master_join_iywftb.target_id = notes_note_lat_eistkz.id
  where master_join_iywftb.source_id = shared.circlesector.id
) as notes_note_view_jrteei on TRUE
;
create index if not exists shared_circlesector_id on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_tpixcw.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wofiae.*) AS annotation
  from master_join master_join_enohsg
  join notes.note_view notes_note_lat_wofiae on master_join_enohsg.target_id = notes_note_lat_wofiae.id
  where master_join_enohsg.source_id = airport_heliport.city.id
) as notes_note_view_tpixcw on TRUE
;
create index if not exists airport_heliport_city_id on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		linestring AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize(linestring::geography, 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		arc_geom AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_uatadu.id)::jsonb AS enginetype,
    notes_note_view_whttuo.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_uatadu on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_uatadu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oigraa.*) AS annotation
  from master_join master_join_uynexu
  join notes.note_view notes_note_lat_oigraa on master_join_uynexu.target_id = notes_note_lat_oigraa.id
  where master_join_uynexu.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_whttuo on TRUE
;
create index if not exists procedure_departurearrivalcondition_id on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_plltqp.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmawck.*) AS annotation
  from master_join master_join_mgkdth
  join notes.note_view notes_note_lat_pmawck on master_join_mgkdth.target_id = notes_note_lat_pmawck.id
  where master_join_mgkdth.source_id = routes.directflightclass.id
) as notes_note_view_plltqp on TRUE
;
create index if not exists routes_directflightclass_id on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		linestring AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize(linestring::geography, 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		arc_geom AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		linestring AS geom,
		ST_StartPoint(linestring) as first_point,
		ST_EndPoint(linestring) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize(linestring::geography, 10000)::geometry as geom,
		ST_StartPoint(linestring) as first_point,
		ST_EndPoint(linestring) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		geom AS geom,
		ST_StartPoint(geom) as first_point,
		ST_EndPoint(geom) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		geom AS geom,
		ST_StartPoint(geom) as first_point,
		ST_EndPoint(geom) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_kejxvl.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lwnrga.*) AS annotation
  from master_join master_join_sxylja
  join notes.note_view notes_note_lat_lwnrga on master_join_sxylja.target_id = notes_note_lat_lwnrga.id
  where master_join_sxylja.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_kejxvl on TRUE
;
create index if not exists procedure_equipmentunavailableadjustmentcolumn_id on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_nicvcz.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_aljbcf.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_rjnkak.id) as adjustmentinopcol
  from master_join master_join_zvwwti
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_rjnkak on master_join_zvwwti.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_rjnkak.id
  where master_join_zvwwti.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_nicvcz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydoucw.*) AS annotation
  from master_join master_join_cngmzq
  join notes.note_view notes_note_lat_ydoucw on master_join_cngmzq.target_id = notes_note_lat_ydoucw.id
  where master_join_cngmzq.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_aljbcf on TRUE
;
create index if not exists procedure_equipmentunavailableadjustment_id on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_itvdcp.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_emqfzd.*) AS annotation
  from master_join master_join_pxivmb
  join notes.note_view notes_note_lat_emqfzd on master_join_pxivmb.target_id = notes_note_lat_emqfzd.id
  where master_join_pxivmb.source_id = public.fasdatablock.id
) as notes_note_view_itvdcp on TRUE
;
create index if not exists public_fasdatablock_id on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_fwcypc.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_tyysrj.distance::jsonb as distance,
    procedure_approachtimingtable_pt_rclqhn.timing::jsonb as timing,
    notes_note_view_njrogb.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_qflmtt.id) as altitude
  from master_join master_join_lnyfyw
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_qflmtt on master_join_lnyfyw.target_id = procedure_approachaltitudetable_lat_qflmtt.id
  where master_join_lnyfyw.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_fwcypc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_pugcyt.id) as distance
  from master_join master_join_vphalh
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_pugcyt on master_join_vphalh.target_id = procedure_approachdistancetable_lat_pugcyt.id
  where master_join_vphalh.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_tyysrj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_xngtyf.id) as timing
  from master_join master_join_jpvkwk
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_xngtyf on master_join_jpvkwk.target_id = procedure_approachtimingtable_lat_xngtyf.id
  where master_join_jpvkwk.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_rclqhn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_manwwi.*) AS annotation
  from master_join master_join_hpuhqk
  join notes.note_view notes_note_lat_manwwi on master_join_hpuhqk.target_id = notes_note_lat_manwwi.id
  where master_join_hpuhqk.source_id = procedure.finalprofile.id
) as notes_note_view_njrogb on TRUE
;
create index if not exists procedure_finalprofile_id on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_ybadod.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zthblk.*) AS annotation
  from master_join master_join_rkqjyb
  join notes.note_view notes_note_lat_zthblk on master_join_rkqjyb.target_id = notes_note_lat_zthblk.id
  where master_join_rkqjyb.source_id = shared.flightcharacteristic.id
) as notes_note_view_ybadod on TRUE
;
create index if not exists shared_flightcharacteristic_id on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_otkews.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_whjseu.*) AS annotation
  from master_join master_join_mpgjmw
  join notes.note_view notes_note_lat_whjseu on master_join_mpgjmw.target_id = notes_note_lat_whjseu.id
  where master_join_mpgjmw.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_otkews on TRUE
;
create index if not exists routes_flightconditioncircumstance_id on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_hcfxyg.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xbnloh.*) AS annotation
  from master_join master_join_eiiyme
  join notes.note_view notes_note_lat_xbnloh on master_join_eiiyme.target_id = notes_note_lat_xbnloh.id
  where master_join_eiiyme.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_hcfxyg on TRUE
;
create index if not exists routes_flightrestrictionlevel_id on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_xgwxod.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gflffd.*) AS annotation
  from master_join master_join_flktlx
  join notes.note_view notes_note_lat_gflffd on master_join_flktlx.target_id = notes_note_lat_gflffd.id
  where master_join_flktlx.source_id = service.fuel.id
) as notes_note_view_xgwxod on TRUE
;
create index if not exists service_fuel_id on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_xuzekk.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_omrbeg.*) AS annotation
  from master_join master_join_gdgjgk
  join notes.note_view notes_note_lat_omrbeg on master_join_gdgjgk.target_id = notes_note_lat_omrbeg.id
  where master_join_gdgjgk.source_id = holding.holdingpatterndistance.id
) as notes_note_view_xuzekk on TRUE
;
create index if not exists holding_holdingpatterndistance_id on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_zhvlja.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oetchi.*) AS annotation
  from master_join master_join_ktcybf
  join notes.note_view notes_note_lat_oetchi on master_join_ktcybf.target_id = notes_note_lat_oetchi.id
  where master_join_ktcybf.source_id = holding.holdingpatternduration.id
) as notes_note_view_zhvlja on TRUE
;
create index if not exists holding_holdingpatternduration_id on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_cdpjkq.title as varchar), '(' || holding_holdingpattern_pt_cdpjkq.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_cdpjkq.href::text AS theholdingpattern_href,
    notes_note_view_qzjazr.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_cdpjkq on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_cdpjkq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ioundd.*) AS annotation
  from master_join master_join_tlythl
  join notes.note_view notes_note_lat_ioundd on master_join_tlythl.target_id = notes_note_lat_ioundd.id
  where master_join_tlythl.source_id = procedure.holdinguse.id
) as notes_note_view_qzjazr on TRUE
;
create index if not exists procedure_holdinguse_id on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_npvrst.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_hqkhup.tlof::jsonb as tlof,
    notes_note_view_iyktbx.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_tzeocm.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_tzeocm.title AS varchar), '(' || airport_heliport_runwaydirection_lat_tzeocm.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_tzeocm.href
  )) as runway  from master_join master_join_dtnwgf
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_tzeocm on master_join_dtnwgf.target_id = airport_heliport_runwaydirection_lat_tzeocm.id
  where master_join_dtnwgf.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_npvrst on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_cxjfcq.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_cxjfcq.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_cxjfcq.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_cxjfcq.href
  )) as tlof  from master_join master_join_nvosle
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_cxjfcq on master_join_nvosle.target_id = airport_heliport_touchdownliftoff_lat_cxjfcq.id
  where master_join_nvosle.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_hqkhup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_adywaj.*) AS annotation
  from master_join master_join_ywaagw
  join notes.note_view notes_note_lat_adywaj on master_join_ywaagw.target_id = notes_note_lat_adywaj.id
  where master_join_ywaagw.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_iyktbx on TRUE
;
create index if not exists procedure_landingtakeoffareacollection_id on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_bbdsse.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gnjprj.*) AS annotation
  from master_join master_join_tpiyaa
  join notes.note_view notes_note_lat_gnjprj on master_join_tpiyaa.target_id = notes_note_lat_gnjprj.id
  where master_join_tpiyaa.source_id = airport_heliport.lightactivation.id
) as notes_note_view_bbdsse on TRUE
;
create index if not exists airport_heliport_lightactivation_id on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_esljau.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jdsufj.*) AS annotation
  from master_join master_join_vczltt
  join notes.note_view notes_note_lat_jdsufj on master_join_vczltt.target_id = notes_note_lat_jdsufj.id
  where master_join_vczltt.source_id = shared.meteorology.id
) as notes_note_view_esljau on TRUE
;
create index if not exists shared_meteorology_id on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_cumyim.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_hjcvzb.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_ydjmet.id) as adjustmentinop
  from master_join master_join_anyofa
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_ydjmet on master_join_anyofa.target_id = procedure_equipmentunavailableadjustment_lat_ydjmet.id
  where master_join_anyofa.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_cumyim on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bdtqwy.*) AS annotation
  from master_join master_join_ubdpze
  join notes.note_view notes_note_lat_bdtqwy on master_join_ubdpze.target_id = notes_note_lat_bdtqwy.id
  where master_join_ubdpze.source_id = procedure.minima.id
) as notes_note_view_hjcvzb on TRUE
;
create index if not exists procedure_minima_id on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_rvrscf.altimeter::jsonb as altimeter,
    notes_note_view_sdjsek.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_stymxs.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_stymxs.title AS varchar), '(' || airport_heliport_altimetersource_lat_stymxs.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_stymxs.href
  )) as altimeter  from master_join master_join_jbsyzg
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_stymxs on master_join_jbsyzg.target_id = airport_heliport_altimetersource_lat_stymxs.id
  where master_join_jbsyzg.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_rvrscf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jmvico.*) AS annotation
  from master_join master_join_mgapry
  join notes.note_view notes_note_lat_jmvico on master_join_mgapry.target_id = notes_note_lat_jmvico.id
  where master_join_mgapry.source_id = procedure.missedapproachgroup.id
) as notes_note_view_sdjsek on TRUE
;
create index if not exists procedure_missedapproachgroup_id on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    coalesce(cast(navaids_points_navaidequipment_pt_koyqrd.title as varchar), '(' || navaids_points_navaidequipment_pt_koyqrd.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_koyqrd.href::text AS thenavaidequipment_href,
    notes_note_view_byjvre.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_koyqrd on navaids_points.navaidcomponent.thenavaidequipment_id = navaids_points_navaidequipment_pt_koyqrd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zrvyix.*) AS annotation
  from master_join master_join_qmjrxf
  join notes.note_view notes_note_lat_zrvyix on master_join_qmjrxf.target_id = notes_note_lat_zrvyix.id
  where master_join_qmjrxf.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_byjvre on TRUE
;
create index if not exists navaids_points_navaidcomponent_id on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    coalesce(cast(navaids_points_navaidequipment_pt_ktrnxd.title as varchar), '(' || navaids_points_navaidequipment_pt_ktrnxd.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_ktrnxd.href::text AS thenavaidequipment_href,
    notes_note_view_vnjufd.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_ktrnxd on airport_heliport.navaidequipmentdistance.thenavaidequipment_id = navaids_points_navaidequipment_pt_ktrnxd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvtqrv.*) AS annotation
  from master_join master_join_yrvjwz
  join notes.note_view notes_note_lat_bvtqrv on master_join_yrvjwz.target_id = notes_note_lat_bvtqrv.id
  where master_join_yrvjwz.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_vnjufd on TRUE
;
create index if not exists airport_heliport_navaidequipmentdistance_id on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_iorvkn.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrhpki.*) AS annotation
  from master_join master_join_zyxhrq
  join notes.note_view notes_note_lat_hrhpki on master_join_zyxhrq.target_id = notes_note_lat_hrhpki.id
  where master_join_zyxhrq.source_id = service.nitrogen.id
) as notes_note_view_iorvkn on TRUE
;
create index if not exists service_nitrogen_id on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_wsrywy.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vzaigd.*) AS annotation
  from master_join master_join_lgoxco
  join notes.note_view notes_note_lat_vzaigd on master_join_lgoxco.target_id = notes_note_lat_vzaigd.id
  where master_join_lgoxco.source_id = shared.obstacleplacement.id
) as notes_note_view_wsrywy on TRUE
;
create index if not exists shared_obstacleplacement_id on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_xxmcmh.title as varchar), '(' || obstacles_verticalstructure_pt_xxmcmh.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_xxmcmh.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_sgbjrv.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_usacae.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_cdevok.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_xxmcmh on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_xxmcmh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_hzvonj.id) as adjustment
  from master_join master_join_poztdd
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_hzvonj on master_join_poztdd.target_id = shared_altitudeadjustment_lat_hzvonj.id
  where master_join_poztdd.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_sgbjrv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_dmuovb.id) as obstacleplacement
  from master_join master_join_vkhzif
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_dmuovb on master_join_vkhzif.target_id = shared_obstacleplacement_lat_dmuovb.id
  where master_join_vkhzif.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_usacae on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrwvmz.*) AS annotation
  from master_join master_join_wjxejr
  join notes.note_view notes_note_lat_vrwvmz on master_join_wjxejr.target_id = notes_note_lat_vrwvmz.id
  where master_join_wjxejr.source_id = shared.obstruction.id
) as notes_note_view_cdevok on TRUE
;
create index if not exists shared_obstruction_id on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_nkwphz.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsbuqu.*) AS annotation
  from master_join master_join_wzohlv
  join notes.note_view notes_note_lat_bsbuqu on master_join_wzohlv.target_id = notes_note_lat_bsbuqu.id
  where master_join_wzohlv.source_id = service.oil.id
) as notes_note_view_nkwphz on TRUE
;
create index if not exists service_oil_id on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_qxgwaa.title as varchar), '(' || organisation_organisationauthority_pt_qxgwaa.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_qxgwaa.href::text AS theorganisationauthority_href,
    notes_note_view_cclkxc.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qxgwaa on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_qxgwaa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mnvkwg.*) AS annotation
  from master_join master_join_myxhne
  join notes.note_view notes_note_lat_mnvkwg on master_join_myxhne.target_id = notes_note_lat_mnvkwg.id
  where master_join_myxhne.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_cclkxc on TRUE
;
create index if not exists organisation_organisationauthorityassociation_id on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_rhptcv.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dmpqwz.*) AS annotation
  from master_join master_join_bmfust
  join notes.note_view notes_note_lat_dmpqwz on master_join_bmfust.target_id = notes_note_lat_dmpqwz.id
  where master_join_bmfust.source_id = service.oxygen.id
) as notes_note_view_rhptcv on TRUE
;
create index if not exists service_oxygen_id on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    coalesce(cast(procedure_segmentleg_pt_gofmwx.title as varchar), '(' || procedure_segmentleg_pt_gofmwx.nilreason[1] || ')')::text AS thesegmentleg,
    procedure_segmentleg_pt_gofmwx.href::text AS thesegmentleg_href,
    notes_note_view_wtvzqm.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_gofmwx on procedure.proceduretransitionleg.thesegmentleg_id = procedure_segmentleg_pt_gofmwx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rwkmzx.*) AS annotation
  from master_join master_join_cgbeql
  join notes.note_view notes_note_lat_rwkmzx on master_join_cgbeql.target_id = notes_note_lat_rwkmzx.id
  where master_join_cgbeql.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_wtvzqm on TRUE
;
create index if not exists procedure_proceduretransitionleg_id on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(surveillance_radarequipment_pt_ijfgwe.title as varchar), '(' || surveillance_radarequipment_pt_ijfgwe.nilreason[1] || ')')::text AS theradarequipment,
    surveillance_radarequipment_pt_ijfgwe.href::text AS theradarequipment_href,
    notes_note_view_nzjgud.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join surveillance.radarequipment_pt surveillance_radarequipment_pt_ijfgwe on surveillance.radarcomponent.theradarequipment_id = surveillance_radarequipment_pt_ijfgwe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbpnxg.*) AS annotation
  from master_join master_join_bustxd
  join notes.note_view notes_note_lat_fbpnxg on master_join_bustxd.target_id = notes_note_lat_fbpnxg.id
  where master_join_bustxd.source_id = surveillance.radarcomponent.id
) as notes_note_view_nzjgud on TRUE
;
create index if not exists surveillance_radarcomponent_id on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_tidjpl.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qzyyyy.*) AS annotation
  from master_join master_join_vecwvc
  join notes.note_view notes_note_lat_qzyyyy on master_join_vecwvc.target_id = notes_note_lat_qzyyyy.id
  where master_join_vecwvc.source_id = airport_heliport.ridge.id
) as notes_note_view_tidjpl on TRUE
;
create index if not exists airport_heliport_ridge_id on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_eluytg.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_kebpkh.layer::jsonb as layer,
    notes_note_view_vezhgq.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ndsypi.id) as criticalridge
  from master_join master_join_qsfkfg
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ndsypi on master_join_qsfkfg.target_id = airport_heliport_ridge_lat_ndsypi.id
  where master_join_qsfkfg.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_eluytg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_chuhou.id) as layer
  from master_join master_join_vxzmvm
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_chuhou on master_join_vxzmvm.target_id = airport_heliport_surfacecontaminationlayer_lat_chuhou.id
  where master_join_vxzmvm.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_kebpkh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzrnul.*) AS annotation
  from master_join master_join_wedstm
  join notes.note_view notes_note_lat_nzrnul on master_join_wedstm.target_id = notes_note_lat_nzrnul.id
  where master_join_wedstm.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_vezhgq on TRUE
;
create index if not exists airport_heliport_runwaycontamination_id on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_atuctv.declaredvalue::jsonb as declaredvalue,
    notes_note_view_xgdicu.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_vtpjdn.id) as declaredvalue
  from master_join master_join_vavozf
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_vtpjdn on master_join_vavozf.target_id = airport_heliport_runwaydeclareddistancevalue_lat_vtpjdn.id
  where master_join_vavozf.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_atuctv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ojgckn.*) AS annotation
  from master_join master_join_elrobw
  join notes.note_view notes_note_lat_ojgckn on master_join_elrobw.target_id = notes_note_lat_ojgckn.id
  where master_join_elrobw.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_xgdicu on TRUE
;
create index if not exists airport_heliport_runwaydeclareddistance_id on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_fdonep.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_qrxoqj.layer::jsonb as layer,
    notes_note_view_gvbdtn.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_frdopd.id) as criticalridge
  from master_join master_join_swxaqg
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_frdopd on master_join_swxaqg.target_id = airport_heliport_ridge_lat_frdopd.id
  where master_join_swxaqg.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_fdonep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_kvtyut.id) as layer
  from master_join master_join_vnucco
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_kvtyut on master_join_vnucco.target_id = airport_heliport_surfacecontaminationlayer_lat_kvtyut.id
  where master_join_vnucco.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_qrxoqj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mleufr.*) AS annotation
  from master_join master_join_mavybz
  join notes.note_view notes_note_lat_mleufr on master_join_mavybz.target_id = notes_note_lat_mleufr.id
  where master_join_mavybz.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_gvbdtn on TRUE
;
create index if not exists airport_heliport_runwaysectioncontamination_id on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_qehvjw.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bqimjk.*) AS annotation
  from master_join master_join_hkbcff
  join notes.note_view notes_note_lat_bqimjk on master_join_hkbcff.target_id = notes_note_lat_bqimjk.id
  where master_join_hkbcff.source_id = procedure.sectordesign.id
) as notes_note_view_qehvjw on TRUE
;
create index if not exists procedure_sectordesign_id on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_xbvcri.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jentvz.*) AS annotation
  from master_join master_join_kfnzzt
  join notes.note_view notes_note_lat_jentvz on master_join_kfnzzt.target_id = notes_note_lat_jentvz.id
  where master_join_kfnzzt.source_id = shared.standardlevel.id
) as notes_note_view_xbvcri on TRUE
;
create index if not exists shared_standardlevel_id on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_dsjfur.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mbyvxn.*) AS annotation
  from master_join master_join_iykscf
  join notes.note_view notes_note_lat_mbyvxn on master_join_iykscf.target_id = notes_note_lat_mbyvxn.id
  where master_join_iykscf.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_dsjfur on TRUE
;
create index if not exists airport_heliport_surfacecharacteristics_id on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		linestring AS geom,
		ST_StartPoint(linestring) as first_point,
		ST_EndPoint(linestring) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize(linestring::geography, 10000)::geometry as geom,
		ST_StartPoint(linestring) as first_point,
		ST_EndPoint(linestring) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		geom AS geom,
		ST_StartPoint(geom) as first_point,
		ST_EndPoint(geom) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		geom AS geom,
		ST_StartPoint(geom) as first_point,
		ST_EndPoint(geom) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_qsegki.title as varchar), '(' || organisation_unit_pt_qsegki.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_qsegki.href::text AS theunit_href,
    notes_note_view_jeycxl.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_qsegki on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_qsegki.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvrxyo.*) AS annotation
  from master_join master_join_clhqzr
  join notes.note_view notes_note_lat_bvrxyo on master_join_clhqzr.target_id = notes_note_lat_bvrxyo.id
  where master_join_clhqzr.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_jeycxl on TRUE
;
create index if not exists surveillance_surveillancegroundstation_id on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_zfgkhv.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_dtlojw.layer::jsonb as layer,
    notes_note_view_tiptyj.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_xkzeoy.id) as criticalridge
  from master_join master_join_bvmeue
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_xkzeoy on master_join_bvmeue.target_id = airport_heliport_ridge_lat_xkzeoy.id
  where master_join_bvmeue.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_zfgkhv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_xxampt.id) as layer
  from master_join master_join_kebjkb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_xxampt on master_join_kebjkb.target_id = airport_heliport_surfacecontaminationlayer_lat_xxampt.id
  where master_join_kebjkb.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_dtlojw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yvagec.*) AS annotation
  from master_join master_join_gbwynm
  join notes.note_view notes_note_lat_yvagec on master_join_gbwynm.target_id = notes_note_lat_yvagec.id
  where master_join_gbwynm.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_tiptyj on TRUE
;
create index if not exists airport_heliport_taxiwaycontamination_id on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_fsgpmm.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_mbiseg.layer::jsonb as layer,
    notes_note_view_vgoxwb.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_gisaqq.id) as criticalridge
  from master_join master_join_wkhvlo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_gisaqq on master_join_wkhvlo.target_id = airport_heliport_ridge_lat_gisaqq.id
  where master_join_wkhvlo.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_fsgpmm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_hekvvc.id) as layer
  from master_join master_join_qmcxhw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_hekvvc on master_join_qmcxhw.target_id = airport_heliport_surfacecontaminationlayer_lat_hekvvc.id
  where master_join_qmcxhw.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_mbiseg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gccmzh.*) AS annotation
  from master_join master_join_vqvjwf
  join notes.note_view notes_note_lat_gccmzh on master_join_vqvjwf.target_id = notes_note_lat_gccmzh.id
  where master_join_vqvjwf.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_vgoxwb on TRUE
;
create index if not exists airport_heliport_touchdownliftoffcontamination_id on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_gizidc.title as varchar), '(' || organisation_unit_pt_gizidc.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_gizidc.href::text AS theunit_href,
    notes_note_view_gaptyx.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_gizidc on organisation.unitdependency.theunit_id = organisation_unit_pt_gizidc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dvvuaw.*) AS annotation
  from master_join master_join_lmnqde
  join notes.note_view notes_note_lat_dvvuaw on master_join_lmnqde.target_id = notes_note_lat_dvvuaw.id
  where master_join_lmnqde.source_id = organisation.unitdependency.id
) as notes_note_view_gaptyx on TRUE
;
create index if not exists organisation_unitdependency_id on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_bjjbex.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_bjjbex.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_atgxsu.point::jsonb as point,
    shared_airspacelayer_pt_vbpony.verticalextent::jsonb as verticalextent,
    notes_note_view_jriuhw.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_bjjbex on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_bjjbex.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_rsgdxi.id) as point
  from master_join master_join_imdtvi
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_rsgdxi on master_join_imdtvi.target_id = aerial_refuelling_aerialrefuellingpoint_lat_rsgdxi.id
  where master_join_imdtvi.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_atgxsu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_qokusa.id) as verticalextent
  from master_join master_join_ghgzdj
  join shared.airspacelayer_pt shared_airspacelayer_lat_qokusa on master_join_ghgzdj.target_id = shared_airspacelayer_lat_qokusa.id
  where master_join_ghgzdj.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_vbpony on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mpzogp.*) AS annotation
  from master_join master_join_eutzup
  join notes.note_view notes_note_lat_mpzogp on master_join_eutzup.target_id = notes_note_lat_mpzogp.id
  where master_join_eutzup.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_jriuhw on TRUE
;
create index if not exists aerial_refuelling_aerialrefuellingtrack_id on aerial_refuelling.aerialrefuellingtrack_view (id);
create index if not exists aerial_refuelling_aerialrefuellingtrack_extent_gist on aerial_refuelling.aerialrefuellingtrack_view using GIST (extent_geom);
-- ProcedureTransitionPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_riqcxz.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_kwguhm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_kwguhm.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_etrzqk.transitionleg::jsonb as transitionleg,
    notes_note_view_yjtuki.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_riqcxz on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_riqcxz.id
left join geometry.curve_view geometry_curve_view_kwguhm on procedure.proceduretransition.trajectory_id = geometry_curve_view_kwguhm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_yhxjer.id) as transitionleg
  from master_join master_join_ggndes
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_yhxjer on master_join_ggndes.target_id = procedure_proceduretransitionleg_lat_yhxjer.id
  where master_join_ggndes.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_etrzqk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbxkri.*) AS annotation
  from master_join master_join_pklcsf
  join notes.note_view notes_note_lat_vbxkri on master_join_pklcsf.target_id = notes_note_lat_vbxkri.id
  where master_join_pklcsf.source_id = procedure.proceduretransition.id
) as notes_note_view_yjtuki on TRUE
;
create index if not exists procedure_proceduretransition_id on procedure.proceduretransition_view (id);
create index if not exists procedure_proceduretransition_trajectory_gist on procedure.proceduretransition_view using GIST (trajectory_geom);
-- LightElementPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_fdyovu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fdyovu.longitude AS location_longitude,
    geometry_elevatedpoint_view_fdyovu.latitude AS location_latitude,
    geometry_elevatedpoint_view_fdyovu.elevation AS location_elevation,
    geometry_elevatedpoint_view_fdyovu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fdyovu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fdyovu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fdyovu.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_hawypr.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_cwtspj.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fdyovu on shared.lightelement.location_id = geometry_elevatedpoint_view_fdyovu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dkubqd.*) AS annotation
  from master_join master_join_wonpdo
  join notes.note_view notes_note_lat_dkubqd on master_join_wonpdo.target_id = notes_note_lat_dkubqd.id
  where master_join_wonpdo.source_id = shared.lightelement.id
) as notes_note_view_hawypr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_ypckxx.id) as availability
  from master_join master_join_beezkg
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_ypckxx on master_join_beezkg.target_id = shared_lightelementstatus_lat_ypckxx.id
  where master_join_beezkg.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_cwtspj on TRUE
;
create index if not exists shared_lightelement_id on shared.lightelement_view (id);
create index if not exists shared_lightelement_location_gist on shared.lightelement_view using GIST (location_geom);
-- ReflectorPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_sjcebo.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_sjcebo.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_sjcebo.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_sjcebo.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_sjcebo.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_sjcebo.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_sjcebo.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_sjcebo.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_etxnhq.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sjcebo on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_sjcebo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gwopoz.*) AS annotation
  from master_join master_join_iapfbw
  join notes.note_view notes_note_lat_gwopoz on master_join_iapfbw.target_id = notes_note_lat_gwopoz.id
  where master_join_iapfbw.source_id = surveillance.reflector.id
) as notes_note_view_etxnhq on TRUE
;
create index if not exists surveillance_reflector_id on surveillance.reflector_view (id);
create index if not exists surveillance_reflector_touchdownreflector_gist on surveillance.reflector_view using GIST (touchdownreflector_geom);
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_qglapy.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_qglapy.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_qglapy.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_qglapy.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_qglapy.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_qglapy.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_pyoscd.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_pyoscd.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_pyoscd.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_pyoscd.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_pyoscd.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_pyoscd.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_tdlacd.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_tdlacd.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_tdlacd.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_tdlacd.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_tdlacd.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_tdlacd.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_tdlacd.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_tdlacd.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_otrwce.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qglapy on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_qglapy.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_pyoscd on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_pyoscd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tdlacd on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_tdlacd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plfotd.*) AS annotation
  from master_join master_join_typeor
  join notes.note_view notes_note_lat_plfotd on master_join_typeor.target_id = notes_note_lat_plfotd.id
  where master_join_typeor.source_id = airport_heliport.markingelement.id
) as notes_note_view_otrwce on TRUE
;
create index if not exists airport_heliport_markingelement_id on airport_heliport.markingelement_view (id);
create index if not exists airport_heliport_markingelement_extentsurfaceextent_gist on airport_heliport.markingelement_view using GIST (extentsurfaceextent_geom);
create index if not exists airport_heliport_markingelement_extentcurveextent_gist on airport_heliport.markingelement_view using GIST (extentcurveextent_geom);
create index if not exists airport_heliport_markingelement_extentlocation_gist on airport_heliport.markingelement_view using GIST (extentlocation_geom);
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_hhvgcd.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_hhvgcd.attr::jsonb  as extent,
    notes_note_view_visdkx.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_hybven.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_hybven.id,
      'elevation', geometry_elevatedsurface_lat_hybven.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_hybven.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_hybven.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_hybven.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_hybven.horizontalAccuracy
    )) AS attr
  from master_join master_join_lggkla
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_hybven on master_join_lggkla.target_id = geometry_elevatedsurface_lat_hybven.id
  where master_join_lggkla.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_hhvgcd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xoipdq.*) AS annotation
  from master_join master_join_oeneba
  join notes.note_view notes_note_lat_xoipdq on master_join_oeneba.target_id = notes_note_lat_xoipdq.id
  where master_join_oeneba.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_visdkx on TRUE
;
create index if not exists airport_heliport_surfacecontaminationlayer_id on airport_heliport.surfacecontaminationlayer_view (id);
create index if not exists airport_heliport_surfacecontaminationlayer_extent_gist on airport_heliport.surfacecontaminationlayer_view using GIST (extent_geom);
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_dwahsm.title as varchar), '(' || navaids_points_designatedpoint_pt_dwahsm.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_dwahsm.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vjmrvb.title as varchar), '(' || navaids_points_navaid_pt_vjmrvb.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_vjmrvb.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xrzdmq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xrzdmq.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_xrzdmq.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uuehln.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uuehln.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uuehln.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_baafcz.title as varchar), '(' || airport_heliport_airportheliport_pt_baafcz.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_baafcz.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_zvtvpp.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_zvtvpp.longitude AS pointchoiceposition_longitude,
    geometry_point_view_zvtvpp.latitude AS pointchoiceposition_latitude,
    geometry_point_view_zvtvpp.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_gaqkrv.title as varchar), '(' || shared_radiofrequencyarea_pt_gaqkrv.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_gaqkrv.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_mhwrdr.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_zsmybx.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dwahsm on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dwahsm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vjmrvb on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_vjmrvb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xrzdmq on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xrzdmq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uuehln on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uuehln.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_baafcz on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_baafcz.id
left join geometry.point_view geometry_point_view_zvtvpp on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_zvtvpp.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_gaqkrv on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_gaqkrv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_cvzmwb.id) as facilitymakeup
  from master_join master_join_iimugy
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_cvzmwb on master_join_iimugy.target_id = navaids_points_pointreference_lat_cvzmwb.id
  where master_join_iimugy.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_mhwrdr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kxkljj.*) AS annotation
  from master_join master_join_efkaca
  join notes.note_view notes_note_lat_kxkljj on master_join_efkaca.target_id = notes_note_lat_kxkljj.id
  where master_join_efkaca.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_zsmybx on TRUE
;
create index if not exists aerial_refuelling_aerialrefuellingpoint_id on aerial_refuelling.aerialrefuellingpoint_view (id);
create index if not exists aerial_refuelling_aerialrefuellingpoint_pointchoiceposition_gist on aerial_refuelling.aerialrefuellingpoint_view using GIST (pointchoiceposition_geom);
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_gqxbmv.title as varchar), '(' || navaids_points_designatedpoint_pt_gqxbmv.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gqxbmv.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_unrrlk.title as varchar), '(' || navaids_points_designatedpoint_pt_unrrlk.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_unrrlk.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_swojfm.title as varchar), '(' || navaids_points_navaid_pt_swojfm.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_swojfm.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_okxlda.title as varchar), '(' || navaids_points_navaid_pt_okxlda.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_okxlda.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wtaibs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wtaibs.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_wtaibs.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lpciyc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lpciyc.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_lpciyc.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kufqvf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kufqvf.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kufqvf.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bwfkae.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bwfkae.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bwfkae.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gbgaxm.title as varchar), '(' || airport_heliport_airportheliport_pt_gbgaxm.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_gbgaxm.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_guauuc.title as varchar), '(' || airport_heliport_airportheliport_pt_guauuc.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_guauuc.href::text AS startairportreferencepoint_href,
    geometry_point_view_kqwlfb.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_kqwlfb.longitude AS endposition_longitude,
    geometry_point_view_kqwlfb.latitude AS endposition_latitude,
    geometry_point_view_kqwlfb.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_olcsiy.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_olcsiy.longitude AS startposition_longitude,
    geometry_point_view_olcsiy.latitude AS startposition_latitude,
    geometry_point_view_olcsiy.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_vegtjh.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gqxbmv on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gqxbmv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_swojfm on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_swojfm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wtaibs on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wtaibs.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kufqvf on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kufqvf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gbgaxm on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_gbgaxm.id
left join geometry.point_view geometry_point_view_kqwlfb on routes.directflightsegment.end_position_id = geometry_point_view_kqwlfb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_unrrlk on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_unrrlk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_okxlda on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_okxlda.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lpciyc on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lpciyc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bwfkae on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bwfkae.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_guauuc on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_guauuc.id
left join geometry.point_view geometry_point_view_olcsiy on routes.directflightsegment.start_position_id = geometry_point_view_olcsiy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kgehav.*) AS annotation
  from master_join master_join_wtmufj
  join notes.note_view notes_note_lat_kgehav on master_join_wtmufj.target_id = notes_note_lat_kgehav.id
  where master_join_wtmufj.source_id = routes.directflightsegment.id
) as notes_note_view_vegtjh on TRUE
;
create index if not exists routes_directflightsegment_id on routes.directflightsegment_view (id);
create index if not exists routes_directflightsegment_endposition_gist on routes.directflightsegment_view using GIST (endposition_geom);
create index if not exists routes_directflightsegment_startposition_gist on routes.directflightsegment_view using GIST (startposition_geom);
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_ukwbfy.title as varchar), '(' || navaids_points_designatedpoint_pt_ukwbfy.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ukwbfy.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_szxwmh.title as varchar), '(' || navaids_points_navaid_pt_szxwmh.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_szxwmh.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vjwzja.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vjwzja.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_vjwzja.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mhkumw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mhkumw.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mhkumw.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hpicjq.title as varchar), '(' || airport_heliport_airportheliport_pt_hpicjq.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hpicjq.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_iojpro.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_iojpro.longitude AS pointchoiceposition_longitude,
    geometry_point_view_iojpro.latitude AS pointchoiceposition_latitude,
    geometry_point_view_iojpro.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_chheax.title as varchar), '(' || shared_radiofrequencyarea_pt_chheax.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_chheax.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_xklciy.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_vlxute.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ukwbfy on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ukwbfy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_szxwmh on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_szxwmh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vjwzja on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vjwzja.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mhkumw on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mhkumw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hpicjq on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hpicjq.id
left join geometry.point_view geometry_point_view_iojpro on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_iojpro.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_chheax on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_chheax.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_zkmbqf.id) as facilitymakeup
  from master_join master_join_ntrnmy
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_zkmbqf on master_join_ntrnmy.target_id = navaids_points_pointreference_lat_zkmbqf.id
  where master_join_ntrnmy.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_xklciy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mwmpnc.*) AS annotation
  from master_join master_join_dnzwdq
  join notes.note_view notes_note_lat_mwmpnc on master_join_dnzwdq.target_id = notes_note_lat_mwmpnc.id
  where master_join_dnzwdq.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_vlxute on TRUE
;
create index if not exists navaids_points_enroutesegmentpoint_id on navaids_points.enroutesegmentpoint_view (id);
create index if not exists navaids_points_enroutesegmentpoint_pointchoiceposition_gist on navaids_points.enroutesegmentpoint_view using GIST (pointchoiceposition_geom);
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_drlutt.title as varchar), '(' || airport_heliport_airportheliport_pt_drlutt.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_drlutt.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nyeajt.title as varchar), '(' || airport_heliport_airportheliport_pt_nyeajt.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_nyeajt.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_lxvjjj.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_lxvjjj.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_lxvjjj.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_ykaahe.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_ulcbvd.title as varchar), '(' || organisation_organisationauthority_pt_ulcbvd.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_ulcbvd.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_touill.title as varchar), '(' || navaids_points_designatedpoint_pt_touill.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_touill.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pdzoxg.title as varchar), '(' || navaids_points_navaid_pt_pdzoxg.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_pdzoxg.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pivmfo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pivmfo.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_pivmfo.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_llmmuc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_llmmuc.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_llmmuc.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_adonbf.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_adonbf.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_adonbf.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_adonbf.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_iyubig.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_lqqyqk.title as varchar), '(' || routes_airspacebordercrossing_pt_lqqyqk.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_lqqyqk.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_xpwlke.title as varchar), '(' || airspace_airspace_pt_xpwlke.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_xpwlke.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_rwvtrr.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ospoqy.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ospoqy.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ospoqy.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_sdrswf.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_htolgi.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_tpmuqc.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_tpmuqc.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_tpmuqc.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_lyisel.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_rurqjb.flightlevel::jsonb as flightlevel,
    notes_note_view_kglgae.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_drlutt on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_drlutt.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_lxvjjj on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_lxvjjj.id
left join routes.routeportion_pt routes_routeportion_pt_ykaahe on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_ykaahe.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ulcbvd on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_ulcbvd.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_touill on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_touill.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pdzoxg on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_pdzoxg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pivmfo on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pivmfo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_llmmuc on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_llmmuc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nyeajt on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_nyeajt.id
left join geometry.point_view geometry_point_view_adonbf on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_adonbf.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_iyubig on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_iyubig.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_lqqyqk on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_lqqyqk.id
left join airspace.airspace_pt airspace_airspace_pt_xpwlke on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_xpwlke.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_rwvtrr on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_rwvtrr.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ospoqy on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ospoqy.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_sdrswf on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_sdrswf.id
left join shared.meteorology_pt shared_meteorology_pt_htolgi on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_htolgi.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_tpmuqc on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_tpmuqc.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_lyisel on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_lyisel.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_ewmyuu.id) as flightlevel
  from master_join master_join_qkmepe
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_ewmyuu on master_join_qkmepe.target_id = routes_flightrestrictionlevel_lat_ewmyuu.id
  where master_join_qkmepe.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_rurqjb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qkttvq.*) AS annotation
  from master_join master_join_pyjres
  join notes.note_view notes_note_lat_qkttvq on master_join_pyjres.target_id = notes_note_lat_qkttvq.id
  where master_join_pyjres.source_id = routes.flightconditionelement.id
) as notes_note_view_kglgae on TRUE
;
create index if not exists routes_flightconditionelement_id on routes.flightconditionelement_view (id);
create index if not exists routes_flightconditionelement_significantpointconditionposition_gist on routes.flightconditionelement_view using GIST (significantpointconditionposition_geom);
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ldgton.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ldgton.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_ldgton.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_gecgia.title as varchar), '(' || airspace_airspace_pt_gecgia.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_gecgia.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_gwrson.title as varchar), '(' || navaids_points_designatedpoint_pt_gwrson.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gwrson.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ezprku.title as varchar), '(' || navaids_points_navaid_pt_ezprku.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_ezprku.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_aywvcc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_aywvcc.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_aywvcc.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_eotxnb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_eotxnb.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_eotxnb.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dmdbtf.title as varchar), '(' || airport_heliport_airportheliport_pt_dmdbtf.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_dmdbtf.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_llebsg.title as varchar), '(' || airport_heliport_airportheliport_pt_llebsg.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_llebsg.href::text AS elementairportheliportelement_href,
    geometry_point_view_rwwvzv.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_rwwvzv.longitude AS pointelementposition_longitude,
    geometry_point_view_rwwvzv.latitude AS pointelementposition_latitude,
    geometry_point_view_rwwvzv.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_qjjryt.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_tkalcy.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_tkalcy.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_tkalcy.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_wfpdla.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_opzbrh.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_opzbrh.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_opzbrh.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_iezarc.flightlevel::jsonb as flightlevel,
    notes_note_view_vandsw.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ldgton on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_ldgton.id
left join airspace.airspace_pt airspace_airspace_pt_gecgia on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_gecgia.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gwrson on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gwrson.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ezprku on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_ezprku.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_aywvcc on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_aywvcc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_eotxnb on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_eotxnb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dmdbtf on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_dmdbtf.id
left join geometry.point_view geometry_point_view_rwwvzv on routes.flightroutingelement.pointelement_position_id = geometry_point_view_rwwvzv.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_qjjryt on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_qjjryt.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_tkalcy on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_tkalcy.id
left join routes.routeportion_pt routes_routeportion_pt_wfpdla on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_wfpdla.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_llebsg on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_llebsg.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_opzbrh on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_opzbrh.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_btfmwx.id) as flightlevel
  from master_join master_join_ssrmau
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_btfmwx on master_join_ssrmau.target_id = routes_flightrestrictionlevel_lat_btfmwx.id
  where master_join_ssrmau.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_iezarc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lbkndd.*) AS annotation
  from master_join master_join_cgfszw
  join notes.note_view notes_note_lat_lbkndd on master_join_cgfszw.target_id = notes_note_lat_lbkndd.id
  where master_join_cgfszw.source_id = routes.flightroutingelement.id
) as notes_note_view_vandsw on TRUE
;
create index if not exists routes_flightroutingelement_id on routes.flightroutingelement_view (id);
create index if not exists routes_flightroutingelement_pointelementposition_gist on routes.flightroutingelement_view using GIST (pointelementposition_geom);
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_gskjhp.title as varchar), '(' || navaids_points_designatedpoint_pt_gskjhp.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gskjhp.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_utkhyn.title as varchar), '(' || navaids_points_designatedpoint_pt_utkhyn.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_utkhyn.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_wjdxyy.title as varchar), '(' || navaids_points_designatedpoint_pt_wjdxyy.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_wjdxyy.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_yejydf.title as varchar), '(' || navaids_points_navaid_pt_yejydf.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_yejydf.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_xrgutg.title as varchar), '(' || navaids_points_navaid_pt_xrgutg.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_xrgutg.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_yxgfqp.title as varchar), '(' || navaids_points_navaid_pt_yxgfqp.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_yxgfqp.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pypgxr.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pypgxr.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_pypgxr.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fldneb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fldneb.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_fldneb.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hwwwqy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hwwwqy.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_hwwwqy.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_pqzjdo.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_pqzjdo.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_pqzjdo.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vkzzex.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vkzzex.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vkzzex.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wlreqt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wlreqt.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wlreqt.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kjenrc.title as varchar), '(' || airport_heliport_airportheliport_pt_kjenrc.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_kjenrc.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tgvwht.title as varchar), '(' || airport_heliport_airportheliport_pt_tgvwht.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_tgvwht.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zrexyo.title as varchar), '(' || airport_heliport_airportheliport_pt_zrexyo.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_zrexyo.href::text AS endairportreferencepoint_href,
    geometry_point_view_dqwmze.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_dqwmze.longitude AS startposition_longitude,
    geometry_point_view_dqwmze.latitude AS startposition_latitude,
    geometry_point_view_dqwmze.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_woopab.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_woopab.longitude AS intermediatepointposition_longitude,
    geometry_point_view_woopab.latitude AS intermediatepointposition_latitude,
    geometry_point_view_woopab.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_cklrvq.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_cklrvq.longitude AS endposition_longitude,
    geometry_point_view_cklrvq.latitude AS endposition_latitude,
    geometry_point_view_cklrvq.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_oolcto.title as varchar), '(' || routes_route_pt_oolcto.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_oolcto.href::text AS referencedroute_href,
    notes_note_view_irtqwk.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gskjhp on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gskjhp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yejydf on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_yejydf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pypgxr on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pypgxr.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_pqzjdo on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_pqzjdo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kjenrc on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_kjenrc.id
left join geometry.point_view geometry_point_view_dqwmze on routes.routeportion.start_position_id = geometry_point_view_dqwmze.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_utkhyn on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_utkhyn.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xrgutg on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_xrgutg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fldneb on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fldneb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vkzzex on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vkzzex.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tgvwht on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_tgvwht.id
left join geometry.point_view geometry_point_view_woopab on routes.routeportion.intermediatepoint_position_id = geometry_point_view_woopab.id
left join routes.route_pt routes_route_pt_oolcto on routes.routeportion.referencedroute_id = routes_route_pt_oolcto.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wjdxyy on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wjdxyy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yxgfqp on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_yxgfqp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hwwwqy on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hwwwqy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wlreqt on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wlreqt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zrexyo on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_zrexyo.id
left join geometry.point_view geometry_point_view_cklrvq on routes.routeportion.end_position_id = geometry_point_view_cklrvq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nkirjj.*) AS annotation
  from master_join master_join_bkctyo
  join notes.note_view notes_note_lat_nkirjj on master_join_bkctyo.target_id = notes_note_lat_nkirjj.id
  where master_join_bkctyo.source_id = routes.routeportion.id
) as notes_note_view_irtqwk on TRUE
;
create index if not exists routes_routeportion_id on routes.routeportion_view (id);
create index if not exists routes_routeportion_startposition_gist on routes.routeportion_view using GIST (startposition_geom);
create index if not exists routes_routeportion_intermediatepointposition_gist on routes.routeportion_view using GIST (intermediatepointposition_geom);
create index if not exists routes_routeportion_endposition_gist on routes.routeportion_view using GIST (endposition_geom);
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_btexql.title as varchar), '(' || navaids_points_designatedpoint_pt_btexql.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_btexql.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_whtznf.title as varchar), '(' || navaids_points_navaid_pt_whtznf.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_whtznf.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_urshjv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_urshjv.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_urshjv.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dtzias.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dtzias.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dtzias.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ohygss.title as varchar), '(' || airport_heliport_airportheliport_pt_ohygss.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ohygss.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_hpleko.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_hpleko.longitude AS pointchoiceposition_longitude,
    geometry_point_view_hpleko.latitude AS pointchoiceposition_latitude,
    geometry_point_view_hpleko.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_xwlmpt.title as varchar), '(' || shared_radiofrequencyarea_pt_xwlmpt.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_xwlmpt.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_gksgzt.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_kvyktp.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_btexql on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_btexql.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_whtznf on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_whtznf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_urshjv on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_urshjv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dtzias on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dtzias.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ohygss on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ohygss.id
left join geometry.point_view geometry_point_view_hpleko on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_hpleko.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_xwlmpt on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_xwlmpt.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_zdfbwa.id) as facilitymakeup
  from master_join master_join_ezxvoo
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_zdfbwa on master_join_ezxvoo.target_id = navaids_points_pointreference_lat_zdfbwa.id
  where master_join_ezxvoo.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_gksgzt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_agoufo.*) AS annotation
  from master_join master_join_zwsahh
  join notes.note_view notes_note_lat_agoufo on master_join_zwsahh.target_id = notes_note_lat_agoufo.id
  where master_join_zwsahh.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_kvyktp on TRUE
;
create index if not exists navaids_points_terminalsegmentpoint_id on navaids_points.terminalsegmentpoint_view (id);
create index if not exists navaids_points_terminalsegmentpoint_pointchoiceposition_gist on navaids_points.terminalsegmentpoint_view using GIST (pointchoiceposition_geom);
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_uwxtpb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_uwxtpb.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_zcuvly.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_mcdgdc.point::jsonb as point,
    notes_note_view_karsrz.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_uwxtpb on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_uwxtpb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_aroien.id) as verticalextent
  from master_join master_join_zbsfbq
  join shared.airspacelayer_pt shared_airspacelayer_lat_aroien on master_join_zbsfbq.target_id = shared_airspacelayer_lat_aroien.id
  where master_join_zbsfbq.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_zcuvly on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_rzxdhx.id) as point
  from master_join master_join_rppbgk
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_rzxdhx on master_join_rppbgk.target_id = aerial_refuelling_aerialrefuellingpoint_lat_rzxdhx.id
  where master_join_rppbgk.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_mcdgdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfnhqi.*) AS annotation
  from master_join master_join_ggyxem
  join notes.note_view notes_note_lat_tfnhqi on master_join_ggyxem.target_id = notes_note_lat_tfnhqi.id
  where master_join_ggyxem.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_karsrz on TRUE
;
create index if not exists aerial_refuelling_aerialrefuellinganchor_id on aerial_refuelling.aerialrefuellinganchor_view (id);
create index if not exists aerial_refuelling_aerialrefuellinganchor_extent_gist on aerial_refuelling.aerialrefuellinganchor_view using GIST (extent_geom);
-- AirspaceVolumePropertyType
-- ['notes.note_view', 'geometry.surface_view', 'geometry.curve_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_hhsrwo.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_hhsrwo.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_ipjdgk.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_ipjdgk.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_kmpdla.id)::jsonb AS contributorairspace,
    notes_note_view_zlihwq.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_hhsrwo on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_hhsrwo.id
left join geometry.curve_view geometry_curve_view_ipjdgk on airspace.airspacevolume.centreline_id = geometry_curve_view_ipjdgk.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_kmpdla on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_kmpdla.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtluai.*) AS annotation
  from master_join master_join_suefbo
  join notes.note_view notes_note_lat_rtluai on master_join_suefbo.target_id = notes_note_lat_rtluai.id
  where master_join_suefbo.source_id = airspace.airspacevolume.id
) as notes_note_view_zlihwq on TRUE
;
create index if not exists airspace_airspacevolume_id on airspace.airspacevolume_view (id);
create index if not exists airspace_airspacevolume_horizontalprojection_gist on airspace.airspacevolume_view using GIST (horizontalprojection_geom);
create index if not exists airspace_airspacevolume_centreline_gist on airspace.airspacevolume_view using GIST (centreline_geom);
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_umldnh.id)::jsonb AS sectordefinition,
    geometry_surface_view_enziqr.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_enziqr.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_kwkegt.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_gpngor.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_wfukpp.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_umldnh on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_umldnh.id
left join geometry.surface_view geometry_surface_view_enziqr on procedure.navigationareasector.extent_id = geometry_surface_view_enziqr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ikgqsn.id) as significantobstacle
  from master_join master_join_qstidq
  join shared.obstruction_pt shared_obstruction_lat_ikgqsn on master_join_qstidq.target_id = shared_obstruction_lat_ikgqsn.id
  where master_join_qstidq.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_kwkegt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_qnzydu.id) as sectorcriteria
  from master_join master_join_fjxvoe
  join procedure.sectordesign_pt procedure_sectordesign_lat_qnzydu on master_join_fjxvoe.target_id = procedure_sectordesign_lat_qnzydu.id
  where master_join_fjxvoe.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_gpngor on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_msqymc.*) AS annotation
  from master_join master_join_uekidz
  join notes.note_view notes_note_lat_msqymc on master_join_uekidz.target_id = notes_note_lat_msqymc.id
  where master_join_uekidz.source_id = procedure.navigationareasector.id
) as notes_note_view_wfukpp on TRUE
;
create index if not exists procedure_navigationareasector_id on procedure.navigationareasector_view (id);
create index if not exists procedure_navigationareasector_extent_gist on procedure.navigationareasector_view using GIST (extent_geom);
-- ObstacleAssessmentAreaPropertyType
-- ['notes.note_view', 'geometry.surface_view', 'geometry.curve_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_gafpmf.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_gafpmf.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_jbjksf.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_jbjksf.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_hqtxlm.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_mabfaf.significantobstacle::jsonb as significantobstacle,
    notes_note_view_itvvpt.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_gafpmf on shared.obstacleassessmentarea.surface_id = geometry_surface_view_gafpmf.id
left join geometry.curve_view geometry_curve_view_jbjksf on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_jbjksf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vhdnrd.id) as aircraftcategory
  from master_join master_join_qlijde
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_vhdnrd on master_join_qlijde.target_id = shared_aircraftcharacteristic_lat_vhdnrd.id
  where master_join_qlijde.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_hqtxlm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_gndrus.id) as significantobstacle
  from master_join master_join_tkkzir
  join shared.obstruction_pt shared_obstruction_lat_gndrus on master_join_tkkzir.target_id = shared_obstruction_lat_gndrus.id
  where master_join_tkkzir.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_mabfaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jezyuw.*) AS annotation
  from master_join master_join_bwqhen
  join notes.note_view notes_note_lat_jezyuw on master_join_bwqhen.target_id = notes_note_lat_jezyuw.id
  where master_join_bwqhen.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_itvvpt on TRUE
;
create index if not exists shared_obstacleassessmentarea_id on shared.obstacleassessmentarea_view (id);
create index if not exists shared_obstacleassessmentarea_surface_gist on shared.obstacleassessmentarea_view using GIST (surface_geom);
create index if not exists shared_obstacleassessmentarea_startingcurve_gist on shared.obstacleassessmentarea_view using GIST (startingcurve_geom);
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_ubczry.title as varchar), '(' || navaids_points_designatedpoint_pt_ubczry.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_ubczry.href::text AS point_href,
    geometry_surface_view_dvvcjr.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_dvvcjr.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_teoijy.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_mnksyv.facilitydistance::jsonb as facilitydistance,
    notes_note_view_cpgeqe.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ubczry on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_ubczry.id
left join geometry.surface_view geometry_surface_view_dvvcjr on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_dvvcjr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_ttgepz.id) as facilityangle
  from master_join master_join_hfakwa
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_ttgepz on master_join_hfakwa.target_id = navaids_points_angleuse_lat_ttgepz.id
  where master_join_hfakwa.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_teoijy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_hmugmn.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_hmugmn.title AS varchar), '(' || navaids_points_distanceindication_lat_hmugmn.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_hmugmn.href
  )) as facilitydistance  from master_join master_join_hhdvnx
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_hmugmn on master_join_hhdvnx.target_id = navaids_points_distanceindication_lat_hmugmn.id
  where master_join_hhdvnx.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_mnksyv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qspwzm.*) AS annotation
  from master_join master_join_pxlzai
  join notes.note_view notes_note_lat_qspwzm on master_join_pxlzai.target_id = notes_note_lat_qspwzm.id
  where master_join_pxlzai.source_id = navaids_points.pointreference.id
) as notes_note_view_cpgeqe on TRUE
;
create index if not exists navaids_points_pointreference_id on navaids_points.pointreference_view (id);
create index if not exists navaids_points_pointreference_fixtolerancearea_gist on navaids_points.pointreference_view using GIST (fixtolerancearea_geom);
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_jxdzyj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_jxdzyj.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_cklktp.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_bujqiq.significantobstacle::jsonb as significantobstacle,
    notes_note_view_wbjznn.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_jxdzyj on procedure.safealtitudeareasector.extent_id = geometry_surface_view_jxdzyj.id
left join shared.circlesector_pt shared_circlesector_pt_cklktp on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_cklktp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ujbbdj.id) as significantobstacle
  from master_join master_join_ahnnkg
  join shared.obstruction_pt shared_obstruction_lat_ujbbdj on master_join_ahnnkg.target_id = shared_obstruction_lat_ujbbdj.id
  where master_join_ahnnkg.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_bujqiq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_svwzmm.*) AS annotation
  from master_join master_join_vlhifj
  join notes.note_view notes_note_lat_svwzmm on master_join_vlhifj.target_id = notes_note_lat_svwzmm.id
  where master_join_vlhifj.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_wbjznn on TRUE
;
create index if not exists procedure_safealtitudeareasector_id on procedure.safealtitudeareasector_view (id);
create index if not exists procedure_safealtitudeareasector_extent_gist on procedure.safealtitudeareasector_view using GIST (extent_geom);
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_cbomgn.id)::jsonb AS sectordefinition,
    geometry_surface_view_lyeprl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_lyeprl.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_ukkeht.significantobstacle::jsonb as significantobstacle,
    notes_note_view_ucbeqf.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_cbomgn on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_cbomgn.id
left join geometry.surface_view geometry_surface_view_lyeprl on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_lyeprl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ruvoxd.id) as significantobstacle
  from master_join master_join_etbmyb
  join shared.obstruction_pt shared_obstruction_lat_ruvoxd on master_join_etbmyb.target_id = shared_obstruction_lat_ruvoxd.id
  where master_join_etbmyb.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_ukkeht on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ucqcxr.*) AS annotation
  from master_join master_join_uypsns
  join notes.note_view notes_note_lat_ucqcxr on master_join_uypsns.target_id = notes_note_lat_ucqcxr.id
  where master_join_uypsns.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_ucbeqf on TRUE
;
create index if not exists procedure_terminalarrivalareasector_id on procedure.terminalarrivalareasector_view (id);
create index if not exists procedure_terminalarrivalareasector_extent_gist on procedure.terminalarrivalareasector_view using GIST (extent_geom);
-- AirportHeliportAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_beuece.timeinterval::jsonb as timeinterval,
    notes_note_view_uaajyr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lckyag.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_bhfioi.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_rozqmf.*) AS timeinterval
  from master_join master_join_wdxrpi
  join shared.timesheet_view shared_timesheet_lat_rozqmf on master_join_wdxrpi.target_id = shared_timesheet_lat_rozqmf.id
  where master_join_wdxrpi.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_beuece on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wmjmer.*) AS annotation
  from master_join master_join_azlosp
  join notes.note_view notes_note_lat_wmjmer on master_join_azlosp.target_id = notes_note_lat_wmjmer.id
  where master_join_azlosp.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_uaajyr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ysxsjs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ysxsjs.title AS varchar), '(' || organisation_organisationauthority_lat_ysxsjs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ysxsjs.href
  )) as specialdateauthority  from master_join master_join_tzdlnx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ysxsjs on master_join_tzdlnx.target_id = organisation_organisationauthority_lat_ysxsjs.id
  where master_join_tzdlnx.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_lckyag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_tepqfj.id) as usage
  from master_join master_join_oyoxrc
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_tepqfj on master_join_oyoxrc.target_id = airport_heliport_airportheliportusage_lat_tepqfj.id
  where master_join_oyoxrc.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_bhfioi on TRUE
;
create index if not exists airport_heliport_airportheliportavailability_id on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_eomuyq.title as varchar), '(' || organisation_organisationauthority_pt_eomuyq.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_eomuyq.href::text AS theorganisationauthority_href,
    shared_timesheet_view_kgyjce.timeinterval::jsonb as timeinterval,
    notes_note_view_warwrp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pxllgg.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_eomuyq on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_eomuyq.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qprfge.*) AS timeinterval
  from master_join master_join_zfrknf
  join shared.timesheet_view shared_timesheet_lat_qprfge on master_join_zfrknf.target_id = shared_timesheet_lat_qprfge.id
  where master_join_zfrknf.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_kgyjce on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_teomsw.*) AS annotation
  from master_join master_join_vodoki
  join notes.note_view notes_note_lat_teomsw on master_join_vodoki.target_id = notes_note_lat_teomsw.id
  where master_join_vodoki.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_warwrp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ygnwyo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ygnwyo.title AS varchar), '(' || organisation_organisationauthority_lat_ygnwyo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ygnwyo.href
  )) as specialdateauthority  from master_join master_join_sxgvso
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ygnwyo on master_join_sxgvso.target_id = organisation_organisationauthority_lat_ygnwyo.id
  where master_join_sxgvso.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_pxllgg on TRUE
;
create index if not exists airport_heliport_airportheliportresponsibilityorganisation_id on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_dpugcc.timeinterval::jsonb as timeinterval,
    notes_note_view_vlbcdz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_fzadkm.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_ragqpw.user::jsonb as user,
    shared_airspacelayer_pt_rtujyw.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_xmsixw.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_aktlot.*) AS timeinterval
  from master_join master_join_datgou
  join shared.timesheet_view shared_timesheet_lat_aktlot on master_join_datgou.target_id = shared_timesheet_lat_aktlot.id
  where master_join_datgou.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_dpugcc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xienbs.*) AS annotation
  from master_join master_join_ghahku
  join notes.note_view notes_note_lat_xienbs on master_join_ghahku.target_id = notes_note_lat_xienbs.id
  where master_join_ghahku.source_id = airspace.airspaceactivation.id
) as notes_note_view_vlbcdz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xinzhi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xinzhi.title AS varchar), '(' || organisation_organisationauthority_lat_xinzhi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xinzhi.href
  )) as specialdateauthority  from master_join master_join_lkpcbh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xinzhi on master_join_lkpcbh.target_id = organisation_organisationauthority_lat_xinzhi.id
  where master_join_lkpcbh.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_fzadkm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_jgskyk.id) as levels
  from master_join master_join_iyobpj
  join shared.airspacelayer_pt shared_airspacelayer_lat_jgskyk on master_join_iyobpj.target_id = shared_airspacelayer_lat_jgskyk.id
  where master_join_iyobpj.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_rtujyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_frczxf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_frczxf.title AS varchar), '(' || organisation_organisationauthority_lat_frczxf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_frczxf.href
  )) as user  from master_join master_join_yumgpy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_frczxf on master_join_yumgpy.target_id = organisation_organisationauthority_lat_frczxf.id
  where master_join_yumgpy.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_ragqpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_huftsi.id) as aircraft
  from master_join master_join_gaajus
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_huftsi on master_join_gaajus.target_id = shared_aircraftcharacteristic_lat_huftsi.id
  where master_join_gaajus.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_xmsixw on TRUE
;
create index if not exists airspace_airspaceactivation_id on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_wytuid.timeinterval::jsonb as timeinterval,
    notes_note_view_mitste.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jiqkaw.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_sngfrs.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ytiftu.*) AS timeinterval
  from master_join master_join_yertnk
  join shared.timesheet_view shared_timesheet_lat_ytiftu on master_join_yertnk.target_id = shared_timesheet_lat_ytiftu.id
  where master_join_yertnk.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_wytuid on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izeajb.*) AS annotation
  from master_join master_join_sdfqkd
  join notes.note_view notes_note_lat_izeajb on master_join_sdfqkd.target_id = notes_note_lat_izeajb.id
  where master_join_sdfqkd.source_id = airspace.airspacelayerclass.id
) as notes_note_view_mitste on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gyxpry.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gyxpry.title AS varchar), '(' || organisation_organisationauthority_lat_gyxpry.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gyxpry.href
  )) as specialdateauthority  from master_join master_join_lmwtks
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gyxpry on master_join_lmwtks.target_id = organisation_organisationauthority_lat_gyxpry.id
  where master_join_lmwtks.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_jiqkaw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_vxfwcv.id) as associatedlevels
  from master_join master_join_hvinqf
  join shared.airspacelayer_pt shared_airspacelayer_lat_vxfwcv on master_join_hvinqf.target_id = shared_airspacelayer_lat_vxfwcv.id
  where master_join_hvinqf.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_sngfrs on TRUE
;
create index if not exists airspace_airspacelayerclass_id on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_cwtmdc.timeinterval::jsonb as timeinterval,
    notes_note_view_oijxrr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_iscdua.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_shsynb.*) AS timeinterval
  from master_join master_join_sqpbjy
  join shared.timesheet_view shared_timesheet_lat_shsynb on master_join_sqpbjy.target_id = shared_timesheet_lat_shsynb.id
  where master_join_sqpbjy.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_cwtmdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gnbitw.*) AS annotation
  from master_join master_join_tqfgnj
  join notes.note_view notes_note_lat_gnbitw on master_join_tqfgnj.target_id = notes_note_lat_gnbitw.id
  where master_join_tqfgnj.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_oijxrr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rqgtky.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rqgtky.title AS varchar), '(' || organisation_organisationauthority_lat_rqgtky.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rqgtky.href
  )) as specialdateauthority  from master_join master_join_imhgem
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rqgtky on master_join_imhgem.target_id = organisation_organisationauthority_lat_rqgtky.id
  where master_join_imhgem.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_iscdua on TRUE
;
create index if not exists airport_heliport_altimetersourcestatus_id on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_wywqat.timeinterval::jsonb as timeinterval,
    notes_note_view_uyslpc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_nkobte.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_gniklz.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bmjrhs.*) AS timeinterval
  from master_join master_join_bdnpru
  join shared.timesheet_view shared_timesheet_lat_bmjrhs on master_join_bdnpru.target_id = shared_timesheet_lat_bmjrhs.id
  where master_join_bdnpru.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_wywqat on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_anxare.*) AS annotation
  from master_join master_join_erfemz
  join notes.note_view notes_note_lat_anxare on master_join_erfemz.target_id = notes_note_lat_anxare.id
  where master_join_erfemz.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_uyslpc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_elfekg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_elfekg.title AS varchar), '(' || organisation_organisationauthority_lat_elfekg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_elfekg.href
  )) as specialdateauthority  from master_join master_join_lkddjy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_elfekg on master_join_lkddjy.target_id = organisation_organisationauthority_lat_elfekg.id
  where master_join_lkddjy.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_nkobte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_xjgrgo.id) as usage
  from master_join master_join_dvnkly
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_xjgrgo on master_join_dvnkly.target_id = airport_heliport_apronareausage_lat_xjgrgo.id
  where master_join_dvnkly.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_gniklz on TRUE
;
create index if not exists airport_heliport_apronareaavailability_id on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['notes.note_view', 'geometry.surface_view', 'shared.timesheet_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_qerenf.id)::jsonb AS sectordescription,
    geometry_surface_view_jaqlwz.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_jaqlwz.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_otkagn.timeinterval::jsonb as timeinterval,
    notes_note_view_ljuizi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_norplg.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_qerenf on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_qerenf.id
left join geometry.surface_view geometry_surface_view_jaqlwz on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_jaqlwz.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_paxkbo.*) AS timeinterval
  from master_join master_join_occxxe
  join shared.timesheet_view shared_timesheet_lat_paxkbo on master_join_occxxe.target_id = shared_timesheet_lat_paxkbo.id
  where master_join_occxxe.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_otkagn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sdeeva.*) AS annotation
  from master_join master_join_peolwz
  join notes.note_view notes_note_lat_sdeeva on master_join_peolwz.target_id = notes_note_lat_sdeeva.id
  where master_join_peolwz.source_id = procedure.circlingrestriction.id
) as notes_note_view_ljuizi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_abzudj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_abzudj.title AS varchar), '(' || organisation_organisationauthority_lat_abzudj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_abzudj.href
  )) as specialdateauthority  from master_join master_join_jvxucy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_abzudj on master_join_jvxucy.target_id = organisation_organisationauthority_lat_abzudj.id
  where master_join_jvxucy.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_norplg on TRUE
;
create index if not exists procedure_circlingrestriction_id on procedure.circlingrestriction_view (id);
create index if not exists procedure_circlingrestriction_restrictionarea_gist on procedure.circlingrestriction_view using GIST (restrictionarea_geom);
-- ConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_ywchmm.timeinterval::jsonb as timeinterval,
    notes_note_view_lnrzei.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_thjmsb.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_hdevud.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_rdjosj.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_xeeefe.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_yhtruq.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ungegc.*) AS timeinterval
  from master_join master_join_ltbzmk
  join shared.timesheet_view shared_timesheet_lat_ungegc on master_join_ltbzmk.target_id = shared_timesheet_lat_ungegc.id
  where master_join_ltbzmk.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_ywchmm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lirjzr.*) AS annotation
  from master_join master_join_quduak
  join notes.note_view notes_note_lat_lirjzr on master_join_quduak.target_id = notes_note_lat_lirjzr.id
  where master_join_quduak.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_lnrzei on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vlreug.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vlreug.title AS varchar), '(' || organisation_organisationauthority_lat_vlreug.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vlreug.href
  )) as specialdateauthority  from master_join master_join_rstahr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vlreug on master_join_rstahr.target_id = organisation_organisationauthority_lat_vlreug.id
  where master_join_rstahr.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_thjmsb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_cyjfdr.id) as weather
  from master_join master_join_wjwwmi
  join shared.meteorology_pt shared_meteorology_lat_cyjfdr on master_join_wjwwmi.target_id = shared_meteorology_lat_cyjfdr.id
  where master_join_wjwwmi.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_hdevud on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_fenitf.id) as aircraft
  from master_join master_join_qctusi
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_fenitf on master_join_qctusi.target_id = shared_aircraftcharacteristic_lat_fenitf.id
  where master_join_qctusi.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_rdjosj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_ddkgkc.id) as flight
  from master_join master_join_jfxkki
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_ddkgkc on master_join_jfxkki.target_id = shared_flightcharacteristic_lat_ddkgkc.id
  where master_join_jfxkki.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_xeeefe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_wcbbom.id) as subcondition
  from master_join master_join_biotye
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_wcbbom on master_join_biotye.target_id = airport_heliport_conditioncombination_lat_wcbbom.id
  where master_join_biotye.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_yhtruq on TRUE
;
create index if not exists airport_heliport_conditioncombination_id on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_ugipze.timeinterval::jsonb as timeinterval,
    notes_note_view_vzsmfw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ysampz.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_kjofgh.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nqqtwq.*) AS timeinterval
  from master_join master_join_xftqsu
  join shared.timesheet_view shared_timesheet_lat_nqqtwq on master_join_xftqsu.target_id = shared_timesheet_lat_nqqtwq.id
  where master_join_xftqsu.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_ugipze on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ngfdzq.*) AS annotation
  from master_join master_join_voqatx
  join notes.note_view notes_note_lat_ngfdzq on master_join_voqatx.target_id = notes_note_lat_ngfdzq.id
  where master_join_voqatx.source_id = routes.flightconditioncombination.id
) as notes_note_view_vzsmfw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vggdju.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vggdju.title AS varchar), '(' || organisation_organisationauthority_lat_vggdju.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vggdju.href
  )) as specialdateauthority  from master_join master_join_wnoqqi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vggdju on master_join_wnoqqi.target_id = organisation_organisationauthority_lat_vggdju.id
  where master_join_wnoqqi.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_ysampz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_hmcuts.id) as element
  from master_join master_join_qkjzxv
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_hmcuts on master_join_qkjzxv.target_id = routes_flightconditionelement_lat_hmcuts.id
  where master_join_qkjzxv.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_kjofgh on TRUE
;
create index if not exists routes_flightconditioncombination_id on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_zmsoyw.timeinterval::jsonb as timeinterval,
    notes_note_view_zqssmy.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ehpeyr.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zujihd.*) AS timeinterval
  from master_join master_join_chzwdy
  join shared.timesheet_view shared_timesheet_lat_zujihd on master_join_chzwdy.target_id = shared_timesheet_lat_zujihd.id
  where master_join_chzwdy.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_zmsoyw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_imxnmg.*) AS annotation
  from master_join master_join_glowql
  join notes.note_view notes_note_lat_imxnmg on master_join_glowql.target_id = notes_note_lat_imxnmg.id
  where master_join_glowql.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_zqssmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_oenmbm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_oenmbm.title AS varchar), '(' || organisation_organisationauthority_lat_oenmbm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_oenmbm.href
  )) as specialdateauthority  from master_join master_join_ovkgoa
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_oenmbm on master_join_ovkgoa.target_id = organisation_organisationauthority_lat_oenmbm.id
  where master_join_ovkgoa.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_ehpeyr on TRUE
;
create index if not exists airport_heliport_groundlightingavailability_id on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_phagpc.timeinterval::jsonb as timeinterval,
    notes_note_view_uaxjgu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xvxorb.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bdzosd.*) AS timeinterval
  from master_join master_join_hkehti
  join shared.timesheet_view shared_timesheet_lat_bdzosd on master_join_hkehti.target_id = shared_timesheet_lat_bdzosd.id
  where master_join_hkehti.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_phagpc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygjgsp.*) AS annotation
  from master_join master_join_zxpngd
  join notes.note_view notes_note_lat_ygjgsp on master_join_zxpngd.target_id = notes_note_lat_ygjgsp.id
  where master_join_zxpngd.source_id = shared.lightelementstatus.id
) as notes_note_view_uaxjgu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wfxlvg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wfxlvg.title AS varchar), '(' || organisation_organisationauthority_lat_wfxlvg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wfxlvg.href
  )) as specialdateauthority  from master_join master_join_urjejs
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wfxlvg on master_join_urjejs.target_id = organisation_organisationauthority_lat_wfxlvg.id
  where master_join_urjejs.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_xvxorb on TRUE
;
create index if not exists shared_lightelementstatus_id on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_lkztpm.timeinterval::jsonb as timeinterval,
    notes_note_view_emjmgr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qjsnol.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_mhntms.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kltsiw.*) AS timeinterval
  from master_join master_join_dxdndi
  join shared.timesheet_view shared_timesheet_lat_kltsiw on master_join_dxdndi.target_id = shared_timesheet_lat_kltsiw.id
  where master_join_dxdndi.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_lkztpm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wlqvkb.*) AS annotation
  from master_join master_join_xomumh
  join notes.note_view notes_note_lat_wlqvkb on master_join_xomumh.target_id = notes_note_lat_wlqvkb.id
  where master_join_xomumh.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_emjmgr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_eokivf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_eokivf.title AS varchar), '(' || organisation_organisationauthority_lat_eokivf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_eokivf.href
  )) as specialdateauthority  from master_join master_join_asjisn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_eokivf on master_join_asjisn.target_id = organisation_organisationauthority_lat_eokivf.id
  where master_join_asjisn.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_qjsnol on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_jcxjms.id) as usage
  from master_join master_join_iswubf
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_jcxjms on master_join_iswubf.target_id = airport_heliport_manoeuvringareausage_lat_jcxjms.id
  where master_join_iswubf.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_mhntms on TRUE
;
create index if not exists airport_heliport_manoeuvringareaavailability_id on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_smgtlf.timeinterval::jsonb as timeinterval,
    notes_note_view_hsaosl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ohuvsv.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xnlmbb.*) AS timeinterval
  from master_join master_join_unqtmi
  join shared.timesheet_view shared_timesheet_lat_xnlmbb on master_join_unqtmi.target_id = shared_timesheet_lat_xnlmbb.id
  where master_join_unqtmi.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_smgtlf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ubdtor.*) AS annotation
  from master_join master_join_inylre
  join notes.note_view notes_note_lat_ubdtor on master_join_inylre.target_id = notes_note_lat_ubdtor.id
  where master_join_inylre.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_hsaosl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mjmats.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mjmats.title AS varchar), '(' || organisation_organisationauthority_lat_mjmats.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mjmats.href
  )) as specialdateauthority  from master_join master_join_gyqexq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mjmats on master_join_gyqexq.target_id = organisation_organisationauthority_lat_mjmats.id
  where master_join_gyqexq.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_ohuvsv on TRUE
;
create index if not exists navaids_points_navaidequipmentmonitoring_id on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_vnfvwx.timeinterval::jsonb as timeinterval,
    notes_note_view_lswmhq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gtefjz.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_oaqzjm.*) AS timeinterval
  from master_join master_join_birzdm
  join shared.timesheet_view shared_timesheet_lat_oaqzjm on master_join_birzdm.target_id = shared_timesheet_lat_oaqzjm.id
  where master_join_birzdm.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_vnfvwx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vokbng.*) AS annotation
  from master_join master_join_spxlya
  join notes.note_view notes_note_lat_vokbng on master_join_spxlya.target_id = notes_note_lat_vokbng.id
  where master_join_spxlya.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_lswmhq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dwanej.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dwanej.title AS varchar), '(' || organisation_organisationauthority_lat_dwanej.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dwanej.href
  )) as specialdateauthority  from master_join master_join_xiechp
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dwanej on master_join_xiechp.target_id = organisation_organisationauthority_lat_dwanej.id
  where master_join_xiechp.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_gtefjz on TRUE
;
create index if not exists navaids_points_navaidoperationalstatus_id on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_rpclev.timeinterval::jsonb as timeinterval,
    notes_note_view_bcbrfp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ykjaeo.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ucxfjh.*) AS timeinterval
  from master_join master_join_ftsdtj
  join shared.timesheet_view shared_timesheet_lat_ucxfjh on master_join_ftsdtj.target_id = shared_timesheet_lat_ucxfjh.id
  where master_join_ftsdtj.source_id = shared.onlinecontact.id
) as shared_timesheet_view_rpclev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ulyajq.*) AS annotation
  from master_join master_join_mhtnfh
  join notes.note_view notes_note_lat_ulyajq on master_join_mhtnfh.target_id = notes_note_lat_ulyajq.id
  where master_join_mhtnfh.source_id = shared.onlinecontact.id
) as notes_note_view_bcbrfp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mvmogc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mvmogc.title AS varchar), '(' || organisation_organisationauthority_lat_mvmogc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mvmogc.href
  )) as specialdateauthority  from master_join master_join_pjnisf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mvmogc on master_join_pjnisf.target_id = organisation_organisationauthority_lat_mvmogc.id
  where master_join_pjnisf.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_ykjaeo on TRUE
;
create index if not exists shared_onlinecontact_id on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_urllos.timeinterval::jsonb as timeinterval,
    notes_note_view_efxzhi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_wzafco.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uxxlyi.*) AS timeinterval
  from master_join master_join_jtyrzq
  join shared.timesheet_view shared_timesheet_lat_uxxlyi on master_join_jtyrzq.target_id = shared_timesheet_lat_uxxlyi.id
  where master_join_jtyrzq.source_id = shared.postaladdress.id
) as shared_timesheet_view_urllos on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gtgjwm.*) AS annotation
  from master_join master_join_xvcsjv
  join notes.note_view notes_note_lat_gtgjwm on master_join_xvcsjv.target_id = notes_note_lat_gtgjwm.id
  where master_join_xvcsjv.source_id = shared.postaladdress.id
) as notes_note_view_efxzhi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qovamc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qovamc.title AS varchar), '(' || organisation_organisationauthority_lat_qovamc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qovamc.href
  )) as specialdateauthority  from master_join master_join_tjvuwv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qovamc on master_join_tjvuwv.target_id = organisation_organisationauthority_lat_qovamc.id
  where master_join_tjvuwv.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_wzafco on TRUE
;
create index if not exists shared_postaladdress_id on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_vhqpcg.timeinterval::jsonb as timeinterval,
    notes_note_view_kghpkr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mnghwx.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_middlm.*) AS timeinterval
  from master_join master_join_iocibo
  join shared.timesheet_view shared_timesheet_lat_middlm on master_join_iocibo.target_id = shared_timesheet_lat_middlm.id
  where master_join_iocibo.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_vhqpcg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lxkobs.*) AS annotation
  from master_join master_join_xdexig
  join notes.note_view notes_note_lat_lxkobs on master_join_xdexig.target_id = notes_note_lat_lxkobs.id
  where master_join_xdexig.source_id = procedure.procedureavailability.id
) as notes_note_view_kghpkr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jbzqcm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jbzqcm.title AS varchar), '(' || organisation_organisationauthority_lat_jbzqcm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jbzqcm.href
  )) as specialdateauthority  from master_join master_join_jxclpi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jbzqcm on master_join_jxclpi.target_id = organisation_organisationauthority_lat_jbzqcm.id
  where master_join_jxclpi.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_mnghwx on TRUE
;
create index if not exists procedure_procedureavailability_id on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_amfwxu.timeinterval::jsonb as timeinterval,
    notes_note_view_mmlnrh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rsljqc.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qvgyha.*) AS timeinterval
  from master_join master_join_yrymbk
  join shared.timesheet_view shared_timesheet_lat_qvgyha on master_join_yrymbk.target_id = shared_timesheet_lat_qvgyha.id
  where master_join_yrymbk.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_amfwxu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vmtori.*) AS annotation
  from master_join master_join_hnzooa
  join notes.note_view notes_note_lat_vmtori on master_join_hnzooa.target_id = notes_note_lat_vmtori.id
  where master_join_hnzooa.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_mmlnrh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dbnbbl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dbnbbl.title AS varchar), '(' || organisation_organisationauthority_lat_dbnbbl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dbnbbl.href
  )) as specialdateauthority  from master_join master_join_nykpfs
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dbnbbl on master_join_nykpfs.target_id = organisation_organisationauthority_lat_dbnbbl.id
  where master_join_nykpfs.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_rsljqc on TRUE
;
create index if not exists service_radiocommunicationoperationalstatus_id on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_ktrtyc.timeinterval::jsonb as timeinterval,
    notes_note_view_fwgirf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jepiac.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_dkscvg.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ygwwgy.*) AS timeinterval
  from master_join master_join_jbyzil
  join shared.timesheet_view shared_timesheet_lat_ygwwgy on master_join_jbyzil.target_id = shared_timesheet_lat_ygwwgy.id
  where master_join_jbyzil.source_id = routes.routeavailability.id
) as shared_timesheet_view_ktrtyc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dczrwq.*) AS annotation
  from master_join master_join_pnrvde
  join notes.note_view notes_note_lat_dczrwq on master_join_pnrvde.target_id = notes_note_lat_dczrwq.id
  where master_join_pnrvde.source_id = routes.routeavailability.id
) as notes_note_view_fwgirf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hgoxyf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hgoxyf.title AS varchar), '(' || organisation_organisationauthority_lat_hgoxyf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hgoxyf.href
  )) as specialdateauthority  from master_join master_join_lzwlcc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hgoxyf on master_join_lzwlcc.target_id = organisation_organisationauthority_lat_hgoxyf.id
  where master_join_lzwlcc.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_jepiac on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_dlzdjp.id) as levels
  from master_join master_join_kuhdqp
  join shared.airspacelayer_pt shared_airspacelayer_lat_dlzdjp on master_join_kuhdqp.target_id = shared_airspacelayer_lat_dlzdjp.id
  where master_join_kuhdqp.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_dkscvg on TRUE
;
create index if not exists routes_routeavailability_id on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_sfbepx.timeinterval::jsonb as timeinterval,
    notes_note_view_awcnft.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dckxsd.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lwtxqd.*) AS timeinterval
  from master_join master_join_lhswxa
  join shared.timesheet_view shared_timesheet_lat_lwtxqd on master_join_lhswxa.target_id = shared_timesheet_lat_lwtxqd.id
  where master_join_lhswxa.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_sfbepx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uamzww.*) AS annotation
  from master_join master_join_gltgch
  join notes.note_view notes_note_lat_uamzww on master_join_gltgch.target_id = notes_note_lat_uamzww.id
  where master_join_gltgch.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_awcnft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nmgfav.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nmgfav.title AS varchar), '(' || organisation_organisationauthority_lat_nmgfav.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nmgfav.href
  )) as specialdateauthority  from master_join master_join_djothq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nmgfav on master_join_djothq.target_id = organisation_organisationauthority_lat_nmgfav.id
  where master_join_djothq.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_dckxsd on TRUE
;
create index if not exists airport_heliport_runwaydeclareddistancevalue_id on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_zhmgqc.timeinterval::jsonb as timeinterval,
    notes_note_view_yausoe.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gnsyhw.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uhgcop.*) AS timeinterval
  from master_join master_join_btqdzj
  join shared.timesheet_view shared_timesheet_lat_uhgcop on master_join_btqdzj.target_id = shared_timesheet_lat_uhgcop.id
  where master_join_btqdzj.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_zhmgqc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_unwtci.*) AS annotation
  from master_join master_join_qrrucp
  join notes.note_view notes_note_lat_unwtci on master_join_qrrucp.target_id = notes_note_lat_unwtci.id
  where master_join_qrrucp.source_id = service.serviceoperationalstatus.id
) as notes_note_view_yausoe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_okwxti.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_okwxti.title AS varchar), '(' || organisation_organisationauthority_lat_okwxti.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_okwxti.href
  )) as specialdateauthority  from master_join master_join_gdsblr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_okwxti on master_join_gdsblr.target_id = organisation_organisationauthority_lat_okwxti.id
  where master_join_gdsblr.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_gnsyhw on TRUE
;
create index if not exists service_serviceoperationalstatus_id on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_cxvqaf.timeinterval::jsonb as timeinterval,
    notes_note_view_kvxvql.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_wjdstz.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zqnljn.*) AS timeinterval
  from master_join master_join_yywfkf
  join shared.timesheet_view shared_timesheet_lat_zqnljn on master_join_yywfkf.target_id = shared_timesheet_lat_zqnljn.id
  where master_join_yywfkf.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_cxvqaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qkotsj.*) AS annotation
  from master_join master_join_yhfuzf
  join notes.note_view notes_note_lat_qkotsj on master_join_yhfuzf.target_id = notes_note_lat_qkotsj.id
  where master_join_yhfuzf.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_kvxvql on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_usmtaa.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_usmtaa.title AS varchar), '(' || organisation_organisationauthority_lat_usmtaa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_usmtaa.href
  )) as specialdateauthority  from master_join master_join_wmlwmw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_usmtaa on master_join_wmlwmw.target_id = organisation_organisationauthority_lat_usmtaa.id
  where master_join_wmlwmw.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_wjdstz on TRUE
;
create index if not exists navaids_points_specialnavigationstationstatus_id on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_ubnlzl.timeinterval::jsonb as timeinterval,
    notes_note_view_raonqd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_julfrj.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qmmjfk.*) AS timeinterval
  from master_join master_join_qplcln
  join shared.timesheet_view shared_timesheet_lat_qmmjfk on master_join_qplcln.target_id = shared_timesheet_lat_qmmjfk.id
  where master_join_qplcln.source_id = shared.telephonecontact.id
) as shared_timesheet_view_ubnlzl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bcrlih.*) AS annotation
  from master_join master_join_bjumbu
  join notes.note_view notes_note_lat_bcrlih on master_join_bjumbu.target_id = notes_note_lat_bcrlih.id
  where master_join_bjumbu.source_id = shared.telephonecontact.id
) as notes_note_view_raonqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xcpjft.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xcpjft.title AS varchar), '(' || organisation_organisationauthority_lat_xcpjft.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xcpjft.href
  )) as specialdateauthority  from master_join master_join_mtqlgr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xcpjft on master_join_mtqlgr.target_id = organisation_organisationauthority_lat_xcpjft.id
  where master_join_mtqlgr.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_julfrj on TRUE
;
create index if not exists shared_telephonecontact_id on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_mkqfij.timeinterval::jsonb as timeinterval,
    notes_note_view_jnzvgv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kuykfg.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xdiyyu.*) AS timeinterval
  from master_join master_join_hagmdl
  join shared.timesheet_view shared_timesheet_lat_xdiyyu on master_join_hagmdl.target_id = shared_timesheet_lat_xdiyyu.id
  where master_join_hagmdl.source_id = organisation.unitavailability.id
) as shared_timesheet_view_mkqfij on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bbcepl.*) AS annotation
  from master_join master_join_cxyesp
  join notes.note_view notes_note_lat_bbcepl on master_join_cxyesp.target_id = notes_note_lat_bbcepl.id
  where master_join_cxyesp.source_id = organisation.unitavailability.id
) as notes_note_view_jnzvgv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xbunbp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xbunbp.title AS varchar), '(' || organisation_organisationauthority_lat_xbunbp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xbunbp.href
  )) as specialdateauthority  from master_join master_join_wzwnwz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xbunbp on master_join_wzwnwz.target_id = organisation_organisationauthority_lat_xbunbp.id
  where master_join_wzwnwz.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_kuykfg on TRUE
;
create index if not exists organisation_unitavailability_id on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_ngyflr.timeinterval::jsonb as timeinterval,
    notes_note_view_tcrork.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_abavvn.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vsvica.*) AS timeinterval
  from master_join master_join_roqbkt
  join shared.timesheet_view shared_timesheet_lat_vsvica on master_join_roqbkt.target_id = shared_timesheet_lat_vsvica.id
  where master_join_roqbkt.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_ngyflr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jnmkze.*) AS annotation
  from master_join master_join_agawfl
  join notes.note_view notes_note_lat_jnmkze on master_join_agawfl.target_id = notes_note_lat_jnmkze.id
  where master_join_agawfl.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_tcrork on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_oysabg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_oysabg.title AS varchar), '(' || organisation_organisationauthority_lat_oysabg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_oysabg.href
  )) as specialdateauthority  from master_join master_join_qoszwh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_oysabg on master_join_qoszwh.target_id = organisation_organisationauthority_lat_oysabg.id
  where master_join_qoszwh.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_abavvn on TRUE
;
create index if not exists obstacles_verticalstructurelightingstatus_id on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view', 'notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_fkgoxv.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_fkgoxv.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_fkgoxv.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_fkgoxv.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_fkgoxv.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_fkgoxv.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_fkgoxv.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_fkgoxv.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_cmubgp.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_cmubgp.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_cmubgp.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_cmubgp.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_cmubgp.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_cmubgp.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_cqhtkb.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_cqhtkb.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_cqhtkb.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_cqhtkb.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_cqhtkb.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_cqhtkb.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_wtvtos.timeinterval::jsonb as timeinterval,
    notes_note_view_jdhubb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tpkswn.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_qdywhf.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fkgoxv on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_fkgoxv.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_cmubgp on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_cmubgp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cqhtkb on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_cqhtkb.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uoqqkl.*) AS timeinterval
  from master_join master_join_onjxfx
  join shared.timesheet_view shared_timesheet_lat_uoqqkl on master_join_onjxfx.target_id = shared_timesheet_lat_uoqqkl.id
  where master_join_onjxfx.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_wtvtos on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzecso.*) AS annotation
  from master_join master_join_iaflbr
  join notes.note_view notes_note_lat_nzecso on master_join_iaflbr.target_id = notes_note_lat_nzecso.id
  where master_join_iaflbr.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_jdhubb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fsdghp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fsdghp.title AS varchar), '(' || organisation_organisationauthority_lat_fsdghp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fsdghp.href
  )) as specialdateauthority  from master_join master_join_ynpacr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fsdghp on master_join_ynpacr.target_id = organisation_organisationauthority_lat_fsdghp.id
  where master_join_ynpacr.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_tpkswn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_oeiqfx.id) as lighting
  from master_join master_join_saolin
  join shared.lightelement_pt shared_lightelement_lat_oeiqfx on master_join_saolin.target_id = shared_lightelement_lat_oeiqfx.id
  where master_join_saolin.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_qdywhf on TRUE
;
create index if not exists obstacles_verticalstructurepart_id on obstacles.verticalstructurepart_view (id);
create index if not exists obstacles_verticalstructurepart_horizontalprojectionlocation_gist on obstacles.verticalstructurepart_view using GIST (horizontalprojectionlocation_geom);
create index if not exists obstacles_verticalstructurepart_horizontalprojectionlinearextent_gist on obstacles.verticalstructurepart_view using GIST (horizontalprojectionlinearextent_geom);
create index if not exists obstacles_verticalstructurepart_horizontalprojectionsurfaceextent_gist on obstacles.verticalstructurepart_view using GIST (horizontalprojectionsurfaceextent_geom);
-- WorkareaActivityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_avomnk.timeinterval::jsonb as timeinterval,
    notes_note_view_llprrh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_orarle.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_egkxne.*) AS timeinterval
  from master_join master_join_vmwwtw
  join shared.timesheet_view shared_timesheet_lat_egkxne on master_join_vmwwtw.target_id = shared_timesheet_lat_egkxne.id
  where master_join_vmwwtw.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_avomnk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yvueez.*) AS annotation
  from master_join master_join_lddiwh
  join notes.note_view notes_note_lat_yvueez on master_join_lddiwh.target_id = notes_note_lat_yvueez.id
  where master_join_lddiwh.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_llprrh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_emqzne.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_emqzne.title AS varchar), '(' || organisation_organisationauthority_lat_emqzne.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_emqzne.href
  )) as specialdateauthority  from master_join master_join_amabsw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_emqzne on master_join_amabsw.target_id = organisation_organisationauthority_lat_emqzne.id
  where master_join_amabsw.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_orarle on TRUE
;
create index if not exists airport_heliport_workareaactivity_id on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['notes.note_view', 'shared.onlinecontact_view', 'shared.postaladdress_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_mijukn.id)::jsonb AS selection,
    notes_note_view_epdlio.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_mijukn on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_mijukn.id
left join lateral(
  select
  from master_join master_join_ihrbbb
  join shared.contactinformation_view shared_contactinformation_lat_qbxupm on master_join_ihrbbb.target_id = shared_contactinformation_lat_qbxupm.id
  where master_join_ihrbbb.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_jpiwhz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chxvuu.*) AS annotation
  from master_join master_join_omdcad
  join notes.note_view notes_note_lat_chxvuu on master_join_omdcad.target_id = notes_note_lat_chxvuu.id
  where master_join_omdcad.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_epdlio on TRUE
;
create index if not exists airport_heliport_airportheliportusage_id on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_fwifih.id)::jsonb AS selection,
    notes_note_view_hkjzfl.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_fwifih on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_fwifih.id
left join lateral(
  select
  from master_join master_join_mqeddw
  join shared.contactinformation_view shared_contactinformation_lat_rhcwmc on master_join_mqeddw.target_id = shared_contactinformation_lat_rhcwmc.id
  where master_join_mqeddw.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_dneyyg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vhbtjf.*) AS annotation
  from master_join master_join_uqowvq
  join notes.note_view notes_note_lat_vhbtjf on master_join_uqowvq.target_id = notes_note_lat_vhbtjf.id
  where master_join_uqowvq.source_id = airport_heliport.apronareausage.id
) as notes_note_view_hkjzfl on TRUE
;
create index if not exists airport_heliport_apronareausage_id on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_hnjujr.routeelement::jsonb as routeelement,
    notes_note_view_upxwal.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_pngoxr.id) as routeelement
  from master_join master_join_ymhwyc
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_pngoxr on master_join_ymhwyc.target_id = routes_flightroutingelement_lat_pngoxr.id
  where master_join_ymhwyc.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_hnjujr on TRUE
left join lateral(
  select
  from master_join master_join_olofnf
  join shared.contactinformation_view shared_contactinformation_lat_pjsgsn on master_join_olofnf.target_id = shared_contactinformation_lat_pjsgsn.id
  where master_join_olofnf.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_ffycrs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nnxptk.*) AS annotation
  from master_join master_join_ubxkrf
  join notes.note_view notes_note_lat_nnxptk on master_join_ubxkrf.target_id = notes_note_lat_nnxptk.id
  where master_join_ubxkrf.source_id = routes.flightrestrictionroute.id
) as notes_note_view_upxwal on TRUE
;
create index if not exists routes_flightrestrictionroute_id on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_quowns.id)::jsonb AS selection,
    notes_note_view_trcsez.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_quowns on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_quowns.id
left join lateral(
  select
  from master_join master_join_hutngn
  join shared.contactinformation_view shared_contactinformation_lat_nfwffz on master_join_hutngn.target_id = shared_contactinformation_lat_nfwffz.id
  where master_join_hutngn.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_ifdsdy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqhqng.*) AS annotation
  from master_join master_join_eriyvi
  join notes.note_view notes_note_lat_eqhqng on master_join_eriyvi.target_id = notes_note_lat_eqhqng.id
  where master_join_eriyvi.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_trcsez on TRUE
;
create index if not exists airport_heliport_manoeuvringareausage_id on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingType
-- ['aerial_refuelling.aerialrefuellingtrack_view', 'routes.routeavailability_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_abdzdu.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_abdzdu.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_abdzdu.href::text AS oppositetrack_href,
    routes_routeavailability_view_tuukhz.availability::jsonb as availability,
    airspace_airspace_pt_eiotsh.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_wmupqi.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_qpfumq.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_cnwauw.managingorganisation::jsonb as managingorganisation,
    notes_note_view_lgpbhx.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_abdzdu on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_abdzdu.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_jbmeto.id) as availability
  from master_join master_join_jsbcvf
  join routes.routeavailability_view routes_routeavailability_lat_jbmeto on master_join_jsbcvf.target_id = routes_routeavailability_lat_jbmeto.id
  where master_join_jsbcvf.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_tuukhz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_tzatvb.id,
      'title', coalesce(cast(airspace_airspace_lat_tzatvb.title AS varchar), '(' || airspace_airspace_lat_tzatvb.nilreason[1] || ')'),
      'href', airspace_airspace_lat_tzatvb.href
  )) as protectingairspace  from master_join master_join_rnclav
  join airspace.airspace_pt airspace_airspace_lat_tzatvb on master_join_rnclav.target_id = airspace_airspace_lat_tzatvb.id
  where master_join_rnclav.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_eiotsh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_zgtykd.id) as track
  from master_join master_join_uvzpkb
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_zgtykd on master_join_uvzpkb.target_id = aerial_refuelling_aerialrefuellingtrack_lat_zgtykd.id
  where master_join_uvzpkb.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_wmupqi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_zvnglu.id) as anchor
  from master_join master_join_jaxpht
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_zvnglu on master_join_jaxpht.target_id = aerial_refuelling_aerialrefuellinganchor_lat_zvnglu.id
  where master_join_jaxpht.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_qpfumq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_mprewj.id) as managingorganisation
  from master_join master_join_yqkhgp
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_mprewj on master_join_yqkhgp.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_mprewj.id
  where master_join_yqkhgp.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_cnwauw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hjuvqi.*) AS annotation
  from master_join master_join_wgljas
  join notes.note_view notes_note_lat_hjuvqi on master_join_wgljas.target_id = notes_note_lat_hjuvqi.id
  where master_join_wgljas.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_lgpbhx on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index if not exists aerial_refuelling_aerialrefuelling_id on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_eqnthj.title as varchar), '(' || obstacles_verticalstructure_pt_eqnthj.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_eqnthj.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yjcigc.title as varchar), '(' || airport_heliport_airportheliport_pt_yjcigc.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_yjcigc.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_okbvzg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_okbvzg.longitude AS location_longitude,
    geometry_elevatedpoint_view_okbvzg.latitude AS location_latitude,
    geometry_elevatedpoint_view_okbvzg.elevation AS location_elevation,
    geometry_elevatedpoint_view_okbvzg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_okbvzg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_okbvzg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_okbvzg.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xqgnja.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_eqnthj on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_eqnthj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yjcigc on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_yjcigc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_okbvzg on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_okbvzg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfajfe.*) AS annotation
  from master_join master_join_iuyemo
  join notes.note_view notes_note_lat_lfajfe on master_join_iuyemo.target_id = notes_note_lat_lfajfe.id
  where master_join_iuyemo.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_xqgnja on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index if not exists navaids_points_aeronauticalgroundlight_id on navaids_points.aeronauticalgroundlight_view (id);
create index if not exists navaids_points_aeronauticalgroundlight_location_gist on navaids_points.aeronauticalgroundlight_view using GIST (location_geom);
-- AircraftGroundServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_mmrugx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mmrugx.longitude AS location_longitude,
    geometry_elevatedpoint_view_mmrugx.latitude AS location_latitude,
    geometry_elevatedpoint_view_mmrugx.elevation AS location_elevation,
    geometry_elevatedpoint_view_mmrugx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mmrugx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mmrugx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mmrugx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_swphfe.title as varchar), '(' || organisation_unit_pt_swphfe.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_swphfe.href::text AS serviceprovider_href,
    service_callsigndetail_view_akwfiu.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_cfjgxr.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ixlman.availability::jsonb as availability,
    notes_note_view_mtnnmy.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_bkdrjq.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mmrugx on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_mmrugx.id
left join organisation.unit_pt organisation_unit_pt_swphfe on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_swphfe.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tdbrdw.id) as callsign
  from master_join master_join_bamrib
  join service.callsigndetail_view service_callsigndetail_lat_tdbrdw on master_join_bamrib.target_id = service_callsigndetail_lat_tdbrdw.id
  where master_join_bamrib.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_akwfiu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_vlzkex.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_vlzkex.title AS varchar), '(' || service_radiocommunicationchannel_lat_vlzkex.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_vlzkex.href
  )) as radiocommunication  from master_join master_join_hhqlss
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_vlzkex on master_join_hhqlss.target_id = service_radiocommunicationchannel_lat_vlzkex.id
  where master_join_hhqlss.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_cfjgxr on TRUE
left join lateral(
  select
  from master_join master_join_pvtzth
  join shared.contactinformation_view shared_contactinformation_lat_xbrwbm on master_join_pvtzth.target_id = shared_contactinformation_lat_xbrwbm.id
  where master_join_pvtzth.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_pkupjh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_puoict.id) as availability
  from master_join master_join_bylmzw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_puoict on master_join_bylmzw.target_id = service_serviceoperationalstatus_lat_puoict.id
  where master_join_bylmzw.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_ixlman on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrexgk.*) AS annotation
  from master_join master_join_tvmycm
  join notes.note_view notes_note_lat_yrexgk on master_join_tvmycm.target_id = notes_note_lat_yrexgk.id
  where master_join_tvmycm.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_mtnnmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xyqizl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xyqizl.title AS varchar), '(' || airport_heliport_airportheliport_lat_xyqizl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xyqizl.href
  )) as airportheliport  from master_join master_join_kzpmcl
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xyqizl on master_join_kzpmcl.target_id = airport_heliport_airportheliport_lat_xyqizl.id
  where master_join_kzpmcl.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_bkdrjq on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index if not exists service_aircraftgroundservice_id on service.aircraftgroundservice_view (id);
create index if not exists service_aircraftgroundservice_location_gist on service.aircraftgroundservice_view using GIST (location_geom);
-- AircraftStandType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.aircraftstandcontamination_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_btfgeg.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_btfgeg.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_ckzcos.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ckzcos.longitude AS location_longitude,
    geometry_elevatedpoint_view_ckzcos.latitude AS location_latitude,
    geometry_elevatedpoint_view_ckzcos.elevation AS location_elevation,
    geometry_elevatedpoint_view_ckzcos.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ckzcos.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ckzcos.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ckzcos.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_oiqdrj.title as varchar), '(' || airport_heliport_apronelement_pt_oiqdrj.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_oiqdrj.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_bczjqj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_bczjqj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bczjqj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bczjqj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bczjqj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bczjqj.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_pbuowx.contaminant::jsonb as contaminant,
    notes_note_view_wgpcgq.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_apgfxp.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_btfgeg on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_btfgeg.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ckzcos on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_ckzcos.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_oiqdrj on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_oiqdrj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bczjqj on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_bczjqj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_gijzjv.id) as contaminant
  from master_join master_join_fdmiov
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_gijzjv on master_join_fdmiov.target_id = airport_heliport_aircraftstandcontamination_lat_gijzjv.id
  where master_join_fdmiov.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_pbuowx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_baxtgd.*) AS annotation
  from master_join master_join_glfzhe
  join notes.note_view notes_note_lat_baxtgd on master_join_glfzhe.target_id = notes_note_lat_baxtgd.id
  where master_join_glfzhe.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_wgpcgq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_sizccq.id) as availability
  from master_join master_join_eslnyr
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_sizccq on master_join_eslnyr.target_id = airport_heliport_apronareaavailability_lat_sizccq.id
  where master_join_eslnyr.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_apgfxp on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index if not exists airport_heliport_aircraftstand_id on airport_heliport.aircraftstand_view (id);
create index if not exists airport_heliport_aircraftstand_location_gist on airport_heliport.aircraftstand_view using GIST (location_geom);
create index if not exists airport_heliport_aircraftstand_extent_gist on airport_heliport.aircraftstand_view using GIST (extent_geom);
-- AirportClearanceServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_zhpsjr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zhpsjr.longitude AS location_longitude,
    geometry_elevatedpoint_view_zhpsjr.latitude AS location_latitude,
    geometry_elevatedpoint_view_zhpsjr.elevation AS location_elevation,
    geometry_elevatedpoint_view_zhpsjr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zhpsjr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zhpsjr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zhpsjr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_idzkoq.title as varchar), '(' || organisation_unit_pt_idzkoq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_idzkoq.href::text AS serviceprovider_href,
    service_callsigndetail_view_yjbube.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_otpiaa.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_zksumu.availability::jsonb as availability,
    notes_note_view_hvgfcn.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_ftfkkn.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zhpsjr on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_zhpsjr.id
left join organisation.unit_pt organisation_unit_pt_idzkoq on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_idzkoq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_eraiah.id) as callsign
  from master_join master_join_zmfmcl
  join service.callsigndetail_view service_callsigndetail_lat_eraiah on master_join_zmfmcl.target_id = service_callsigndetail_lat_eraiah.id
  where master_join_zmfmcl.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_yjbube on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_wsyivn.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_wsyivn.title AS varchar), '(' || service_radiocommunicationchannel_lat_wsyivn.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_wsyivn.href
  )) as radiocommunication  from master_join master_join_knufbv
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_wsyivn on master_join_knufbv.target_id = service_radiocommunicationchannel_lat_wsyivn.id
  where master_join_knufbv.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_otpiaa on TRUE
left join lateral(
  select
  from master_join master_join_raluyl
  join shared.contactinformation_view shared_contactinformation_lat_seavwn on master_join_raluyl.target_id = shared_contactinformation_lat_seavwn.id
  where master_join_raluyl.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_tmgrsr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_srseip.id) as availability
  from master_join master_join_zdxqfn
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_srseip on master_join_zdxqfn.target_id = service_serviceoperationalstatus_lat_srseip.id
  where master_join_zdxqfn.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_zksumu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbtvxw.*) AS annotation
  from master_join master_join_slzaef
  join notes.note_view notes_note_lat_wbtvxw on master_join_slzaef.target_id = notes_note_lat_wbtvxw.id
  where master_join_slzaef.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_hvgfcn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_yoousf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_yoousf.title AS varchar), '(' || airport_heliport_airportheliport_lat_yoousf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_yoousf.href
  )) as airportheliport  from master_join master_join_rnajpq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_yoousf on master_join_rnajpq.target_id = airport_heliport_airportheliport_lat_yoousf.id
  where master_join_rnajpq.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_ftfkkn on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index if not exists service_airportclearanceservice_id on service.airportclearanceservice_view (id);
create index if not exists service_airportclearanceservice_location_gist on service.airportclearanceservice_view using GIST (location_geom);
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_xrklgi.title as varchar), '(' || airport_heliport_airportheliport_pt_xrklgi.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_xrklgi.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lfoyld.title as varchar), '(' || airport_heliport_airportheliport_pt_lfoyld.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_lfoyld.href::text AS dependentairport_href,
    notes_note_view_avrlqq.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xrklgi on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_xrklgi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lfoyld on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_lfoyld.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtovwv.*) AS annotation
  from master_join master_join_ghvqyx
  join notes.note_view notes_note_lat_rtovwv on master_join_ghvqyx.target_id = notes_note_lat_rtovwv.id
  where master_join_ghvqyx.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_avrlqq on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index if not exists airport_heliport_airportheliportcollocation_id on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportType
-- ['geometry.elevatedsurface_view', 'airport_heliport.airportheliportavailability_view', 'geometry.elevatedpoint_view', 'airport_heliport.airportheliportcontamination_view', 'notes.note_view', 'airport_heliport.city_view', 'shared.contactinformation_view', 'airport_heliport.airportheliportresponsibilityorganisation_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_wvhjwm.id)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_wvhjwm.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_qsopyh.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_qsopyh.longitude AS arp_longitude,
    geometry_elevatedpoint_view_qsopyh.latitude AS arp_latitude,
    geometry_elevatedpoint_view_qsopyh.elevation AS arp_elevation,
    geometry_elevatedpoint_view_qsopyh.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_qsopyh.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_qsopyh.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_qsopyh.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_oyfuzk.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_oyfuzk.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_oyfuzk.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_oyfuzk.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_oyfuzk.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_oyfuzk.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_uoinhw.contaminant::jsonb as contaminant,
    airport_heliport_city_view_kaupjb.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_wjmrds.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_alktzx.availability::jsonb as availability,
    notes_note_view_zlowkf.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_wvhjwm on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_wvhjwm.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qsopyh on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_qsopyh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oyfuzk on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_oyfuzk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_cpflqv.id) as contaminant
  from master_join master_join_znfwni
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_cpflqv on master_join_znfwni.target_id = airport_heliport_airportheliportcontamination_lat_cpflqv.id
  where master_join_znfwni.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_uoinhw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_guvyxn.id) as servedcity
  from master_join master_join_zkzkss
  join airport_heliport.city_view airport_heliport_city_lat_guvyxn on master_join_zkzkss.target_id = airport_heliport_city_lat_guvyxn.id
  where master_join_zkzkss.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_kaupjb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_yezxtz.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_yezxtz.title AS varchar), '(' || airport_heliport_altimetersource_lat_yezxtz.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_yezxtz.href
  )) as altimetersource  from master_join master_join_btrzgm
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_yezxtz on master_join_btrzgm.target_id = airport_heliport_altimetersource_lat_yezxtz.id
  where master_join_btrzgm.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_wjmrds on TRUE
left join lateral(
  select
  from master_join master_join_tzijbn
  join shared.contactinformation_view shared_contactinformation_lat_kxqqpu on master_join_tzijbn.target_id = shared_contactinformation_lat_kxqqpu.id
  where master_join_tzijbn.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_vceqbk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_ccvctt.id) as availability
  from master_join master_join_mjogfy
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_ccvctt on master_join_mjogfy.target_id = airport_heliport_airportheliportavailability_lat_ccvctt.id
  where master_join_mjogfy.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_alktzx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikgdhz.*) AS annotation
  from master_join master_join_eckljt
  join notes.note_view notes_note_lat_ikgdhz on master_join_eckljt.target_id = notes_note_lat_ikgdhz.id
  where master_join_eckljt.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_zlowkf on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index if not exists airport_heliport_airportheliport_id on airport_heliport.airportheliport_view (id);
create index if not exists airport_heliport_airportheliport_arp_gist on airport_heliport.airportheliport_view using GIST (arp_geom);
create index if not exists airport_heliport_airportheliport_aviationboundary_gist on airport_heliport.airportheliport_view using GIST (aviationboundary_geom);
-- AirportHotSpotType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_svduwl.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_svduwl.elevation AS area_elevation,
    geometry_elevatedsurface_view_svduwl.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_svduwl.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_svduwl.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_svduwl.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_gcfbms.title as varchar), '(' || airport_heliport_airportheliport_pt_gcfbms.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_gcfbms.href::text AS affectedairport_href,
    notes_note_view_cvhhbl.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_svduwl on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_svduwl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gcfbms on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_gcfbms.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dmvmfg.*) AS annotation
  from master_join master_join_fdficg
  join notes.note_view notes_note_lat_dmvmfg on master_join_fdficg.target_id = notes_note_lat_dmvmfg.id
  where master_join_fdficg.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_cvhhbl on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index if not exists airport_heliport_airporthotspot_id on airport_heliport.airporthotspot_view (id);
create index if not exists airport_heliport_airporthotspot_area_gist on airport_heliport.airporthotspot_view using GIST (area_geom);
-- AirportProtectionAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_airportheliportprotectionarea_pt_anrlox.title as varchar), '(' || airport_heliport_airportheliportprotectionarea_pt_anrlox.nilreason[1] || ')')::text AS markedprotectionarea,
    airport_heliport_airportheliportprotectionarea_pt_anrlox.href::text AS markedprotectionarea_href,
    airport_heliport_markingelement_view_miwtzn.element::jsonb as element,
    notes_note_view_prwvfm.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_pt_anrlox on airport_heliport.airportprotectionareamarking_ts.markedprotectionarea_id = airport_heliport_airportheliportprotectionarea_pt_anrlox.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_yftxwu.id) as element
  from master_join master_join_whkbsf
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_yftxwu on master_join_whkbsf.target_id = airport_heliport_markingelement_lat_yftxwu.id
  where master_join_whkbsf.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_miwtzn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ebilot.*) AS annotation
  from master_join master_join_jwalkz
  join notes.note_view notes_note_lat_ebilot on master_join_jwalkz.target_id = notes_note_lat_ebilot.id
  where master_join_jwalkz.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_prwvfm on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index if not exists airport_heliport_airportprotectionareamarking_id on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'service.fuel_view', 'service.oil_view', 'service.nitrogen_view', 'service.oxygen_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_njjqkv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_njjqkv.longitude AS location_longitude,
    geometry_elevatedpoint_view_njjqkv.latitude AS location_latitude,
    geometry_elevatedpoint_view_njjqkv.elevation AS location_elevation,
    geometry_elevatedpoint_view_njjqkv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_njjqkv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_njjqkv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_njjqkv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vodchx.title as varchar), '(' || organisation_unit_pt_vodchx.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_vodchx.href::text AS serviceprovider_href,
    service_callsigndetail_view_txbpva.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_gqzgeg.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_gmbezi.availability::jsonb as availability,
    notes_note_view_vhocrm.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_iwiyen.airportheliport::jsonb as airportheliport,
    service_fuel_view_dniype.fuelsupply::jsonb as fuelsupply,
    service_oil_view_yusqch.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_zraqlb.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_etoeww.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_njjqkv on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_njjqkv.id
left join organisation.unit_pt organisation_unit_pt_vodchx on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_vodchx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_lyyyup.id) as callsign
  from master_join master_join_nawtia
  join service.callsigndetail_view service_callsigndetail_lat_lyyyup on master_join_nawtia.target_id = service_callsigndetail_lat_lyyyup.id
  where master_join_nawtia.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_txbpva on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_voglib.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_voglib.title AS varchar), '(' || service_radiocommunicationchannel_lat_voglib.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_voglib.href
  )) as radiocommunication  from master_join master_join_cjbydx
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_voglib on master_join_cjbydx.target_id = service_radiocommunicationchannel_lat_voglib.id
  where master_join_cjbydx.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_gqzgeg on TRUE
left join lateral(
  select
  from master_join master_join_gypzxy
  join shared.contactinformation_view shared_contactinformation_lat_njibcd on master_join_gypzxy.target_id = shared_contactinformation_lat_njibcd.id
  where master_join_gypzxy.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_exwsel on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_iymoxz.id) as availability
  from master_join master_join_fphfbp
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_iymoxz on master_join_fphfbp.target_id = service_serviceoperationalstatus_lat_iymoxz.id
  where master_join_fphfbp.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_gmbezi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iosrts.*) AS annotation
  from master_join master_join_cnmhjt
  join notes.note_view notes_note_lat_iosrts on master_join_cnmhjt.target_id = notes_note_lat_iosrts.id
  where master_join_cnmhjt.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_vhocrm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ttvzfm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ttvzfm.title AS varchar), '(' || airport_heliport_airportheliport_lat_ttvzfm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ttvzfm.href
  )) as airportheliport  from master_join master_join_vbzwuw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ttvzfm on master_join_vbzwuw.target_id = airport_heliport_airportheliport_lat_ttvzfm.id
  where master_join_vbzwuw.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_iwiyen on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_haslif.id) as fuelsupply
  from master_join master_join_psuvim
  join service.fuel_view service_fuel_lat_haslif on master_join_psuvim.target_id = service_fuel_lat_haslif.id
  where master_join_psuvim.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_dniype on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_tctlih.id) as oilsupply
  from master_join master_join_ejioam
  join service.oil_view service_oil_lat_tctlih on master_join_ejioam.target_id = service_oil_lat_tctlih.id
  where master_join_ejioam.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_yusqch on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_yphaoq.id) as nitrogensupply
  from master_join master_join_tqjciu
  join service.nitrogen_view service_nitrogen_lat_yphaoq on master_join_tqjciu.target_id = service_nitrogen_lat_yphaoq.id
  where master_join_tqjciu.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_zraqlb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_bzvuxw.id) as oxygensupply
  from master_join master_join_yifcld
  join service.oxygen_view service_oxygen_lat_bzvuxw on master_join_yifcld.target_id = service_oxygen_lat_bzvuxw.id
  where master_join_yifcld.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_etoeww on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index if not exists service_airportsuppliesservice_id on service.airportsuppliesservice_view (id);
create index if not exists service_airportsuppliesservice_location_gist on service.airportsuppliesservice_view using GIST (location_geom);
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_wydasj.title as varchar), '(' || airspace_airspace_pt_wydasj.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_wydasj.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_qeitsk.title as varchar), '(' || airspace_airspace_pt_qeitsk.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_qeitsk.href::text AS enteredairspace_href,
    notes_note_view_plgcfi.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_wydasj on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_wydasj.id
left join airspace.airspace_pt airspace_airspace_pt_qeitsk on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_qeitsk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzsect.*) AS annotation
  from master_join master_join_bmagpj
  join notes.note_view notes_note_lat_nzsect on master_join_bmagpj.target_id = notes_note_lat_nzsect.id
  where master_join_bmagpj.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_plgcfi on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index if not exists routes_airspacebordercrossing_id on routes.airspacebordercrossing_view (id);
-- AirspaceType
-- ['notes.note_view', 'airspace.airspacegeometrycomponent_view', 'airspace.airspaceactivation_view', 'airspace.airspacelayerclass_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_hyobng.title as varchar), '(' || routes_route_pt_hyobng.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_hyobng.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_jwhoau.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_zdzjjp.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_zltljx.activation::jsonb as activation,
    notes_note_view_enqudl.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_hyobng on airspace.airspace_ts.protectedroute_id = routes_route_pt_hyobng.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_piahdd.id) as clazz
  from master_join master_join_fbankf
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_piahdd on master_join_fbankf.target_id = airspace_airspacelayerclass_lat_piahdd.id
  where master_join_fbankf.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_jwhoau on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_xzvgrv.id) as geometrycomponent
  from master_join master_join_qqvlpl
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_xzvgrv on master_join_qqvlpl.target_id = airspace_airspacegeometrycomponent_lat_xzvgrv.id
  where master_join_qqvlpl.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_zdzjjp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_jrqstp.id) as activation
  from master_join master_join_puwukq
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_jrqstp on master_join_puwukq.target_id = airspace_airspaceactivation_lat_jrqstp.id
  where master_join_puwukq.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_zltljx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vwyqen.*) AS annotation
  from master_join master_join_hnvtmq
  join notes.note_view notes_note_lat_vwyqen on master_join_hnvtmq.target_id = notes_note_lat_vwyqen.id
  where master_join_hnvtmq.source_id = airspace.airspace_ts.id
) as notes_note_view_enqudl on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index if not exists airspace_airspace_id on airspace.airspace_view (id);
-- AirTrafficControlServiceType
-- ['service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_vrdbbe.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vrdbbe.longitude AS location_longitude,
    geometry_elevatedpoint_view_vrdbbe.latitude AS location_latitude,
    geometry_elevatedpoint_view_vrdbbe.elevation AS location_elevation,
    geometry_elevatedpoint_view_vrdbbe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vrdbbe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vrdbbe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vrdbbe.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vlkmno.title as varchar), '(' || organisation_unit_pt_vlkmno.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_vlkmno.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_nvjlcf.title as varchar), '(' || navaids_points_directionfinder_pt_nvjlcf.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_nvjlcf.href::text AS aircraftlocator_href,
    service_callsigndetail_view_bbyohb.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_vcmcva.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_zzedqo.availability::jsonb as availability,
    notes_note_view_qcpyxh.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_qlrnur.clientairport::jsonb as clientairport,
    airspace_airspace_pt_chqrra.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_xstqet.clientroute::jsonb as clientroute,
    procedure_procedure_pt_dgkzkh.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_qmaytm.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_graeze.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vrdbbe on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_vrdbbe.id
left join organisation.unit_pt organisation_unit_pt_vlkmno on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_vlkmno.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_nvjlcf on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_nvjlcf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_uwizsm.id) as callsign
  from master_join master_join_tuorgy
  join service.callsigndetail_view service_callsigndetail_lat_uwizsm on master_join_tuorgy.target_id = service_callsigndetail_lat_uwizsm.id
  where master_join_tuorgy.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_bbyohb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_pjpzzf.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_pjpzzf.title AS varchar), '(' || service_radiocommunicationchannel_lat_pjpzzf.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_pjpzzf.href
  )) as radiocommunication  from master_join master_join_ocwype
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_pjpzzf on master_join_ocwype.target_id = service_radiocommunicationchannel_lat_pjpzzf.id
  where master_join_ocwype.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_vcmcva on TRUE
left join lateral(
  select
  from master_join master_join_idqpyh
  join shared.contactinformation_view shared_contactinformation_lat_nrshdk on master_join_idqpyh.target_id = shared_contactinformation_lat_nrshdk.id
  where master_join_idqpyh.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_aygfbr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_czepdu.id) as availability
  from master_join master_join_oamrly
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_czepdu on master_join_oamrly.target_id = service_serviceoperationalstatus_lat_czepdu.id
  where master_join_oamrly.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_zzedqo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zhvswe.*) AS annotation
  from master_join master_join_eayutv
  join notes.note_view notes_note_lat_zhvswe on master_join_eayutv.target_id = notes_note_lat_zhvswe.id
  where master_join_eayutv.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_qcpyxh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_unhgyj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_unhgyj.title AS varchar), '(' || airport_heliport_airportheliport_lat_unhgyj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_unhgyj.href
  )) as clientairport  from master_join master_join_qibjky
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_unhgyj on master_join_qibjky.target_id = airport_heliport_airportheliport_lat_unhgyj.id
  where master_join_qibjky.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_qlrnur on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_zreqoq.id,
      'title', coalesce(cast(airspace_airspace_lat_zreqoq.title AS varchar), '(' || airspace_airspace_lat_zreqoq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_zreqoq.href
  )) as clientairspace  from master_join master_join_ewwpzx
  join airspace.airspace_pt airspace_airspace_lat_zreqoq on master_join_ewwpzx.target_id = airspace_airspace_lat_zreqoq.id
  where master_join_ewwpzx.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_chqrra on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_elfikm.id) as clientroute
  from master_join master_join_bqdzcs
  join routes.routeportion_view routes_routeportion_lat_elfikm on master_join_bqdzcs.target_id = routes_routeportion_lat_elfikm.id
  where master_join_bqdzcs.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_xstqet on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_lhhrmi.id,
      'title', coalesce(cast(procedure_procedure_lat_lhhrmi.title AS varchar), '(' || procedure_procedure_lat_lhhrmi.nilreason[1] || ')'),
      'href', procedure_procedure_lat_lhhrmi.href
  )) as clientprocedure  from master_join master_join_qwqhgx
  join procedure.procedure_pt procedure_procedure_lat_lhhrmi on master_join_qwqhgx.target_id = procedure_procedure_lat_lhhrmi.id
  where master_join_qwqhgx.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_dgkzkh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ufaqgu.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ufaqgu.title AS varchar), '(' || holding_holdingpattern_lat_ufaqgu.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ufaqgu.href
  )) as clientholding  from master_join master_join_rzakzn
  join holding.holdingpattern_pt holding_holdingpattern_lat_ufaqgu on master_join_rzakzn.target_id = holding_holdingpattern_lat_ufaqgu.id
  where master_join_rzakzn.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_qmaytm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_yqsnyx.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_yqsnyx.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_yqsnyx.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_yqsnyx.href
  )) as clientaerialrefuelling  from master_join master_join_limrmm
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_yqsnyx on master_join_limrmm.target_id = aerial_refuelling_aerialrefuelling_lat_yqsnyx.id
  where master_join_limrmm.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_graeze on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index if not exists service_airtrafficcontrolservice_id on service.airtrafficcontrolservice_view (id);
create index if not exists service_airtrafficcontrolservice_location_gist on service.airtrafficcontrolservice_view using GIST (location_geom);
-- AirTrafficManagementServiceType
-- ['service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ydsyyc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ydsyyc.longitude AS location_longitude,
    geometry_elevatedpoint_view_ydsyyc.latitude AS location_latitude,
    geometry_elevatedpoint_view_ydsyyc.elevation AS location_elevation,
    geometry_elevatedpoint_view_ydsyyc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ydsyyc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ydsyyc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ydsyyc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_htperm.title as varchar), '(' || organisation_unit_pt_htperm.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_htperm.href::text AS serviceprovider_href,
    service_callsigndetail_view_hefpfm.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ppyxgb.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_lwlvyd.availability::jsonb as availability,
    notes_note_view_jdudmw.annotation::jsonb as annotation,
    airspace_airspace_pt_lkggem.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_rsesou.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_kbqumx.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ydsyyc on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_ydsyyc.id
left join organisation.unit_pt organisation_unit_pt_htperm on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_htperm.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_eykorb.id) as callsign
  from master_join master_join_hkpkfc
  join service.callsigndetail_view service_callsigndetail_lat_eykorb on master_join_hkpkfc.target_id = service_callsigndetail_lat_eykorb.id
  where master_join_hkpkfc.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_hefpfm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bdnkix.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bdnkix.title AS varchar), '(' || service_radiocommunicationchannel_lat_bdnkix.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bdnkix.href
  )) as radiocommunication  from master_join master_join_txfdjp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bdnkix on master_join_txfdjp.target_id = service_radiocommunicationchannel_lat_bdnkix.id
  where master_join_txfdjp.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_ppyxgb on TRUE
left join lateral(
  select
  from master_join master_join_ohrwsf
  join shared.contactinformation_view shared_contactinformation_lat_xoroql on master_join_ohrwsf.target_id = shared_contactinformation_lat_xoroql.id
  where master_join_ohrwsf.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_xksbzj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_snnpag.id) as availability
  from master_join master_join_ytfccx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_snnpag on master_join_ytfccx.target_id = service_serviceoperationalstatus_lat_snnpag.id
  where master_join_ytfccx.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_lwlvyd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_snhvte.*) AS annotation
  from master_join master_join_mvkgzo
  join notes.note_view notes_note_lat_snhvte on master_join_mvkgzo.target_id = notes_note_lat_snhvte.id
  where master_join_mvkgzo.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_jdudmw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_padsaq.id,
      'title', coalesce(cast(airspace_airspace_lat_padsaq.title AS varchar), '(' || airspace_airspace_lat_padsaq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_padsaq.href
  )) as clientairspace  from master_join master_join_oacctl
  join airspace.airspace_pt airspace_airspace_lat_padsaq on master_join_oacctl.target_id = airspace_airspace_lat_padsaq.id
  where master_join_oacctl.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_lkggem on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_tsmyhx.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_tsmyhx.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_tsmyhx.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_tsmyhx.href
  )) as clientaerialrefuelling  from master_join master_join_ovccwf
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_tsmyhx on master_join_ovccwf.target_id = aerial_refuelling_aerialrefuelling_lat_tsmyhx.id
  where master_join_ovccwf.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_rsesou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_zjzvyi.id) as clientroute
  from master_join master_join_nrrcfo
  join routes.routeportion_view routes_routeportion_lat_zjzvyi on master_join_nrrcfo.target_id = routes_routeportion_lat_zjzvyi.id
  where master_join_nrrcfo.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_kbqumx on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index if not exists service_airtrafficmanagementservice_id on service.airtrafficmanagementservice_view (id);
create index if not exists service_airtrafficmanagementservice_location_gist on service.airtrafficmanagementservice_view using GIST (location_geom);
-- AltimeterSourceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_dutdaj.availability::jsonb as availability,
    notes_note_view_bqdwqt.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_tjmrar.id) as availability
  from master_join master_join_mylssl
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_tjmrar on master_join_mylssl.target_id = airport_heliport_altimetersourcestatus_lat_tjmrar.id
  where master_join_mylssl.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_dutdaj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfcueb.*) AS annotation
  from master_join master_join_aiflrf
  join notes.note_view notes_note_lat_gfcueb on master_join_aiflrf.target_id = notes_note_lat_gfcueb.id
  where master_join_aiflrf.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_bqdwqt on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index if not exists airport_heliport_altimetersource_id on airport_heliport.altimetersource_view (id);
-- AngleIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_bswxgf.title as varchar), '(' || navaids_points_designatedpoint_pt_bswxgf.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_bswxgf.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_sinysf.title as varchar), '(' || navaids_points_designatedpoint_pt_sinysf.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_sinysf.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_tgzeme.title as varchar), '(' || navaids_points_navaid_pt_tgzeme.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_tgzeme.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hrzxjs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hrzxjs.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_hrzxjs.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ehpjqr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ehpjqr.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ehpjqr.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_icelvl.title as varchar), '(' || airport_heliport_airportheliport_pt_icelvl.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_icelvl.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_thhzzb.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_thhzzb.longitude AS pointchoiceposition_longitude,
    geometry_point_view_thhzzb.latitude AS pointchoiceposition_latitude,
    geometry_point_view_thhzzb.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_wwppxm.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bswxgf on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_bswxgf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_sinysf on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_sinysf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tgzeme on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_tgzeme.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hrzxjs on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hrzxjs.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ehpjqr on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ehpjqr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_icelvl on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_icelvl.id
left join geometry.point_view geometry_point_view_thhzzb on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_thhzzb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ghwunj.*) AS annotation
  from master_join master_join_myyjlz
  join notes.note_view notes_note_lat_ghwunj on master_join_myyjlz.target_id = notes_note_lat_ghwunj.id
  where master_join_myyjlz.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_wwppxm on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index if not exists navaids_points_angleindication_id on navaids_points.angleindication_view (id);
create index if not exists navaids_points_angleindication_pointchoiceposition_gist on navaids_points.angleindication_view using GIST (pointchoiceposition_geom);
-- ApproachLightingSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_ngeiaa.title as varchar), '(' || airport_heliport_runwaydirection_pt_ngeiaa.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_ngeiaa.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_rkyrvk.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_ayfhqa.availability::jsonb as availability,
    notes_note_view_nuxaef.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ngeiaa on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_ngeiaa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hjjxaj.id) as element
  from master_join master_join_ssibfp
  join shared.lightelement_view shared_lightelement_lat_hjjxaj on master_join_ssibfp.target_id = shared_lightelement_lat_hjjxaj.id
  where master_join_ssibfp.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_rkyrvk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hostnq.id) as availability
  from master_join master_join_rmdybx
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hostnq on master_join_rmdybx.target_id = airport_heliport_groundlightingavailability_lat_hostnq.id
  where master_join_rmdybx.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ayfhqa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntgmim.*) AS annotation
  from master_join master_join_xbgkul
  join notes.note_view notes_note_lat_ntgmim on master_join_xbgkul.target_id = notes_note_lat_ntgmim.id
  where master_join_xbgkul.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_nuxaef on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index if not exists airport_heliport_approachlightingsystem_id on airport_heliport.approachlightingsystem_view (id);
-- ApronElementType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_knytjy.title as varchar), '(' || airport_heliport_apron_pt_knytjy.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_knytjy.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_owtufw.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_owtufw.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_rtbgaf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rtbgaf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rtbgaf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rtbgaf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rtbgaf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rtbgaf.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_tebnui.supplyservice::jsonb as supplyservice,
    notes_note_view_nkhqdv.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_bhkvdp.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_knytjy on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_knytjy.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_owtufw on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_owtufw.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rtbgaf on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_rtbgaf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_ghcybw.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_ghcybw.title AS varchar), '(' || service_airportsuppliesservice_lat_ghcybw.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_ghcybw.href
  )) as supplyservice  from master_join master_join_axeivu
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_ghcybw on master_join_axeivu.target_id = service_airportsuppliesservice_lat_ghcybw.id
  where master_join_axeivu.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_tebnui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uildgz.*) AS annotation
  from master_join master_join_lxnitn
  join notes.note_view notes_note_lat_uildgz on master_join_lxnitn.target_id = notes_note_lat_uildgz.id
  where master_join_lxnitn.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_nkhqdv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_tkgcwq.id) as availability
  from master_join master_join_zrprex
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_tkgcwq on master_join_zrprex.target_id = airport_heliport_apronareaavailability_lat_tkgcwq.id
  where master_join_zrprex.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_bhkvdp on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index if not exists airport_heliport_apronelement_id on airport_heliport.apronelement_view (id);
create index if not exists airport_heliport_apronelement_extent_gist on airport_heliport.apronelement_view using GIST (extent_geom);
-- ApronLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_ejpqaq.title as varchar), '(' || airport_heliport_apron_pt_ejpqaq.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_ejpqaq.href::text AS lightedapron_href,
    shared_lightelement_view_iljbri.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_rqplop.availability::jsonb as availability,
    notes_note_view_cmtpjt.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ejpqaq on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_ejpqaq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hafmqd.id) as element
  from master_join master_join_ivzpzh
  join shared.lightelement_view shared_lightelement_lat_hafmqd on master_join_ivzpzh.target_id = shared_lightelement_lat_hafmqd.id
  where master_join_ivzpzh.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_iljbri on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hsfcck.id) as availability
  from master_join master_join_pzqlsn
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hsfcck on master_join_pzqlsn.target_id = airport_heliport_groundlightingavailability_lat_hsfcck.id
  where master_join_pzqlsn.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_rqplop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibywts.*) AS annotation
  from master_join master_join_ltfuwz
  join notes.note_view notes_note_lat_ibywts on master_join_ltfuwz.target_id = notes_note_lat_ibywts.id
  where master_join_ltfuwz.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_cmtpjt on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_apronlightsystem_id on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_eyjanr.title as varchar), '(' || airport_heliport_apron_pt_eyjanr.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_eyjanr.href::text AS markedapron_href,
    airport_heliport_markingelement_view_mkdugx.element::jsonb as element,
    notes_note_view_nnfqly.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_eyjanr on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_eyjanr.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ghbkob.id) as element
  from master_join master_join_wfryhx
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ghbkob on master_join_wfryhx.target_id = airport_heliport_markingelement_lat_ghbkob.id
  where master_join_wfryhx.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_mkdugx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_umydfv.*) AS annotation
  from master_join master_join_myggmf
  join notes.note_view notes_note_lat_umydfv on master_join_myggmf.target_id = notes_note_lat_umydfv.id
  where master_join_myggmf.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_nnfqly on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index if not exists airport_heliport_apronmarking_id on airport_heliport.apronmarking_view (id);
-- ApronType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zakfdp.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_zakfdp.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_grbthl.title as varchar), '(' || airport_heliport_airportheliport_pt_grbthl.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_grbthl.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_waaizr.contaminant::jsonb as contaminant,
    notes_note_view_tpvzcw.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_qhycnt.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zakfdp on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zakfdp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_grbthl on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_grbthl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_xpnyvc.id) as contaminant
  from master_join master_join_pwszdh
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_xpnyvc on master_join_pwszdh.target_id = airport_heliport_aproncontamination_lat_xpnyvc.id
  where master_join_pwszdh.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_waaizr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lsapel.*) AS annotation
  from master_join master_join_alnmrt
  join notes.note_view notes_note_lat_lsapel on master_join_alnmrt.target_id = notes_note_lat_lsapel.id
  where master_join_alnmrt.source_id = airport_heliport.apron_ts.id
) as notes_note_view_tpvzcw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_updfry.id) as availability
  from master_join master_join_unjvgz
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_updfry on master_join_unjvgz.target_id = airport_heliport_apronareaavailability_lat_updfry.id
  where master_join_unjvgz.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_qhycnt on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index if not exists airport_heliport_apron_id on airport_heliport.apron_view (id);
-- ArrestingGearType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xqtygb.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_xqtygb.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_onqnbm.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_onqnbm.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_onqnbm.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_onqnbm.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_onqnbm.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_onqnbm.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_hovocd.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_hovocd.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_hovocd.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_hovocd.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_hovocd.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_hovocd.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_rtaalx.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_rtaalx.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_rtaalx.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_rtaalx.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_rtaalx.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_rtaalx.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_rtaalx.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_rtaalx.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_arsocq.runwaydirection::jsonb as runwaydirection,
    notes_note_view_ewdlpu.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xqtygb on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xqtygb.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_onqnbm on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_onqnbm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hovocd on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_hovocd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rtaalx on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_rtaalx.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_nvlhfv.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_nvlhfv.title AS varchar), '(' || airport_heliport_runwaydirection_lat_nvlhfv.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_nvlhfv.href
  )) as runwaydirection  from master_join master_join_ykdgie
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_nvlhfv on master_join_ykdgie.target_id = airport_heliport_runwaydirection_lat_nvlhfv.id
  where master_join_ykdgie.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_arsocq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_djefzi.*) AS annotation
  from master_join master_join_ndybas
  join notes.note_view notes_note_lat_djefzi on master_join_ndybas.target_id = notes_note_lat_djefzi.id
  where master_join_ndybas.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_ewdlpu on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index if not exists airport_heliport_arrestinggear_id on airport_heliport.arrestinggear_view (id);
create index if not exists airport_heliport_arrestinggear_extentcurveextent_gist on airport_heliport.arrestinggear_view using GIST (extentcurveextent_geom);
create index if not exists airport_heliport_arrestinggear_extentsurfaceextent_gist on airport_heliport.arrestinggear_view using GIST (extentsurfaceextent_geom);
create index if not exists airport_heliport_arrestinggear_extentpointextent_gist on airport_heliport.arrestinggear_view using GIST (extentpointextent_geom);
-- ArrivalFeederLegType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ortgus.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ortgus.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qbwyao.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_qbwyao.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vyyjjm.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_vyyjjm.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_ntlwlg.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ntlwlg.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_vijmod.title as varchar), '(' || navaids_points_angleindication_pt_vijmod.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_vijmod.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_myaioj.title as varchar), '(' || navaids_points_distanceindication_pt_myaioj.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_myaioj.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_epqqzs.id)::jsonb AS holding,
    procedure_holdinguse_view_epqqzs.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_srhhlh.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_srhhlh.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_srhhlh.href::text AS approach_href,
    shared_aircraftcharacteristic_view_bixfxf.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_ycarmy.designsurface::jsonb as designsurface,
    notes_note_view_gnplpw.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ortgus on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ortgus.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qbwyao on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_qbwyao.id
left join geometry.curve_view geometry_curve_view_ntlwlg on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_ntlwlg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vyyjjm on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vyyjjm.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vijmod on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_vijmod.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_myaioj on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_myaioj.id
left join procedure.holdinguse_view procedure_holdinguse_view_epqqzs on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_epqqzs.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_srhhlh on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_srhhlh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_tppddc.id) as aircraftcategory
  from master_join master_join_iyaxnz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_tppddc on master_join_iyaxnz.target_id = shared_aircraftcharacteristic_lat_tppddc.id
  where master_join_iyaxnz.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_bixfxf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ugntbq.id) as designsurface
  from master_join master_join_tbzlbe
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ugntbq on master_join_tbzlbe.target_id = shared_obstacleassessmentarea_lat_ugntbq.id
  where master_join_tbzlbe.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_ycarmy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mhrynq.*) AS annotation
  from master_join master_join_mdjytt
  join notes.note_view notes_note_lat_mhrynq on master_join_mdjytt.target_id = notes_note_lat_mhrynq.id
  where master_join_mdjytt.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_gnplpw on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index if not exists procedure_arrivalfeederleg_id on procedure.arrivalfeederleg_view (id);
create index if not exists procedure_arrivalfeederleg_trajectory_gist on procedure.arrivalfeederleg_view using GIST (trajectory_geom);
-- ArrivalLegType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hbnvrp.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_hbnvrp.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_gegggm.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_gegggm.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_duxxdp.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_duxxdp.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_sujgft.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_sujgft.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_foroac.title as varchar), '(' || navaids_points_angleindication_pt_foroac.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_foroac.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jfdvdo.title as varchar), '(' || navaids_points_distanceindication_pt_jfdvdo.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_jfdvdo.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_rvneaw.id)::jsonb AS holding,
    procedure_holdinguse_view_rvneaw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_wqdkgb.title as varchar), '(' || procedure_standardinstrumentarrival_pt_wqdkgb.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_wqdkgb.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_nhmmsg.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_lwlahz.designsurface::jsonb as designsurface,
    notes_note_view_oishyg.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hbnvrp on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hbnvrp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_gegggm on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_gegggm.id
left join geometry.curve_view geometry_curve_view_sujgft on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_sujgft.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_duxxdp on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_duxxdp.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_foroac on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_foroac.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jfdvdo on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_jfdvdo.id
left join procedure.holdinguse_view procedure_holdinguse_view_rvneaw on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_rvneaw.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_wqdkgb on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_wqdkgb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_haopbo.id) as aircraftcategory
  from master_join master_join_sglmfh
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_haopbo on master_join_sglmfh.target_id = shared_aircraftcharacteristic_lat_haopbo.id
  where master_join_sglmfh.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_nhmmsg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_rxlnqf.id) as designsurface
  from master_join master_join_wfzzss
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_rxlnqf on master_join_wfzzss.target_id = shared_obstacleassessmentarea_lat_rxlnqf.id
  where master_join_wfzzss.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_lwlahz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rutzie.*) AS annotation
  from master_join master_join_kaipja
  join notes.note_view notes_note_lat_rutzie on master_join_kaipja.target_id = notes_note_lat_rutzie.id
  where master_join_kaipja.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_oishyg on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index if not exists procedure_arrivalleg_id on procedure.arrivalleg_view (id);
create index if not exists procedure_arrivalleg_trajectory_gist on procedure.arrivalleg_view using GIST (trajectory_geom);
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_stxkki.title as varchar), '(' || organisation_organisationauthority_pt_stxkki.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_stxkki.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_abgiwm.title as varchar), '(' || airspace_airspace_pt_abgiwm.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_abgiwm.href::text AS assignedairspace_href,
    notes_note_view_qwiumk.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_stxkki on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_stxkki.id
left join airspace.airspace_pt airspace_airspace_pt_abgiwm on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_abgiwm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oyqcvy.*) AS annotation
  from master_join master_join_okbmoo
  join notes.note_view notes_note_lat_oyqcvy on master_join_okbmoo.target_id = notes_note_lat_oyqcvy.id
  where master_join_okbmoo.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_qwiumk on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index if not exists airspace_authorityforairspace_id on airspace.authorityforairspace_view (id);
-- AzimuthType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_qylsat.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qylsat.longitude AS location_longitude,
    geometry_elevatedpoint_view_qylsat.latitude AS location_latitude,
    geometry_elevatedpoint_view_qylsat.elevation AS location_elevation,
    geometry_elevatedpoint_view_qylsat.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qylsat.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qylsat.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qylsat.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wpxrep.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_aaxwtt.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_kuqwog.availability::jsonb as availability,
    notes_note_view_khqozd.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qylsat on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_qylsat.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fgifjp.id) as authority
  from master_join master_join_prtwhs
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fgifjp on master_join_prtwhs.target_id = navaids_points_authorityfornavaidequipment_lat_fgifjp.id
  where master_join_prtwhs.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_wpxrep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_dsxevp.id) as monitoring
  from master_join master_join_aczmsp
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_dsxevp on master_join_aczmsp.target_id = navaids_points_navaidequipmentmonitoring_lat_dsxevp.id
  where master_join_aczmsp.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_aaxwtt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wbzaih.id) as availability
  from master_join master_join_eyvxsj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wbzaih on master_join_eyvxsj.target_id = navaids_points_navaidoperationalstatus_lat_wbzaih.id
  where master_join_eyvxsj.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_kuqwog on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_unuotl.*) AS annotation
  from master_join master_join_wikyjz
  join notes.note_view notes_note_lat_unuotl on master_join_wikyjz.target_id = notes_note_lat_unuotl.id
  where master_join_wikyjz.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_khqozd on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index if not exists navaids_points_azimuth_id on navaids_points.azimuth_view (id);
create index if not exists navaids_points_azimuth_location_gist on navaids_points.azimuth_view using GIST (location_geom);
-- ChangeOverPointType
-- ['routes.routeportion_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_gksftl.title as varchar), '(' || navaids_points_designatedpoint_pt_gksftl.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gksftl.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fgzizh.title as varchar), '(' || navaids_points_navaid_pt_fgzizh.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_fgzizh.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_izqyjp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_izqyjp.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_izqyjp.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tsqnqq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tsqnqq.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tsqnqq.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_unspbg.title as varchar), '(' || airport_heliport_airportheliport_pt_unspbg.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_unspbg.href::text AS locationairportreferencepoint_href,
    geometry_point_view_krhwlb.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_krhwlb.longitude AS locationposition_longitude,
    geometry_point_view_krhwlb.latitude AS locationposition_latitude,
    geometry_point_view_krhwlb.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_bobbub.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_bobbub.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_lcorjt.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gksftl on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gksftl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fgzizh on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_fgzizh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_izqyjp on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_izqyjp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tsqnqq on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tsqnqq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_unspbg on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_unspbg.id
left join geometry.point_view geometry_point_view_krhwlb on routes.changeoverpoint_ts.location_position_id = geometry_point_view_krhwlb.id
left join routes.routeportion_view routes_routeportion_view_bobbub on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_bobbub.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_daluzv.*) AS annotation
  from master_join master_join_ifllao
  join notes.note_view notes_note_lat_daluzv on master_join_ifllao.target_id = notes_note_lat_daluzv.id
  where master_join_ifllao.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_lcorjt on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index if not exists routes_changeoverpoint_id on routes.changeoverpoint_view (id);
create index if not exists routes_changeoverpoint_locationposition_gist on routes.changeoverpoint_view using GIST (locationposition_geom);
-- CheckpointINSType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_tsjkud.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_tsjkud.longitude AS position_longitude,
    geometry_elevatedpoint_view_tsjkud.latitude AS position_latitude,
    geometry_elevatedpoint_view_tsjkud.elevation AS position_elevation,
    geometry_elevatedpoint_view_tsjkud.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_tsjkud.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_tsjkud.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_tsjkud.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_qvdkoi.title as varchar), '(' || airport_heliport_airportheliport_pt_qvdkoi.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_qvdkoi.href::text AS airportheliport_href,
    notes_note_view_kosoze.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tsjkud on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_tsjkud.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qvdkoi on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_qvdkoi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ehdcss.*) AS annotation
  from master_join master_join_sgpsde
  join notes.note_view notes_note_lat_ehdcss on master_join_sgpsde.target_id = notes_note_lat_ehdcss.id
  where master_join_sgpsde.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_kosoze on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index if not exists navaids_points_checkpointins_id on navaids_points.checkpointins_view (id);
create index if not exists navaids_points_checkpointins_position_gist on navaids_points.checkpointins_view using GIST (position_geom);
-- CheckpointVORType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_ufnrzu.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_ufnrzu.longitude AS position_longitude,
    geometry_elevatedpoint_view_ufnrzu.latitude AS position_latitude,
    geometry_elevatedpoint_view_ufnrzu.elevation AS position_elevation,
    geometry_elevatedpoint_view_ufnrzu.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ufnrzu.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ufnrzu.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ufnrzu.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_ggqsdm.title as varchar), '(' || airport_heliport_airportheliport_pt_ggqsdm.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_ggqsdm.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_oteeiw.title as varchar), '(' || navaids_points_vor_pt_oteeiw.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_oteeiw.href::text AS checkpointfacility_href,
    notes_note_view_wbhauj.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ufnrzu on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_ufnrzu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ggqsdm on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_ggqsdm.id
left join navaids_points.vor_pt navaids_points_vor_pt_oteeiw on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_oteeiw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lxixsz.*) AS annotation
  from master_join master_join_osgxog
  join notes.note_view notes_note_lat_lxixsz on master_join_osgxog.target_id = notes_note_lat_lxixsz.id
  where master_join_osgxog.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_wbhauj on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index if not exists navaids_points_checkpointvor_id on navaids_points.checkpointvor_view (id);
create index if not exists navaids_points_checkpointvor_position_gist on navaids_points.checkpointvor_view using GIST (position_geom);
-- CirclingAreaType
-- ['procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_oljymf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_oljymf.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_doawmr.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_doawmr.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_doawmr.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_gfhbgb.id)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_gfhbgb.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_zinnoj.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_qpcgis.designsurface::jsonb as designsurface,
    notes_note_view_wiusyf.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_oljymf on public.circlingarea_ts.extent_id = geometry_surface_view_oljymf.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_doawmr on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_doawmr.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_gfhbgb on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_gfhbgb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_iebkrl.id) as condition
  from master_join master_join_ovtydj
  join procedure.approachcondition_view procedure_approachcondition_lat_iebkrl on master_join_ovtydj.target_id = procedure_approachcondition_lat_iebkrl.id
  where master_join_ovtydj.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_zinnoj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fevwwd.id) as designsurface
  from master_join master_join_dkbxmm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fevwwd on master_join_dkbxmm.target_id = shared_obstacleassessmentarea_lat_fevwwd.id
  where master_join_dkbxmm.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_qpcgis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gxbbgy.*) AS annotation
  from master_join master_join_ydafmr
  join notes.note_view notes_note_lat_gxbbgy on master_join_ydafmr.target_id = notes_note_lat_gxbbgy.id
  where master_join_ydafmr.source_id = public.circlingarea_ts.id
) as notes_note_view_wiusyf on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index if not exists public_circlingarea_id on public.circlingarea_view (id);
create index if not exists public_circlingarea_extent_gist on public.circlingarea_view using GIST (extent_geom);
-- DeicingAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_jyrfxs.title as varchar), '(' || airport_heliport_deicingarea_pt_jyrfxs.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_jyrfxs.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_rgowyr.element::jsonb as element,
    notes_note_view_bnmjrc.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_jyrfxs on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_jyrfxs.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_kaieyk.id) as element
  from master_join master_join_wxjezu
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_kaieyk on master_join_wxjezu.target_id = airport_heliport_markingelement_lat_kaieyk.id
  where master_join_wxjezu.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_rgowyr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqhqjo.*) AS annotation
  from master_join master_join_fckbhl
  join notes.note_view notes_note_lat_aqhqjo on master_join_fckbhl.target_id = notes_note_lat_aqhqjo.id
  where master_join_fckbhl.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_bnmjrc on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index if not exists airport_heliport_deicingareamarking_id on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaType
-- ['notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_xpcdfu.title as varchar), '(' || airport_heliport_apron_pt_xpcdfu.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_xpcdfu.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_nrzwgy.title as varchar), '(' || airport_heliport_taxiway_pt_nrzwgy.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_nrzwgy.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_yuhrap.title as varchar), '(' || airport_heliport_aircraftstand_pt_yuhrap.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_yuhrap.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kgucer.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_kgucer.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_mtrvzx.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mtrvzx.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mtrvzx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mtrvzx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mtrvzx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mtrvzx.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_cttwfu.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_tfawwj.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_xpcdfu on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_xpcdfu.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_nrzwgy on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_nrzwgy.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_yuhrap on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_yuhrap.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kgucer on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kgucer.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mtrvzx on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_mtrvzx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kgmdwu.*) AS annotation
  from master_join master_join_aryhtr
  join notes.note_view notes_note_lat_kgmdwu on master_join_aryhtr.target_id = notes_note_lat_kgmdwu.id
  where master_join_aryhtr.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_cttwfu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_qliuqs.id) as availability
  from master_join master_join_ysorlq
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_qliuqs on master_join_ysorlq.target_id = airport_heliport_apronareaavailability_lat_qliuqs.id
  where master_join_ysorlq.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_tfawwj on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index if not exists airport_heliport_deicingarea_id on airport_heliport.deicingarea_view (id);
create index if not exists airport_heliport_deicingarea_extent_gist on airport_heliport.deicingarea_view using GIST (extent_geom);
-- DepartureLegType
-- ['geometry.curve_view', 'procedure.departurearrivalcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hoaidx.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_hoaidx.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rgenzj.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rgenzj.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dwezsq.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_dwezsq.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_rzcgzm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_rzcgzm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nhctjj.title as varchar), '(' || navaids_points_angleindication_pt_nhctjj.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_nhctjj.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tohtzr.title as varchar), '(' || navaids_points_distanceindication_pt_tohtzr.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_tohtzr.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_alkuhn.id)::jsonb AS holding,
    procedure_holdinguse_view_alkuhn.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_hvzaee.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_hvzaee.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_hvzaee.href::text AS departure_href,
    shared_aircraftcharacteristic_view_owfnhc.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_euvfff.designsurface::jsonb as designsurface,
    notes_note_view_lsrrvq.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_jqtnol.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hoaidx on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hoaidx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rgenzj on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rgenzj.id
left join geometry.curve_view geometry_curve_view_rzcgzm on procedure.departureleg_ts.trajectory_id = geometry_curve_view_rzcgzm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dwezsq on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_dwezsq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nhctjj on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_nhctjj.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tohtzr on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_tohtzr.id
left join procedure.holdinguse_view procedure_holdinguse_view_alkuhn on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_alkuhn.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_hvzaee on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_hvzaee.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hmbxvm.id) as aircraftcategory
  from master_join master_join_qqlukq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_hmbxvm on master_join_qqlukq.target_id = shared_aircraftcharacteristic_lat_hmbxvm.id
  where master_join_qqlukq.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_owfnhc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_syixnr.id) as designsurface
  from master_join master_join_pfmnlv
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_syixnr on master_join_pfmnlv.target_id = shared_obstacleassessmentarea_lat_syixnr.id
  where master_join_pfmnlv.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_euvfff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dxdvsh.*) AS annotation
  from master_join master_join_fdvzga
  join notes.note_view notes_note_lat_dxdvsh on master_join_fdvzga.target_id = notes_note_lat_dxdvsh.id
  where master_join_fdvzga.source_id = procedure.departureleg_ts.id
) as notes_note_view_lsrrvq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_rlwnob.id) as condition
  from master_join master_join_eyyztj
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_rlwnob on master_join_eyyztj.target_id = procedure_departurearrivalcondition_lat_rlwnob.id
  where master_join_eyyztj.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_jqtnol on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index if not exists procedure_departureleg_id on procedure.departureleg_view (id);
create index if not exists procedure_departureleg_trajectory_gist on procedure.departureleg_view using GIST (trajectory_geom);
-- DesignatedPointType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_eplgln.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_eplgln.longitude AS location_longitude,
    geometry_point_view_eplgln.latitude AS location_latitude,
    geometry_point_view_eplgln.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mlfjtp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mlfjtp.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_mlfjtp.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fcsgkk.title as varchar), '(' || airport_heliport_airportheliport_pt_fcsgkk.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_fcsgkk.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rjguvt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rjguvt.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rjguvt.href::text AS runwaypoint_href,
    notes_note_view_ytbukp.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_eplgln on navaids_points.designatedpoint_ts.location_id = geometry_point_view_eplgln.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mlfjtp on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_mlfjtp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fcsgkk on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_fcsgkk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rjguvt on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rjguvt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhtsbb.*) AS annotation
  from master_join master_join_jhuvvz
  join notes.note_view notes_note_lat_qhtsbb on master_join_jhuvvz.target_id = notes_note_lat_qhtsbb.id
  where master_join_jhuvvz.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_ytbukp on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index if not exists navaids_points_designatedpoint_id on navaids_points.designatedpoint_view (id);
create index if not exists navaids_points_designatedpoint_location_gist on navaids_points.designatedpoint_view using GIST (location_geom);
-- DirectionFinderType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_slnvgv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_slnvgv.longitude AS location_longitude,
    geometry_elevatedpoint_view_slnvgv.latitude AS location_latitude,
    geometry_elevatedpoint_view_slnvgv.elevation AS location_elevation,
    geometry_elevatedpoint_view_slnvgv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_slnvgv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_slnvgv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_slnvgv.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_jslihk.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_nzxbjz.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_skmlya.availability::jsonb as availability,
    notes_note_view_ixlzha.annotation::jsonb as annotation,
    service_informationservice_pt_japjrx.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_slnvgv on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_slnvgv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_yclith.id) as authority
  from master_join master_join_scyqmi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_yclith on master_join_scyqmi.target_id = navaids_points_authorityfornavaidequipment_lat_yclith.id
  where master_join_scyqmi.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_jslihk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_wpayxd.id) as monitoring
  from master_join master_join_wmoecv
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_wpayxd on master_join_wmoecv.target_id = navaids_points_navaidequipmentmonitoring_lat_wpayxd.id
  where master_join_wmoecv.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_nzxbjz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gmljrj.id) as availability
  from master_join master_join_bowucn
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_gmljrj on master_join_bowucn.target_id = navaids_points_navaidoperationalstatus_lat_gmljrj.id
  where master_join_bowucn.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_skmlya on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_psuugu.*) AS annotation
  from master_join master_join_juefhc
  join notes.note_view notes_note_lat_psuugu on master_join_juefhc.target_id = notes_note_lat_psuugu.id
  where master_join_juefhc.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_ixlzha on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_neugiz.id,
      'title', coalesce(cast(service_informationservice_lat_neugiz.title AS varchar), '(' || service_informationservice_lat_neugiz.nilreason[1] || ')'),
      'href', service_informationservice_lat_neugiz.href
  )) as informationprovision  from master_join master_join_buxxjm
  join service.informationservice_pt service_informationservice_lat_neugiz on master_join_buxxjm.target_id = service_informationservice_lat_neugiz.id
  where master_join_buxxjm.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_japjrx on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index if not exists navaids_points_directionfinder_id on navaids_points.directionfinder_view (id);
create index if not exists navaids_points_directionfinder_location_gist on navaids_points.directionfinder_view using GIST (location_geom);
-- DistanceIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_xxborb.title as varchar), '(' || navaids_points_designatedpoint_pt_xxborb.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_xxborb.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_aancfd.title as varchar), '(' || navaids_points_designatedpoint_pt_aancfd.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_aancfd.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_iidhlc.title as varchar), '(' || navaids_points_navaid_pt_iidhlc.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_iidhlc.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qviedu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qviedu.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_qviedu.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mcujnx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mcujnx.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mcujnx.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nlcnmp.title as varchar), '(' || airport_heliport_airportheliport_pt_nlcnmp.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_nlcnmp.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_gvbuns.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_gvbuns.longitude AS pointchoiceposition_longitude,
    geometry_point_view_gvbuns.latitude AS pointchoiceposition_latitude,
    geometry_point_view_gvbuns.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_rjkoxp.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xxborb on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_xxborb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_aancfd on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_aancfd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_iidhlc on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_iidhlc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qviedu on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qviedu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mcujnx on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mcujnx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nlcnmp on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_nlcnmp.id
left join geometry.point_view geometry_point_view_gvbuns on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_gvbuns.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbphbz.*) AS annotation
  from master_join master_join_vkekvk
  join notes.note_view notes_note_lat_wbphbz on master_join_vkekvk.target_id = notes_note_lat_wbphbz.id
  where master_join_vkekvk.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_rjkoxp on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index if not exists navaids_points_distanceindication_id on navaids_points.distanceindication_view (id);
create index if not exists navaids_points_distanceindication_pointchoiceposition_gist on navaids_points.distanceindication_view using GIST (pointchoiceposition_geom);
-- DMEType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_lsdpaq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lsdpaq.longitude AS location_longitude,
    geometry_elevatedpoint_view_lsdpaq.latitude AS location_latitude,
    geometry_elevatedpoint_view_lsdpaq.elevation AS location_elevation,
    geometry_elevatedpoint_view_lsdpaq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lsdpaq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lsdpaq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lsdpaq.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hlnvsh.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tgnpgm.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qasgdb.availability::jsonb as availability,
    notes_note_view_dwwahp.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lsdpaq on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_lsdpaq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_wjsako.id) as authority
  from master_join master_join_sgeurg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_wjsako on master_join_sgeurg.target_id = navaids_points_authorityfornavaidequipment_lat_wjsako.id
  where master_join_sgeurg.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_hlnvsh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_avwfau.id) as monitoring
  from master_join master_join_rottde
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_avwfau on master_join_rottde.target_id = navaids_points_navaidequipmentmonitoring_lat_avwfau.id
  where master_join_rottde.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tgnpgm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fayoeh.id) as availability
  from master_join master_join_mztzwp
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fayoeh on master_join_mztzwp.target_id = navaids_points_navaidoperationalstatus_lat_fayoeh.id
  where master_join_mztzwp.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_qasgdb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qzvfej.*) AS annotation
  from master_join master_join_yhyibt
  join notes.note_view notes_note_lat_qzvfej on master_join_yhyibt.target_id = notes_note_lat_qzvfej.id
  where master_join_yhyibt.source_id = navaids_points.dme_ts.id
) as notes_note_view_dwwahp on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index if not exists navaids_points_dme_id on navaids_points.dme_view (id);
create index if not exists navaids_points_dme_location_gist on navaids_points.dme_view using GIST (location_geom);
-- ElevationType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_bgtvrn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bgtvrn.longitude AS location_longitude,
    geometry_elevatedpoint_view_bgtvrn.latitude AS location_latitude,
    geometry_elevatedpoint_view_bgtvrn.elevation AS location_elevation,
    geometry_elevatedpoint_view_bgtvrn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bgtvrn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bgtvrn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bgtvrn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_zqjbtk.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_axlwya.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hpjncs.availability::jsonb as availability,
    notes_note_view_satbbv.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bgtvrn on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_bgtvrn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fhkhjk.id) as authority
  from master_join master_join_szrtbg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fhkhjk on master_join_szrtbg.target_id = navaids_points_authorityfornavaidequipment_lat_fhkhjk.id
  where master_join_szrtbg.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_zqjbtk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ilseqj.id) as monitoring
  from master_join master_join_gljzzt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ilseqj on master_join_gljzzt.target_id = navaids_points_navaidequipmentmonitoring_lat_ilseqj.id
  where master_join_gljzzt.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_axlwya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_udkbea.id) as availability
  from master_join master_join_lzxgjy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_udkbea on master_join_lzxgjy.target_id = navaids_points_navaidoperationalstatus_lat_udkbea.id
  where master_join_lzxgjy.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_hpjncs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wuoxud.*) AS annotation
  from master_join master_join_dmcndv
  join notes.note_view notes_note_lat_wuoxud on master_join_dmcndv.target_id = notes_note_lat_wuoxud.id
  where master_join_dmcndv.source_id = navaids_points.elevation_ts.id
) as notes_note_view_satbbv on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index if not exists navaids_points_elevation_id on navaids_points.elevation_view (id);
create index if not exists navaids_points_elevation_location_gist on navaids_points.elevation_view using GIST (location_geom);
-- FinalLegType
-- ['geometry.curve_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'public.fasdatablock_view', 'notes.note_view', 'procedure.holdinguse_view', 'geometry.point_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dvckyz.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_dvckyz.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_trleme.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_trleme.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wszagw.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_wszagw.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_judaow.id)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_judaow.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_wbfggq.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_wbfggq.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_hwiqol.title as varchar), '(' || navaids_points_angleindication_pt_hwiqol.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_hwiqol.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_sxlgto.title as varchar), '(' || navaids_points_distanceindication_pt_sxlgto.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_sxlgto.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ejmqao.id)::jsonb AS holding,
    procedure_holdinguse_view_ejmqao.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_wchavx.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_wchavx.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_wchavx.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_evtlwg.title as varchar), '(' || navaids_points_designatedpoint_pt_evtlwg.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_evtlwg.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fcwrif.title as varchar), '(' || navaids_points_navaid_pt_fcwrif.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_fcwrif.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wsfgsi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wsfgsi.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_wsfgsi.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ocjsqt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ocjsqt.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ocjsqt.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xekrpl.title as varchar), '(' || airport_heliport_airportheliport_pt_xekrpl.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_xekrpl.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_nrjtnh.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_nrjtnh.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_nrjtnh.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_nrjtnh.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_dopzer.id)::jsonb AS fasdata,
    public_fasdatablock_view_dopzer.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_xyrmxa.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_nkwixd.designsurface::jsonb as designsurface,
    notes_note_view_fcdtvq.annotation::jsonb as annotation,
    procedure_approachcondition_view_xgzzdn.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dvckyz on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_dvckyz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_trleme on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_trleme.id
left join geometry.curve_view geometry_curve_view_wbfggq on procedure.finalleg_ts.trajectory_id = geometry_curve_view_wbfggq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wszagw on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_wszagw.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_hwiqol on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_hwiqol.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_sxlgto on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_sxlgto.id
left join procedure.holdinguse_view procedure_holdinguse_view_ejmqao on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_ejmqao.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_wchavx on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_wchavx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_evtlwg on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_evtlwg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fcwrif on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_fcwrif.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wsfgsi on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wsfgsi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ocjsqt on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ocjsqt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xekrpl on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xekrpl.id
left join geometry.point_view geometry_point_view_nrjtnh on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_nrjtnh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_judaow on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_judaow.id
left join public.fasdatablock_view public_fasdatablock_view_dopzer on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_dopzer.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qqdrvs.id) as aircraftcategory
  from master_join master_join_cazqzw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qqdrvs on master_join_cazqzw.target_id = shared_aircraftcharacteristic_lat_qqdrvs.id
  where master_join_cazqzw.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_xyrmxa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_avwfsw.id) as designsurface
  from master_join master_join_akcpso
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_avwfsw on master_join_akcpso.target_id = shared_obstacleassessmentarea_lat_avwfsw.id
  where master_join_akcpso.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_nkwixd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbjfuy.*) AS annotation
  from master_join master_join_hqnpic
  join notes.note_view notes_note_lat_rbjfuy on master_join_hqnpic.target_id = notes_note_lat_rbjfuy.id
  where master_join_hqnpic.source_id = procedure.finalleg_ts.id
) as notes_note_view_fcdtvq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_osslgh.id) as condition
  from master_join master_join_uarcug
  join procedure.approachcondition_view procedure_approachcondition_lat_osslgh on master_join_uarcug.target_id = procedure_approachcondition_lat_osslgh.id
  where master_join_uarcug.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_xgzzdn on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index if not exists procedure_finalleg_id on procedure.finalleg_view (id);
create index if not exists procedure_finalleg_trajectory_gist on procedure.finalleg_view using GIST (trajectory_geom);
create index if not exists procedure_finalleg_finalpathalignmentpointposition_gist on procedure.finalleg_view using GIST (finalpathalignmentpointposition_geom);
-- FireFightingServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_zxcjxy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zxcjxy.longitude AS location_longitude,
    geometry_elevatedpoint_view_zxcjxy.latitude AS location_latitude,
    geometry_elevatedpoint_view_zxcjxy.elevation AS location_elevation,
    geometry_elevatedpoint_view_zxcjxy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zxcjxy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zxcjxy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zxcjxy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pmxavx.title as varchar), '(' || organisation_unit_pt_pmxavx.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pmxavx.href::text AS serviceprovider_href,
    service_callsigndetail_view_mertsi.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_oysrgj.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_gmydmq.availability::jsonb as availability,
    notes_note_view_hfqnnb.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_kemtqj.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zxcjxy on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_zxcjxy.id
left join organisation.unit_pt organisation_unit_pt_pmxavx on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_pmxavx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_wquvcx.id) as callsign
  from master_join master_join_jhhoqf
  join service.callsigndetail_view service_callsigndetail_lat_wquvcx on master_join_jhhoqf.target_id = service_callsigndetail_lat_wquvcx.id
  where master_join_jhhoqf.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_mertsi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bjeslz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bjeslz.title AS varchar), '(' || service_radiocommunicationchannel_lat_bjeslz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bjeslz.href
  )) as radiocommunication  from master_join master_join_glgoau
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bjeslz on master_join_glgoau.target_id = service_radiocommunicationchannel_lat_bjeslz.id
  where master_join_glgoau.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_oysrgj on TRUE
left join lateral(
  select
  from master_join master_join_dvowqu
  join shared.contactinformation_view shared_contactinformation_lat_phmkla on master_join_dvowqu.target_id = shared_contactinformation_lat_phmkla.id
  where master_join_dvowqu.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_atzfgg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_cyizut.id) as availability
  from master_join master_join_eikleh
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_cyizut on master_join_eikleh.target_id = service_serviceoperationalstatus_lat_cyizut.id
  where master_join_eikleh.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_gmydmq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vdcvho.*) AS annotation
  from master_join master_join_swzqnw
  join notes.note_view notes_note_lat_vdcvho on master_join_swzqnw.target_id = notes_note_lat_vdcvho.id
  where master_join_swzqnw.source_id = service.firefightingservice_ts.id
) as notes_note_view_hfqnnb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fsbgnk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fsbgnk.title AS varchar), '(' || airport_heliport_airportheliport_lat_fsbgnk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fsbgnk.href
  )) as airportheliport  from master_join master_join_hqphkr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fsbgnk on master_join_hqphkr.target_id = airport_heliport_airportheliport_lat_fsbgnk.id
  where master_join_hqphkr.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_kemtqj on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index if not exists service_firefightingservice_id on service.firefightingservice_view (id);
create index if not exists service_firefightingservice_location_gist on service.firefightingservice_view using GIST (location_geom);
-- FlightRestrictionType
-- ['notes.note_view', 'routes.flightconditioncombination_view', 'routes.flightrestrictionroute_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_rolmja.id)::jsonb AS flight,
    routes_flightconditioncombination_view_rolmja.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_jlzlba.regulatedroute::jsonb as regulatedroute,
    notes_note_view_wefqtk.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_rolmja on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_rolmja.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_jjdrsr.id) as regulatedroute
  from master_join master_join_vrxyum
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_jjdrsr on master_join_vrxyum.target_id = routes_flightrestrictionroute_lat_jjdrsr.id
  where master_join_vrxyum.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_jlzlba on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njfocm.*) AS annotation
  from master_join master_join_ifugde
  join notes.note_view notes_note_lat_njfocm on master_join_ifugde.target_id = notes_note_lat_njfocm.id
  where master_join_ifugde.source_id = routes.flightrestriction_ts.id
) as notes_note_view_wefqtk on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index if not exists routes_flightrestriction_id on routes.flightrestriction_view (id);
-- FloatingDockSiteType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_rvbelh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rvbelh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rvbelh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rvbelh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rvbelh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rvbelh.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_volflj.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rvbelh on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_rvbelh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ayeepb.*) AS annotation
  from master_join master_join_ksmxpi
  join notes.note_view notes_note_lat_ayeepb on master_join_ksmxpi.target_id = notes_note_lat_ayeepb.id
  where master_join_ksmxpi.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_volflj on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index if not exists airport_heliport_floatingdocksite_id on airport_heliport.floatingdocksite_view (id);
create index if not exists airport_heliport_floatingdocksite_extent_gist on airport_heliport.floatingdocksite_view using GIST (extent_geom);
-- GeoBorderType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_cxyrap.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_cxyrap.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_iixdlk.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_cxyrap on airspace.geoborder_ts.border_id = geometry_curve_view_cxyrap.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rpvqvd.*) AS annotation
  from master_join master_join_wesixc
  join notes.note_view notes_note_lat_rpvqvd on master_join_wesixc.target_id = notes_note_lat_rpvqvd.id
  where master_join_wesixc.source_id = airspace.geoborder_ts.id
) as notes_note_view_iixdlk on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index if not exists airspace_geoborder_id on airspace.geoborder_view (id);
create index if not exists airspace_geoborder_border_gist on airspace.geoborder_view using GIST (border_geom);
-- GlidepathType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_yknzrn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yknzrn.longitude AS location_longitude,
    geometry_elevatedpoint_view_yknzrn.latitude AS location_latitude,
    geometry_elevatedpoint_view_yknzrn.elevation AS location_elevation,
    geometry_elevatedpoint_view_yknzrn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yknzrn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yknzrn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yknzrn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_bkksqj.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tcnfgq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_tnvhwu.availability::jsonb as availability,
    notes_note_view_qitwbq.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yknzrn on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_yknzrn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ywbcjy.id) as authority
  from master_join master_join_mammrl
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ywbcjy on master_join_mammrl.target_id = navaids_points_authorityfornavaidequipment_lat_ywbcjy.id
  where master_join_mammrl.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_bkksqj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bzahff.id) as monitoring
  from master_join master_join_wxjlec
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bzahff on master_join_wxjlec.target_id = navaids_points_navaidequipmentmonitoring_lat_bzahff.id
  where master_join_wxjlec.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tcnfgq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ivtono.id) as availability
  from master_join master_join_fahrdk
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ivtono on master_join_fahrdk.target_id = navaids_points_navaidoperationalstatus_lat_ivtono.id
  where master_join_fahrdk.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_tnvhwu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xkqqfp.*) AS annotation
  from master_join master_join_xpmyaa
  join notes.note_view notes_note_lat_xkqqfp on master_join_xpmyaa.target_id = notes_note_lat_xkqqfp.id
  where master_join_xpmyaa.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_qitwbq on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index if not exists navaids_points_glidepath_id on navaids_points.glidepath_view (id);
create index if not exists navaids_points_glidepath_location_gist on navaids_points.glidepath_view using GIST (location_geom);
-- GroundTrafficControlServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_iizswd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_iizswd.longitude AS location_longitude,
    geometry_elevatedpoint_view_iizswd.latitude AS location_latitude,
    geometry_elevatedpoint_view_iizswd.elevation AS location_elevation,
    geometry_elevatedpoint_view_iizswd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iizswd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iizswd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iizswd.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jpcmtp.title as varchar), '(' || organisation_unit_pt_jpcmtp.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_jpcmtp.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ncwirk.title as varchar), '(' || airport_heliport_airportheliport_pt_ncwirk.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_ncwirk.href::text AS clientairport_href,
    service_callsigndetail_view_ryclfj.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_tsdxne.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_vthycp.availability::jsonb as availability,
    notes_note_view_mprfis.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iizswd on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_iizswd.id
left join organisation.unit_pt organisation_unit_pt_jpcmtp on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_jpcmtp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ncwirk on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_ncwirk.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_vxrabe.id) as callsign
  from master_join master_join_wdtvrl
  join service.callsigndetail_view service_callsigndetail_lat_vxrabe on master_join_wdtvrl.target_id = service_callsigndetail_lat_vxrabe.id
  where master_join_wdtvrl.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_ryclfj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qzxuis.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qzxuis.title AS varchar), '(' || service_radiocommunicationchannel_lat_qzxuis.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qzxuis.href
  )) as radiocommunication  from master_join master_join_ujgggc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qzxuis on master_join_ujgggc.target_id = service_radiocommunicationchannel_lat_qzxuis.id
  where master_join_ujgggc.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_tsdxne on TRUE
left join lateral(
  select
  from master_join master_join_xdkepw
  join shared.contactinformation_view shared_contactinformation_lat_zzpapo on master_join_xdkepw.target_id = shared_contactinformation_lat_zzpapo.id
  where master_join_xdkepw.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_zwfgdt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_nrtwkw.id) as availability
  from master_join master_join_zzzbmi
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_nrtwkw on master_join_zzzbmi.target_id = service_serviceoperationalstatus_lat_nrtwkw.id
  where master_join_zzzbmi.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_vthycp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lczwoh.*) AS annotation
  from master_join master_join_tepjko
  join notes.note_view notes_note_lat_lczwoh on master_join_tepjko.target_id = notes_note_lat_lczwoh.id
  where master_join_tepjko.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_mprfis on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index if not exists service_groundtrafficcontrolservice_id on service.groundtrafficcontrolservice_view (id);
create index if not exists service_groundtrafficcontrolservice_location_gist on service.groundtrafficcontrolservice_view using GIST (location_geom);
-- GuidanceLineLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_wbgowf.title as varchar), '(' || airport_heliport_guidanceline_pt_wbgowf.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_wbgowf.href::text AS lightedguidanceline_href,
    shared_lightelement_view_yovdnm.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_sqygpo.availability::jsonb as availability,
    notes_note_view_jukkll.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_wbgowf on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_wbgowf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cqvoap.id) as element
  from master_join master_join_fzozbc
  join shared.lightelement_view shared_lightelement_lat_cqvoap on master_join_fzozbc.target_id = shared_lightelement_lat_cqvoap.id
  where master_join_fzozbc.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_yovdnm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_lnkctm.id) as availability
  from master_join master_join_tawlmb
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_lnkctm on master_join_tawlmb.target_id = airport_heliport_groundlightingavailability_lat_lnkctm.id
  where master_join_tawlmb.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_sqygpo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwxodk.*) AS annotation
  from master_join master_join_mywriu
  join notes.note_view notes_note_lat_pwxodk on master_join_mywriu.target_id = notes_note_lat_pwxodk.id
  where master_join_mywriu.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_jukkll on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_guidancelinelightsystem_id on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_telaav.title as varchar), '(' || airport_heliport_guidanceline_pt_telaav.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_telaav.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_zcrbpi.element::jsonb as element,
    notes_note_view_ixjaxq.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_telaav on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_telaav.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_sdsalj.id) as element
  from master_join master_join_nvuvqf
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_sdsalj on master_join_nvuvqf.target_id = airport_heliport_markingelement_lat_sdsalj.id
  where master_join_nvuvqf.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_zcrbpi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsssxg.*) AS annotation
  from master_join master_join_qoofpt
  join notes.note_view notes_note_lat_tsssxg on master_join_qoofpt.target_id = notes_note_lat_tsssxg.id
  where master_join_qoofpt.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_ixjaxq on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index if not exists airport_heliport_guidancelinemarking_id on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_shgodf.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_shgodf.elevation AS extent_elevation,
    geometry_elevatedcurve_view_shgodf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_shgodf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_shgodf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_shgodf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_dvkjks.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_rtqfmq.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_fciqzs.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_pnhxel.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_iuzdck.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_xkgbku.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_shgodf on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_shgodf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_viwwyx.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_viwwyx.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_viwwyx.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_viwwyx.href
  )) as connectedtouchdownliftoff  from master_join master_join_qulghu
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_viwwyx on master_join_qulghu.target_id = airport_heliport_touchdownliftoff_lat_viwwyx.id
  where master_join_qulghu.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_dvkjks on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_nidbdx.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_nidbdx.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_nidbdx.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_nidbdx.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_hhpqqq
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_nidbdx on master_join_hhpqqq.target_id = airport_heliport_runwaycentrelinepoint_lat_nidbdx.id
  where master_join_hhpqqq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_rtqfmq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_tylrui.id,
      'title', coalesce(cast(airport_heliport_apron_lat_tylrui.title AS varchar), '(' || airport_heliport_apron_lat_tylrui.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_tylrui.href
  )) as connectedapron  from master_join master_join_nkuual
  join airport_heliport.apron_pt airport_heliport_apron_lat_tylrui on master_join_nkuual.target_id = airport_heliport_apron_lat_tylrui.id
  where master_join_nkuual.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_fciqzs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_ehtxsg.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_ehtxsg.title AS varchar), '(' || airport_heliport_aircraftstand_lat_ehtxsg.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_ehtxsg.href
  )) as connectedstand  from master_join master_join_fzafye
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_ehtxsg on master_join_fzafye.target_id = airport_heliport_aircraftstand_lat_ehtxsg.id
  where master_join_fzafye.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_pnhxel on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_ohzbfi.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_ohzbfi.title AS varchar), '(' || airport_heliport_taxiway_lat_ohzbfi.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_ohzbfi.href
  )) as connectedtaxiway  from master_join master_join_hzsfoz
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_ohzbfi on master_join_hzsfoz.target_id = airport_heliport_taxiway_lat_ohzbfi.id
  where master_join_hzsfoz.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_iuzdck on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ewklto.*) AS annotation
  from master_join master_join_wrjtrv
  join notes.note_view notes_note_lat_ewklto on master_join_wrjtrv.target_id = notes_note_lat_ewklto.id
  where master_join_wrjtrv.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_xkgbku on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index if not exists airport_heliport_guidanceline_id on airport_heliport.guidanceline_view (id);
create index if not exists airport_heliport_guidanceline_extent_gist on airport_heliport.guidanceline_view using GIST (extent_geom);
-- HoldingAssessmentType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_zopoat.title as varchar), '(' || holding_unplannedholding_pt_zopoat.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_zopoat.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_giomnv.title as varchar), '(' || holding_holdingpattern_pt_giomnv.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_giomnv.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_cvkdoa.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_mbkimg.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_zopoat on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_zopoat.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_giomnv on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_giomnv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hxlmnn.id) as obstacleassessment
  from master_join master_join_dnowor
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hxlmnn on master_join_dnowor.target_id = shared_obstacleassessmentarea_lat_hxlmnn.id
  where master_join_dnowor.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_cvkdoa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jeyxkv.*) AS annotation
  from master_join master_join_wbqzid
  join notes.note_view notes_note_lat_jeyxkv on master_join_wbqzid.target_id = notes_note_lat_jeyxkv.id
  where master_join_wbqzid.source_id = shared.holdingassessment_ts.id
) as notes_note_view_mbkimg on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index if not exists shared_holdingassessment_id on shared.holdingassessment_view (id);
-- HoldingPatternType
-- ['geometry.curve_view', 'notes.note_view', 'holding.holdingpatternduration_view', 'holding.holdingpatterndistance_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_xqcbpg.id)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_xqcbpg.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_qkwvdn.id)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_qkwvdn.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_mjlaid.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_mjlaid.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_rwoimi.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_xqcbpg on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_xqcbpg.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_qkwvdn on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_qkwvdn.id
left join geometry.curve_view geometry_curve_view_mjlaid on holding.holdingpattern_ts.extent_id = geometry_curve_view_mjlaid.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yzkicy.*) AS annotation
  from master_join master_join_mcxwih
  join notes.note_view notes_note_lat_yzkicy on master_join_mcxwih.target_id = notes_note_lat_yzkicy.id
  where master_join_mcxwih.source_id = holding.holdingpattern_ts.id
) as notes_note_view_rwoimi on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index if not exists holding_holdingpattern_id on holding.holdingpattern_view (id);
create index if not exists holding_holdingpattern_extent_gist on holding.holdingpattern_view using GIST (extent_geom);
-- InformationServiceType
-- ['service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_jwrmaf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jwrmaf.longitude AS location_longitude,
    geometry_elevatedpoint_view_jwrmaf.latitude AS location_latitude,
    geometry_elevatedpoint_view_jwrmaf.elevation AS location_elevation,
    geometry_elevatedpoint_view_jwrmaf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jwrmaf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jwrmaf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jwrmaf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_fzxfzt.title as varchar), '(' || organisation_unit_pt_fzxfzt.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_fzxfzt.href::text AS serviceprovider_href,
    service_callsigndetail_view_bdhjwt.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_noqybn.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_egijsx.availability::jsonb as availability,
    notes_note_view_mvzwcf.annotation::jsonb as annotation,
    navaids_points_vor_pt_fadxzr.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_iuyqhw.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_xlqchy.clientairport::jsonb as clientairport,
    routes_routeportion_view_puzxzu.clientroute::jsonb as clientroute,
    procedure_procedure_pt_splzgg.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_xzxapa.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_dwlcso.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jwrmaf on service.informationservice_ts.location_id = geometry_elevatedpoint_view_jwrmaf.id
left join organisation.unit_pt organisation_unit_pt_fzxfzt on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_fzxfzt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_rakizp.id) as callsign
  from master_join master_join_tcdjjy
  join service.callsigndetail_view service_callsigndetail_lat_rakizp on master_join_tcdjjy.target_id = service_callsigndetail_lat_rakizp.id
  where master_join_tcdjjy.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_bdhjwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_zngzew.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_zngzew.title AS varchar), '(' || service_radiocommunicationchannel_lat_zngzew.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_zngzew.href
  )) as radiocommunication  from master_join master_join_nbiqvk
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_zngzew on master_join_nbiqvk.target_id = service_radiocommunicationchannel_lat_zngzew.id
  where master_join_nbiqvk.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_noqybn on TRUE
left join lateral(
  select
  from master_join master_join_bdeaoa
  join shared.contactinformation_view shared_contactinformation_lat_zycbco on master_join_bdeaoa.target_id = shared_contactinformation_lat_zycbco.id
  where master_join_bdeaoa.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_ajsnto on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_aiounz.id) as availability
  from master_join master_join_mtpebj
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_aiounz on master_join_mtpebj.target_id = service_serviceoperationalstatus_lat_aiounz.id
  where master_join_mtpebj.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_egijsx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gizkbm.*) AS annotation
  from master_join master_join_kwgzol
  join notes.note_view notes_note_lat_gizkbm on master_join_kwgzol.target_id = notes_note_lat_gizkbm.id
  where master_join_kwgzol.source_id = service.informationservice_ts.id
) as notes_note_view_mvzwcf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_gdvztk.id,
      'title', coalesce(cast(navaids_points_vor_lat_gdvztk.title AS varchar), '(' || navaids_points_vor_lat_gdvztk.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_gdvztk.href
  )) as navaidbroadcast  from master_join master_join_ucrmly
  join navaids_points.vor_pt navaids_points_vor_lat_gdvztk on master_join_ucrmly.target_id = navaids_points_vor_lat_gdvztk.id
  where master_join_ucrmly.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_fadxzr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_siksnv.id,
      'title', coalesce(cast(airspace_airspace_lat_siksnv.title AS varchar), '(' || airspace_airspace_lat_siksnv.nilreason[1] || ')'),
      'href', airspace_airspace_lat_siksnv.href
  )) as clientairspace  from master_join master_join_mwxkab
  join airspace.airspace_pt airspace_airspace_lat_siksnv on master_join_mwxkab.target_id = airspace_airspace_lat_siksnv.id
  where master_join_mwxkab.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_iuyqhw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_czcnun.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_czcnun.title AS varchar), '(' || airport_heliport_airportheliport_lat_czcnun.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_czcnun.href
  )) as clientairport  from master_join master_join_npaqbs
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_czcnun on master_join_npaqbs.target_id = airport_heliport_airportheliport_lat_czcnun.id
  where master_join_npaqbs.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_xlqchy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_wbxzkq.id) as clientroute
  from master_join master_join_sgadce
  join routes.routeportion_view routes_routeportion_lat_wbxzkq on master_join_sgadce.target_id = routes_routeportion_lat_wbxzkq.id
  where master_join_sgadce.source_id = service.informationservice_ts.id
) as routes_routeportion_view_puzxzu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_pqcybs.id,
      'title', coalesce(cast(procedure_procedure_lat_pqcybs.title AS varchar), '(' || procedure_procedure_lat_pqcybs.nilreason[1] || ')'),
      'href', procedure_procedure_lat_pqcybs.href
  )) as clientprocedure  from master_join master_join_sccdvh
  join procedure.procedure_pt procedure_procedure_lat_pqcybs on master_join_sccdvh.target_id = procedure_procedure_lat_pqcybs.id
  where master_join_sccdvh.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_splzgg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_yudomo.id,
      'title', coalesce(cast(holding_holdingpattern_lat_yudomo.title AS varchar), '(' || holding_holdingpattern_lat_yudomo.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_yudomo.href
  )) as clientholding  from master_join master_join_zpivia
  join holding.holdingpattern_pt holding_holdingpattern_lat_yudomo on master_join_zpivia.target_id = holding_holdingpattern_lat_yudomo.id
  where master_join_zpivia.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_xzxapa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_gwnbsh.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_gwnbsh.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_gwnbsh.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_gwnbsh.href
  )) as clientaerialrefuelling  from master_join master_join_imbafg
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_gwnbsh on master_join_imbafg.target_id = aerial_refuelling_aerialrefuelling_lat_gwnbsh.id
  where master_join_imbafg.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_dwlcso on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index if not exists service_informationservice_id on service.informationservice_view (id);
create index if not exists service_informationservice_location_gist on service.informationservice_view using GIST (location_geom);
-- InitialLegType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_afixhy.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_afixhy.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rnrvis.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rnrvis.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nyehag.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_nyehag.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_csewzb.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_csewzb.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_uicrup.title as varchar), '(' || navaids_points_angleindication_pt_uicrup.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_uicrup.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_njrkvy.title as varchar), '(' || navaids_points_distanceindication_pt_njrkvy.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_njrkvy.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ogcbyi.id)::jsonb AS holding,
    procedure_holdinguse_view_ogcbyi.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_nllcpv.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_nllcpv.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_nllcpv.href::text AS approach_href,
    shared_aircraftcharacteristic_view_tmqsrl.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_tujahy.designsurface::jsonb as designsurface,
    notes_note_view_fvnteq.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_afixhy on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_afixhy.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rnrvis on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rnrvis.id
left join geometry.curve_view geometry_curve_view_csewzb on procedure.initialleg_ts.trajectory_id = geometry_curve_view_csewzb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nyehag on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_nyehag.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_uicrup on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_uicrup.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_njrkvy on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_njrkvy.id
left join procedure.holdinguse_view procedure_holdinguse_view_ogcbyi on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_ogcbyi.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_nllcpv on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_nllcpv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_iewwdr.id) as aircraftcategory
  from master_join master_join_bubdpq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_iewwdr on master_join_bubdpq.target_id = shared_aircraftcharacteristic_lat_iewwdr.id
  where master_join_bubdpq.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_tmqsrl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_cbcaid.id) as designsurface
  from master_join master_join_slftfm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_cbcaid on master_join_slftfm.target_id = shared_obstacleassessmentarea_lat_cbcaid.id
  where master_join_slftfm.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_tujahy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvmmck.*) AS annotation
  from master_join master_join_ylaztt
  join notes.note_view notes_note_lat_jvmmck on master_join_ylaztt.target_id = notes_note_lat_jvmmck.id
  where master_join_ylaztt.source_id = procedure.initialleg_ts.id
) as notes_note_view_fvnteq on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index if not exists procedure_initialleg_id on procedure.initialleg_view (id);
create index if not exists procedure_initialleg_trajectory_gist on procedure.initialleg_view using GIST (trajectory_geom);
-- InstrumentApproachProcedureType
-- ['procedure.finalprofile_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'procedure.missedapproachgroup_view', 'notes.note_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_pfwdbh.title as varchar), '(' || navaids_points_navaid_pt_pfwdbh.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_pfwdbh.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_gowxsl.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_gowxsl.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_gowxsl.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_coqgju.title as varchar), '(' || surveillance_radarsystem_pt_coqgju.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_coqgju.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_jmejij.title as varchar), '(' || procedure_safealtitudearea_pt_jmejij.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_jmejij.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_lczgcg.id)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_lczgcg.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_suqwvm.id)::jsonb AS finalprofile,
    procedure_finalprofile_view_suqwvm.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_imzuvu.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_egxwor.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_nyqptf.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_mqycsu.flighttransition::jsonb as flighttransition,
    notes_note_view_pzgnsa.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_tpnqtr.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pfwdbh on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_pfwdbh.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_gowxsl on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_gowxsl.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_coqgju on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_coqgju.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_jmejij on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_jmejij.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_lczgcg on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_lczgcg.id
left join procedure.finalprofile_view procedure_finalprofile_view_suqwvm on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_suqwvm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_rwdjpj.id) as availability
  from master_join master_join_ctlpoc
  join procedure.procedureavailability_view procedure_procedureavailability_lat_rwdjpj on master_join_ctlpoc.target_id = procedure_procedureavailability_lat_rwdjpj.id
  where master_join_ctlpoc.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_imzuvu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_kqpgeo.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_kqpgeo.title AS varchar), '(' || airport_heliport_airportheliport_lat_kqpgeo.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_kqpgeo.href
  )) as airportheliport  from master_join master_join_hxlhfa
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_kqpgeo on master_join_hxlhfa.target_id = airport_heliport_airportheliport_lat_kqpgeo.id
  where master_join_hxlhfa.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_egxwor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_eiexpl.id) as aircraftcharacteristic
  from master_join master_join_jatjyh
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_eiexpl on master_join_jatjyh.target_id = shared_aircraftcharacteristic_lat_eiexpl.id
  where master_join_jatjyh.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_nyqptf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_ciaqaq.id) as flighttransition
  from master_join master_join_qcpjrr
  join procedure.proceduretransition_view procedure_proceduretransition_lat_ciaqaq on master_join_qcpjrr.target_id = procedure_proceduretransition_lat_ciaqaq.id
  where master_join_qcpjrr.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_mqycsu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hswuyr.*) AS annotation
  from master_join master_join_utlavm
  join notes.note_view notes_note_lat_hswuyr on master_join_utlavm.target_id = notes_note_lat_hswuyr.id
  where master_join_utlavm.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_pzgnsa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_fvkhxo.id) as missedinstruction
  from master_join master_join_cvtjxs
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_fvkhxo on master_join_cvtjxs.target_id = procedure_missedapproachgroup_lat_fvkhxo.id
  where master_join_cvtjxs.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_tpnqtr on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index if not exists procedure_instrumentapproachprocedure_id on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegType
-- ['geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tcxrsj.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_tcxrsj.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_umzyol.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_umzyol.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_soxdqy.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_soxdqy.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_jmbhjs.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_jmbhjs.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nscacp.title as varchar), '(' || navaids_points_angleindication_pt_nscacp.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_nscacp.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_laleao.title as varchar), '(' || navaids_points_distanceindication_pt_laleao.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_laleao.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qnpegv.id)::jsonb AS holding,
    procedure_holdinguse_view_qnpegv.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kmiiys.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kmiiys.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_kmiiys.href::text AS approach_href,
    shared_aircraftcharacteristic_view_tuxrqs.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_gsfyee.designsurface::jsonb as designsurface,
    notes_note_view_xliftq.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tcxrsj on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_tcxrsj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_umzyol on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_umzyol.id
left join geometry.curve_view geometry_curve_view_jmbhjs on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_jmbhjs.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_soxdqy on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_soxdqy.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nscacp on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_nscacp.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_laleao on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_laleao.id
left join procedure.holdinguse_view procedure_holdinguse_view_qnpegv on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_qnpegv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kmiiys on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kmiiys.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_mlzdat.id) as aircraftcategory
  from master_join master_join_juktbv
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_mlzdat on master_join_juktbv.target_id = shared_aircraftcharacteristic_lat_mlzdat.id
  where master_join_juktbv.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_tuxrqs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hakdcu.id) as designsurface
  from master_join master_join_zvkabs
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hakdcu on master_join_zvkabs.target_id = shared_obstacleassessmentarea_lat_hakdcu.id
  where master_join_zvkabs.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_gsfyee on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iddhjd.*) AS annotation
  from master_join master_join_duyhqg
  join notes.note_view notes_note_lat_iddhjd on master_join_duyhqg.target_id = notes_note_lat_iddhjd.id
  where master_join_duyhqg.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_xliftq on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index if not exists procedure_intermediateleg_id on procedure.intermediateleg_view (id);
create index if not exists procedure_intermediateleg_trajectory_gist on procedure.intermediateleg_view using GIST (trajectory_geom);
-- LocalizerType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_amuqcq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_amuqcq.longitude AS location_longitude,
    geometry_elevatedpoint_view_amuqcq.latitude AS location_latitude,
    geometry_elevatedpoint_view_amuqcq.elevation AS location_elevation,
    geometry_elevatedpoint_view_amuqcq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_amuqcq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_amuqcq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_amuqcq.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ktrfaq.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hyntbs.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_elbxvl.availability::jsonb as availability,
    notes_note_view_dqbxlb.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_amuqcq on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_amuqcq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_gbkfwe.id) as authority
  from master_join master_join_qjwckd
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_gbkfwe on master_join_qjwckd.target_id = navaids_points_authorityfornavaidequipment_lat_gbkfwe.id
  where master_join_qjwckd.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_ktrfaq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_hwwdhh.id) as monitoring
  from master_join master_join_sgdcht
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_hwwdhh on master_join_sgdcht.target_id = navaids_points_navaidequipmentmonitoring_lat_hwwdhh.id
  where master_join_sgdcht.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hyntbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qflhrt.id) as availability
  from master_join master_join_qtgwao
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qflhrt on master_join_qtgwao.target_id = navaids_points_navaidoperationalstatus_lat_qflhrt.id
  where master_join_qtgwao.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_elbxvl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tkbrcy.*) AS annotation
  from master_join master_join_wlbjmq
  join notes.note_view notes_note_lat_tkbrcy on master_join_wlbjmq.target_id = notes_note_lat_tkbrcy.id
  where master_join_wlbjmq.source_id = navaids_points.localizer_ts.id
) as notes_note_view_dqbxlb on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index if not exists navaids_points_localizer_id on navaids_points.localizer_view (id);
create index if not exists navaids_points_localizer_location_gist on navaids_points.localizer_view using GIST (location_geom);
-- MarkerBeaconType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_fpfkxs.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fpfkxs.longitude AS location_longitude,
    geometry_elevatedpoint_view_fpfkxs.latitude AS location_latitude,
    geometry_elevatedpoint_view_fpfkxs.elevation AS location_elevation,
    geometry_elevatedpoint_view_fpfkxs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fpfkxs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fpfkxs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fpfkxs.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_zhqvkr.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_wnsiff.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_aqbrci.availability::jsonb as availability,
    notes_note_view_gtihai.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fpfkxs on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_fpfkxs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_hmengf.id) as authority
  from master_join master_join_dhdcfi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_hmengf on master_join_dhdcfi.target_id = navaids_points_authorityfornavaidequipment_lat_hmengf.id
  where master_join_dhdcfi.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_zhqvkr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mbohwb.id) as monitoring
  from master_join master_join_giilvj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mbohwb on master_join_giilvj.target_id = navaids_points_navaidequipmentmonitoring_lat_mbohwb.id
  where master_join_giilvj.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_wnsiff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_tncoke.id) as availability
  from master_join master_join_vrfkfp
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_tncoke on master_join_vrfkfp.target_id = navaids_points_navaidoperationalstatus_lat_tncoke.id
  where master_join_vrfkfp.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_aqbrci on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wooxls.*) AS annotation
  from master_join master_join_euonfh
  join notes.note_view notes_note_lat_wooxls on master_join_euonfh.target_id = notes_note_lat_wooxls.id
  where master_join_euonfh.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_gtihai on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index if not exists navaids_points_markerbeacon_id on navaids_points.markerbeacon_view (id);
create index if not exists navaids_points_markerbeacon_location_gist on navaids_points.markerbeacon_view using GIST (location_geom);
-- MarkingBuoyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_pdrbkd.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_pdrbkd.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_pdrbkd.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_exctqb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_exctqb.longitude AS location_longitude,
    geometry_elevatedpoint_view_exctqb.latitude AS location_latitude,
    geometry_elevatedpoint_view_exctqb.elevation AS location_elevation,
    geometry_elevatedpoint_view_exctqb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_exctqb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_exctqb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_exctqb.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_jozzzj.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_pdrbkd on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_pdrbkd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_exctqb on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_exctqb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kozhuu.*) AS annotation
  from master_join master_join_tevqjc
  join notes.note_view notes_note_lat_kozhuu on master_join_tevqjc.target_id = notes_note_lat_kozhuu.id
  where master_join_tevqjc.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_jozzzj on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index if not exists airport_heliport_markingbuoy_id on airport_heliport.markingbuoy_view (id);
create index if not exists airport_heliport_markingbuoy_location_gist on airport_heliport.markingbuoy_view using GIST (location_geom);
-- MissedApproachLegType
-- ['geometry.curve_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view', 'notes.note_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_anybvq.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_anybvq.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qpyohs.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_qpyohs.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mcrguk.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_mcrguk.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_bjfzav.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_bjfzav.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_skzsyk.title as varchar), '(' || navaids_points_angleindication_pt_skzsyk.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_skzsyk.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_cqlaqe.title as varchar), '(' || navaids_points_distanceindication_pt_cqlaqe.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_cqlaqe.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ftncpp.id)::jsonb AS holding,
    procedure_holdinguse_view_ftncpp.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zftwll.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zftwll.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_zftwll.href::text AS approach_href,
    shared_aircraftcharacteristic_view_vmimbs.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_cezyga.designsurface::jsonb as designsurface,
    notes_note_view_eiywhz.annotation::jsonb as annotation,
    procedure_approachcondition_view_hiwoim.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_anybvq on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_anybvq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qpyohs on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_qpyohs.id
left join geometry.curve_view geometry_curve_view_bjfzav on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_bjfzav.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mcrguk on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_mcrguk.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_skzsyk on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_skzsyk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_cqlaqe on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_cqlaqe.id
left join procedure.holdinguse_view procedure_holdinguse_view_ftncpp on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_ftncpp.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zftwll on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_zftwll.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_toiyrj.id) as aircraftcategory
  from master_join master_join_oududt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_toiyrj on master_join_oududt.target_id = shared_aircraftcharacteristic_lat_toiyrj.id
  where master_join_oududt.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_vmimbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_yasfiq.id) as designsurface
  from master_join master_join_patoyq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_yasfiq on master_join_patoyq.target_id = shared_obstacleassessmentarea_lat_yasfiq.id
  where master_join_patoyq.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_cezyga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_feuxwg.*) AS annotation
  from master_join master_join_uyaspa
  join notes.note_view notes_note_lat_feuxwg on master_join_uyaspa.target_id = notes_note_lat_feuxwg.id
  where master_join_uyaspa.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_eiywhz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_icbtuq.id) as condition
  from master_join master_join_tukqax
  join procedure.approachcondition_view procedure_approachcondition_lat_icbtuq on master_join_tukqax.target_id = procedure_approachcondition_lat_icbtuq.id
  where master_join_tukqax.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_hiwoim on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index if not exists procedure_missedapproachleg_id on procedure.missedapproachleg_view (id);
create index if not exists procedure_missedapproachleg_trajectory_gist on procedure.missedapproachleg_view using GIST (trajectory_geom);
-- NavaidType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidcomponent_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_ohrevk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ohrevk.longitude AS location_longitude,
    geometry_elevatedpoint_view_ohrevk.latitude AS location_latitude,
    geometry_elevatedpoint_view_ohrevk.elevation AS location_elevation,
    geometry_elevatedpoint_view_ohrevk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ohrevk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ohrevk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ohrevk.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_cnlgqa.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_pdvdow.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_khtnqw.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_aqvtus.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_uxhljy.availability::jsonb as availability,
    notes_note_view_arctqy.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ohrevk on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_ohrevk.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_xjvsfp.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_xjvsfp.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_xjvsfp.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_xjvsfp.href
  )) as touchdownliftoff  from master_join master_join_znxejt
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_xjvsfp on master_join_znxejt.target_id = airport_heliport_touchdownliftoff_lat_xjvsfp.id
  where master_join_znxejt.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_cnlgqa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_hqcouw.id) as navaidequipment
  from master_join master_join_jctxsy
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_hqcouw on master_join_jctxsy.target_id = navaids_points_navaidcomponent_lat_hqcouw.id
  where master_join_jctxsy.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_pdvdow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_crvtmf.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_crvtmf.title AS varchar), '(' || airport_heliport_runwaydirection_lat_crvtmf.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_crvtmf.href
  )) as runwaydirection  from master_join master_join_lkffac
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_crvtmf on master_join_lkffac.target_id = airport_heliport_runwaydirection_lat_crvtmf.id
  where master_join_lkffac.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_khtnqw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bprmdb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bprmdb.title AS varchar), '(' || airport_heliport_airportheliport_lat_bprmdb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bprmdb.href
  )) as servedairport  from master_join master_join_theirt
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bprmdb on master_join_theirt.target_id = airport_heliport_airportheliport_lat_bprmdb.id
  where master_join_theirt.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_aqvtus on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xzsctj.id) as availability
  from master_join master_join_yiccvl
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xzsctj on master_join_yiccvl.target_id = navaids_points_navaidoperationalstatus_lat_xzsctj.id
  where master_join_yiccvl.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_uxhljy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwzedd.*) AS annotation
  from master_join master_join_tenesk
  join notes.note_view notes_note_lat_kwzedd on master_join_tenesk.target_id = notes_note_lat_kwzedd.id
  where master_join_tenesk.source_id = navaids_points.navaid_ts.id
) as notes_note_view_arctqy on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index if not exists navaids_points_navaid_id on navaids_points.navaid_view (id);
create index if not exists navaids_points_navaid_location_gist on navaids_points.navaid_view using GIST (location_geom);
-- NavigationAreaRestrictionType
-- ['notes.note_view', 'shared.circlesector_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_zyxozg.id)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_zyxozg.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_cmxfqf.id)::jsonb AS sectordefinition,
    shared_circlesector_view_cmxfqf.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_abkclq.procedure::jsonb as procedure,
    notes_note_view_zusdec.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_zyxozg on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_zyxozg.id
left join shared.circlesector_view shared_circlesector_view_cmxfqf on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_cmxfqf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_weywvg.id,
      'title', coalesce(cast(procedure_procedure_lat_weywvg.title AS varchar), '(' || procedure_procedure_lat_weywvg.nilreason[1] || ')'),
      'href', procedure_procedure_lat_weywvg.href
  )) as procedure  from master_join master_join_dotavo
  join procedure.procedure_pt procedure_procedure_lat_weywvg on master_join_dotavo.target_id = procedure_procedure_lat_weywvg.id
  where master_join_dotavo.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_abkclq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tcjpvl.*) AS annotation
  from master_join master_join_vkxfpr
  join notes.note_view notes_note_lat_tcjpvl on master_join_vkxfpr.target_id = notes_note_lat_tcjpvl.id
  where master_join_vkxfpr.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_zusdec on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index if not exists procedure_navigationarearestriction_id on procedure.navigationarearestriction_view (id);
-- NavigationAreaType
-- ['notes.note_view', 'procedure.navigationareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_reiykk.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_reiykk.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_reiykk.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pbbxtw.title as varchar), '(' || navaids_points_designatedpoint_pt_pbbxtw.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pbbxtw.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_oaocjt.title as varchar), '(' || navaids_points_navaid_pt_oaocjt.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_oaocjt.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tazxvk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tazxvk.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_tazxvk.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fksrem.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fksrem.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fksrem.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_amligz.title as varchar), '(' || airport_heliport_airportheliport_pt_amligz.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_amligz.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_nndtil.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_nndtil.longitude AS centrepointposition_longitude,
    geometry_point_view_nndtil.latitude AS centrepointposition_latitude,
    geometry_point_view_nndtil.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_lmurpi.sector::jsonb as sector,
    notes_note_view_gvdltp.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_reiykk on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_reiykk.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pbbxtw on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pbbxtw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_oaocjt on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_oaocjt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tazxvk on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tazxvk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fksrem on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fksrem.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_amligz on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_amligz.id
left join geometry.point_view geometry_point_view_nndtil on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_nndtil.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_kuvrqh.id) as sector
  from master_join master_join_moaqgx
  join procedure.navigationareasector_view procedure_navigationareasector_lat_kuvrqh on master_join_moaqgx.target_id = procedure_navigationareasector_lat_kuvrqh.id
  where master_join_moaqgx.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_lmurpi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_waxdwc.*) AS annotation
  from master_join master_join_kndbdf
  join notes.note_view notes_note_lat_waxdwc on master_join_kndbdf.target_id = notes_note_lat_waxdwc.id
  where master_join_kndbdf.source_id = procedure.navigationarea_ts.id
) as notes_note_view_gvdltp on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index if not exists procedure_navigationarea_id on procedure.navigationarea_view (id);
create index if not exists procedure_navigationarea_centrepointposition_gist on procedure.navigationarea_view using GIST (centrepointposition_geom);
-- NDBType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ayzjcs.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ayzjcs.longitude AS location_longitude,
    geometry_elevatedpoint_view_ayzjcs.latitude AS location_latitude,
    geometry_elevatedpoint_view_ayzjcs.elevation AS location_elevation,
    geometry_elevatedpoint_view_ayzjcs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ayzjcs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ayzjcs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ayzjcs.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_badoep.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tnkhmq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_gltcjq.availability::jsonb as availability,
    notes_note_view_lfrlsg.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ayzjcs on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_ayzjcs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_yzkdqo.id) as authority
  from master_join master_join_pltvbo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_yzkdqo on master_join_pltvbo.target_id = navaids_points_authorityfornavaidequipment_lat_yzkdqo.id
  where master_join_pltvbo.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_badoep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_jwmabo.id) as monitoring
  from master_join master_join_robprn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_jwmabo on master_join_robprn.target_id = navaids_points_navaidequipmentmonitoring_lat_jwmabo.id
  where master_join_robprn.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tnkhmq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qujfqf.id) as availability
  from master_join master_join_jznqyx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qujfqf on master_join_jznqyx.target_id = navaids_points_navaidoperationalstatus_lat_qujfqf.id
  where master_join_jznqyx.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_gltcjq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ejxuag.*) AS annotation
  from master_join master_join_bpuxov
  join notes.note_view notes_note_lat_ejxuag on master_join_bpuxov.target_id = notes_note_lat_ejxuag.id
  where master_join_bpuxov.source_id = navaids_points.ndb_ts.id
) as notes_note_view_lfrlsg on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index if not exists navaids_points_ndb_id on navaids_points.ndb_view (id);
create index if not exists navaids_points_ndb_location_gist on navaids_points.ndb_view using GIST (location_geom);
-- NonMovementAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_woniuu.title as varchar), '(' || airport_heliport_airportheliport_pt_woniuu.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_woniuu.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_nrvapw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_nrvapw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_nrvapw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_nrvapw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_nrvapw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_nrvapw.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ebkicq.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_woniuu on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_woniuu.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nrvapw on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_nrvapw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rctpik.*) AS annotation
  from master_join master_join_ijjefp
  join notes.note_view notes_note_lat_rctpik on master_join_ijjefp.target_id = notes_note_lat_rctpik.id
  where master_join_ijjefp.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_ebkicq on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index if not exists airport_heliport_nonmovementarea_id on airport_heliport.nonmovementarea_view (id);
create index if not exists airport_heliport_nonmovementarea_extent_gist on airport_heliport.nonmovementarea_view using GIST (extent_geom);
-- ObstacleAreaType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_wqlfdx.title as varchar), '(' || airport_heliport_airportheliport_pt_wqlfdx.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_wqlfdx.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_vejciu.title as varchar), '(' || airport_heliport_runwaydirection_pt_vejciu.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_vejciu.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_pdgrju.title as varchar), '(' || organisation_organisationauthority_pt_pdgrju.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_pdgrju.href::text AS referenceownerorganisation_href,
    geometry_surface_view_jktrrs.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_jktrrs.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_vinpsz.obstacle::jsonb as obstacle,
    notes_note_view_wdzufo.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wqlfdx on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_wqlfdx.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vejciu on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_vejciu.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pdgrju on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_pdgrju.id
left join geometry.surface_view geometry_surface_view_jktrrs on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_jktrrs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_mtytos.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_mtytos.title AS varchar), '(' || obstacles_verticalstructure_lat_mtytos.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_mtytos.href
  )) as obstacle  from master_join master_join_drfpas
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_mtytos on master_join_drfpas.target_id = obstacles_verticalstructure_lat_mtytos.id
  where master_join_drfpas.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_vinpsz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zzrokt.*) AS annotation
  from master_join master_join_kwrlth
  join notes.note_view notes_note_lat_zzrokt on master_join_kwrlth.target_id = notes_note_lat_zzrokt.id
  where master_join_kwrlth.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_wdzufo on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index if not exists obstacles_obstaclearea_id on obstacles.obstaclearea_view (id);
create index if not exists obstacles_obstaclearea_surfaceextent_gist on obstacles.obstaclearea_view using GIST (surfaceextent_geom);
-- OrganisationAuthorityType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_uovuek.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_lentcl.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_aujjkn
  join shared.contactinformation_view shared_contactinformation_lat_nymtmd on master_join_aujjkn.target_id = shared_contactinformation_lat_nymtmd.id
  where master_join_aujjkn.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_lumdcv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_pmacpr.id) as relatedorganisationauthority
  from master_join master_join_zospbl
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_pmacpr on master_join_zospbl.target_id = organisation_organisationauthorityassociation_lat_pmacpr.id
  where master_join_zospbl.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_uovuek on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yfnmfu.*) AS annotation
  from master_join master_join_sqwcqt
  join notes.note_view notes_note_lat_yfnmfu on master_join_sqwcqt.target_id = notes_note_lat_yfnmfu.id
  where master_join_sqwcqt.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_lentcl on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index if not exists organisation_organisationauthority_id on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_inqrkl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_inqrkl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_inqrkl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_inqrkl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_inqrkl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_inqrkl.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_oxfajk.associatedstand::jsonb as associatedstand,
    notes_note_view_gqsdzc.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_inqrkl on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_inqrkl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_saxmwh.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_saxmwh.title AS varchar), '(' || airport_heliport_aircraftstand_lat_saxmwh.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_saxmwh.href
  )) as associatedstand  from master_join master_join_oolajd
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_saxmwh on master_join_oolajd.target_id = airport_heliport_aircraftstand_lat_saxmwh.id
  where master_join_oolajd.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_oxfajk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_losaej.*) AS annotation
  from master_join master_join_giezla
  join notes.note_view notes_note_lat_losaej on master_join_giezla.target_id = notes_note_lat_losaej.id
  where master_join_giezla.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_gqsdzc on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index if not exists airport_heliport_passengerloadingbridge_id on airport_heliport.passengerloadingbridge_view (id);
create index if not exists airport_heliport_passengerloadingbridge_extent_gist on airport_heliport.passengerloadingbridge_view using GIST (extent_geom);
-- PassengerServiceType
-- ['service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_jlffmr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jlffmr.longitude AS location_longitude,
    geometry_elevatedpoint_view_jlffmr.latitude AS location_latitude,
    geometry_elevatedpoint_view_jlffmr.elevation AS location_elevation,
    geometry_elevatedpoint_view_jlffmr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jlffmr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jlffmr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jlffmr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pghioh.title as varchar), '(' || organisation_unit_pt_pghioh.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pghioh.href::text AS serviceprovider_href,
    service_callsigndetail_view_dkerxf.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_orhftn.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xfrbew.availability::jsonb as availability,
    notes_note_view_pphfro.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_uifzys.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jlffmr on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_jlffmr.id
left join organisation.unit_pt organisation_unit_pt_pghioh on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_pghioh.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ukipne.id) as callsign
  from master_join master_join_pmceug
  join service.callsigndetail_view service_callsigndetail_lat_ukipne on master_join_pmceug.target_id = service_callsigndetail_lat_ukipne.id
  where master_join_pmceug.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_dkerxf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_rixjeu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_rixjeu.title AS varchar), '(' || service_radiocommunicationchannel_lat_rixjeu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_rixjeu.href
  )) as radiocommunication  from master_join master_join_ciiqsv
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_rixjeu on master_join_ciiqsv.target_id = service_radiocommunicationchannel_lat_rixjeu.id
  where master_join_ciiqsv.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_orhftn on TRUE
left join lateral(
  select
  from master_join master_join_kkdpqp
  join shared.contactinformation_view shared_contactinformation_lat_mryqqq on master_join_kkdpqp.target_id = shared_contactinformation_lat_mryqqq.id
  where master_join_kkdpqp.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_oulukx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_rcnnrt.id) as availability
  from master_join master_join_evfmgk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_rcnnrt on master_join_evfmgk.target_id = service_serviceoperationalstatus_lat_rcnnrt.id
  where master_join_evfmgk.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_xfrbew on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgmrpn.*) AS annotation
  from master_join master_join_dbgdhi
  join notes.note_view notes_note_lat_vgmrpn on master_join_dbgdhi.target_id = notes_note_lat_vgmrpn.id
  where master_join_dbgdhi.source_id = service.passengerservice_ts.id
) as notes_note_view_pphfro on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xpglje.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xpglje.title AS varchar), '(' || airport_heliport_airportheliport_lat_xpglje.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xpglje.href
  )) as airportheliport  from master_join master_join_shiimq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xpglje on master_join_shiimq.target_id = airport_heliport_airportheliport_lat_xpglje.id
  where master_join_shiimq.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_uifzys on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index if not exists service_passengerservice_id on service.passengerservice_view (id);
create index if not exists service_passengerservice_location_gist on service.passengerservice_view using GIST (location_geom);
-- PilotControlledLightingType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_moydor.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_groundlightsystem_pt_pwnawg.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_ycyodx.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_qwbfbb.id) as controlledlightintensity
  from master_join master_join_iovgdc
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_qwbfbb on master_join_iovgdc.target_id = airport_heliport_lightactivation_lat_qwbfbb.id
  where master_join_iovgdc.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_moydor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_cbgpvc.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_cbgpvc.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_cbgpvc.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_cbgpvc.href
  )) as activatedgroundlighting  from master_join master_join_bgewpn
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_cbgpvc on master_join_bgewpn.target_id = airport_heliport_groundlightsystem_lat_cbgpvc.id
  where master_join_bgewpn.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_pwnawg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wnxmqc.*) AS annotation
  from master_join master_join_lhotxy
  join notes.note_view notes_note_lat_wnxmqc on master_join_lhotxy.target_id = notes_note_lat_wnxmqc.id
  where master_join_lhotxy.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_ycyodx on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index if not exists service_pilotcontrolledlighting_id on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.reflector_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_zvbmta.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zvbmta.longitude AS location_longitude,
    geometry_elevatedpoint_view_zvbmta.latitude AS location_latitude,
    geometry_elevatedpoint_view_zvbmta.elevation AS location_elevation,
    geometry_elevatedpoint_view_zvbmta.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zvbmta.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zvbmta.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zvbmta.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_fscxcy.annotation::jsonb as annotation,
    surveillance_reflector_view_mbudgt.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zvbmta on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_zvbmta.id
left join lateral(
  select
  from master_join master_join_akbpjb
  join shared.contactinformation_view shared_contactinformation_lat_gekdaj on master_join_akbpjb.target_id = shared_contactinformation_lat_gekdaj.id
  where master_join_akbpjb.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_bhzgiu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rcyzby.*) AS annotation
  from master_join master_join_gejkob
  join notes.note_view notes_note_lat_rcyzby on master_join_gejkob.target_id = notes_note_lat_rcyzby.id
  where master_join_gejkob.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_fscxcy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_mnuuvi.id) as reflector
  from master_join master_join_uayvba
  join surveillance.reflector_view surveillance_reflector_lat_mnuuvi on master_join_uayvba.target_id = surveillance_reflector_lat_mnuuvi.id
  where master_join_uayvba.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_mbudgt on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index if not exists surveillance_precisionapproachradar_id on surveillance.precisionapproachradar_view (id);
create index if not exists surveillance_precisionapproachradar_location_gist on surveillance.precisionapproachradar_view using GIST (location_geom);
-- PrimarySurveillanceRadarType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_euhmxw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_euhmxw.longitude AS location_longitude,
    geometry_elevatedpoint_view_euhmxw.latitude AS location_latitude,
    geometry_elevatedpoint_view_euhmxw.elevation AS location_elevation,
    geometry_elevatedpoint_view_euhmxw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_euhmxw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_euhmxw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_euhmxw.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_zvjkop.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_hpifvy.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_euhmxw on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_euhmxw.id
left join lateral(
  select
  from master_join master_join_upjszj
  join shared.contactinformation_view shared_contactinformation_lat_clawqb on master_join_upjszj.target_id = shared_contactinformation_lat_clawqb.id
  where master_join_upjszj.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_fjbnlf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_triyba.*) AS annotation
  from master_join master_join_ipdali
  join notes.note_view notes_note_lat_triyba on master_join_ipdali.target_id = notes_note_lat_triyba.id
  where master_join_ipdali.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_zvjkop on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_odywvx.id) as groundstation
  from master_join master_join_hiryre
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_odywvx on master_join_hiryre.target_id = surveillance_surveillancegroundstation_lat_odywvx.id
  where master_join_hiryre.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_hpifvy on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index if not exists surveillance_primarysurveillanceradar_id on surveillance.primarysurveillanceradar_view (id);
create index if not exists surveillance_primarysurveillanceradar_location_gist on surveillance.primarysurveillanceradar_view using GIST (location_geom);
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_vzklih.title as varchar), '(' || navaids_points_dme_pt_vzklih.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_vzklih.href::text AS dme_href,
    coalesce(cast(procedure_segmentleg_pt_awgfim.title as varchar), '(' || procedure_segmentleg_pt_awgfim.nilreason[1] || ')')::text AS segmentleg,
    procedure_segmentleg_pt_awgfim.href::text AS segmentleg_href,
    notes_note_view_qmefmw.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_vzklih on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_vzklih.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_awgfim on procedure.proceduredme_ts.segmentleg_id = procedure_segmentleg_pt_awgfim.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fqwdhr.*) AS annotation
  from master_join master_join_qhniim
  join notes.note_view notes_note_lat_fqwdhr on master_join_qhniim.target_id = notes_note_lat_fqwdhr.id
  where master_join_qhniim.source_id = procedure.proceduredme_ts.id
) as notes_note_view_qmefmw on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index if not exists procedure_proceduredme_id on procedure.proceduredme_view (id);
-- RadarSystemType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_zhzcrg.title as varchar), '(' || airport_heliport_airportheliport_pt_zhzcrg.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_zhzcrg.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_jvenwv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jvenwv.longitude AS location_longitude,
    geometry_elevatedpoint_view_jvenwv.latitude AS location_latitude,
    geometry_elevatedpoint_view_jvenwv.elevation AS location_elevation,
    geometry_elevatedpoint_view_jvenwv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jvenwv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jvenwv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jvenwv.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_zseqdt.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_ixavia.office::jsonb as office,
    airport_heliport_runway_pt_ddkead.parrunway::jsonb as parrunway,
    notes_note_view_dzkrvg.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zhzcrg on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_zhzcrg.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jvenwv on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_jvenwv.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_mgjcxb.id) as radarequipment
  from master_join master_join_lteqpg
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_mgjcxb on master_join_lteqpg.target_id = surveillance_radarcomponent_lat_mgjcxb.id
  where master_join_lteqpg.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_zseqdt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_welsfh.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_welsfh.title AS varchar), '(' || organisation_organisationauthority_lat_welsfh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_welsfh.href
  )) as office  from master_join master_join_pkhzug
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_welsfh on master_join_pkhzug.target_id = organisation_organisationauthority_lat_welsfh.id
  where master_join_pkhzug.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_ixavia on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_wrevio.id,
      'title', coalesce(cast(airport_heliport_runway_lat_wrevio.title AS varchar), '(' || airport_heliport_runway_lat_wrevio.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_wrevio.href
  )) as parrunway  from master_join master_join_hahprh
  join airport_heliport.runway_pt airport_heliport_runway_lat_wrevio on master_join_hahprh.target_id = airport_heliport_runway_lat_wrevio.id
  where master_join_hahprh.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_ddkead on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_arqohb.*) AS annotation
  from master_join master_join_bacgnh
  join notes.note_view notes_note_lat_arqohb on master_join_bacgnh.target_id = notes_note_lat_arqohb.id
  where master_join_bacgnh.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_dzkrvg on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index if not exists surveillance_radarsystem_id on surveillance.radarsystem_view (id);
create index if not exists surveillance_radarsystem_location_gist on surveillance.radarsystem_view using GIST (location_geom);
-- RadioCommunicationChannelType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_iulgnq.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_iulgnq.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_bxukqg.availability::jsonb as availability,
    notes_note_view_eklqwv.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_gjomin.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_gjomin.id,
      'longitude', geometry_elevatedpoint_lat_gjomin.longitude,
      'latitude', geometry_elevatedpoint_lat_gjomin.latitude,
      'elevation', geometry_elevatedpoint_lat_gjomin.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_gjomin.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_gjomin.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_gjomin.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_gjomin.horizontalAccuracy
    )) AS attr
  from master_join master_join_depdhz
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_gjomin on master_join_depdhz.target_id = geometry_elevatedpoint_lat_gjomin.id
  where master_join_depdhz.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_iulgnq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_jqlzgy.id) as availability
  from master_join master_join_hqoqaf
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_jqlzgy on master_join_hqoqaf.target_id = service_radiocommunicationoperationalstatus_lat_jqlzgy.id
  where master_join_hqoqaf.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_bxukqg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkdywp.*) AS annotation
  from master_join master_join_wpdskp
  join notes.note_view notes_note_lat_lkdywp on master_join_wpdskp.target_id = notes_note_lat_lkdywp.id
  where master_join_wpdskp.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_eklqwv on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index if not exists service_radiocommunicationchannel_id on service.radiocommunicationchannel_view (id);
create index if not exists service_radiocommunicationchannel_location_gist on service.radiocommunicationchannel_view using GIST (location_geom);
-- RadioFrequencyAreaType
-- ['notes.note_view', 'shared.circlesector_view', 'geometry.surface_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(navaids_points_navaidequipment_pt_mqezqt.title as varchar), '(' || navaids_points_navaidequipment_pt_mqezqt.nilreason[1] || ')')::text AS equipmentnavaidequipment,
    navaids_points_navaidequipment_pt_mqezqt.href::text AS equipmentnavaidequipment_href,
    coalesce(cast(service_radiocommunicationchannel_pt_qqmttu.title as varchar), '(' || service_radiocommunicationchannel_pt_qqmttu.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_qqmttu.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_zykqnh.title as varchar), '(' || navaids_points_specialnavigationstation_pt_zykqnh.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_zykqnh.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_suoqtk.title as varchar), '(' || surveillance_precisionapproachradar_pt_suoqtk.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_suoqtk.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_wytrox.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_wytrox.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_wytrox.href::text AS equipmentradar_href,
    shared_circlesector_view_ilyfnr.sector::jsonb as sector,
    geometry_surface_view_vobfkc.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_vobfkc.attr::jsonb as extent,
    notes_note_view_bbkazb.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_mqezqt on shared.radiofrequencyarea_ts.equipment_navaidequipment_id = navaids_points_navaidequipment_pt_mqezqt.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_qqmttu on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_qqmttu.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_zykqnh on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_zykqnh.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_suoqtk on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_suoqtk.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_wytrox on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_wytrox.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_gafnth.id) as sector
  from master_join master_join_ctpxcc
  join shared.circlesector_view shared_circlesector_lat_gafnth on master_join_ctpxcc.target_id = shared_circlesector_lat_gafnth.id
  where master_join_ctpxcc.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_ilyfnr on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_pjkqwt.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_pjkqwt.id,
      'horizontalAccuracy', geometry_surface_lat_pjkqwt.horizontalAccuracy
    )) AS attr
  from master_join master_join_cqnbuz
  join geometry.surface_view geometry_surface_lat_pjkqwt on master_join_cqnbuz.target_id = geometry_surface_lat_pjkqwt.id
  where master_join_cqnbuz.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_vobfkc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqxduq.*) AS annotation
  from master_join master_join_aisanc
  join notes.note_view notes_note_lat_jqxduq on master_join_aisanc.target_id = notes_note_lat_jqxduq.id
  where master_join_aisanc.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_bbkazb on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index if not exists shared_radiofrequencyarea_id on shared.radiofrequencyarea_view (id);
create index if not exists shared_radiofrequencyarea_extent_gist on shared.radiofrequencyarea_view using GIST (extent_geom);
-- RoadType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_jxmsij.title as varchar), '(' || airport_heliport_airportheliport_pt_jxmsij.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_jxmsij.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_msflbl.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_msflbl.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_oycxij.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_oycxij.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_oycxij.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_oycxij.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_oycxij.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_oycxij.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_lyqpzl.accessiblestand::jsonb as accessiblestand,
    notes_note_view_vuqadu.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jxmsij on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_jxmsij.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_msflbl on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_msflbl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oycxij on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_oycxij.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_maqqtk.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_maqqtk.title AS varchar), '(' || airport_heliport_aircraftstand_lat_maqqtk.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_maqqtk.href
  )) as accessiblestand  from master_join master_join_dlmqle
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_maqqtk on master_join_dlmqle.target_id = airport_heliport_aircraftstand_lat_maqqtk.id
  where master_join_dlmqle.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_lyqpzl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lxqbvg.*) AS annotation
  from master_join master_join_ohssuo
  join notes.note_view notes_note_lat_lxqbvg on master_join_ohssuo.target_id = notes_note_lat_lxqbvg.id
  where master_join_ohssuo.source_id = airport_heliport.road_ts.id
) as notes_note_view_vuqadu on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index if not exists airport_heliport_road_id on airport_heliport.road_view (id);
create index if not exists airport_heliport_road_surfaceextent_gist on airport_heliport.road_view using GIST (surfaceextent_geom);
-- RouteDMEType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_qfensc.title as varchar), '(' || navaids_points_dme_pt_qfensc.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_qfensc.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_dxyhqi.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_dxyhqi.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_lfthoo.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_qfensc on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_qfensc.id
left join routes.routeportion_view routes_routeportion_view_dxyhqi on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_dxyhqi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgyvzs.*) AS annotation
  from master_join master_join_xlcrih
  join notes.note_view notes_note_lat_bgyvzs on master_join_xlcrih.target_id = notes_note_lat_bgyvzs.id
  where master_join_xlcrih.source_id = routes.routedme_ts.id
) as notes_note_view_lfthoo on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index if not exists routes_routedme_id on routes.routedme_view (id);
-- RouteSegmentType
-- ['geometry.curve_view', 'routes.routeavailability_view', 'shared.obstacleassessmentarea_view', 'navaids_points.enroutesegmentpoint_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_oosdzm.id)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_oosdzm.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_hjzxtm.id)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_hjzxtm.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_qfsoif.title as varchar), '(' || routes_route_pt_qfsoif.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_qfsoif.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_ehzcch.id)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_ehzcch.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_xcnslk.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_xcnslk.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_nlxwjp.availability::jsonb as availability,
    notes_note_view_eikywi.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_oosdzm on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_oosdzm.id
left join routes.route_pt routes_route_pt_qfsoif on routes.routesegment_ts.routeformed_id = routes_route_pt_qfsoif.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ehzcch on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_ehzcch.id
left join geometry.curve_view geometry_curve_view_xcnslk on routes.routesegment_ts.curveextent_id = geometry_curve_view_xcnslk.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_hjzxtm on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_hjzxtm.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_noqusq.id) as availability
  from master_join master_join_upubjd
  join routes.routeavailability_view routes_routeavailability_lat_noqusq on master_join_upubjd.target_id = routes_routeavailability_lat_noqusq.id
  where master_join_upubjd.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_nlxwjp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hbrokn.*) AS annotation
  from master_join master_join_psagcx
  join notes.note_view notes_note_lat_hbrokn on master_join_psagcx.target_id = notes_note_lat_hbrokn.id
  where master_join_psagcx.source_id = routes.routesegment_ts.id
) as notes_note_view_eikywi on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index if not exists routes_routesegment_id on routes.routesegment_view (id);
create index if not exists routes_routesegment_curveextent_gist on routes.routesegment_view using GIST (curveextent_geom);
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_qqibmk.title as varchar), '(' || organisation_organisationauthority_pt_qqibmk.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_qqibmk.href::text AS userorganisation_href,
    notes_note_view_vdekzv.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qqibmk on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_qqibmk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lcqsas.*) AS annotation
  from master_join master_join_couqfu
  join notes.note_view notes_note_lat_lcqsas on master_join_couqfu.target_id = notes_note_lat_lcqsas.id
  where master_join_couqfu.source_id = routes.route_ts.id
) as notes_note_view_vdekzv on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index if not exists routes_route_id on routes.route_view (id);
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_lolutu.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_bixhar.affectedarea::jsonb as affectedarea,
    notes_note_view_mircvx.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_sqckpw.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_sqckpw.title AS varchar), '(' || airport_heliport_airportheliport_lat_sqckpw.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_sqckpw.href
  )) as affectedlocation  from master_join master_join_nlxzfh
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_sqckpw on master_join_nlxzfh.target_id = airport_heliport_airportheliport_lat_sqckpw.id
  where master_join_nlxzfh.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_lolutu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_rxccqn.id,
      'title', coalesce(cast(airspace_airspace_lat_rxccqn.title AS varchar), '(' || airspace_airspace_lat_rxccqn.nilreason[1] || ')'),
      'href', airspace_airspace_lat_rxccqn.href
  )) as affectedarea  from master_join master_join_jvffcb
  join airspace.airspace_pt airspace_airspace_lat_rxccqn on master_join_jvffcb.target_id = airspace_airspace_lat_rxccqn.id
  where master_join_jvffcb.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_bixhar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yubdjd.*) AS annotation
  from master_join master_join_xhqwys
  join notes.note_view notes_note_lat_yubdjd on master_join_xhqwys.target_id = notes_note_lat_yubdjd.id
  where master_join_xhqwys.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_mircvx on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index if not exists rules_procedures_rulesprocedures_id on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_wrxiwv.title as varchar), '(' || airport_heliport_runwaydirection_pt_wrxiwv.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_wrxiwv.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_ducfea.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ducfea.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ducfea.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ducfea.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ducfea.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ducfea.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ffzbnj.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ffzbnj.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_jjwyxw.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wrxiwv on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_wrxiwv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ducfea on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_ducfea.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ffzbnj on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ffzbnj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkeukc.*) AS annotation
  from master_join master_join_grzykm
  join notes.note_view notes_note_lat_rkeukc on master_join_grzykm.target_id = notes_note_lat_rkeukc.id
  where master_join_grzykm.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_jjwyxw on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index if not exists airport_heliport_runwayblastpad_id on airport_heliport.runwayblastpad_view (id);
create index if not exists airport_heliport_runwayblastpad_extent_gist on airport_heliport.runwayblastpad_view using GIST (extent_geom);
-- RunwayCentrelinePointType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'airport_heliport.runwaydeclareddistance_view', 'airport_heliport.navaidequipmentdistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_vfqyph.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vfqyph.longitude AS location_longitude,
    geometry_elevatedpoint_view_vfqyph.latitude AS location_latitude,
    geometry_elevatedpoint_view_vfqyph.elevation AS location_elevation,
    geometry_elevatedpoint_view_vfqyph.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vfqyph.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vfqyph.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vfqyph.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_gnilqd.title as varchar), '(' || airport_heliport_runwaydirection_pt_gnilqd.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_gnilqd.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_plnnhc.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_qnjhvw.navaidequipment::jsonb as navaidequipment,
    notes_note_view_ybsgul.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vfqyph on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_vfqyph.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_gnilqd on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_gnilqd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_emfhqa.id) as associateddeclareddistance
  from master_join master_join_wyuhzm
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_emfhqa on master_join_wyuhzm.target_id = airport_heliport_runwaydeclareddistance_lat_emfhqa.id
  where master_join_wyuhzm.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_plnnhc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_rphvzs.id) as navaidequipment
  from master_join master_join_wdokyn
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_rphvzs on master_join_wdokyn.target_id = airport_heliport_navaidequipmentdistance_lat_rphvzs.id
  where master_join_wdokyn.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_qnjhvw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lhkewu.*) AS annotation
  from master_join master_join_ahkpuj
  join notes.note_view notes_note_lat_lhkewu on master_join_ahkpuj.target_id = notes_note_lat_lhkewu.id
  where master_join_ahkpuj.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_ybsgul on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index if not exists airport_heliport_runwaycentrelinepoint_id on airport_heliport.runwaycentrelinepoint_view (id);
create index if not exists airport_heliport_runwaycentrelinepoint_location_gist on airport_heliport.runwaycentrelinepoint_view using GIST (location_geom);
-- RunwayDirectionLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_okrsno.title as varchar), '(' || airport_heliport_runwaydirection_pt_okrsno.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_okrsno.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_apzdma.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_nsnkme.availability::jsonb as availability,
    notes_note_view_zjgjyp.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_okrsno on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_okrsno.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_aehrmy.id) as element
  from master_join master_join_pnulmf
  join shared.lightelement_view shared_lightelement_lat_aehrmy on master_join_pnulmf.target_id = shared_lightelement_lat_aehrmy.id
  where master_join_pnulmf.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_apzdma on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hrmkjh.id) as availability
  from master_join master_join_icqlhh
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hrmkjh on master_join_icqlhh.target_id = airport_heliport_groundlightingavailability_lat_hrmkjh.id
  where master_join_icqlhh.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_nsnkme on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tioycv.*) AS annotation
  from master_join master_join_npwyrk
  join notes.note_view notes_note_lat_tioycv on master_join_npwyrk.target_id = notes_note_lat_tioycv.id
  where master_join_npwyrk.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_zjgjyp on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_runwaydirectionlightsystem_id on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_grnfmk.title as varchar), '(' || airport_heliport_runway_pt_grnfmk.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_grnfmk.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_flkxhr.title as varchar), '(' || airport_heliport_runwayelement_pt_flkxhr.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_flkxhr.href::text AS startingelement_href,
    notes_note_view_wvnurh.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_luwtaa.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_grnfmk on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_grnfmk.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_flkxhr on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_flkxhr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdxhli.*) AS annotation
  from master_join master_join_ovluxi
  join notes.note_view notes_note_lat_hdxhli on master_join_ovluxi.target_id = notes_note_lat_hdxhli.id
  where master_join_ovluxi.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_wvnurh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rvtwbp.id) as availability
  from master_join master_join_wivlph
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rvtwbp on master_join_wivlph.target_id = airport_heliport_manoeuvringareaavailability_lat_rvtwbp.id
  where master_join_wivlph.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_luwtaa on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index if not exists airport_heliport_runwaydirection_id on airport_heliport.runwaydirection_view (id);
-- RunwayElementType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ytudqm.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ytudqm.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_xrvbxc.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xrvbxc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xrvbxc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xrvbxc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xrvbxc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xrvbxc.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_dtkpad.associatedrunway::jsonb as associatedrunway,
    notes_note_view_vckaud.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_waiybq.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ytudqm on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ytudqm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xrvbxc on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_xrvbxc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_ggdulx.id,
      'title', coalesce(cast(airport_heliport_runway_lat_ggdulx.title AS varchar), '(' || airport_heliport_runway_lat_ggdulx.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_ggdulx.href
  )) as associatedrunway  from master_join master_join_hvtphg
  join airport_heliport.runway_pt airport_heliport_runway_lat_ggdulx on master_join_hvtphg.target_id = airport_heliport_runway_lat_ggdulx.id
  where master_join_hvtphg.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_dtkpad on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cdgvsp.*) AS annotation
  from master_join master_join_bonhle
  join notes.note_view notes_note_lat_cdgvsp on master_join_bonhle.target_id = notes_note_lat_cdgvsp.id
  where master_join_bonhle.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_vckaud on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ubffad.id) as availability
  from master_join master_join_iqyflw
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ubffad on master_join_iqyflw.target_id = airport_heliport_manoeuvringareaavailability_lat_ubffad.id
  where master_join_iqyflw.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_waiybq on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index if not exists airport_heliport_runwayelement_id on airport_heliport.runwayelement_view (id);
create index if not exists airport_heliport_runwayelement_extent_gist on airport_heliport.runwayelement_view using GIST (extent_geom);
-- RunwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_fitsry.title as varchar), '(' || airport_heliport_runway_pt_fitsry.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_fitsry.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_cgwyuj.element::jsonb as element,
    notes_note_view_dbujhb.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_fitsry on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_fitsry.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fdydnv.id) as element
  from master_join master_join_yafptl
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fdydnv on master_join_yafptl.target_id = airport_heliport_markingelement_lat_fdydnv.id
  where master_join_yafptl.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_cgwyuj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sxnzoo.*) AS annotation
  from master_join master_join_nczwpq
  join notes.note_view notes_note_lat_sxnzoo on master_join_nczwpq.target_id = notes_note_lat_sxnzoo.id
  where master_join_nczwpq.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_dbujhb on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index if not exists airport_heliport_runwaymarking_id on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_uuxhzl.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_uuxhzl.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_uuxhzl.href::text AS lightedarea_href,
    shared_lightelement_view_apudiy.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_bqzuas.availability::jsonb as availability,
    notes_note_view_tfnlzs.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_uuxhzl on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_uuxhzl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_rzhzyo.id) as element
  from master_join master_join_pfnssk
  join shared.lightelement_view shared_lightelement_lat_rzhzyo on master_join_pfnssk.target_id = shared_lightelement_lat_rzhzyo.id
  where master_join_pfnssk.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_apudiy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_xjcyac.id) as availability
  from master_join master_join_icavjl
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_xjcyac on master_join_icavjl.target_id = airport_heliport_groundlightingavailability_lat_xjcyac.id
  where master_join_icavjl.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_bqzuas on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uactnt.*) AS annotation
  from master_join master_join_gjseyl
  join notes.note_view notes_note_lat_uactnt on master_join_gjseyl.target_id = notes_note_lat_uactnt.id
  where master_join_gjseyl.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_tfnlzs on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_runwayprotectarealightsystem_id on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ulfalh.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ulfalh.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_cdfnqc.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cdfnqc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cdfnqc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cdfnqc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cdfnqc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cdfnqc.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_zaiwxk.title as varchar), '(' || airport_heliport_runwaydirection_pt_zaiwxk.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_zaiwxk.href::text AS protectedrunwaydirection_href,
    notes_note_view_zzgwnn.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ulfalh on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ulfalh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cdfnqc on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_cdfnqc.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_zaiwxk on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_zaiwxk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ovunhe.*) AS annotation
  from master_join master_join_ukqjey
  join notes.note_view notes_note_lat_ovunhe on master_join_ukqjey.target_id = notes_note_lat_ovunhe.id
  where master_join_ukqjey.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_zzgwnn on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index if not exists airport_heliport_runwayprotectarea_id on airport_heliport.runwayprotectarea_view (id);
create index if not exists airport_heliport_runwayprotectarea_extent_gist on airport_heliport.runwayprotectarea_view using GIST (extent_geom);
-- RunwayType
-- ['notes.note_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaycontamination_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fwgscc.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_fwgscc.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_ubvfad.title as varchar), '(' || airport_heliport_airportheliport_pt_ubvfad.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ubvfad.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_yhmbof.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_hhlfup.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_kyenzk.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fwgscc on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fwgscc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ubvfad on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ubvfad.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_tzdvpw.id) as overallcontaminant
  from master_join master_join_ncbqsm
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_tzdvpw on master_join_ncbqsm.target_id = airport_heliport_runwaycontamination_lat_tzdvpw.id
  where master_join_ncbqsm.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_yhmbof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_faagnf.*) AS annotation
  from master_join master_join_rdmozt
  join notes.note_view notes_note_lat_faagnf on master_join_rdmozt.target_id = notes_note_lat_faagnf.id
  where master_join_rdmozt.source_id = airport_heliport.runway_ts.id
) as notes_note_view_hhlfup on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_zrnuff.id) as areacontaminant
  from master_join master_join_ppejsw
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_zrnuff on master_join_ppejsw.target_id = airport_heliport_runwaysectioncontamination_lat_zrnuff.id
  where master_join_ppejsw.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_kyenzk on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index if not exists airport_heliport_runway_id on airport_heliport.runway_view (id);
-- RunwayVisualRangeType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_qcdeka.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qcdeka.longitude AS location_longitude,
    geometry_elevatedpoint_view_qcdeka.latitude AS location_latitude,
    geometry_elevatedpoint_view_qcdeka.elevation AS location_elevation,
    geometry_elevatedpoint_view_qcdeka.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qcdeka.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qcdeka.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qcdeka.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_zflcuh.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_ctrfvx.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qcdeka on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_qcdeka.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_fiptjb.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_fiptjb.title AS varchar), '(' || airport_heliport_runwaydirection_lat_fiptjb.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_fiptjb.href
  )) as associatedrunwaydirection  from master_join master_join_eubima
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_fiptjb on master_join_eubima.target_id = airport_heliport_runwaydirection_lat_fiptjb.id
  where master_join_eubima.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_zflcuh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kszgsp.*) AS annotation
  from master_join master_join_yvlbcp
  join notes.note_view notes_note_lat_kszgsp on master_join_yvlbcp.target_id = notes_note_lat_kszgsp.id
  where master_join_yvlbcp.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_ctrfvx on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index if not exists airport_heliport_runwayvisualrange_id on airport_heliport.runwayvisualrange_view (id);
create index if not exists airport_heliport_runwayvisualrange_location_gist on airport_heliport.runwayvisualrange_view using GIST (location_geom);
-- SafeAltitudeAreaType
-- ['notes.note_view', 'procedure.safealtitudeareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_wlwcyy.title as varchar), '(' || navaids_points_designatedpoint_pt_wlwcyy.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_wlwcyy.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jtzhje.title as varchar), '(' || navaids_points_navaid_pt_jtzhje.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_jtzhje.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kdbbcl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kdbbcl.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_kdbbcl.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_aspulk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_aspulk.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_aspulk.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_plumhn.title as varchar), '(' || airport_heliport_airportheliport_pt_plumhn.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_plumhn.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_qrwvun.location::jsonb as location,
    geometry_point_view_ufyovz.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_ufyovz.longitude AS centrepointposition_longitude,
    geometry_point_view_ufyovz.latitude AS centrepointposition_latitude,
    geometry_point_view_ufyovz.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_mxppxi.sector::jsonb as sector,
    notes_note_view_pdvsko.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wlwcyy on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wlwcyy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jtzhje on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_jtzhje.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kdbbcl on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kdbbcl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_aspulk on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_aspulk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_plumhn on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_plumhn.id
left join geometry.point_view geometry_point_view_ufyovz on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_ufyovz.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_mlyvkx.id) as sector
  from master_join master_join_oeegpu
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_mlyvkx on master_join_oeegpu.target_id = procedure_safealtitudeareasector_lat_mlyvkx.id
  where master_join_oeegpu.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_mxppxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vwytup.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vwytup.title AS varchar), '(' || airport_heliport_airportheliport_lat_vwytup.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vwytup.href
  )) as location  from master_join master_join_oeffns
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vwytup on master_join_oeffns.target_id = airport_heliport_airportheliport_lat_vwytup.id
  where master_join_oeffns.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_qrwvun on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jnnexa.*) AS annotation
  from master_join master_join_krdfqf
  join notes.note_view notes_note_lat_jnnexa on master_join_krdfqf.target_id = notes_note_lat_jnnexa.id
  where master_join_krdfqf.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_pdvsko on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index if not exists procedure_safealtitudearea_id on procedure.safealtitudearea_view (id);
create index if not exists procedure_safealtitudearea_centrepointposition_gist on procedure.safealtitudearea_view using GIST (centrepointposition_geom);
-- SDFType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_bxrwse.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bxrwse.longitude AS location_longitude,
    geometry_elevatedpoint_view_bxrwse.latitude AS location_latitude,
    geometry_elevatedpoint_view_bxrwse.elevation AS location_elevation,
    geometry_elevatedpoint_view_bxrwse.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bxrwse.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bxrwse.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bxrwse.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_vwbnjo.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mcqbgw.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_rxejkh.availability::jsonb as availability,
    notes_note_view_rntgry.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bxrwse on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_bxrwse.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fgmfnq.id) as authority
  from master_join master_join_vrmmov
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fgmfnq on master_join_vrmmov.target_id = navaids_points_authorityfornavaidequipment_lat_fgmfnq.id
  where master_join_vrmmov.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_vwbnjo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vpwvjy.id) as monitoring
  from master_join master_join_vvvorw
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vpwvjy on master_join_vvvorw.target_id = navaids_points_navaidequipmentmonitoring_lat_vpwvjy.id
  where master_join_vvvorw.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mcqbgw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_oearoo.id) as availability
  from master_join master_join_kvzufz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_oearoo on master_join_kvzufz.target_id = navaids_points_navaidoperationalstatus_lat_oearoo.id
  where master_join_kvzufz.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_rxejkh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zwfhiu.*) AS annotation
  from master_join master_join_vfgzdu
  join notes.note_view notes_note_lat_zwfhiu on master_join_vfgzdu.target_id = notes_note_lat_zwfhiu.id
  where master_join_vfgzdu.source_id = navaids_points.sdf_ts.id
) as notes_note_view_rntgry on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index if not exists navaids_points_sdf_id on navaids_points.sdf_view (id);
create index if not exists navaids_points_sdf_location_gist on navaids_points.sdf_view using GIST (location_geom);
-- SeaplaneLandingAreaType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_iyphew.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_iyphew.elevation AS extent_elevation,
    geometry_elevatedsurface_view_iyphew.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_iyphew.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_iyphew.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_iyphew.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_derjpo.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_ecmkol.docksite::jsonb as docksite,
    notes_note_view_rdhoux.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_smyhio.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_iyphew on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_iyphew.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_yxfdde.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_yxfdde.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_yxfdde.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_yxfdde.href
  )) as rampsite  from master_join master_join_nkqixb
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_yxfdde on master_join_nkqixb.target_id = airport_heliport_seaplanerampsite_lat_yxfdde.id
  where master_join_nkqixb.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_derjpo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_kpvoxl.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_kpvoxl.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_kpvoxl.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_kpvoxl.href
  )) as docksite  from master_join master_join_mcnbyd
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_kpvoxl on master_join_mcnbyd.target_id = airport_heliport_floatingdocksite_lat_kpvoxl.id
  where master_join_mcnbyd.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_ecmkol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hkxeic.*) AS annotation
  from master_join master_join_mwvtid
  join notes.note_view notes_note_lat_hkxeic on master_join_mwvtid.target_id = notes_note_lat_hkxeic.id
  where master_join_mwvtid.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_rdhoux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ngiyhg.id) as availability
  from master_join master_join_wkhrgb
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ngiyhg on master_join_wkhrgb.target_id = airport_heliport_manoeuvringareaavailability_lat_ngiyhg.id
  where master_join_wkhrgb.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_smyhio on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index if not exists airport_heliport_seaplanelandingarea_id on airport_heliport.seaplanelandingarea_view (id);
create index if not exists airport_heliport_seaplanelandingarea_extent_gist on airport_heliport.seaplanelandingarea_view using GIST (extent_geom);
-- SeaplaneRampSiteType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_znqpaf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_znqpaf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_znqpaf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_znqpaf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_znqpaf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_znqpaf.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_arrkzc.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_arrkzc.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_arrkzc.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_arrkzc.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_arrkzc.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_arrkzc.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_ezhmkx.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_znqpaf on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_znqpaf.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_arrkzc on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_arrkzc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vemuan.*) AS annotation
  from master_join master_join_azdjud
  join notes.note_view notes_note_lat_vemuan on master_join_azdjud.target_id = notes_note_lat_vemuan.id
  where master_join_azdjud.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_ezhmkx on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index if not exists airport_heliport_seaplanerampsite_id on airport_heliport.seaplanerampsite_view (id);
create index if not exists airport_heliport_seaplanerampsite_extent_gist on airport_heliport.seaplanerampsite_view using GIST (extent_geom);
create index if not exists airport_heliport_seaplanerampsite_centreline_gist on airport_heliport.seaplanerampsite_view using GIST (centreline_geom);
-- SearchRescueServiceType
-- ['service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_cxvukc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cxvukc.longitude AS location_longitude,
    geometry_elevatedpoint_view_cxvukc.latitude AS location_latitude,
    geometry_elevatedpoint_view_cxvukc.elevation AS location_elevation,
    geometry_elevatedpoint_view_cxvukc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cxvukc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cxvukc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cxvukc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hlyicx.title as varchar), '(' || organisation_unit_pt_hlyicx.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_hlyicx.href::text AS serviceprovider_href,
    service_callsigndetail_view_pgyafl.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_wtpxof.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ytibpb.availability::jsonb as availability,
    notes_note_view_tykpdj.annotation::jsonb as annotation,
    airspace_airspace_pt_rjlxmq.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_wdvvtx.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cxvukc on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_cxvukc.id
left join organisation.unit_pt organisation_unit_pt_hlyicx on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_hlyicx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_uwblxm.id) as callsign
  from master_join master_join_nmiftk
  join service.callsigndetail_view service_callsigndetail_lat_uwblxm on master_join_nmiftk.target_id = service_callsigndetail_lat_uwblxm.id
  where master_join_nmiftk.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_pgyafl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_fawdbq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_fawdbq.title AS varchar), '(' || service_radiocommunicationchannel_lat_fawdbq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_fawdbq.href
  )) as radiocommunication  from master_join master_join_aqcdoz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_fawdbq on master_join_aqcdoz.target_id = service_radiocommunicationchannel_lat_fawdbq.id
  where master_join_aqcdoz.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_wtpxof on TRUE
left join lateral(
  select
  from master_join master_join_cjlepy
  join shared.contactinformation_view shared_contactinformation_lat_uthukm on master_join_cjlepy.target_id = shared_contactinformation_lat_uthukm.id
  where master_join_cjlepy.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_ppnswx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hrnqxo.id) as availability
  from master_join master_join_yzgamz
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hrnqxo on master_join_yzgamz.target_id = service_serviceoperationalstatus_lat_hrnqxo.id
  where master_join_yzgamz.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_ytibpb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lpohig.*) AS annotation
  from master_join master_join_kgxjuu
  join notes.note_view notes_note_lat_lpohig on master_join_kgxjuu.target_id = notes_note_lat_lpohig.id
  where master_join_kgxjuu.source_id = service.searchrescueservice_ts.id
) as notes_note_view_tykpdj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_lcvtwv.id,
      'title', coalesce(cast(airspace_airspace_lat_lcvtwv.title AS varchar), '(' || airspace_airspace_lat_lcvtwv.nilreason[1] || ')'),
      'href', airspace_airspace_lat_lcvtwv.href
  )) as clientairspace  from master_join master_join_bteweq
  join airspace.airspace_pt airspace_airspace_lat_lcvtwv on master_join_bteweq.target_id = airspace_airspace_lat_lcvtwv.id
  where master_join_bteweq.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_rjlxmq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_jsmtvr.id) as clientroute
  from master_join master_join_jhdolf
  join routes.routeportion_view routes_routeportion_lat_jsmtvr on master_join_jhdolf.target_id = routes_routeportion_lat_jsmtvr.id
  where master_join_jhdolf.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_wdvvtx on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index if not exists service_searchrescueservice_id on service.searchrescueservice_view (id);
create index if not exists service_searchrescueservice_location_gist on service.searchrescueservice_view using GIST (location_geom);
-- SecondarySurveillanceRadarType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_atlefu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_atlefu.longitude AS location_longitude,
    geometry_elevatedpoint_view_atlefu.latitude AS location_latitude,
    geometry_elevatedpoint_view_atlefu.elevation AS location_elevation,
    geometry_elevatedpoint_view_atlefu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_atlefu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_atlefu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_atlefu.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_eaeauc.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_wluhcu.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_atlefu on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_atlefu.id
left join lateral(
  select
  from master_join master_join_imnept
  join shared.contactinformation_view shared_contactinformation_lat_kwmfnp on master_join_imnept.target_id = shared_contactinformation_lat_kwmfnp.id
  where master_join_imnept.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_undouw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gkawmu.*) AS annotation
  from master_join master_join_plgrsh
  join notes.note_view notes_note_lat_gkawmu on master_join_plgrsh.target_id = notes_note_lat_gkawmu.id
  where master_join_plgrsh.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_eaeauc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_fcwxjq.id) as groundstation
  from master_join master_join_xhyaih
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_fcwxjq on master_join_xhyaih.target_id = surveillance_surveillancegroundstation_lat_fcwxjq.id
  where master_join_xhyaih.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_wluhcu on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index if not exists surveillance_secondarysurveillanceradar_id on surveillance.secondarysurveillanceradar_view (id);
create index if not exists surveillance_secondarysurveillanceradar_location_gist on surveillance.secondarysurveillanceradar_view using GIST (location_geom);
-- SignificantPointInAirspaceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_kbkdpy.title as varchar), '(' || airspace_airspace_pt_kbkdpy.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_kbkdpy.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nvobha.title as varchar), '(' || navaids_points_designatedpoint_pt_nvobha.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nvobha.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_swaefw.title as varchar), '(' || navaids_points_navaid_pt_swaefw.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_swaefw.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mdfcnx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mdfcnx.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_mdfcnx.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_psfdpj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_psfdpj.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_psfdpj.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jdagrr.title as varchar), '(' || airport_heliport_airportheliport_pt_jdagrr.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_jdagrr.href::text AS locationairportreferencepoint_href,
    geometry_point_view_zdgqzh.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_zdgqzh.longitude AS locationposition_longitude,
    geometry_point_view_zdgqzh.latitude AS locationposition_latitude,
    geometry_point_view_zdgqzh.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_lxpghh.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_kbkdpy on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_kbkdpy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nvobha on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nvobha.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_swaefw on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_swaefw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mdfcnx on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mdfcnx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_psfdpj on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_psfdpj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jdagrr on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_jdagrr.id
left join geometry.point_view geometry_point_view_zdgqzh on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_zdgqzh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xoside.*) AS annotation
  from master_join master_join_efrpbr
  join notes.note_view notes_note_lat_xoside on master_join_efrpbr.target_id = notes_note_lat_xoside.id
  where master_join_efrpbr.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_lxpghh on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index if not exists navaids_points_significantpointinairspace_id on navaids_points.significantpointinairspace_view (id);
create index if not exists navaids_points_significantpointinairspace_locationposition_gist on navaids_points.significantpointinairspace_view using GIST (locationposition_geom);
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_yqjlwp.title as varchar), '(' || organisation_organisationauthority_pt_yqjlwp.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_yqjlwp.href::text AS authority_href,
    notes_note_view_anlsax.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_yqjlwp on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_yqjlwp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zatlov.*) AS annotation
  from master_join master_join_bkuhkk
  join notes.note_view notes_note_lat_zatlov on master_join_bkuhkk.target_id = notes_note_lat_zatlov.id
  where master_join_bkuhkk.source_id = shared.specialdate_ts.id
) as notes_note_view_anlsax on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index if not exists shared_specialdate_id on shared.specialdate_view (id);
-- SpecialNavigationStationType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_kkugww.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_kkugww.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_kkugww.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_easijw.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_easijw.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_zngkyv.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_zngkyv.longitude AS position_longitude,
    geometry_elevatedpoint_view_zngkyv.latitude AS position_latitude,
    geometry_elevatedpoint_view_zngkyv.elevation AS position_elevation,
    geometry_elevatedpoint_view_zngkyv.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_zngkyv.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_zngkyv.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_zngkyv.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_nyerjd.availability::jsonb as availability,
    notes_note_view_zeejmk.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_kkugww on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_kkugww.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_easijw on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_easijw.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zngkyv on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_zngkyv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_krrinp.id) as availability
  from master_join master_join_nwweqt
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_krrinp on master_join_nwweqt.target_id = navaids_points_specialnavigationstationstatus_lat_krrinp.id
  where master_join_nwweqt.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_nyerjd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vnhqnu.*) AS annotation
  from master_join master_join_nfagba
  join notes.note_view notes_note_lat_vnhqnu on master_join_nfagba.target_id = notes_note_lat_vnhqnu.id
  where master_join_nfagba.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_zeejmk on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index if not exists navaids_points_specialnavigationstation_id on navaids_points.specialnavigationstation_view (id);
create index if not exists navaids_points_specialnavigationstation_position_gist on navaids_points.specialnavigationstation_view using GIST (position_geom);
-- SpecialNavigationSystemType
-- ['notes.note_view', 'navaids_points.authorityforspecialnavigationsystem_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_bjpcuu.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_bjpcuu.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_qcmbxf.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_bjpcuu on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_bjpcuu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pljspm.*) AS annotation
  from master_join master_join_svnqrw
  join notes.note_view notes_note_lat_pljspm on master_join_svnqrw.target_id = notes_note_lat_pljspm.id
  where master_join_svnqrw.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_qcmbxf on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index if not exists navaids_points_specialnavigationsystem_id on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalType
-- ['procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_xzgwzm.title as varchar), '(' || navaids_points_navaid_pt_xzgwzm.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_xzgwzm.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_oboztm.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_oboztm.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_oboztm.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_cfhhcr.title as varchar), '(' || surveillance_radarsystem_pt_cfhhcr.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_cfhhcr.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_nnhpqm.title as varchar), '(' || procedure_safealtitudearea_pt_nnhpqm.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_nnhpqm.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_znscjo.id)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_znscjo.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_fvzkrp.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_kfvoxo.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_nzizfs.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_nybcar.flighttransition::jsonb as flighttransition,
    notes_note_view_rgexbh.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xzgwzm on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_xzgwzm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_oboztm on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_oboztm.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_cfhhcr on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_cfhhcr.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_nnhpqm on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_nnhpqm.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_znscjo on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_znscjo.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_qlhtmo.id) as availability
  from master_join master_join_ljkqqw
  join procedure.procedureavailability_view procedure_procedureavailability_lat_qlhtmo on master_join_ljkqqw.target_id = procedure_procedureavailability_lat_qlhtmo.id
  where master_join_ljkqqw.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_fvzkrp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zqqjaf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zqqjaf.title AS varchar), '(' || airport_heliport_airportheliport_lat_zqqjaf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zqqjaf.href
  )) as airportheliport  from master_join master_join_dqoebm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zqqjaf on master_join_dqoebm.target_id = airport_heliport_airportheliport_lat_zqqjaf.id
  where master_join_dqoebm.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_kfvoxo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sgxtvn.id) as aircraftcharacteristic
  from master_join master_join_raiomt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_sgxtvn on master_join_raiomt.target_id = shared_aircraftcharacteristic_lat_sgxtvn.id
  where master_join_raiomt.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_nzizfs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_ezbzum.id) as flighttransition
  from master_join master_join_buqqvx
  join procedure.proceduretransition_view procedure_proceduretransition_lat_ezbzum on master_join_buqqvx.target_id = procedure_proceduretransition_lat_ezbzum.id
  where master_join_buqqvx.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_nybcar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rvvqzy.*) AS annotation
  from master_join master_join_bntvbc
  join notes.note_view notes_note_lat_rvvqzy on master_join_bntvbc.target_id = notes_note_lat_rvvqzy.id
  where master_join_bntvbc.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_rgexbh on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index if not exists procedure_standardinstrumentarrival_id on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureType
-- ['procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_hqssgb.title as varchar), '(' || navaids_points_navaid_pt_hqssgb.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_hqssgb.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_wzwsdt.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_wzwsdt.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_wzwsdt.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_xkrckk.title as varchar), '(' || surveillance_radarsystem_pt_xkrckk.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_xkrckk.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_pjicea.title as varchar), '(' || procedure_safealtitudearea_pt_pjicea.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_pjicea.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_rqcytj.id)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_rqcytj.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_lkzqle.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_kosphw.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_mkfjwa.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_xotlev.flighttransition::jsonb as flighttransition,
    notes_note_view_gffwsr.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_hqssgb on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_hqssgb.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_wzwsdt on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_wzwsdt.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_xkrckk on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_xkrckk.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_pjicea on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_pjicea.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_rqcytj on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_rqcytj.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_uyrzji.id) as availability
  from master_join master_join_toyxnh
  join procedure.procedureavailability_view procedure_procedureavailability_lat_uyrzji on master_join_toyxnh.target_id = procedure_procedureavailability_lat_uyrzji.id
  where master_join_toyxnh.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_lkzqle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_rlsugt.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_rlsugt.title AS varchar), '(' || airport_heliport_airportheliport_lat_rlsugt.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_rlsugt.href
  )) as airportheliport  from master_join master_join_dnnnsj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_rlsugt on master_join_dnnnsj.target_id = airport_heliport_airportheliport_lat_rlsugt.id
  where master_join_dnnnsj.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_kosphw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_baistq.id) as aircraftcharacteristic
  from master_join master_join_mqakpm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_baistq on master_join_mqakpm.target_id = shared_aircraftcharacteristic_lat_baistq.id
  where master_join_mqakpm.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_mkfjwa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_iwihbk.id) as flighttransition
  from master_join master_join_rgcqcf
  join procedure.proceduretransition_view procedure_proceduretransition_lat_iwihbk on master_join_rgcqcf.target_id = procedure_proceduretransition_lat_iwihbk.id
  where master_join_rgcqcf.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_xotlev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_blqtgf.*) AS annotation
  from master_join master_join_fkfytx
  join notes.note_view notes_note_lat_blqtgf on master_join_fkfytx.target_id = notes_note_lat_blqtgf.id
  where master_join_fkfytx.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_gffwsr on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index if not exists procedure_standardinstrumentdeparture_id on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_gmirpr.title as varchar), '(' || shared_standardleveltable_pt_gmirpr.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_gmirpr.href::text AS leveltable_href,
    shared_standardlevel_view_ppxegs.level::jsonb as level,
    notes_note_view_rtgjdx.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_gmirpr on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_gmirpr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_ixazqq.id) as level
  from master_join master_join_dlizxo
  join shared.standardlevel_view shared_standardlevel_lat_ixazqq on master_join_dlizxo.target_id = shared_standardlevel_lat_ixazqq.id
  where master_join_dlizxo.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_ppxegs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sciinj.*) AS annotation
  from master_join master_join_qcnpit
  join notes.note_view notes_note_lat_sciinj on master_join_qcnpit.target_id = notes_note_lat_sciinj.id
  where master_join_qcnpit.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_rtgjdx on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index if not exists shared_standardlevelcolumn_id on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_kyvvkd.title as varchar), '(' || shared_standardlevelcolumn_pt_kyvvkd.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_kyvvkd.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_bvbzvt.applicableairspace::jsonb as applicableairspace,
    notes_note_view_qqdqxh.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_kyvvkd on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_kyvvkd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_bxiojh.id,
      'title', coalesce(cast(airspace_airspace_lat_bxiojh.title AS varchar), '(' || airspace_airspace_lat_bxiojh.nilreason[1] || ')'),
      'href', airspace_airspace_lat_bxiojh.href
  )) as applicableairspace  from master_join master_join_stjmgd
  join airspace.airspace_pt airspace_airspace_lat_bxiojh on master_join_stjmgd.target_id = airspace_airspace_lat_bxiojh.id
  where master_join_stjmgd.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_bvbzvt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qrfkpn.*) AS annotation
  from master_join master_join_jpyjaw
  join notes.note_view notes_note_lat_qrfkpn on master_join_jpyjaw.target_id = notes_note_lat_qrfkpn.id
  where master_join_jpyjaw.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_qqdqxh on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index if not exists shared_standardlevelsector_id on shared.standardlevelsector_view (id);
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_cattdz.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gmypln.*) AS annotation
  from master_join master_join_nenyzw
  join notes.note_view notes_note_lat_gmypln on master_join_nenyzw.target_id = notes_note_lat_gmypln.id
  where master_join_nenyzw.source_id = shared.standardleveltable_ts.id
) as notes_note_view_cattdz on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index if not exists shared_standardleveltable_id on shared.standardleveltable_view (id);
-- StandMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_ybzyxn.title as varchar), '(' || airport_heliport_aircraftstand_pt_ybzyxn.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_ybzyxn.href::text AS markedstand_href,
    airport_heliport_markingelement_view_ypxels.element::jsonb as element,
    notes_note_view_ffiroc.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_ybzyxn on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_ybzyxn.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_zlfxve.id) as element
  from master_join master_join_qmsdrb
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_zlfxve on master_join_qmsdrb.target_id = airport_heliport_markingelement_lat_zlfxve.id
  where master_join_qmsdrb.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_ypxels on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xsloah.*) AS annotation
  from master_join master_join_jcbifd
  join notes.note_view notes_note_lat_xsloah on master_join_jcbifd.target_id = notes_note_lat_xsloah.id
  where master_join_jcbifd.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_ffiroc on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index if not exists airport_heliport_standmarking_id on airport_heliport.standmarking_view (id);
-- SurveyControlPointType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_zcxzyy.title as varchar), '(' || airport_heliport_airportheliport_pt_zcxzyy.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zcxzyy.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_cquuxa.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cquuxa.longitude AS location_longitude,
    geometry_elevatedpoint_view_cquuxa.latitude AS location_latitude,
    geometry_elevatedpoint_view_cquuxa.elevation AS location_elevation,
    geometry_elevatedpoint_view_cquuxa.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cquuxa.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cquuxa.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cquuxa.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_mqmvzg.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zcxzyy on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zcxzyy.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cquuxa on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_cquuxa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cqrszw.*) AS annotation
  from master_join master_join_gebvqf
  join notes.note_view notes_note_lat_cqrszw on master_join_gebvqf.target_id = notes_note_lat_cqrszw.id
  where master_join_gebvqf.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_mqmvzg on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index if not exists airport_heliport_surveycontrolpoint_id on airport_heliport.surveycontrolpoint_view (id);
create index if not exists airport_heliport_surveycontrolpoint_location_gist on airport_heliport.surveycontrolpoint_view using GIST (location_geom);
-- TACANType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_kbmkfy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kbmkfy.longitude AS location_longitude,
    geometry_elevatedpoint_view_kbmkfy.latitude AS location_latitude,
    geometry_elevatedpoint_view_kbmkfy.elevation AS location_elevation,
    geometry_elevatedpoint_view_kbmkfy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kbmkfy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kbmkfy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kbmkfy.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_uedwdp.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hlhysw.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hyxkxy.availability::jsonb as availability,
    notes_note_view_ffguvw.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kbmkfy on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_kbmkfy.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fmthly.id) as authority
  from master_join master_join_rlbxgo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fmthly on master_join_rlbxgo.target_id = navaids_points_authorityfornavaidequipment_lat_fmthly.id
  where master_join_rlbxgo.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_uedwdp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pncowi.id) as monitoring
  from master_join master_join_jyfohm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pncowi on master_join_jyfohm.target_id = navaids_points_navaidequipmentmonitoring_lat_pncowi.id
  where master_join_jyfohm.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hlhysw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_duuhkh.id) as availability
  from master_join master_join_ebpbji
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_duuhkh on master_join_ebpbji.target_id = navaids_points_navaidoperationalstatus_lat_duuhkh.id
  where master_join_ebpbji.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_hyxkxy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_opskxm.*) AS annotation
  from master_join master_join_ntowrc
  join notes.note_view notes_note_lat_opskxm on master_join_ntowrc.target_id = notes_note_lat_opskxm.id
  where master_join_ntowrc.source_id = navaids_points.tacan_ts.id
) as notes_note_view_ffguvw on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index if not exists navaids_points_tacan_id on navaids_points.tacan_view (id);
create index if not exists navaids_points_tacan_location_gist on navaids_points.tacan_view using GIST (location_geom);
-- TaxiHoldingPositionLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_ftdzzi.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_ftdzzi.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_ftdzzi.href::text AS taxiholding_href,
    shared_lightelement_view_yohipf.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_mqcgdu.availability::jsonb as availability,
    notes_note_view_ebffup.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_ftdzzi on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_ftdzzi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_glwkjv.id) as element
  from master_join master_join_oktnub
  join shared.lightelement_view shared_lightelement_lat_glwkjv on master_join_oktnub.target_id = shared_lightelement_lat_glwkjv.id
  where master_join_oktnub.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_yohipf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_eshdgl.id) as availability
  from master_join master_join_wsowfz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_eshdgl on master_join_wsowfz.target_id = airport_heliport_groundlightingavailability_lat_eshdgl.id
  where master_join_wsowfz.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_mqcgdu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ellbuz.*) AS annotation
  from master_join master_join_vxrlum
  join notes.note_view notes_note_lat_ellbuz on master_join_vxrlum.target_id = notes_note_lat_ellbuz.id
  where master_join_vxrlum.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_ebffup on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_taxiholdingpositionlightsystem_id on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_pfbuxz.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_pfbuxz.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_pfbuxz.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_emihxw.element::jsonb as element,
    notes_note_view_vxqqxn.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_pfbuxz on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_pfbuxz.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pysfkm.id) as element
  from master_join master_join_tthegj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_pysfkm on master_join_tthegj.target_id = airport_heliport_markingelement_lat_pysfkm.id
  where master_join_tthegj.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_emihxw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sfkdgg.*) AS annotation
  from master_join master_join_pmwogm
  join notes.note_view notes_note_lat_sfkdgg on master_join_pmwogm.target_id = notes_note_lat_sfkdgg.id
  where master_join_pmwogm.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_vxqqxn on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index if not exists airport_heliport_taxiholdingpositionmarking_id on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_obusxt.title as varchar), '(' || airport_heliport_guidanceline_pt_obusxt.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_obusxt.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_fgmxrw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fgmxrw.longitude AS location_longitude,
    geometry_elevatedpoint_view_fgmxrw.latitude AS location_latitude,
    geometry_elevatedpoint_view_fgmxrw.elevation AS location_elevation,
    geometry_elevatedpoint_view_fgmxrw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fgmxrw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fgmxrw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fgmxrw.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_fwmcxg.protectedrunway::jsonb as protectedrunway,
    notes_note_view_pgarvd.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_obusxt on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_obusxt.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fgmxrw on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_fgmxrw.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_mgcnkx.id,
      'title', coalesce(cast(airport_heliport_runway_lat_mgcnkx.title AS varchar), '(' || airport_heliport_runway_lat_mgcnkx.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_mgcnkx.href
  )) as protectedrunway  from master_join master_join_wsuwwz
  join airport_heliport.runway_pt airport_heliport_runway_lat_mgcnkx on master_join_wsuwwz.target_id = airport_heliport_runway_lat_mgcnkx.id
  where master_join_wsuwwz.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_fwmcxg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_padzod.*) AS annotation
  from master_join master_join_rbbafd
  join notes.note_view notes_note_lat_padzod on master_join_rbbafd.target_id = notes_note_lat_padzod.id
  where master_join_rbbafd.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_pgarvd on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index if not exists airport_heliport_taxiholdingposition_id on airport_heliport.taxiholdingposition_view (id);
create index if not exists airport_heliport_taxiholdingposition_location_gist on airport_heliport.taxiholdingposition_view using GIST (location_geom);
-- TaxiwayElementType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bzqbjq.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_bzqbjq.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_huamee.title as varchar), '(' || airport_heliport_taxiway_pt_huamee.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_huamee.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_fmspqa.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fmspqa.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fmspqa.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fmspqa.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fmspqa.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fmspqa.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_tmwbmu.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_shhcjm.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bzqbjq on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bzqbjq.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_huamee on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_huamee.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fmspqa on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_fmspqa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqvmrf.*) AS annotation
  from master_join master_join_whvxyl
  join notes.note_view notes_note_lat_oqvmrf on master_join_whvxyl.target_id = notes_note_lat_oqvmrf.id
  where master_join_whvxyl.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_tmwbmu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ncjnka.id) as availability
  from master_join master_join_fpgtft
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ncjnka on master_join_fpgtft.target_id = airport_heliport_manoeuvringareaavailability_lat_ncjnka.id
  where master_join_fpgtft.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_shhcjm on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index if not exists airport_heliport_taxiwayelement_id on airport_heliport.taxiwayelement_view (id);
create index if not exists airport_heliport_taxiwayelement_extent_gist on airport_heliport.taxiwayelement_view using GIST (extent_geom);
-- TaxiwayLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_lnqrpt.title as varchar), '(' || airport_heliport_taxiway_pt_lnqrpt.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_lnqrpt.href::text AS lightedtaxiway_href,
    shared_lightelement_view_opjair.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qmvprj.availability::jsonb as availability,
    notes_note_view_aosijy.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_lnqrpt on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_lnqrpt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_kddfjx.id) as element
  from master_join master_join_wddste
  join shared.lightelement_view shared_lightelement_lat_kddfjx on master_join_wddste.target_id = shared_lightelement_lat_kddfjx.id
  where master_join_wddste.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_opjair on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_aaeuxe.id) as availability
  from master_join master_join_okvniu
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_aaeuxe on master_join_okvniu.target_id = airport_heliport_groundlightingavailability_lat_aaeuxe.id
  where master_join_okvniu.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qmvprj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fgwhvc.*) AS annotation
  from master_join master_join_hqcngv
  join notes.note_view notes_note_lat_fgwhvc on master_join_hqcngv.target_id = notes_note_lat_fgwhvc.id
  where master_join_hqcngv.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_aosijy on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_taxiwaylightsystem_id on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_mdfdjy.title as varchar), '(' || airport_heliport_taxiway_pt_mdfdjy.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_mdfdjy.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_nhbida.title as varchar), '(' || airport_heliport_taxiwayelement_pt_nhbida.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_nhbida.href::text AS markedelement_href,
    airport_heliport_markingelement_view_tkofne.element::jsonb as element,
    notes_note_view_hhtuts.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_mdfdjy on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_mdfdjy.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_nhbida on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_nhbida.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_kkqiyc.id) as element
  from master_join master_join_eqdnxp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_kkqiyc on master_join_eqdnxp.target_id = airport_heliport_markingelement_lat_kkqiyc.id
  where master_join_eqdnxp.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_tkofne on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zjhkmh.*) AS annotation
  from master_join master_join_flntft
  join notes.note_view notes_note_lat_zjhkmh on master_join_flntft.target_id = notes_note_lat_zjhkmh.id
  where master_join_flntft.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_hhtuts on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index if not exists airport_heliport_taxiwaymarking_id on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_sfgkyo.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_sfgkyo.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_kkyhpm.title as varchar), '(' || airport_heliport_airportheliport_pt_kkyhpm.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_kkyhpm.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_jaogii.contaminant::jsonb as contaminant,
    notes_note_view_svlnbg.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_ehoupg.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_sfgkyo on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_sfgkyo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kkyhpm on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_kkyhpm.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_tvzugx.id) as contaminant
  from master_join master_join_tflklb
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_tvzugx on master_join_tflklb.target_id = airport_heliport_taxiwaycontamination_lat_tvzugx.id
  where master_join_tflklb.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_jaogii on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgdvar.*) AS annotation
  from master_join master_join_fcvdlh
  join notes.note_view notes_note_lat_wgdvar on master_join_fcvdlh.target_id = notes_note_lat_wgdvar.id
  where master_join_fcvdlh.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_svlnbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_lqrtyp.id) as availability
  from master_join master_join_selrdg
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_lqrtyp on master_join_selrdg.target_id = airport_heliport_manoeuvringareaavailability_lat_lqrtyp.id
  where master_join_selrdg.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_ehoupg on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index if not exists airport_heliport_taxiway_id on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaType
-- ['notes.note_view', 'geometry.surface_view', 'procedure.terminalarrivalareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_xncrtm.title as varchar), '(' || navaids_points_designatedpoint_pt_xncrtm.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_xncrtm.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_etscfo.title as varchar), '(' || navaids_points_designatedpoint_pt_etscfo.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_etscfo.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ffkbtg.title as varchar), '(' || navaids_points_navaid_pt_ffkbtg.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_ffkbtg.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_kgcdwh.title as varchar), '(' || navaids_points_navaid_pt_kgcdwh.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_kgcdwh.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_aqxefl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_aqxefl.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_aqxefl.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_eglvct.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_eglvct.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_eglvct.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tjmadm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tjmadm.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tjmadm.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uqivvw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uqivvw.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uqivvw.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tszsyx.title as varchar), '(' || airport_heliport_airportheliport_pt_tszsyx.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_tszsyx.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_buorhg.title as varchar), '(' || airport_heliport_airportheliport_pt_buorhg.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_buorhg.href::text AS iafairportreferencepoint_href,
    geometry_point_view_oxxtyx.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_oxxtyx.longitude AS ifposition_longitude,
    geometry_point_view_oxxtyx.latitude AS ifposition_latitude,
    geometry_point_view_oxxtyx.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_vpxymz.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_vpxymz.longitude AS iafposition_longitude,
    geometry_point_view_vpxymz.latitude AS iafposition_latitude,
    geometry_point_view_vpxymz.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_nhbpds.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_nhbpds.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_fbcfmj.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_fbcfmj.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_fbcfmj.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_wlbhke.sector::jsonb as sector,
    notes_note_view_lnnbds.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xncrtm on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xncrtm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ffkbtg on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_ffkbtg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_aqxefl on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_aqxefl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tjmadm on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tjmadm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tszsyx on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_tszsyx.id
left join geometry.point_view geometry_point_view_oxxtyx on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_oxxtyx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_etscfo on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_etscfo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_kgcdwh on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_kgcdwh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_eglvct on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_eglvct.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uqivvw on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uqivvw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_buorhg on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_buorhg.id
left join geometry.point_view geometry_point_view_vpxymz on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_vpxymz.id
left join geometry.surface_view geometry_surface_view_nhbpds on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_nhbpds.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_fbcfmj on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_fbcfmj.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_kljmon.id) as sector
  from master_join master_join_bceppt
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_kljmon on master_join_bceppt.target_id = procedure_terminalarrivalareasector_lat_kljmon.id
  where master_join_bceppt.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_wlbhke on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drazjh.*) AS annotation
  from master_join master_join_ndelxf
  join notes.note_view notes_note_lat_drazjh on master_join_ndelxf.target_id = notes_note_lat_drazjh.id
  where master_join_ndelxf.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_lnnbds on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index if not exists procedure_terminalarrivalarea_id on procedure.terminalarrivalarea_view (id);
create index if not exists procedure_terminalarrivalarea_ifposition_gist on procedure.terminalarrivalarea_view using GIST (ifposition_geom);
create index if not exists procedure_terminalarrivalarea_iafposition_gist on procedure.terminalarrivalarea_view using GIST (iafposition_geom);
create index if not exists procedure_terminalarrivalarea_buffer_gist on procedure.terminalarrivalarea_view using GIST (buffer_geom);
-- TouchDownLiftOffLightSystemType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nnumjs.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nnumjs.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_nnumjs.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_lqrpll.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_fulhjs.availability::jsonb as availability,
    notes_note_view_jdsurx.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nnumjs on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_nnumjs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vlnqhi.id) as element
  from master_join master_join_galerh
  join shared.lightelement_view shared_lightelement_lat_vlnqhi on master_join_galerh.target_id = shared_lightelement_lat_vlnqhi.id
  where master_join_galerh.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_lqrpll on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qipydj.id) as availability
  from master_join master_join_oisrtz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qipydj on master_join_oisrtz.target_id = airport_heliport_groundlightingavailability_lat_qipydj.id
  where master_join_oisrtz.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_fulhjs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vcmdgq.*) AS annotation
  from master_join master_join_fptdeh
  join notes.note_view notes_note_lat_vcmdgq on master_join_fptdeh.target_id = notes_note_lat_vcmdgq.id
  where master_join_fptdeh.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_jdsurx on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index if not exists airport_heliport_touchdownliftofflightsystem_id on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xdtqpn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xdtqpn.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_xdtqpn.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_khbxbk.element::jsonb as element,
    notes_note_view_yqmaxz.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xdtqpn on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_xdtqpn.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_gnenod.id) as element
  from master_join master_join_mbyuns
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_gnenod on master_join_mbyuns.target_id = airport_heliport_markingelement_lat_gnenod.id
  where master_join_mbyuns.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_khbxbk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oeyebn.*) AS annotation
  from master_join master_join_knkfrl
  join notes.note_view notes_note_lat_oeyebn on master_join_knkfrl.target_id = notes_note_lat_oeyebn.id
  where master_join_knkfrl.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_yqmaxz on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index if not exists airport_heliport_touchdownliftoffmarking_id on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lptuyt.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_lptuyt.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_akxwzs.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_akxwzs.elevation AS extent_elevation,
    geometry_elevatedsurface_view_akxwzs.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_akxwzs.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_akxwzs.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_akxwzs.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rpavcm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rpavcm.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_rpavcm.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_kjbqkn.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lptuyt on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lptuyt.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_akxwzs on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_akxwzs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rpavcm on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_rpavcm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qpsigq.*) AS annotation
  from master_join master_join_ctifar
  join notes.note_view notes_note_lat_qpsigq on master_join_ctifar.target_id = notes_note_lat_qpsigq.id
  where master_join_ctifar.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_kjbqkn on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index if not exists airport_heliport_touchdownliftoffsafearea_id on airport_heliport.touchdownliftoffsafearea_view (id);
create index if not exists airport_heliport_touchdownliftoffsafearea_extent_gist on airport_heliport.touchdownliftoffsafearea_view using GIST (extent_geom);
-- TouchDownLiftOffType
-- ['airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.touchdownliftoffcontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_qhqhql.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_qhqhql.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_qhqhql.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_qhqhql.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_qhqhql.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_qhqhql.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_qhqhql.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_qhqhql.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_jjtweg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jjtweg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jjtweg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jjtweg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jjtweg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jjtweg.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_axnxjs.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_axnxjs.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_ixsinl.title as varchar), '(' || airport_heliport_airportheliport_pt_ixsinl.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ixsinl.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_hcqzam.title as varchar), '(' || airport_heliport_runway_pt_hcqzam.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_hcqzam.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_xfgsan.contaminant::jsonb as contaminant,
    notes_note_view_sutgmt.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_rrlyqw.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qhqhql on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_qhqhql.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jjtweg on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_jjtweg.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_axnxjs on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_axnxjs.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ixsinl on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ixsinl.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_hcqzam on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_hcqzam.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_wzeyws.id) as contaminant
  from master_join master_join_lhmydb
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_wzeyws on master_join_lhmydb.target_id = airport_heliport_touchdownliftoffcontamination_lat_wzeyws.id
  where master_join_lhmydb.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_xfgsan on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kboazl.*) AS annotation
  from master_join master_join_qjzegg
  join notes.note_view notes_note_lat_kboazl on master_join_qjzegg.target_id = notes_note_lat_kboazl.id
  where master_join_qjzegg.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_sutgmt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_duyaxv.id) as availability
  from master_join master_join_cvvmdc
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_duyaxv on master_join_cvvmdc.target_id = airport_heliport_manoeuvringareaavailability_lat_duyaxv.id
  where master_join_cvvmdc.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_rrlyqw on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index if not exists airport_heliport_touchdownliftoff_id on airport_heliport.touchdownliftoff_view (id);
create index if not exists airport_heliport_touchdownliftoff_aimingpoint_gist on airport_heliport.touchdownliftoff_view using GIST (aimingpoint_geom);
create index if not exists airport_heliport_touchdownliftoff_extent_gist on airport_heliport.touchdownliftoff_view using GIST (extent_geom);
-- UnitType
-- ['geometry.elevatedpoint_view', 'organisation.unitdependency_view', 'notes.note_view', 'shared.contactinformation_view', 'organisation.unitavailability_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_rxoger.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_rxoger.longitude AS position_longitude,
    geometry_elevatedpoint_view_rxoger.latitude AS position_latitude,
    geometry_elevatedpoint_view_rxoger.elevation AS position_elevation,
    geometry_elevatedpoint_view_rxoger.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_rxoger.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_rxoger.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_rxoger.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_pzyjht.title as varchar), '(' || airport_heliport_airportheliport_pt_pzyjht.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_pzyjht.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_rrajmo.title as varchar), '(' || organisation_organisationauthority_pt_rrajmo.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_rrajmo.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_kehxhw.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_opmsua.availability::jsonb as availability,
    notes_note_view_rzzuom.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rxoger on organisation.unit_ts.position_id = geometry_elevatedpoint_view_rxoger.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pzyjht on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_pzyjht.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_rrajmo on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_rrajmo.id
left join lateral(
  select
  from master_join master_join_ncjhjb
  join shared.contactinformation_view shared_contactinformation_lat_gjyniu on master_join_ncjhjb.target_id = shared_contactinformation_lat_gjyniu.id
  where master_join_ncjhjb.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_wqobee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_dsnunw.id) as relatedunit
  from master_join master_join_gdqopg
  join organisation.unitdependency_view organisation_unitdependency_lat_dsnunw on master_join_gdqopg.target_id = organisation_unitdependency_lat_dsnunw.id
  where master_join_gdqopg.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_kehxhw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_epnqms.id) as availability
  from master_join master_join_ngwabj
  join organisation.unitavailability_view organisation_unitavailability_lat_epnqms on master_join_ngwabj.target_id = organisation_unitavailability_lat_epnqms.id
  where master_join_ngwabj.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_opmsua on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_elgykn.*) AS annotation
  from master_join master_join_mnpxut
  join notes.note_view notes_note_lat_elgykn on master_join_mnpxut.target_id = notes_note_lat_elgykn.id
  where master_join_mnpxut.source_id = organisation.unit_ts.id
) as notes_note_view_rzzuom on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index if not exists organisation_unit_id on organisation.unit_view (id);
create index if not exists organisation_unit_position_gist on organisation.unit_view using GIST (position_geom);
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_acoobw.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thqofn.*) AS annotation
  from master_join master_join_wvlmzp
  join notes.note_view notes_note_lat_thqofn on master_join_wvlmzp.target_id = notes_note_lat_thqofn.id
  where master_join_wvlmzp.source_id = holding.unplannedholding_ts.id
) as notes_note_view_acoobw on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index if not exists holding_unplannedholding_id on holding.unplannedholding_view (id);
-- VerticalStructureType
-- ['notes.note_view', 'obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_lteskc.title as varchar), '(' || navaids_points_markerbeacon_pt_lteskc.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_lteskc.href::text AS marker_href,
    obstacles_verticalstructurepart_view_adsrdq.part::jsonb as part,
    service_passengerservice_pt_uvuetz.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_nokmpu.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_ktklhc.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_bfrrga.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_lnzqfx.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_zghgnz.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_qubhut.supportedservice::jsonb as supportedservice,
    notes_note_view_occwnx.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_ymzsfi.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_lteskc on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_lteskc.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_rvnekj.id) as part
  from master_join master_join_fwyfda
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_rvnekj on master_join_fwyfda.target_id = obstacles_verticalstructurepart_lat_rvnekj.id
  where master_join_fwyfda.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_adsrdq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_dicnvx.id,
      'title', coalesce(cast(service_passengerservice_lat_dicnvx.title AS varchar), '(' || service_passengerservice_lat_dicnvx.nilreason[1] || ')'),
      'href', service_passengerservice_lat_dicnvx.href
  )) as hostedpassengerservice  from master_join master_join_urtsvl
  join service.passengerservice_pt service_passengerservice_lat_dicnvx on master_join_urtsvl.target_id = service_passengerservice_lat_dicnvx.id
  where master_join_urtsvl.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_uvuetz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_efwagg.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_efwagg.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_efwagg.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_efwagg.href
  )) as supportedgroundlight  from master_join master_join_qrnhly
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_efwagg on master_join_qrnhly.target_id = airport_heliport_groundlightsystem_lat_efwagg.id
  where master_join_qrnhly.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_nokmpu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_iwmxzc.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_iwmxzc.title AS varchar), '(' || navaids_points_navaidequipment_lat_iwmxzc.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_iwmxzc.href
  )) as hostednavaidequipment  from master_join master_join_dudqbh
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_iwmxzc on master_join_dudqbh.target_id = navaids_points_navaidequipment_lat_iwmxzc.id
  where master_join_dudqbh.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_ktklhc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_lltuaz.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_lltuaz.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_lltuaz.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_lltuaz.href
  )) as hostedspecialnavstation  from master_join master_join_ijmyox
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_lltuaz on master_join_ijmyox.target_id = navaids_points_specialnavigationstation_lat_lltuaz.id
  where master_join_ijmyox.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_bfrrga on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_wulgnv.id,
      'title', coalesce(cast(organisation_unit_lat_wulgnv.title AS varchar), '(' || organisation_unit_lat_wulgnv.nilreason[1] || ')'),
      'href', organisation_unit_lat_wulgnv.href
  )) as hostedunit  from master_join master_join_suzjgf
  join organisation.unit_pt organisation_unit_lat_wulgnv on master_join_suzjgf.target_id = organisation_unit_lat_wulgnv.id
  where master_join_suzjgf.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_lnzqfx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uulwmg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uulwmg.title AS varchar), '(' || organisation_organisationauthority_lat_uulwmg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uulwmg.href
  )) as hostedorganisation  from master_join master_join_pkbkye
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uulwmg on master_join_pkbkye.target_id = organisation_organisationauthority_lat_uulwmg.id
  where master_join_pkbkye.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_zghgnz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_hvefsd.id,
      'title', coalesce(cast(service_service_lat_hvefsd.title AS varchar), '(' || service_service_lat_hvefsd.nilreason[1] || ')'),
      'href', service_service_lat_hvefsd.href
  )) as supportedservice  from master_join master_join_ogqmbk
  join service.service_pt service_service_lat_hvefsd on master_join_ogqmbk.target_id = service_service_lat_hvefsd.id
  where master_join_ogqmbk.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_qubhut on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldfpxf.*) AS annotation
  from master_join master_join_pblmrf
  join notes.note_view notes_note_lat_ldfpxf on master_join_pblmrf.target_id = notes_note_lat_ldfpxf.id
  where master_join_pblmrf.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_occwnx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_beubxy.id) as lightingavailability
  from master_join master_join_yycyaq
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_beubxy on master_join_yycyaq.target_id = obstacles_verticalstructurelightingstatus_lat_beubxy.id
  where master_join_yycyaq.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_ymzsfi on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index if not exists obstacles_verticalstructure_id on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_sepoti.title as varchar), '(' || airport_heliport_runwaydirection_pt_sepoti.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_sepoti.href::text AS runwaydirection_href,
    shared_lightelement_view_nwcmjq.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_tntsxa.availability::jsonb as availability,
    notes_note_view_mvdvfg.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_sepoti on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_sepoti.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_wlriyr.id) as element
  from master_join master_join_ntvysx
  join shared.lightelement_view shared_lightelement_lat_wlriyr on master_join_ntvysx.target_id = shared_lightelement_lat_wlriyr.id
  where master_join_ntvysx.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_nwcmjq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_gmassu.id) as availability
  from master_join master_join_cipogv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_gmassu on master_join_cipogv.target_id = airport_heliport_groundlightingavailability_lat_gmassu.id
  where master_join_cipogv.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_tntsxa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_voered.*) AS annotation
  from master_join master_join_mvjuso
  join notes.note_view notes_note_lat_voered on master_join_mvjuso.target_id = notes_note_lat_voered.id
  where master_join_mvjuso.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_mvdvfg on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index if not exists airport_heliport_visualglideslopeindicator_id on airport_heliport.visualglideslopeindicator_view (id);
-- VORType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_jkvcwk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jkvcwk.longitude AS location_longitude,
    geometry_elevatedpoint_view_jkvcwk.latitude AS location_latitude,
    geometry_elevatedpoint_view_jkvcwk.elevation AS location_elevation,
    geometry_elevatedpoint_view_jkvcwk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jkvcwk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jkvcwk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jkvcwk.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_eapeds.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_esvlqt.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_epehwl.availability::jsonb as availability,
    notes_note_view_zsyesc.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jkvcwk on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_jkvcwk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jtjgoa.id) as authority
  from master_join master_join_qvpmhc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jtjgoa on master_join_qvpmhc.target_id = navaids_points_authorityfornavaidequipment_lat_jtjgoa.id
  where master_join_qvpmhc.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_eapeds on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_dvbwmr.id) as monitoring
  from master_join master_join_vojatk
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_dvbwmr on master_join_vojatk.target_id = navaids_points_navaidequipmentmonitoring_lat_dvbwmr.id
  where master_join_vojatk.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_esvlqt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wumqws.id) as availability
  from master_join master_join_rhtjxc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wumqws on master_join_rhtjxc.target_id = navaids_points_navaidoperationalstatus_lat_wumqws.id
  where master_join_rhtjxc.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_epehwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wfctpa.*) AS annotation
  from master_join master_join_ggwpyo
  join notes.note_view notes_note_lat_wfctpa on master_join_ggwpyo.target_id = notes_note_lat_wfctpa.id
  where master_join_ggwpyo.source_id = navaids_points.vor_ts.id
) as notes_note_view_zsyesc on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index if not exists navaids_points_vor_id on navaids_points.vor_view (id);
create index if not exists navaids_points_vor_location_gist on navaids_points.vor_view using GIST (location_geom);
-- WorkAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.workareaactivity_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_echttb.title as varchar), '(' || airport_heliport_airportheliport_pt_echttb.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_echttb.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_tyfxvo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_tyfxvo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tyfxvo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tyfxvo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tyfxvo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tyfxvo.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_ppqepm.activation::jsonb as activation,
    notes_note_view_lyiyov.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_echttb on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_echttb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tyfxvo on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_tyfxvo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_qlwjhn.id) as activation
  from master_join master_join_vcljhr
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_qlwjhn on master_join_vcljhr.target_id = airport_heliport_workareaactivity_lat_qlwjhn.id
  where master_join_vcljhr.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_ppqepm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vfruiu.*) AS annotation
  from master_join master_join_ryqmmz
  join notes.note_view notes_note_lat_vfruiu on master_join_ryqmmz.target_id = notes_note_lat_vfruiu.id
  where master_join_ryqmmz.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_lyiyov on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index if not exists airport_heliport_workarea_id on airport_heliport.workarea_view (id);
create index if not exists airport_heliport_workarea_extent_gist on airport_heliport.workarea_view using GIST (extent_geom);
