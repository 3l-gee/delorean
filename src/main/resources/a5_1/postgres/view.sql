-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    (row_number() OVER ())::integer AS row,
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    notes_note_view_pyzdre.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpwauj.*) AS annotation
  from master_join master_join_tceafh
  join notes.note_view notes_note_lat_gpwauj on master_join_tceafh.target_id = notes_note_lat_gpwauj.id
  where master_join_tceafh.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_pyzdre on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_ntbkqm.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_edzpph.layer as layer,
    notes_note_view_wtbwjq.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ntdacy.id) as criticalridge
  from master_join master_join_fusoaj
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ntdacy on master_join_fusoaj.target_id = airport_heliport_ridge_lat_ntdacy.id
  where master_join_fusoaj.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_ntbkqm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_cejwqs.id) as layer
  from master_join master_join_ioefor
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_cejwqs on master_join_ioefor.target_id = airport_heliport_surfacecontaminationlayer_lat_cejwqs.id
  where master_join_ioefor.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_edzpph on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utqjpt.*) AS annotation
  from master_join master_join_tpyesk
  join notes.note_view notes_note_lat_utqjpt on master_join_tpyesk.target_id = notes_note_lat_utqjpt.id
  where master_join_tpyesk.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_wtbwjq on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_nwuudu.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_oxkxiz.layer as layer,
    notes_note_view_pfuivw.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_eowrfz.id) as criticalridge
  from master_join master_join_xradts
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_eowrfz on master_join_xradts.target_id = airport_heliport_ridge_lat_eowrfz.id
  where master_join_xradts.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_nwuudu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_exjppt.id) as layer
  from master_join master_join_lsxozf
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_exjppt on master_join_lsxozf.target_id = airport_heliport_surfacecontaminationlayer_lat_exjppt.id
  where master_join_lsxozf.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_oxkxiz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_urbufi.*) AS annotation
  from master_join master_join_fpdrpd
  join notes.note_view notes_note_lat_urbufi on master_join_fpdrpd.target_id = notes_note_lat_urbufi.id
  where master_join_fpdrpd.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_pfuivw on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_kizqyy.id) AS theairspacevolume,
    notes_note_view_koctdo.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_kizqyy on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_kizqyy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rzrmey.*) AS annotation
  from master_join master_join_dfjpmr
  join notes.note_view notes_note_lat_rzrmey on master_join_dfjpmr.target_id = notes_note_lat_rzrmey.id
  where master_join_dfjpmr.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_koctdo on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    (row_number() OVER ())::integer AS row,
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_rtadpi.title as varchar), '(' || shared_standardlevelcolumn_pt_rtadpi.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_rtadpi.href AS discretelevelseries_href,
    notes_note_view_yoifim.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_rtadpi on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_rtadpi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qojrne.*) AS annotation
  from master_join master_join_vygzdr
  join notes.note_view notes_note_lat_qojrne on master_join_vygzdr.target_id = notes_note_lat_qojrne.id
  where master_join_vygzdr.source_id = shared.airspacelayer.id
) as notes_note_view_yoifim on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_pjklby.title as varchar), '(' || airspace_airspace_pt_pjklby.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_pjklby.href AS theairspace_href,
    notes_note_view_bewdxp.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_pjklby on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_pjklby.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oahqbs.*) AS annotation
  from master_join master_join_tgtmsi
  join notes.note_view notes_note_lat_oahqbs on master_join_tgtmsi.target_id = notes_note_lat_oahqbs.id
  where master_join_tgtmsi.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_bewdxp on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    (row_number() OVER ())::integer AS row,
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    notes_note_view_crjubb.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egvgwg.*) AS annotation
  from master_join master_join_nhtiba
  join notes.note_view notes_note_lat_egvgwg on master_join_nhtiba.target_id = notes_note_lat_egvgwg.id
  where master_join_nhtiba.source_id = shared.altitudeadjustment.id
) as notes_note_view_crjubb on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_exownr.title as varchar), '(' || navaids_points_angleindication_pt_exownr.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_exownr.href AS theangleindication_href,
    notes_note_view_fzmwxi.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_exownr on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_exownr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpdugw.*) AS annotation
  from master_join master_join_swwrwq
  join notes.note_view notes_note_lat_gpdugw on master_join_swwrwq.target_id = notes_note_lat_gpdugw.id
  where master_join_swwrwq.source_id = navaids_points.angleuse.id
) as notes_note_view_fzmwxi on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    notes_note_view_cepjfu.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kgpytc.*) AS annotation
  from master_join master_join_zspovr
  join notes.note_view notes_note_lat_kgpytc on master_join_zspovr.target_id = notes_note_lat_kgpytc.id
  where master_join_zspovr.source_id = procedure.approachaltitudetable.id
) as notes_note_view_cepjfu on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    to_jsonb(procedure_minima_pt_yxcgvo.id) AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_ivtbax.title as varchar), '(' || airport_heliport_altimetersource_pt_ivtbax.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_ivtbax.href AS altimeter_href,
    procedure_circlingrestriction_pt_ewjfgq.circlingrestriction as circlingrestriction,
    shared_aircraftcharacteristic_pt_inmrwx.aircraftcategory as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_mcxrzv.landingarea as landingarea,
    shared_obstacleassessmentarea_pt_eaybal.designsurface as designsurface,
    notes_note_view_dbzgtc.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_yxcgvo on procedure.approachcondition.minimumset_id = procedure_minima_pt_yxcgvo.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_ivtbax on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_ivtbax.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_biqsxh.id) as circlingrestriction
  from master_join master_join_clnhsy
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_biqsxh on master_join_clnhsy.target_id = procedure_circlingrestriction_lat_biqsxh.id
  where master_join_clnhsy.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_ewjfgq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_clzmrr.id) as aircraftcategory
  from master_join master_join_iqvvsg
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_clzmrr on master_join_iqvvsg.target_id = shared_aircraftcharacteristic_lat_clzmrr.id
  where master_join_iqvvsg.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_inmrwx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_dxoszc.id) as landingarea
  from master_join master_join_qsjmpt
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_dxoszc on master_join_qsjmpt.target_id = procedure_landingtakeoffareacollection_lat_dxoszc.id
  where master_join_qsjmpt.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_mcxrzv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_jvilzq.id) as designsurface
  from master_join master_join_tahbwe
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_jvilzq on master_join_tahbwe.target_id = shared_obstacleassessmentarea_lat_jvilzq.id
  where master_join_tahbwe.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_eaybal on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mpnpqi.*) AS annotation
  from master_join master_join_lssdmw
  join notes.note_view notes_note_lat_mpnpqi on master_join_lssdmw.target_id = notes_note_lat_mpnpqi.id
  where master_join_lssdmw.source_id = procedure.approachcondition.id
) as notes_note_view_dbzgtc on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    notes_note_view_ehbxcc.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uubcyi.*) AS annotation
  from master_join master_join_ymhtgb
  join notes.note_view notes_note_lat_uubcyi on master_join_ymhtgb.target_id = notes_note_lat_uubcyi.id
  where master_join_ymhtgb.source_id = procedure.approachdistancetable.id
) as notes_note_view_ehbxcc on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    notes_note_view_qtsbli.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wovfbt.*) AS annotation
  from master_join master_join_ufmqbw
  join notes.note_view notes_note_lat_wovfbt on master_join_ufmqbw.target_id = notes_note_lat_wovfbt.id
  where master_join_ufmqbw.source_id = procedure.approachtimingtable.id
) as notes_note_view_qtsbli on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_iokfdb.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_adbpzc.layer as layer,
    notes_note_view_viopee.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_otvits.id) as criticalridge
  from master_join master_join_uebksc
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_otvits on master_join_uebksc.target_id = airport_heliport_ridge_lat_otvits.id
  where master_join_uebksc.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_iokfdb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_zaknpx.id) as layer
  from master_join master_join_ehjdyg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_zaknpx on master_join_ehjdyg.target_id = airport_heliport_surfacecontaminationlayer_lat_zaknpx.id
  where master_join_ehjdyg.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_adbpzc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzruvh.*) AS annotation
  from master_join master_join_lkjmha
  join notes.note_view notes_note_lat_nzruvh on master_join_lkjmha.target_id = notes_note_lat_nzruvh.id
  where master_join_lkjmha.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_viopee on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_uzujte.title as varchar), '(' || organisation_organisationauthority_pt_uzujte.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_uzujte.href AS theorganisationauthority_href,
    notes_note_view_cvatfp.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_uzujte on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_uzujte.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_heorpg.*) AS annotation
  from master_join master_join_ehiirv
  join notes.note_view notes_note_lat_heorpg on master_join_ehiirv.target_id = notes_note_lat_heorpg.id
  where master_join_ehiirv.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_cvatfp on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_tlbpyf.title as varchar), '(' || organisation_organisationauthority_pt_tlbpyf.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_tlbpyf.href AS theorganisationauthority_href,
    notes_note_view_hjtkft.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tlbpyf on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_tlbpyf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aocjsu.*) AS annotation
  from master_join master_join_vkvvgm
  join notes.note_view notes_note_lat_aocjsu on master_join_vkvvgm.target_id = notes_note_lat_aocjsu.id
  where master_join_vkvvgm.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_hjtkft on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_aafokt.title as varchar), '(' || organisation_organisationauthority_pt_aafokt.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_aafokt.href AS theorganisationauthority_href,
    notes_note_view_gdzzjk.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_aafokt on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_aafokt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_judque.*) AS annotation
  from master_join master_join_axkcis
  join notes.note_view notes_note_lat_judque on master_join_axkcis.target_id = notes_note_lat_judque.id
  where master_join_axkcis.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_gdzzjk on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_ywkrlm.title as varchar), '(' || organisation_organisationauthority_pt_ywkrlm.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_ywkrlm.href AS theorganisationauthority_href,
    notes_note_view_euvcup.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ywkrlm on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_ywkrlm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtdpdy.*) AS annotation
  from master_join master_join_vcrnfo
  join notes.note_view notes_note_lat_rtdpdy on master_join_vcrnfo.target_id = notes_note_lat_rtdpdy.id
  where master_join_vcrnfo.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_euvcup on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    (row_number() OVER ())::integer AS row,
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    notes_note_view_lqgmbj.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dkxnzt.*) AS annotation
  from master_join master_join_prwoaz
  join notes.note_view notes_note_lat_dkxnzt on master_join_prwoaz.target_id = notes_note_lat_dkxnzt.id
  where master_join_prwoaz.source_id = service.callsigndetail.id
) as notes_note_view_lqgmbj on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    (row_number() OVER ())::integer AS row,
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    notes_note_view_bcenwk.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dmgnvt.*) AS annotation
  from master_join master_join_bearxg
  join notes.note_view notes_note_lat_dmgnvt on master_join_bearxg.target_id = notes_note_lat_dmgnvt.id
  where master_join_bearxg.source_id = shared.circlesector.id
) as notes_note_view_bcenwk on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    notes_note_view_hiiefh.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qvahpt.*) AS annotation
  from master_join master_join_jlvdkv
  join notes.note_view notes_note_lat_qvahpt on master_join_jlvdkv.target_id = notes_note_lat_qvahpt.id
  where master_join_jlvdkv.source_id = airport_heliport.city.id
) as notes_note_view_hiiefh on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_hlyyjd.id) AS enginetype,
    notes_note_view_uqadrx.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_hlyyjd on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_hlyyjd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pxxnor.*) AS annotation
  from master_join master_join_yvyhyk
  join notes.note_view notes_note_lat_pxxnor on master_join_yvyhyk.target_id = notes_note_lat_pxxnor.id
  where master_join_yvyhyk.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_uqadrx on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    (row_number() OVER ())::integer AS row,
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    notes_note_view_ioprkv.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osiaxh.*) AS annotation
  from master_join master_join_txtaqp
  join notes.note_view notes_note_lat_osiaxh on master_join_txtaqp.target_id = notes_note_lat_osiaxh.id
  where master_join_txtaqp.source_id = routes.directflightclass.id
) as notes_note_view_ioprkv on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    notes_note_view_gzzoby.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cmybkf.*) AS annotation
  from master_join master_join_pzykee
  join notes.note_view notes_note_lat_cmybkf on master_join_pzykee.target_id = notes_note_lat_cmybkf.id
  where master_join_pzykee.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_gzzoby on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_sqwitx.adjustmentinopcol as adjustmentinopcol,
    notes_note_view_ktcfrb.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_jnnazy.id) as adjustmentinopcol
  from master_join master_join_kbtbkr
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_jnnazy on master_join_kbtbkr.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_jnnazy.id
  where master_join_kbtbkr.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_sqwitx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eongvz.*) AS annotation
  from master_join master_join_tyrshf
  join notes.note_view notes_note_lat_eongvz on master_join_tyrshf.target_id = notes_note_lat_eongvz.id
  where master_join_tyrshf.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_ktcfrb on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    (row_number() OVER ())::integer AS row,
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    notes_note_view_casuea.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fspgha.*) AS annotation
  from master_join master_join_mobvga
  join notes.note_view notes_note_lat_fspgha on master_join_mobvga.target_id = notes_note_lat_fspgha.id
  where master_join_mobvga.source_id = public.fasdatablock.id
) as notes_note_view_casuea on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_btasij.altitude as altitude,
    procedure_approachdistancetable_pt_xwznhv.distance as distance,
    procedure_approachtimingtable_pt_slxdlv.timing as timing,
    notes_note_view_ohgznk.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_wlqzda.id) as altitude
  from master_join master_join_gjxlgn
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_wlqzda on master_join_gjxlgn.target_id = procedure_approachaltitudetable_lat_wlqzda.id
  where master_join_gjxlgn.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_btasij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_ohceoq.id) as distance
  from master_join master_join_hswfgm
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_ohceoq on master_join_hswfgm.target_id = procedure_approachdistancetable_lat_ohceoq.id
  where master_join_hswfgm.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_xwznhv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_gqcfpz.id) as timing
  from master_join master_join_qxrxqu
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_gqcfpz on master_join_qxrxqu.target_id = procedure_approachtimingtable_lat_gqcfpz.id
  where master_join_qxrxqu.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_slxdlv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_twkodt.*) AS annotation
  from master_join master_join_iuomvn
  join notes.note_view notes_note_lat_twkodt on master_join_iuomvn.target_id = notes_note_lat_twkodt.id
  where master_join_iuomvn.source_id = procedure.finalprofile.id
) as notes_note_view_ohgznk on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    (row_number() OVER ())::integer AS row,
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    notes_note_view_msgiyf.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ngmhsu.*) AS annotation
  from master_join master_join_ahkwxo
  join notes.note_view notes_note_lat_ngmhsu on master_join_ahkwxo.target_id = notes_note_lat_ngmhsu.id
  where master_join_ahkwxo.source_id = shared.flightcharacteristic.id
) as notes_note_view_msgiyf on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    notes_note_view_xtcbrm.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aagdsk.*) AS annotation
  from master_join master_join_zfyaei
  join notes.note_view notes_note_lat_aagdsk on master_join_zfyaei.target_id = notes_note_lat_aagdsk.id
  where master_join_zfyaei.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_xtcbrm on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    notes_note_view_rimzoc.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vzznro.*) AS annotation
  from master_join master_join_iyeexj
  join notes.note_view notes_note_lat_vzznro on master_join_iyeexj.target_id = notes_note_lat_vzznro.id
  where master_join_iyeexj.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_rimzoc on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    (row_number() OVER ())::integer AS row,
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    notes_note_view_yjhegb.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbwmwr.*) AS annotation
  from master_join master_join_bghiyc
  join notes.note_view notes_note_lat_rbwmwr on master_join_bghiyc.target_id = notes_note_lat_rbwmwr.id
  where master_join_bghiyc.source_id = service.fuel.id
) as notes_note_view_yjhegb on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    (row_number() OVER ())::integer AS row,
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    notes_note_view_kykmgg.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgtnvg.*) AS annotation
  from master_join master_join_dtfcbt
  join notes.note_view notes_note_lat_bgtnvg on master_join_dtfcbt.target_id = notes_note_lat_bgtnvg.id
  where master_join_dtfcbt.source_id = holding.holdingpatterndistance.id
) as notes_note_view_kykmgg on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    (row_number() OVER ())::integer AS row,
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    notes_note_view_cllrdp.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uhsorj.*) AS annotation
  from master_join master_join_iofpsa
  join notes.note_view notes_note_lat_uhsorj on master_join_iofpsa.target_id = notes_note_lat_uhsorj.id
  where master_join_iofpsa.source_id = holding.holdingpatternduration.id
) as notes_note_view_cllrdp on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_lgexqn.title as varchar), '(' || holding_holdingpattern_pt_lgexqn.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_lgexqn.href AS theholdingpattern_href,
    notes_note_view_bxkuvi.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_lgexqn on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_lgexqn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_firnlr.*) AS annotation
  from master_join master_join_abaosk
  join notes.note_view notes_note_lat_firnlr on master_join_abaosk.target_id = notes_note_lat_firnlr.id
  where master_join_abaosk.source_id = procedure.holdinguse.id
) as notes_note_view_bxkuvi on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_eyqqze.runway as runway,
    airport_heliport_touchdownliftoff_pt_rmitbm.tlof as tlof,
    notes_note_view_zdhrkl.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_qfhrqg.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_qfhrqg.title AS varchar), '(' || airport_heliport_runwaydirection_lat_qfhrqg.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_qfhrqg.href
  )) as runway  from master_join master_join_jmbbvm
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_qfhrqg on master_join_jmbbvm.target_id = airport_heliport_runwaydirection_lat_qfhrqg.id
  where master_join_jmbbvm.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_eyqqze on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_heuyhi.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_heuyhi.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_heuyhi.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_heuyhi.href
  )) as tlof  from master_join master_join_movrpr
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_heuyhi on master_join_movrpr.target_id = airport_heliport_touchdownliftoff_lat_heuyhi.id
  where master_join_movrpr.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_rmitbm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgfpzo.*) AS annotation
  from master_join master_join_noncxy
  join notes.note_view notes_note_lat_bgfpzo on master_join_noncxy.target_id = notes_note_lat_bgfpzo.id
  where master_join_noncxy.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_zdhrkl on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    notes_note_view_adnrdo.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xegyjp.*) AS annotation
  from master_join master_join_ajyxtl
  join notes.note_view notes_note_lat_xegyjp on master_join_ajyxtl.target_id = notes_note_lat_xegyjp.id
  where master_join_ajyxtl.source_id = airport_heliport.lightactivation.id
) as notes_note_view_adnrdo on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    (row_number() OVER ())::integer AS row,
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    notes_note_view_sjiptv.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_otzdlo.*) AS annotation
  from master_join master_join_tgskjb
  join notes.note_view notes_note_lat_otzdlo on master_join_tgskjb.target_id = notes_note_lat_otzdlo.id
  where master_join_tgskjb.source_id = shared.meteorology.id
) as notes_note_view_sjiptv on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_yovjhi.adjustmentinop as adjustmentinop,
    notes_note_view_fssnqg.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_bpdqwf.id) as adjustmentinop
  from master_join master_join_ouqvmr
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_bpdqwf on master_join_ouqvmr.target_id = procedure_equipmentunavailableadjustment_lat_bpdqwf.id
  where master_join_ouqvmr.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_yovjhi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mddxnn.*) AS annotation
  from master_join master_join_oidowe
  join notes.note_view notes_note_lat_mddxnn on master_join_oidowe.target_id = notes_note_lat_mddxnn.id
  where master_join_oidowe.source_id = procedure.minima.id
) as notes_note_view_fssnqg on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_coazie.altimeter as altimeter,
    notes_note_view_jywiyn.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_akgkft.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_akgkft.title AS varchar), '(' || airport_heliport_altimetersource_lat_akgkft.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_akgkft.href
  )) as altimeter  from master_join master_join_qijzdt
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_akgkft on master_join_qijzdt.target_id = airport_heliport_altimetersource_lat_akgkft.id
  where master_join_qijzdt.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_coazie on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rzmnba.*) AS annotation
  from master_join master_join_ammicd
  join notes.note_view notes_note_lat_rzmnba on master_join_ammicd.target_id = notes_note_lat_rzmnba.id
  where master_join_ammicd.source_id = procedure.missedapproachgroup.id
) as notes_note_view_jywiyn on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    notes_note_view_mwvkwq.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_odqsep.*) AS annotation
  from master_join master_join_gfprlu
  join notes.note_view notes_note_lat_odqsep on master_join_gfprlu.target_id = notes_note_lat_odqsep.id
  where master_join_gfprlu.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_mwvkwq on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    notes_note_view_vkywnl.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkzohn.*) AS annotation
  from master_join master_join_nybnsu
  join notes.note_view notes_note_lat_lkzohn on master_join_nybnsu.target_id = notes_note_lat_lkzohn.id
  where master_join_nybnsu.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_vkywnl on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    (row_number() OVER ())::integer AS row,
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    notes_note_view_xxzrqx.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_owninm.*) AS annotation
  from master_join master_join_uifdey
  join notes.note_view notes_note_lat_owninm on master_join_uifdey.target_id = notes_note_lat_owninm.id
  where master_join_uifdey.source_id = service.nitrogen.id
) as notes_note_view_xxzrqx on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    notes_note_view_yfnwhc.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pvkjli.*) AS annotation
  from master_join master_join_bqirie
  join notes.note_view notes_note_lat_pvkjli on master_join_bqirie.target_id = notes_note_lat_pvkjli.id
  where master_join_bqirie.source_id = shared.obstacleplacement.id
) as notes_note_view_yfnwhc on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_awodwt.title as varchar), '(' || obstacles_verticalstructure_pt_awodwt.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_awodwt.href AS theverticalstructure_href,
    shared_altitudeadjustment_pt_awoitu.adjustment as adjustment,
    shared_obstacleplacement_pt_jkxxaa.obstacleplacement as obstacleplacement,
    notes_note_view_regvoh.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_awodwt on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_awodwt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_huubwq.id) as adjustment
  from master_join master_join_ieawjl
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_huubwq on master_join_ieawjl.target_id = shared_altitudeadjustment_lat_huubwq.id
  where master_join_ieawjl.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_awoitu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_dyrcwd.id) as obstacleplacement
  from master_join master_join_uossnb
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_dyrcwd on master_join_uossnb.target_id = shared_obstacleplacement_lat_dyrcwd.id
  where master_join_uossnb.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_jkxxaa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ltvgcl.*) AS annotation
  from master_join master_join_ttmuke
  join notes.note_view notes_note_lat_ltvgcl on master_join_ttmuke.target_id = notes_note_lat_ltvgcl.id
  where master_join_ttmuke.source_id = shared.obstruction.id
) as notes_note_view_regvoh on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    (row_number() OVER ())::integer AS row,
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    notes_note_view_fcvban.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqoljp.*) AS annotation
  from master_join master_join_tioztu
  join notes.note_view notes_note_lat_eqoljp on master_join_tioztu.target_id = notes_note_lat_eqoljp.id
  where master_join_tioztu.source_id = service.oil.id
) as notes_note_view_fcvban on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_sfxjzz.title as varchar), '(' || organisation_organisationauthority_pt_sfxjzz.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_sfxjzz.href AS theorganisationauthority_href,
    notes_note_view_leoube.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_sfxjzz on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_sfxjzz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ulvemy.*) AS annotation
  from master_join master_join_zurezl
  join notes.note_view notes_note_lat_ulvemy on master_join_zurezl.target_id = notes_note_lat_ulvemy.id
  where master_join_zurezl.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_leoube on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    (row_number() OVER ())::integer AS row,
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    notes_note_view_pvnqai.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwfsdu.*) AS annotation
  from master_join master_join_yllfiy
  join notes.note_view notes_note_lat_hwfsdu on master_join_yllfiy.target_id = notes_note_lat_hwfsdu.id
  where master_join_yllfiy.source_id = service.oxygen.id
) as notes_note_view_pvnqai on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    notes_note_view_lkxzlx.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvqeww.*) AS annotation
  from master_join master_join_yyfmuf
  join notes.note_view notes_note_lat_xvqeww on master_join_yyfmuf.target_id = notes_note_lat_xvqeww.id
  where master_join_yyfmuf.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_lkxzlx on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    notes_note_view_oyvjuo.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rxpnos.*) AS annotation
  from master_join master_join_sivngy
  join notes.note_view notes_note_lat_rxpnos on master_join_sivngy.target_id = notes_note_lat_rxpnos.id
  where master_join_sivngy.source_id = surveillance.radarcomponent.id
) as notes_note_view_oyvjuo on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    notes_note_view_quiovl.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_teutyj.*) AS annotation
  from master_join master_join_ufxatf
  join notes.note_view notes_note_lat_teutyj on master_join_ufxatf.target_id = notes_note_lat_teutyj.id
  where master_join_ufxatf.source_id = airport_heliport.ridge.id
) as notes_note_view_quiovl on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    airport_heliport_ridge_pt_tddzlb.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_nurkcj.layer as layer,
    notes_note_view_uaekxz.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ljffjq.id) as criticalridge
  from master_join master_join_osrzyu
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ljffjq on master_join_osrzyu.target_id = airport_heliport_ridge_lat_ljffjq.id
  where master_join_osrzyu.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_tddzlb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_xrzthi.id) as layer
  from master_join master_join_qwwrlg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_xrzthi on master_join_qwwrlg.target_id = airport_heliport_surfacecontaminationlayer_lat_xrzthi.id
  where master_join_qwwrlg.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_nurkcj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ssxjcc.*) AS annotation
  from master_join master_join_hgzsdh
  join notes.note_view notes_note_lat_ssxjcc on master_join_hgzsdh.target_id = notes_note_lat_ssxjcc.id
  where master_join_hgzsdh.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_uaekxz on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    airport_heliport_runwaydeclareddistancevalue_pt_wderjp.declaredvalue as declaredvalue,
    notes_note_view_pejlnm.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_czgcyt.id) as declaredvalue
  from master_join master_join_blqruu
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_czgcyt on master_join_blqruu.target_id = airport_heliport_runwaydeclareddistancevalue_lat_czgcyt.id
  where master_join_blqruu.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_wderjp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eonsgx.*) AS annotation
  from master_join master_join_txvgls
  join notes.note_view notes_note_lat_eonsgx on master_join_txvgls.target_id = notes_note_lat_eonsgx.id
  where master_join_txvgls.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_pejlnm on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_cjvaol.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jaipgf.layer as layer,
    notes_note_view_gzuoru.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_pvehqo.id) as criticalridge
  from master_join master_join_wncytk
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_pvehqo on master_join_wncytk.target_id = airport_heliport_ridge_lat_pvehqo.id
  where master_join_wncytk.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_cjvaol on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_eyxkmp.id) as layer
  from master_join master_join_szfujd
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_eyxkmp on master_join_szfujd.target_id = airport_heliport_surfacecontaminationlayer_lat_eyxkmp.id
  where master_join_szfujd.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jaipgf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wuohez.*) AS annotation
  from master_join master_join_rejgku
  join notes.note_view notes_note_lat_wuohez on master_join_rejgku.target_id = notes_note_lat_wuohez.id
  where master_join_rejgku.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_gzuoru on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    notes_note_view_lbhxvr.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hatwkv.*) AS annotation
  from master_join master_join_xkbuev
  join notes.note_view notes_note_lat_hatwkv on master_join_xkbuev.target_id = notes_note_lat_hatwkv.id
  where master_join_xkbuev.source_id = procedure.sectordesign.id
) as notes_note_view_lbhxvr on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    (row_number() OVER ())::integer AS row,
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    notes_note_view_qzxisq.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uawrnp.*) AS annotation
  from master_join master_join_wkvkql
  join notes.note_view notes_note_lat_uawrnp on master_join_wkvkql.target_id = notes_note_lat_uawrnp.id
  where master_join_wkvkql.source_id = shared.standardlevel.id
) as notes_note_view_qzxisq on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    notes_note_view_aveuxv.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbzwla.*) AS annotation
  from master_join master_join_bwdpxr
  join notes.note_view notes_note_lat_cbzwla on master_join_bwdpxr.target_id = notes_note_lat_cbzwla.id
  where master_join_bwdpxr.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_aveuxv on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_zwjfsx.title as varchar), '(' || organisation_unit_pt_zwjfsx.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_zwjfsx.href AS theunit_href,
    notes_note_view_zjqfad.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_zwjfsx on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_zwjfsx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lboloj.*) AS annotation
  from master_join master_join_suatet
  join notes.note_view notes_note_lat_lboloj on master_join_suatet.target_id = notes_note_lat_lboloj.id
  where master_join_suatet.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_zjqfad on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    airport_heliport_ridge_pt_optxtq.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_rizupe.layer as layer,
    notes_note_view_mysftm.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_rnwhgr.id) as criticalridge
  from master_join master_join_eytylr
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_rnwhgr on master_join_eytylr.target_id = airport_heliport_ridge_lat_rnwhgr.id
  where master_join_eytylr.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_optxtq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_umjwjh.id) as layer
  from master_join master_join_fytjqk
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_umjwjh on master_join_fytjqk.target_id = airport_heliport_surfacecontaminationlayer_lat_umjwjh.id
  where master_join_fytjqk.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_rizupe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvmruo.*) AS annotation
  from master_join master_join_yoxwdb
  join notes.note_view notes_note_lat_bvmruo on master_join_yoxwdb.target_id = notes_note_lat_bvmruo.id
  where master_join_yoxwdb.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_mysftm on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_qsqbgz.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_mfehsg.layer as layer,
    notes_note_view_vwmagt.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_dxnyww.id) as criticalridge
  from master_join master_join_libsuw
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_dxnyww on master_join_libsuw.target_id = airport_heliport_ridge_lat_dxnyww.id
  where master_join_libsuw.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_qsqbgz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_rvhtdm.id) as layer
  from master_join master_join_ibvqsr
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_rvhtdm on master_join_ibvqsr.target_id = airport_heliport_surfacecontaminationlayer_lat_rvhtdm.id
  where master_join_ibvqsr.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_mfehsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xxevfw.*) AS annotation
  from master_join master_join_yggkcu
  join notes.note_view notes_note_lat_xxevfw on master_join_yggkcu.target_id = notes_note_lat_xxevfw.id
  where master_join_yggkcu.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_vwmagt on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_slgqdd.title as varchar), '(' || organisation_unit_pt_slgqdd.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_slgqdd.href AS theunit_href,
    notes_note_view_kxnedv.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_slgqdd on organisation.unitdependency.theunit_id = organisation_unit_pt_slgqdd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgnkpx.*) AS annotation
  from master_join master_join_glgmzo
  join notes.note_view notes_note_lat_lgnkpx on master_join_glgmzo.target_id = notes_note_lat_lgnkpx.id
  where master_join_glgmzo.source_id = organisation.unitdependency.id
) as notes_note_view_kxnedv on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_hpxmdy.geom AS extent_geom,
    geometry_curve_view_hpxmdy.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_lqmwbx.point as point,
    shared_airspacelayer_pt_emvapm.verticalextent as verticalextent,
    notes_note_view_dmanbd.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_hpxmdy on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_hpxmdy.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_yvtwnd.id) as point
  from master_join master_join_swicsh
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_yvtwnd on master_join_swicsh.target_id = aerial_refuelling_aerialrefuellingpoint_lat_yvtwnd.id
  where master_join_swicsh.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_lqmwbx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xfvcge.id) as verticalextent
  from master_join master_join_qlcfzn
  join shared.airspacelayer_pt shared_airspacelayer_lat_xfvcge on master_join_qlcfzn.target_id = shared_airspacelayer_lat_xfvcge.id
  where master_join_qlcfzn.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_emvapm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwwnxx.*) AS annotation
  from master_join master_join_xexcsw
  join notes.note_view notes_note_lat_kwwnxx on master_join_xexcsw.target_id = notes_note_lat_kwwnxx.id
  where master_join_xexcsw.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_dmanbd on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_djmdik.id) AS departurerunwaytransition,
    geometry_curve_view_ybfyzi.geom AS trajectory_geom,
    geometry_curve_view_ybfyzi.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_xvfftm.transitionleg as transitionleg,
    notes_note_view_qnhgcp.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_djmdik on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_djmdik.id
left join geometry.curve_view geometry_curve_view_ybfyzi on procedure.proceduretransition.trajectory_id = geometry_curve_view_ybfyzi.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_tdjggm.id) as transitionleg
  from master_join master_join_tqiain
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_tdjggm on master_join_tqiain.target_id = procedure_proceduretransitionleg_lat_tdjggm.id
  where master_join_tqiain.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_xvfftm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uekqek.*) AS annotation
  from master_join master_join_quukgw
  join notes.note_view notes_note_lat_uekqek on master_join_quukgw.target_id = notes_note_lat_uekqek.id
  where master_join_quukgw.source_id = procedure.proceduretransition.id
) as notes_note_view_qnhgcp on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    (row_number() OVER ())::integer AS row,
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    geometry_elevatedpoint_view_zilxoq.geom AS location_geom,
    geometry_elevatedpoint_view_zilxoq.longitude AS location_longitude,
    geometry_elevatedpoint_view_zilxoq.latitude AS location_latitude,
    geometry_elevatedpoint_view_zilxoq.elevation AS location_elevation,
    geometry_elevatedpoint_view_zilxoq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zilxoq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zilxoq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zilxoq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_dvsqcz.annotation as annotation,
    shared_lightelementstatus_pt_hsheqg.availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zilxoq on shared.lightelement.location_id = geometry_elevatedpoint_view_zilxoq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sdkigs.*) AS annotation
  from master_join master_join_kcibva
  join notes.note_view notes_note_lat_sdkigs on master_join_kcibva.target_id = notes_note_lat_sdkigs.id
  where master_join_kcibva.source_id = shared.lightelement.id
) as notes_note_view_dvsqcz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_tkcgby.id) as availability
  from master_join master_join_qfxace
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_tkcgby on master_join_qfxace.target_id = shared_lightelementstatus_lat_tkcgby.id
  where master_join_qfxace.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_hsheqg on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    (row_number() OVER ())::integer AS row,
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_knpgqi.geom AS touchdownreflector_geom,
    geometry_elevatedpoint_view_knpgqi.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_knpgqi.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_knpgqi.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_knpgqi.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_knpgqi.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_knpgqi.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_knpgqi.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_mbfexg.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_knpgqi on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_knpgqi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tgehxt.*) AS annotation
  from master_join master_join_qtqrzv
  join notes.note_view notes_note_lat_tgehxt on master_join_qtqrzv.target_id = notes_note_lat_tgehxt.id
  where master_join_qtqrzv.source_id = surveillance.reflector.id
) as notes_note_view_mbfexg on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    geometry_elevatedsurface_view_cbqzmn.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_cbqzmn.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_cbqzmn.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_cbqzmn.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_cbqzmn.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_cbqzmn.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_ccntub.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_ccntub.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_ccntub.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_ccntub.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_ccntub.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_ccntub.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_ubkvjc.geom AS extentlocation_geom,
    geometry_elevatedpoint_view_ubkvjc.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_ubkvjc.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_ubkvjc.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_ubkvjc.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_ubkvjc.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_ubkvjc.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_ubkvjc.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_vmoxry.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cbqzmn on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_cbqzmn.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_ccntub on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_ccntub.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ubkvjc on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_ubkvjc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ddfyha.*) AS annotation
  from master_join master_join_kprboz
  join notes.note_view notes_note_lat_ddfyha on master_join_kprboz.target_id = notes_note_lat_ddfyha.id
  where master_join_kprboz.source_id = airport_heliport.markingelement.id
) as notes_note_view_vmoxry on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_ojrnnd.geom as extent_geom,
    geometry_elevatedsurface_view_ojrnnd.attr as extent,
    notes_note_view_zcghqv.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_tbgdcp.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_tbgdcp.id,
      'elevation', geometry_elevatedsurface_lat_tbgdcp.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_tbgdcp.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_tbgdcp.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_tbgdcp.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_tbgdcp.horizontalAccuracy
    )) AS attr
  from master_join master_join_zfruln
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_tbgdcp on master_join_zfruln.target_id = geometry_elevatedsurface_lat_tbgdcp.id
  where master_join_zfruln.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_ojrnnd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jdwftx.*) AS annotation
  from master_join master_join_rnaaxw
  join notes.note_view notes_note_lat_jdwftx on master_join_rnaaxw.target_id = notes_note_lat_jdwftx.id
  where master_join_rnaaxw.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_zcghqv on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_bcvngs.title as varchar), '(' || navaids_points_designatedpoint_pt_bcvngs.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_bcvngs.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_eetsdq.title as varchar), '(' || navaids_points_navaid_pt_eetsdq.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_eetsdq.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kqnfxo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kqnfxo.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_kqnfxo.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_odivpy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_odivpy.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_odivpy.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xnmcrk.title as varchar), '(' || airport_heliport_airportheliport_pt_xnmcrk.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_xnmcrk.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_wfuqng.geom AS pointchoiceposition_geom,
    geometry_point_view_wfuqng.longitude AS pointchoiceposition_longitude,
    geometry_point_view_wfuqng.latitude AS pointchoiceposition_latitude,
    geometry_point_view_wfuqng.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_lnrolf.title as varchar), '(' || shared_radiofrequencyarea_pt_lnrolf.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_lnrolf.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_jnosaa.facilitymakeup as facilitymakeup,
    notes_note_view_yaeqcx.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bcvngs on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bcvngs.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eetsdq on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_eetsdq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kqnfxo on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kqnfxo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_odivpy on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_odivpy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xnmcrk on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xnmcrk.id
left join geometry.point_view geometry_point_view_wfuqng on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_wfuqng.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_lnrolf on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_lnrolf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_nyjvya.id) as facilitymakeup
  from master_join master_join_xumvpk
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_nyjvya on master_join_xumvpk.target_id = navaids_points_pointreference_lat_nyjvya.id
  where master_join_xumvpk.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_jnosaa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_taerde.*) AS annotation
  from master_join master_join_fystte
  join notes.note_view notes_note_lat_taerde on master_join_fystte.target_id = notes_note_lat_taerde.id
  where master_join_fystte.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_yaeqcx on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    (row_number() OVER ())::integer AS row,
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_ontlrq.title as varchar), '(' || navaids_points_designatedpoint_pt_ontlrq.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ontlrq.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_isyxto.title as varchar), '(' || navaids_points_designatedpoint_pt_isyxto.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_isyxto.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vvpjsa.title as varchar), '(' || navaids_points_navaid_pt_vvpjsa.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_vvpjsa.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_ttofqi.title as varchar), '(' || navaids_points_navaid_pt_ttofqi.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_ttofqi.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uebpou.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uebpou.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_uebpou.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nqftis.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nqftis.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_nqftis.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_flcvrb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_flcvrb.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_flcvrb.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qspxgm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qspxgm.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qspxgm.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pjaxxa.title as varchar), '(' || airport_heliport_airportheliport_pt_pjaxxa.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_pjaxxa.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vwejag.title as varchar), '(' || airport_heliport_airportheliport_pt_vwejag.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_vwejag.href AS startairportreferencepoint_href,
    geometry_point_view_xntxos.geom AS endposition_geom,
    geometry_point_view_xntxos.longitude AS endposition_longitude,
    geometry_point_view_xntxos.latitude AS endposition_latitude,
    geometry_point_view_xntxos.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_jqplha.geom AS startposition_geom,
    geometry_point_view_jqplha.longitude AS startposition_longitude,
    geometry_point_view_jqplha.latitude AS startposition_latitude,
    geometry_point_view_jqplha.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_xygbkc.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ontlrq on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ontlrq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vvpjsa on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_vvpjsa.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uebpou on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_uebpou.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_flcvrb on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_flcvrb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pjaxxa on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_pjaxxa.id
left join geometry.point_view geometry_point_view_xntxos on routes.directflightsegment.end_position_id = geometry_point_view_xntxos.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_isyxto on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_isyxto.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ttofqi on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_ttofqi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nqftis on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nqftis.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qspxgm on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qspxgm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vwejag on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_vwejag.id
left join geometry.point_view geometry_point_view_jqplha on routes.directflightsegment.start_position_id = geometry_point_view_jqplha.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sowmyw.*) AS annotation
  from master_join master_join_ryfcrc
  join notes.note_view notes_note_lat_sowmyw on master_join_ryfcrc.target_id = notes_note_lat_sowmyw.id
  where master_join_ryfcrc.source_id = routes.directflightsegment.id
) as notes_note_view_xygbkc on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_gglqgr.title as varchar), '(' || navaids_points_designatedpoint_pt_gglqgr.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_gglqgr.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_cugcay.title as varchar), '(' || navaids_points_navaid_pt_cugcay.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_cugcay.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yhrywc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yhrywc.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_yhrywc.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nkfjbj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nkfjbj.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nkfjbj.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gmsxnz.title as varchar), '(' || airport_heliport_airportheliport_pt_gmsxnz.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_gmsxnz.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_qayvvg.geom AS pointchoiceposition_geom,
    geometry_point_view_qayvvg.longitude AS pointchoiceposition_longitude,
    geometry_point_view_qayvvg.latitude AS pointchoiceposition_latitude,
    geometry_point_view_qayvvg.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_zbbaea.title as varchar), '(' || shared_radiofrequencyarea_pt_zbbaea.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_zbbaea.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_gmtdof.facilitymakeup as facilitymakeup,
    notes_note_view_dnpwhs.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gglqgr on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gglqgr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cugcay on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_cugcay.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yhrywc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_yhrywc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nkfjbj on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nkfjbj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gmsxnz on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_gmsxnz.id
left join geometry.point_view geometry_point_view_qayvvg on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_qayvvg.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_zbbaea on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_zbbaea.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_txlmda.id) as facilitymakeup
  from master_join master_join_scnzuu
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_txlmda on master_join_scnzuu.target_id = navaids_points_pointreference_lat_txlmda.id
  where master_join_scnzuu.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_gmtdof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gaizgi.*) AS annotation
  from master_join master_join_kgeyjf
  join notes.note_view notes_note_lat_gaizgi on master_join_kgeyjf.target_id = notes_note_lat_gaizgi.id
  where master_join_kgeyjf.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_dnpwhs on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_vpgauk.title as varchar), '(' || airport_heliport_airportheliport_pt_vpgauk.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_vpgauk.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_flngbv.title as varchar), '(' || airport_heliport_airportheliport_pt_flngbv.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_flngbv.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_mbmyme.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_mbmyme.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_mbmyme.href AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_qusquz.id) AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_cwbsij.title as varchar), '(' || organisation_organisationauthority_pt_cwbsij.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_cwbsij.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nbngls.title as varchar), '(' || navaids_points_designatedpoint_pt_nbngls.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nbngls.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qzflsm.title as varchar), '(' || navaids_points_navaid_pt_qzflsm.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_qzflsm.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xbnefh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xbnefh.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_xbnefh.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mtwoxa.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mtwoxa.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mtwoxa.href AS significantpointconditionrunwaypoint_href,
    geometry_point_view_uftrmg.geom AS significantpointconditionposition_geom,
    geometry_point_view_uftrmg.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_uftrmg.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_uftrmg.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_nkbtzh.id) AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_fcqwfq.title as varchar), '(' || routes_airspacebordercrossing_pt_fcqwfq.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_fcqwfq.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_nzsfgg.title as varchar), '(' || airspace_airspace_pt_nzsfgg.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_nzsfgg.href AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_fbqsyh.id) AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ftievt.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ftievt.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ftievt.href AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_rhryym.id) AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_qamagk.id) AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_brqgpa.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_brqgpa.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_brqgpa.href AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_kziubt.id) AS operationalcondition,
    routes_flightrestrictionlevel_pt_czynba.flightlevel as flightlevel,
    notes_note_view_otnsfu.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vpgauk on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_vpgauk.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_mbmyme on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_mbmyme.id
left join routes.routeportion_pt routes_routeportion_pt_qusquz on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_qusquz.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_cwbsij on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_cwbsij.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nbngls on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nbngls.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qzflsm on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_qzflsm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xbnefh on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xbnefh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mtwoxa on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mtwoxa.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_flngbv on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_flngbv.id
left join geometry.point_view geometry_point_view_uftrmg on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_uftrmg.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_nkbtzh on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_nkbtzh.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_fcqwfq on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_fcqwfq.id
left join airspace.airspace_pt airspace_airspace_pt_nzsfgg on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_nzsfgg.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_fbqsyh on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_fbqsyh.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ftievt on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ftievt.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_rhryym on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_rhryym.id
left join shared.meteorology_pt shared_meteorology_pt_qamagk on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_qamagk.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_brqgpa on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_brqgpa.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_kziubt on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_kziubt.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_btvxnh.id) as flightlevel
  from master_join master_join_avvcqb
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_btvxnh on master_join_avvcqb.target_id = routes_flightrestrictionlevel_lat_btvxnh.id
  where master_join_avvcqb.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_czynba on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cfykkl.*) AS annotation
  from master_join master_join_ttrekw
  join notes.note_view notes_note_lat_cfykkl on master_join_ttrekw.target_id = notes_note_lat_cfykkl.id
  where master_join_ttrekw.source_id = routes.flightconditionelement.id
) as notes_note_view_otnsfu on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_xwiemp.title as varchar), '(' || procedure_standardinstrumentarrival_pt_xwiemp.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_xwiemp.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_ihpfgg.title as varchar), '(' || airspace_airspace_pt_ihpfgg.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_ihpfgg.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_agbowh.title as varchar), '(' || navaids_points_designatedpoint_pt_agbowh.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_agbowh.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dqecvd.title as varchar), '(' || navaids_points_navaid_pt_dqecvd.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_dqecvd.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_spxghh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_spxghh.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_spxghh.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fenjmd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fenjmd.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fenjmd.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cqhflr.title as varchar), '(' || airport_heliport_airportheliport_pt_cqhflr.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_cqhflr.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_amqdbn.title as varchar), '(' || airport_heliport_airportheliport_pt_amqdbn.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_amqdbn.href AS elementairportheliportelement_href,
    geometry_point_view_kdhykz.geom AS pointelementposition_geom,
    geometry_point_view_kdhykz.longitude AS pointelementposition_longitude,
    geometry_point_view_kdhykz.latitude AS pointelementposition_latitude,
    geometry_point_view_kdhykz.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_ysgtbj.id) AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_hnkhfw.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_hnkhfw.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_hnkhfw.href AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_tspuwi.id) AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_khogkm.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_khogkm.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_khogkm.href AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_rwwvap.flightlevel as flightlevel,
    notes_note_view_ycmltv.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_xwiemp on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_xwiemp.id
left join airspace.airspace_pt airspace_airspace_pt_ihpfgg on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_ihpfgg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_agbowh on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_agbowh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dqecvd on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_dqecvd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_spxghh on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_spxghh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fenjmd on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fenjmd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cqhflr on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_cqhflr.id
left join geometry.point_view geometry_point_view_kdhykz on routes.flightroutingelement.pointelement_position_id = geometry_point_view_kdhykz.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_ysgtbj on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_ysgtbj.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_hnkhfw on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_hnkhfw.id
left join routes.routeportion_pt routes_routeportion_pt_tspuwi on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_tspuwi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_amqdbn on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_amqdbn.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_khogkm on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_khogkm.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_krqrhs.id) as flightlevel
  from master_join master_join_ppjlrz
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_krqrhs on master_join_ppjlrz.target_id = routes_flightrestrictionlevel_lat_krqrhs.id
  where master_join_ppjlrz.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_rwwvap on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fnxvbi.*) AS annotation
  from master_join master_join_srfqqc
  join notes.note_view notes_note_lat_fnxvbi on master_join_srfqqc.target_id = notes_note_lat_fnxvbi.id
  where master_join_srfqqc.source_id = routes.flightroutingelement.id
) as notes_note_view_ycmltv on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    (row_number() OVER ())::integer AS row,
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_mcaxxk.title as varchar), '(' || navaids_points_designatedpoint_pt_mcaxxk.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_mcaxxk.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nzhewt.title as varchar), '(' || navaids_points_designatedpoint_pt_nzhewt.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nzhewt.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_hyhrbk.title as varchar), '(' || navaids_points_designatedpoint_pt_hyhrbk.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_hyhrbk.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ixqmhj.title as varchar), '(' || navaids_points_navaid_pt_ixqmhj.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_ixqmhj.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_zeiphu.title as varchar), '(' || navaids_points_navaid_pt_zeiphu.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_zeiphu.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_fitjtt.title as varchar), '(' || navaids_points_navaid_pt_fitjtt.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_fitjtt.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lntvck.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lntvck.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_lntvck.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_skcvcx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_skcvcx.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_skcvcx.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bcxrvp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bcxrvp.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_bcxrvp.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mojizd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mojizd.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mojizd.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hyozyb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hyozyb.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hyozyb.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uhgytv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uhgytv.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uhgytv.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_spvpkc.title as varchar), '(' || airport_heliport_airportheliport_pt_spvpkc.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_spvpkc.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ibzfpy.title as varchar), '(' || airport_heliport_airportheliport_pt_ibzfpy.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_ibzfpy.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kvqfhw.title as varchar), '(' || airport_heliport_airportheliport_pt_kvqfhw.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_kvqfhw.href AS endairportreferencepoint_href,
    geometry_point_view_tiejmp.geom AS startposition_geom,
    geometry_point_view_tiejmp.longitude AS startposition_longitude,
    geometry_point_view_tiejmp.latitude AS startposition_latitude,
    geometry_point_view_tiejmp.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_pggojk.geom AS intermediatepointposition_geom,
    geometry_point_view_pggojk.longitude AS intermediatepointposition_longitude,
    geometry_point_view_pggojk.latitude AS intermediatepointposition_latitude,
    geometry_point_view_pggojk.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_mqivqp.geom AS endposition_geom,
    geometry_point_view_mqivqp.longitude AS endposition_longitude,
    geometry_point_view_mqivqp.latitude AS endposition_latitude,
    geometry_point_view_mqivqp.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_gervlw.title as varchar), '(' || routes_route_pt_gervlw.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_gervlw.href AS referencedroute_href,
    notes_note_view_ubopet.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mcaxxk on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mcaxxk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ixqmhj on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_ixqmhj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lntvck on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lntvck.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mojizd on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mojizd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_spvpkc on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_spvpkc.id
left join geometry.point_view geometry_point_view_tiejmp on routes.routeportion.start_position_id = geometry_point_view_tiejmp.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nzhewt on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nzhewt.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zeiphu on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_zeiphu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_skcvcx on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_skcvcx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hyozyb on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hyozyb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ibzfpy on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ibzfpy.id
left join geometry.point_view geometry_point_view_pggojk on routes.routeportion.intermediatepoint_position_id = geometry_point_view_pggojk.id
left join routes.route_pt routes_route_pt_gervlw on routes.routeportion.referencedroute_id = routes_route_pt_gervlw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hyhrbk on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hyhrbk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fitjtt on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_fitjtt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bcxrvp on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bcxrvp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uhgytv on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uhgytv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kvqfhw on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_kvqfhw.id
left join geometry.point_view geometry_point_view_mqivqp on routes.routeportion.end_position_id = geometry_point_view_mqivqp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klsyvz.*) AS annotation
  from master_join master_join_ndnglm
  join notes.note_view notes_note_lat_klsyvz on master_join_ndnglm.target_id = notes_note_lat_klsyvz.id
  where master_join_ndnglm.source_id = routes.routeportion.id
) as notes_note_view_ubopet on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_epuvgi.title as varchar), '(' || navaids_points_designatedpoint_pt_epuvgi.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_epuvgi.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ixnvjp.title as varchar), '(' || navaids_points_navaid_pt_ixnvjp.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ixnvjp.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fakimk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fakimk.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_fakimk.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fcozaq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fcozaq.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fcozaq.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hxjupd.title as varchar), '(' || airport_heliport_airportheliport_pt_hxjupd.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hxjupd.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bcvkdx.geom AS pointchoiceposition_geom,
    geometry_point_view_bcvkdx.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bcvkdx.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bcvkdx.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_iapgtx.title as varchar), '(' || shared_radiofrequencyarea_pt_iapgtx.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_iapgtx.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_fqxwqy.facilitymakeup as facilitymakeup,
    notes_note_view_ofyotc.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_epuvgi on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_epuvgi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ixnvjp on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ixnvjp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fakimk on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fakimk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fcozaq on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fcozaq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hxjupd on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hxjupd.id
left join geometry.point_view geometry_point_view_bcvkdx on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_bcvkdx.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_iapgtx on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_iapgtx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_nqyvys.id) as facilitymakeup
  from master_join master_join_quttfg
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_nqyvys on master_join_quttfg.target_id = navaids_points_pointreference_lat_nqyvys.id
  where master_join_quttfg.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_fqxwqy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wjbpyt.*) AS annotation
  from master_join master_join_zetbkx
  join notes.note_view notes_note_lat_wjbpyt on master_join_zetbkx.target_id = notes_note_lat_wjbpyt.id
  where master_join_zetbkx.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_ofyotc on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    geometry_surface_view_vlmpuu.geom AS extent_geom,
    geometry_surface_view_vlmpuu.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_hfpjtu.verticalextent as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_nawtjs.point as point,
    notes_note_view_fhsjpt.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_vlmpuu on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_vlmpuu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_tijmrz.id) as verticalextent
  from master_join master_join_ddawxr
  join shared.airspacelayer_pt shared_airspacelayer_lat_tijmrz on master_join_ddawxr.target_id = shared_airspacelayer_lat_tijmrz.id
  where master_join_ddawxr.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_hfpjtu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_soyfxn.id) as point
  from master_join master_join_bbvnwu
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_soyfxn on master_join_bbvnwu.target_id = aerial_refuelling_aerialrefuellingpoint_lat_soyfxn.id
  where master_join_bbvnwu.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_nawtjs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xoetwr.*) AS annotation
  from master_join master_join_xgzrlv
  join notes.note_view notes_note_lat_xoetwr on master_join_xgzrlv.target_id = notes_note_lat_xoetwr.id
  where master_join_xgzrlv.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_fhsjpt on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.surface_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    geometry_surface_view_bokbmt.geom AS horizontalprojection_geom,
    geometry_surface_view_bokbmt.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_scuron.geom AS centreline_geom,
    geometry_curve_view_scuron.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_kdysks.id) AS contributorairspace,
    notes_note_view_tluroy.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_bokbmt on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_bokbmt.id
left join geometry.curve_view geometry_curve_view_scuron on airspace.airspacevolume.centreline_id = geometry_curve_view_scuron.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_kdysks on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_kdysks.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gelonz.*) AS annotation
  from master_join master_join_tfecoe
  join notes.note_view notes_note_lat_gelonz on master_join_tfecoe.target_id = notes_note_lat_gelonz.id
  where master_join_tfecoe.source_id = airspace.airspacevolume.id
) as notes_note_view_tluroy on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_stdgwm.id) AS sectordefinition,
    geometry_surface_view_nskblg.geom AS extent_geom,
    geometry_surface_view_nskblg.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_zjhhlp.significantobstacle as significantobstacle,
    procedure_sectordesign_pt_rlfamc.sectorcriteria as sectorcriteria,
    notes_note_view_vxngyo.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_stdgwm on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_stdgwm.id
left join geometry.surface_view geometry_surface_view_nskblg on procedure.navigationareasector.extent_id = geometry_surface_view_nskblg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_bdpvms.id) as significantobstacle
  from master_join master_join_wmvahu
  join shared.obstruction_pt shared_obstruction_lat_bdpvms on master_join_wmvahu.target_id = shared_obstruction_lat_bdpvms.id
  where master_join_wmvahu.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_zjhhlp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_pfajia.id) as sectorcriteria
  from master_join master_join_tqzuzb
  join procedure.sectordesign_pt procedure_sectordesign_lat_pfajia on master_join_tqzuzb.target_id = procedure_sectordesign_lat_pfajia.id
  where master_join_tqzuzb.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_rlfamc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qmnxnp.*) AS annotation
  from master_join master_join_akmbjg
  join notes.note_view notes_note_lat_qmnxnp on master_join_akmbjg.target_id = notes_note_lat_qmnxnp.id
  where master_join_akmbjg.source_id = procedure.navigationareasector.id
) as notes_note_view_vxngyo on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.surface_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    (row_number() OVER ())::integer AS row,
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    geometry_surface_view_vxdpei.geom AS surface_geom,
    geometry_surface_view_vxdpei.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_aanwxp.geom AS startingcurve_geom,
    geometry_curve_view_aanwxp.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_ppdieo.aircraftcategory as aircraftcategory,
    shared_obstruction_pt_lxppel.significantobstacle as significantobstacle,
    notes_note_view_efkxsa.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_vxdpei on shared.obstacleassessmentarea.surface_id = geometry_surface_view_vxdpei.id
left join geometry.curve_view geometry_curve_view_aanwxp on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_aanwxp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_kbgiyc.id) as aircraftcategory
  from master_join master_join_ltkbyg
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_kbgiyc on master_join_ltkbyg.target_id = shared_aircraftcharacteristic_lat_kbgiyc.id
  where master_join_ltkbyg.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_ppdieo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_btussp.id) as significantobstacle
  from master_join master_join_bylgmf
  join shared.obstruction_pt shared_obstruction_lat_btussp on master_join_bylgmf.target_id = shared_obstruction_lat_btussp.id
  where master_join_bylgmf.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_lxppel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ysdnav.*) AS annotation
  from master_join master_join_bybwbi
  join notes.note_view notes_note_lat_ysdnav on master_join_bybwbi.target_id = notes_note_lat_ysdnav.id
  where master_join_bybwbi.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_efkxsa on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_cogilr.title as varchar), '(' || navaids_points_designatedpoint_pt_cogilr.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_cogilr.href AS point_href,
    geometry_surface_view_mlyggw.geom AS fixtolerancearea_geom,
    geometry_surface_view_mlyggw.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_nnolnh.facilityangle as facilityangle,
    navaids_points_distanceindication_pt_mhcbki.facilitydistance as facilitydistance,
    notes_note_view_wtdahb.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cogilr on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_cogilr.id
left join geometry.surface_view geometry_surface_view_mlyggw on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_mlyggw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_sbgvbe.id) as facilityangle
  from master_join master_join_sfnzcv
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_sbgvbe on master_join_sfnzcv.target_id = navaids_points_angleuse_lat_sbgvbe.id
  where master_join_sfnzcv.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_nnolnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_vmftgs.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_vmftgs.title AS varchar), '(' || navaids_points_distanceindication_lat_vmftgs.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_vmftgs.href
  )) as facilitydistance  from master_join master_join_zakksx
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_vmftgs on master_join_zakksx.target_id = navaids_points_distanceindication_lat_vmftgs.id
  where master_join_zakksx.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_mhcbki on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cjeonx.*) AS annotation
  from master_join master_join_ulqryy
  join notes.note_view notes_note_lat_cjeonx on master_join_ulqryy.target_id = notes_note_lat_cjeonx.id
  where master_join_ulqryy.source_id = navaids_points.pointreference.id
) as notes_note_view_wtdahb on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    geometry_surface_view_tgoiho.geom AS extent_geom,
    geometry_surface_view_tgoiho.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_wjuaxi.id) AS sectordefinition,
    shared_obstruction_pt_agwejs.significantobstacle as significantobstacle,
    notes_note_view_pfakqe.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_tgoiho on procedure.safealtitudeareasector.extent_id = geometry_surface_view_tgoiho.id
left join shared.circlesector_pt shared_circlesector_pt_wjuaxi on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_wjuaxi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_yjhbit.id) as significantobstacle
  from master_join master_join_otqqtz
  join shared.obstruction_pt shared_obstruction_lat_yjhbit on master_join_otqqtz.target_id = shared_obstruction_lat_yjhbit.id
  where master_join_otqqtz.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_agwejs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yuxdjp.*) AS annotation
  from master_join master_join_qlevbv
  join notes.note_view notes_note_lat_yuxdjp on master_join_qlevbv.target_id = notes_note_lat_yuxdjp.id
  where master_join_qlevbv.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_pfakqe on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    to_jsonb(shared_circlesector_pt_wxzxhu.id) AS sectordefinition,
    geometry_surface_view_wzpsai.geom AS extent_geom,
    geometry_surface_view_wzpsai.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_dvlsgn.significantobstacle as significantobstacle,
    notes_note_view_bjogif.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_wxzxhu on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_wxzxhu.id
left join geometry.surface_view geometry_surface_view_wzpsai on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_wzpsai.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_rknqlg.id) as significantobstacle
  from master_join master_join_txyklq
  join shared.obstruction_pt shared_obstruction_lat_rknqlg on master_join_txyklq.target_id = shared_obstruction_lat_rknqlg.id
  where master_join_txyklq.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_dvlsgn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hxfmfa.*) AS annotation
  from master_join master_join_xkalyh
  join notes.note_view notes_note_lat_hxfmfa on master_join_xkalyh.target_id = notes_note_lat_hxfmfa.id
  where master_join_xkalyh.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_bjogif on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_uuulwf.timeinterval as timeinterval,
    notes_note_view_iujahi.annotation as annotation,
    organisation_organisationauthority_pt_ylmgyh.specialdateauthority as specialdateauthority,
    airport_heliport_airportheliportusage_pt_bswsco.usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jaowdg.*) AS timeinterval
  from master_join master_join_hgscmy
  join shared.timesheet_view shared_timesheet_lat_jaowdg on master_join_hgscmy.target_id = shared_timesheet_lat_jaowdg.id
  where master_join_hgscmy.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_uuulwf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivgxwk.*) AS annotation
  from master_join master_join_glmkvc
  join notes.note_view notes_note_lat_ivgxwk on master_join_glmkvc.target_id = notes_note_lat_ivgxwk.id
  where master_join_glmkvc.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_iujahi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kakpah.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kakpah.title AS varchar), '(' || organisation_organisationauthority_lat_kakpah.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kakpah.href
  )) as specialdateauthority  from master_join master_join_yrbrtn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kakpah on master_join_yrbrtn.target_id = organisation_organisationauthority_lat_kakpah.id
  where master_join_yrbrtn.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_ylmgyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_lwgtvg.id) as usage
  from master_join master_join_xnhltt
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_lwgtvg on master_join_xnhltt.target_id = airport_heliport_airportheliportusage_lat_lwgtvg.id
  where master_join_xnhltt.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_bswsco on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_cnfqce.title as varchar), '(' || organisation_organisationauthority_pt_cnfqce.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_cnfqce.href AS theorganisationauthority_href,
    organisation_organisationauthority_pt_ehvbzh.specialdateauthority as specialdateauthority,
    shared_timesheet_view_xkhzxj.timeinterval as timeinterval,
    notes_note_view_gqtbuk.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_cnfqce on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_cnfqce.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kqdydj.*) AS timeinterval
  from master_join master_join_blftpw
  join shared.timesheet_view shared_timesheet_lat_kqdydj on master_join_blftpw.target_id = shared_timesheet_lat_kqdydj.id
  where master_join_blftpw.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_xkhzxj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrdqwt.*) AS annotation
  from master_join master_join_pifeab
  join notes.note_view notes_note_lat_vrdqwt on master_join_pifeab.target_id = notes_note_lat_vrdqwt.id
  where master_join_pifeab.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_gqtbuk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ccloxk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ccloxk.title AS varchar), '(' || organisation_organisationauthority_lat_ccloxk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ccloxk.href
  )) as specialdateauthority  from master_join master_join_sleqpa
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ccloxk on master_join_sleqpa.target_id = organisation_organisationauthority_lat_ccloxk.id
  where master_join_sleqpa.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_ehvbzh on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    shared_timesheet_view_rjegca.timeinterval as timeinterval,
    notes_note_view_artazh.annotation as annotation,
    organisation_organisationauthority_pt_qzkcyr.specialdateauthority as specialdateauthority,
    organisation_organisationauthority_pt_jhdndv.user as user,
    shared_airspacelayer_pt_kqgjtf.levels as levels,
    shared_aircraftcharacteristic_pt_grdxod.aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mzzmqe.*) AS timeinterval
  from master_join master_join_gaxahb
  join shared.timesheet_view shared_timesheet_lat_mzzmqe on master_join_gaxahb.target_id = shared_timesheet_lat_mzzmqe.id
  where master_join_gaxahb.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_rjegca on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zlavhf.*) AS annotation
  from master_join master_join_twcqjt
  join notes.note_view notes_note_lat_zlavhf on master_join_twcqjt.target_id = notes_note_lat_zlavhf.id
  where master_join_twcqjt.source_id = airspace.airspaceactivation.id
) as notes_note_view_artazh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zsafeo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zsafeo.title AS varchar), '(' || organisation_organisationauthority_lat_zsafeo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zsafeo.href
  )) as specialdateauthority  from master_join master_join_bcsiml
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zsafeo on master_join_bcsiml.target_id = organisation_organisationauthority_lat_zsafeo.id
  where master_join_bcsiml.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_qzkcyr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_mopvft.id) as levels
  from master_join master_join_msgecu
  join shared.airspacelayer_pt shared_airspacelayer_lat_mopvft on master_join_msgecu.target_id = shared_airspacelayer_lat_mopvft.id
  where master_join_msgecu.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_kqgjtf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xshxmv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xshxmv.title AS varchar), '(' || organisation_organisationauthority_lat_xshxmv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xshxmv.href
  )) as user  from master_join master_join_navvki
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xshxmv on master_join_navvki.target_id = organisation_organisationauthority_lat_xshxmv.id
  where master_join_navvki.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_jhdndv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_toqjgs.id) as aircraft
  from master_join master_join_dgjzkf
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_toqjgs on master_join_dgjzkf.target_id = shared_aircraftcharacteristic_lat_toqjgs.id
  where master_join_dgjzkf.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_grdxod on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    (row_number() OVER ())::integer AS row,
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    shared_timesheet_view_uragec.timeinterval as timeinterval,
    notes_note_view_bqaync.annotation as annotation,
    organisation_organisationauthority_pt_jjyuxw.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_fbnhbt.associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kqbsvd.*) AS timeinterval
  from master_join master_join_khzwtj
  join shared.timesheet_view shared_timesheet_lat_kqbsvd on master_join_khzwtj.target_id = shared_timesheet_lat_kqbsvd.id
  where master_join_khzwtj.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_uragec on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xkajyi.*) AS annotation
  from master_join master_join_hldpnb
  join notes.note_view notes_note_lat_xkajyi on master_join_hldpnb.target_id = notes_note_lat_xkajyi.id
  where master_join_hldpnb.source_id = airspace.airspacelayerclass.id
) as notes_note_view_bqaync on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_bcldwo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_bcldwo.title AS varchar), '(' || organisation_organisationauthority_lat_bcldwo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_bcldwo.href
  )) as specialdateauthority  from master_join master_join_imjtfb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_bcldwo on master_join_imjtfb.target_id = organisation_organisationauthority_lat_bcldwo.id
  where master_join_imjtfb.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_jjyuxw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_jroqsj.id) as associatedlevels
  from master_join master_join_oagosm
  join shared.airspacelayer_pt shared_airspacelayer_lat_jroqsj on master_join_oagosm.target_id = shared_airspacelayer_lat_jroqsj.id
  where master_join_oagosm.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_fbnhbt on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_uohzlp.timeinterval as timeinterval,
    notes_note_view_knczoc.annotation as annotation,
    organisation_organisationauthority_pt_pvueud.specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ydhugf.*) AS timeinterval
  from master_join master_join_jhgsvp
  join shared.timesheet_view shared_timesheet_lat_ydhugf on master_join_jhgsvp.target_id = shared_timesheet_lat_ydhugf.id
  where master_join_jhgsvp.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_uohzlp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ocdexz.*) AS annotation
  from master_join master_join_aaslhj
  join notes.note_view notes_note_lat_ocdexz on master_join_aaslhj.target_id = notes_note_lat_ocdexz.id
  where master_join_aaslhj.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_knczoc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yxnsev.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yxnsev.title AS varchar), '(' || organisation_organisationauthority_lat_yxnsev.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yxnsev.href
  )) as specialdateauthority  from master_join master_join_eaqypg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yxnsev on master_join_eaqypg.target_id = organisation_organisationauthority_lat_yxnsev.id
  where master_join_eaqypg.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_pvueud on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_nyrldn.timeinterval as timeinterval,
    notes_note_view_ezelcj.annotation as annotation,
    organisation_organisationauthority_pt_wmqhjw.specialdateauthority as specialdateauthority,
    airport_heliport_apronareausage_pt_kupykh.usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_sifzbd.*) AS timeinterval
  from master_join master_join_cgaodc
  join shared.timesheet_view shared_timesheet_lat_sifzbd on master_join_cgaodc.target_id = shared_timesheet_lat_sifzbd.id
  where master_join_cgaodc.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_nyrldn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzaejx.*) AS annotation
  from master_join master_join_qglnzm
  join notes.note_view notes_note_lat_nzaejx on master_join_qglnzm.target_id = notes_note_lat_nzaejx.id
  where master_join_qglnzm.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_ezelcj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zsxnzb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zsxnzb.title AS varchar), '(' || organisation_organisationauthority_lat_zsxnzb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zsxnzb.href
  )) as specialdateauthority  from master_join master_join_zalnzr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zsxnzb on master_join_zalnzr.target_id = organisation_organisationauthority_lat_zsxnzb.id
  where master_join_zalnzr.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_wmqhjw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_onoghn.id) as usage
  from master_join master_join_vidzam
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_onoghn on master_join_vidzam.target_id = airport_heliport_apronareausage_lat_onoghn.id
  where master_join_vidzam.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_kupykh on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['geometry.surface_view', 'shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_tsdsww.id) AS sectordescription,
    geometry_surface_view_lcxfcb.geom AS restrictionarea_geom,
    geometry_surface_view_lcxfcb.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_abkgzl.timeinterval as timeinterval,
    notes_note_view_jijemk.annotation as annotation,
    organisation_organisationauthority_pt_drxtgm.specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_tsdsww on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_tsdsww.id
left join geometry.surface_view geometry_surface_view_lcxfcb on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_lcxfcb.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ywssfu.*) AS timeinterval
  from master_join master_join_nfoesl
  join shared.timesheet_view shared_timesheet_lat_ywssfu on master_join_nfoesl.target_id = shared_timesheet_lat_ywssfu.id
  where master_join_nfoesl.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_abkgzl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_usbhgn.*) AS annotation
  from master_join master_join_otpsqv
  join notes.note_view notes_note_lat_usbhgn on master_join_otpsqv.target_id = notes_note_lat_usbhgn.id
  where master_join_otpsqv.source_id = procedure.circlingrestriction.id
) as notes_note_view_jijemk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mrqdzi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mrqdzi.title AS varchar), '(' || organisation_organisationauthority_lat_mrqdzi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mrqdzi.href
  )) as specialdateauthority  from master_join master_join_gtdlxl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mrqdzi on master_join_gtdlxl.target_id = organisation_organisationauthority_lat_mrqdzi.id
  where master_join_gtdlxl.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_drxtgm on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_cwyqhg.timeinterval as timeinterval,
    notes_note_view_qekvof.annotation as annotation,
    organisation_organisationauthority_pt_nkexkr.specialdateauthority as specialdateauthority,
    shared_meteorology_pt_jinjzg.weather as weather,
    shared_aircraftcharacteristic_pt_wnpqin.aircraft as aircraft,
    shared_flightcharacteristic_pt_qxkrss.flight as flight,
    airport_heliport_conditioncombination_pt_ejkkty.subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yhdgpe.*) AS timeinterval
  from master_join master_join_xgthvc
  join shared.timesheet_view shared_timesheet_lat_yhdgpe on master_join_xgthvc.target_id = shared_timesheet_lat_yhdgpe.id
  where master_join_xgthvc.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_cwyqhg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zjgadi.*) AS annotation
  from master_join master_join_jcoqql
  join notes.note_view notes_note_lat_zjgadi on master_join_jcoqql.target_id = notes_note_lat_zjgadi.id
  where master_join_jcoqql.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_qekvof on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ejzytr.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ejzytr.title AS varchar), '(' || organisation_organisationauthority_lat_ejzytr.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ejzytr.href
  )) as specialdateauthority  from master_join master_join_akbggp
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ejzytr on master_join_akbggp.target_id = organisation_organisationauthority_lat_ejzytr.id
  where master_join_akbggp.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_nkexkr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_lokqzq.id) as weather
  from master_join master_join_pfyxep
  join shared.meteorology_pt shared_meteorology_lat_lokqzq on master_join_pfyxep.target_id = shared_meteorology_lat_lokqzq.id
  where master_join_pfyxep.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_jinjzg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zdgtop.id) as aircraft
  from master_join master_join_znapen
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_zdgtop on master_join_znapen.target_id = shared_aircraftcharacteristic_lat_zdgtop.id
  where master_join_znapen.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_wnpqin on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_zrgefr.id) as flight
  from master_join master_join_ifckvd
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_zrgefr on master_join_ifckvd.target_id = shared_flightcharacteristic_lat_zrgefr.id
  where master_join_ifckvd.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_qxkrss on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_obbqat.id) as subcondition
  from master_join master_join_rstjzd
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_obbqat on master_join_rstjzd.target_id = airport_heliport_conditioncombination_lat_obbqat.id
  where master_join_rstjzd.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_ejkkty on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_glhqbs.timeinterval as timeinterval,
    notes_note_view_wmwusw.annotation as annotation,
    organisation_organisationauthority_pt_ibznpx.specialdateauthority as specialdateauthority,
    routes_flightconditionelement_pt_ebyeum.element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yxbxhw.*) AS timeinterval
  from master_join master_join_gzobwu
  join shared.timesheet_view shared_timesheet_lat_yxbxhw on master_join_gzobwu.target_id = shared_timesheet_lat_yxbxhw.id
  where master_join_gzobwu.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_glhqbs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hpwwsv.*) AS annotation
  from master_join master_join_kfhhbw
  join notes.note_view notes_note_lat_hpwwsv on master_join_kfhhbw.target_id = notes_note_lat_hpwwsv.id
  where master_join_kfhhbw.source_id = routes.flightconditioncombination.id
) as notes_note_view_wmwusw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hyovql.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hyovql.title AS varchar), '(' || organisation_organisationauthority_lat_hyovql.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hyovql.href
  )) as specialdateauthority  from master_join master_join_xiuvwt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hyovql on master_join_xiuvwt.target_id = organisation_organisationauthority_lat_hyovql.id
  where master_join_xiuvwt.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_ibznpx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_kwsyze.id) as element
  from master_join master_join_eduroi
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_kwsyze on master_join_eduroi.target_id = routes_flightconditionelement_lat_kwsyze.id
  where master_join_eduroi.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_ebyeum on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_xclzsm.timeinterval as timeinterval,
    notes_note_view_vsmeij.annotation as annotation,
    organisation_organisationauthority_pt_ciuzhn.specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ccmuzy.*) AS timeinterval
  from master_join master_join_lngltt
  join shared.timesheet_view shared_timesheet_lat_ccmuzy on master_join_lngltt.target_id = shared_timesheet_lat_ccmuzy.id
  where master_join_lngltt.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_xclzsm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujfsyk.*) AS annotation
  from master_join master_join_wzjhxx
  join notes.note_view notes_note_lat_ujfsyk on master_join_wzjhxx.target_id = notes_note_lat_ujfsyk.id
  where master_join_wzjhxx.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_vsmeij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ldkmmn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ldkmmn.title AS varchar), '(' || organisation_organisationauthority_lat_ldkmmn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ldkmmn.href
  )) as specialdateauthority  from master_join master_join_dkwnal
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ldkmmn on master_join_dkwnal.target_id = organisation_organisationauthority_lat_ldkmmn.id
  where master_join_dkwnal.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_ciuzhn on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    (row_number() OVER ())::integer AS row,
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    shared_timesheet_view_rgbyyc.timeinterval as timeinterval,
    notes_note_view_msxgcj.annotation as annotation,
    organisation_organisationauthority_pt_cvwpii.specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_utdeyy.*) AS timeinterval
  from master_join master_join_pzltpv
  join shared.timesheet_view shared_timesheet_lat_utdeyy on master_join_pzltpv.target_id = shared_timesheet_lat_utdeyy.id
  where master_join_pzltpv.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_rgbyyc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_efkjsj.*) AS annotation
  from master_join master_join_dxerwu
  join notes.note_view notes_note_lat_efkjsj on master_join_dxerwu.target_id = notes_note_lat_efkjsj.id
  where master_join_dxerwu.source_id = shared.lightelementstatus.id
) as notes_note_view_msxgcj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ykynvz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ykynvz.title AS varchar), '(' || organisation_organisationauthority_lat_ykynvz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ykynvz.href
  )) as specialdateauthority  from master_join master_join_oqbwgs
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ykynvz on master_join_oqbwgs.target_id = organisation_organisationauthority_lat_ykynvz.id
  where master_join_oqbwgs.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_cvwpii on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_bzmwnx.timeinterval as timeinterval,
    notes_note_view_qehzte.annotation as annotation,
    organisation_organisationauthority_pt_qsxmex.specialdateauthority as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_nozelz.usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gdofds.*) AS timeinterval
  from master_join master_join_xuifwc
  join shared.timesheet_view shared_timesheet_lat_gdofds on master_join_xuifwc.target_id = shared_timesheet_lat_gdofds.id
  where master_join_xuifwc.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_bzmwnx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cxhqxf.*) AS annotation
  from master_join master_join_ecduny
  join notes.note_view notes_note_lat_cxhqxf on master_join_ecduny.target_id = notes_note_lat_cxhqxf.id
  where master_join_ecduny.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_qehzte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lngctv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lngctv.title AS varchar), '(' || organisation_organisationauthority_lat_lngctv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lngctv.href
  )) as specialdateauthority  from master_join master_join_jhbawi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lngctv on master_join_jhbawi.target_id = organisation_organisationauthority_lat_lngctv.id
  where master_join_jhbawi.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_qsxmex on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_cttabe.id) as usage
  from master_join master_join_alkayk
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_cttabe on master_join_alkayk.target_id = airport_heliport_manoeuvringareausage_lat_cttabe.id
  where master_join_alkayk.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_nozelz on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    shared_timesheet_view_holrfl.timeinterval as timeinterval,
    notes_note_view_hhqvie.annotation as annotation,
    organisation_organisationauthority_pt_eokxwy.specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_juycmq.*) AS timeinterval
  from master_join master_join_qjogfg
  join shared.timesheet_view shared_timesheet_lat_juycmq on master_join_qjogfg.target_id = shared_timesheet_lat_juycmq.id
  where master_join_qjogfg.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_holrfl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pjrbjd.*) AS annotation
  from master_join master_join_qbmshn
  join notes.note_view notes_note_lat_pjrbjd on master_join_qbmshn.target_id = notes_note_lat_pjrbjd.id
  where master_join_qbmshn.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_hhqvie on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_goyvom.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_goyvom.title AS varchar), '(' || organisation_organisationauthority_lat_goyvom.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_goyvom.href
  )) as specialdateauthority  from master_join master_join_lvvzcl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_goyvom on master_join_lvvzcl.target_id = organisation_organisationauthority_lat_goyvom.id
  where master_join_lvvzcl.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_eokxwy on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    shared_timesheet_view_zwgiwr.timeinterval as timeinterval,
    notes_note_view_bbcngm.annotation as annotation,
    organisation_organisationauthority_pt_rwhtrl.specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ayefys.*) AS timeinterval
  from master_join master_join_deaqej
  join shared.timesheet_view shared_timesheet_lat_ayefys on master_join_deaqej.target_id = shared_timesheet_lat_ayefys.id
  where master_join_deaqej.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_zwgiwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kvlsnb.*) AS annotation
  from master_join master_join_iqllxs
  join notes.note_view notes_note_lat_kvlsnb on master_join_iqllxs.target_id = notes_note_lat_kvlsnb.id
  where master_join_iqllxs.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_bbcngm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ntgtej.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ntgtej.title AS varchar), '(' || organisation_organisationauthority_lat_ntgtej.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ntgtej.href
  )) as specialdateauthority  from master_join master_join_vgjxbh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ntgtej on master_join_vgjxbh.target_id = organisation_organisationauthority_lat_ntgtej.id
  where master_join_vgjxbh.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_rwhtrl on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    (row_number() OVER ())::integer AS row,
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    shared_timesheet_view_hwrsis.timeinterval as timeinterval,
    notes_note_view_efrltv.annotation as annotation,
    organisation_organisationauthority_pt_qomelf.specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ytzvbm.*) AS timeinterval
  from master_join master_join_smvsvn
  join shared.timesheet_view shared_timesheet_lat_ytzvbm on master_join_smvsvn.target_id = shared_timesheet_lat_ytzvbm.id
  where master_join_smvsvn.source_id = shared.onlinecontact.id
) as shared_timesheet_view_hwrsis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vjrpjd.*) AS annotation
  from master_join master_join_wvcubw
  join notes.note_view notes_note_lat_vjrpjd on master_join_wvcubw.target_id = notes_note_lat_vjrpjd.id
  where master_join_wvcubw.source_id = shared.onlinecontact.id
) as notes_note_view_efrltv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sxjzcu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sxjzcu.title AS varchar), '(' || organisation_organisationauthority_lat_sxjzcu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sxjzcu.href
  )) as specialdateauthority  from master_join master_join_bsisya
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sxjzcu on master_join_bsisya.target_id = organisation_organisationauthority_lat_sxjzcu.id
  where master_join_bsisya.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_qomelf on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    (row_number() OVER ())::integer AS row,
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    shared_timesheet_view_tbsyal.timeinterval as timeinterval,
    notes_note_view_ifkzrj.annotation as annotation,
    organisation_organisationauthority_pt_ihbvko.specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lzkxfq.*) AS timeinterval
  from master_join master_join_wxrawt
  join shared.timesheet_view shared_timesheet_lat_lzkxfq on master_join_wxrawt.target_id = shared_timesheet_lat_lzkxfq.id
  where master_join_wxrawt.source_id = shared.postaladdress.id
) as shared_timesheet_view_tbsyal on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_reybqg.*) AS annotation
  from master_join master_join_tmiteo
  join notes.note_view notes_note_lat_reybqg on master_join_tmiteo.target_id = notes_note_lat_reybqg.id
  where master_join_tmiteo.source_id = shared.postaladdress.id
) as notes_note_view_ifkzrj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qcuzng.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qcuzng.title AS varchar), '(' || organisation_organisationauthority_lat_qcuzng.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qcuzng.href
  )) as specialdateauthority  from master_join master_join_bgwdra
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qcuzng on master_join_bgwdra.target_id = organisation_organisationauthority_lat_qcuzng.id
  where master_join_bgwdra.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_ihbvko on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    (row_number() OVER ())::integer AS row,
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    shared_timesheet_view_gpurwr.timeinterval as timeinterval,
    notes_note_view_kpsrug.annotation as annotation,
    organisation_organisationauthority_pt_flvswx.specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_luxdqt.*) AS timeinterval
  from master_join master_join_cwxlbu
  join shared.timesheet_view shared_timesheet_lat_luxdqt on master_join_cwxlbu.target_id = shared_timesheet_lat_luxdqt.id
  where master_join_cwxlbu.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_gpurwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mcakfs.*) AS annotation
  from master_join master_join_oadybs
  join notes.note_view notes_note_lat_mcakfs on master_join_oadybs.target_id = notes_note_lat_mcakfs.id
  where master_join_oadybs.source_id = procedure.procedureavailability.id
) as notes_note_view_kpsrug on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_merety.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_merety.title AS varchar), '(' || organisation_organisationauthority_lat_merety.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_merety.href
  )) as specialdateauthority  from master_join master_join_uybctl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_merety on master_join_uybctl.target_id = organisation_organisationauthority_lat_merety.id
  where master_join_uybctl.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_flvswx on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_rfcxpj.timeinterval as timeinterval,
    notes_note_view_ilpjdr.annotation as annotation,
    organisation_organisationauthority_pt_beevub.specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bysxnr.*) AS timeinterval
  from master_join master_join_yfgpnt
  join shared.timesheet_view shared_timesheet_lat_bysxnr on master_join_yfgpnt.target_id = shared_timesheet_lat_bysxnr.id
  where master_join_yfgpnt.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_rfcxpj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_majnrv.*) AS annotation
  from master_join master_join_idcebd
  join notes.note_view notes_note_lat_majnrv on master_join_idcebd.target_id = notes_note_lat_majnrv.id
  where master_join_idcebd.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_ilpjdr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sfxich.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sfxich.title AS varchar), '(' || organisation_organisationauthority_lat_sfxich.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sfxich.href
  )) as specialdateauthority  from master_join master_join_tqwgye
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sfxich on master_join_tqwgye.target_id = organisation_organisationauthority_lat_sfxich.id
  where master_join_tqwgye.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_beevub on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    (row_number() OVER ())::integer AS row,
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    shared_timesheet_view_jnsafl.timeinterval as timeinterval,
    notes_note_view_llscsm.annotation as annotation,
    organisation_organisationauthority_pt_tyvoyh.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_dkbqur.levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wnycnl.*) AS timeinterval
  from master_join master_join_ndxojb
  join shared.timesheet_view shared_timesheet_lat_wnycnl on master_join_ndxojb.target_id = shared_timesheet_lat_wnycnl.id
  where master_join_ndxojb.source_id = routes.routeavailability.id
) as shared_timesheet_view_jnsafl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kagiyx.*) AS annotation
  from master_join master_join_zvnvqv
  join notes.note_view notes_note_lat_kagiyx on master_join_zvnvqv.target_id = notes_note_lat_kagiyx.id
  where master_join_zvnvqv.source_id = routes.routeavailability.id
) as notes_note_view_llscsm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_exqxkv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_exqxkv.title AS varchar), '(' || organisation_organisationauthority_lat_exqxkv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_exqxkv.href
  )) as specialdateauthority  from master_join master_join_oahocz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_exqxkv on master_join_oahocz.target_id = organisation_organisationauthority_lat_exqxkv.id
  where master_join_oahocz.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_tyvoyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xcwlsi.id) as levels
  from master_join master_join_mkkfon
  join shared.airspacelayer_pt shared_airspacelayer_lat_xcwlsi on master_join_mkkfon.target_id = shared_airspacelayer_lat_xcwlsi.id
  where master_join_mkkfon.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_dkbqur on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    shared_timesheet_view_bqtxel.timeinterval as timeinterval,
    notes_note_view_rkkroz.annotation as annotation,
    organisation_organisationauthority_pt_miwbcy.specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yypdgd.*) AS timeinterval
  from master_join master_join_aqbsps
  join shared.timesheet_view shared_timesheet_lat_yypdgd on master_join_aqbsps.target_id = shared_timesheet_lat_yypdgd.id
  where master_join_aqbsps.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_bqtxel on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yyhefq.*) AS annotation
  from master_join master_join_dfifdu
  join notes.note_view notes_note_lat_yyhefq on master_join_dfifdu.target_id = notes_note_lat_yyhefq.id
  where master_join_dfifdu.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_rkkroz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ukvjnc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ukvjnc.title AS varchar), '(' || organisation_organisationauthority_lat_ukvjnc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ukvjnc.href
  )) as specialdateauthority  from master_join master_join_dxdbfn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ukvjnc on master_join_dxdbfn.target_id = organisation_organisationauthority_lat_ukvjnc.id
  where master_join_dxdbfn.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_miwbcy on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    (row_number() OVER ())::integer AS row,
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_pcyyoa.timeinterval as timeinterval,
    notes_note_view_tquovm.annotation as annotation,
    organisation_organisationauthority_pt_osuomr.specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wxsfzp.*) AS timeinterval
  from master_join master_join_ahvdvs
  join shared.timesheet_view shared_timesheet_lat_wxsfzp on master_join_ahvdvs.target_id = shared_timesheet_lat_wxsfzp.id
  where master_join_ahvdvs.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_pcyyoa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aiwgqf.*) AS annotation
  from master_join master_join_fjhzsb
  join notes.note_view notes_note_lat_aiwgqf on master_join_fjhzsb.target_id = notes_note_lat_aiwgqf.id
  where master_join_fjhzsb.source_id = service.serviceoperationalstatus.id
) as notes_note_view_tquovm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_whjfvl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_whjfvl.title AS varchar), '(' || organisation_organisationauthority_lat_whjfvl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_whjfvl.href
  )) as specialdateauthority  from master_join master_join_xhohph
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_whjfvl on master_join_xhohph.target_id = organisation_organisationauthority_lat_whjfvl.id
  where master_join_xhohph.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_osuomr on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_uvlawk.timeinterval as timeinterval,
    notes_note_view_ygwltq.annotation as annotation,
    organisation_organisationauthority_pt_ylbrsc.specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_osswes.*) AS timeinterval
  from master_join master_join_axnkha
  join shared.timesheet_view shared_timesheet_lat_osswes on master_join_axnkha.target_id = shared_timesheet_lat_osswes.id
  where master_join_axnkha.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_uvlawk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bfynpc.*) AS annotation
  from master_join master_join_lqdwyr
  join notes.note_view notes_note_lat_bfynpc on master_join_lqdwyr.target_id = notes_note_lat_bfynpc.id
  where master_join_lqdwyr.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_ygwltq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pbeejk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pbeejk.title AS varchar), '(' || organisation_organisationauthority_lat_pbeejk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pbeejk.href
  )) as specialdateauthority  from master_join master_join_sijqqc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pbeejk on master_join_sijqqc.target_id = organisation_organisationauthority_lat_pbeejk.id
  where master_join_sijqqc.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_ylbrsc on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    (row_number() OVER ())::integer AS row,
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    shared_timesheet_view_kajpaf.timeinterval as timeinterval,
    notes_note_view_grohzr.annotation as annotation,
    organisation_organisationauthority_pt_cfbwtk.specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hazdmj.*) AS timeinterval
  from master_join master_join_gzbxaq
  join shared.timesheet_view shared_timesheet_lat_hazdmj on master_join_gzbxaq.target_id = shared_timesheet_lat_hazdmj.id
  where master_join_gzbxaq.source_id = shared.telephonecontact.id
) as shared_timesheet_view_kajpaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_itjdjw.*) AS annotation
  from master_join master_join_awfvhp
  join notes.note_view notes_note_lat_itjdjw on master_join_awfvhp.target_id = notes_note_lat_itjdjw.id
  where master_join_awfvhp.source_id = shared.telephonecontact.id
) as notes_note_view_grohzr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ipvefv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ipvefv.title AS varchar), '(' || organisation_organisationauthority_lat_ipvefv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ipvefv.href
  )) as specialdateauthority  from master_join master_join_msymza
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ipvefv on master_join_msymza.target_id = organisation_organisationauthority_lat_ipvefv.id
  where master_join_msymza.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_cfbwtk on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    (row_number() OVER ())::integer AS row,
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_alrqdp.timeinterval as timeinterval,
    notes_note_view_zizubx.annotation as annotation,
    organisation_organisationauthority_pt_lbkyko.specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_klnaqd.*) AS timeinterval
  from master_join master_join_dujgrx
  join shared.timesheet_view shared_timesheet_lat_klnaqd on master_join_dujgrx.target_id = shared_timesheet_lat_klnaqd.id
  where master_join_dujgrx.source_id = organisation.unitavailability.id
) as shared_timesheet_view_alrqdp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mzsfyl.*) AS annotation
  from master_join master_join_uowgyn
  join notes.note_view notes_note_lat_mzsfyl on master_join_uowgyn.target_id = notes_note_lat_mzsfyl.id
  where master_join_uowgyn.source_id = organisation.unitavailability.id
) as notes_note_view_zizubx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mazwgk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mazwgk.title AS varchar), '(' || organisation_organisationauthority_lat_mazwgk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mazwgk.href
  )) as specialdateauthority  from master_join master_join_nvhoqs
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mazwgk on master_join_nvhoqs.target_id = organisation_organisationauthority_lat_mazwgk.id
  where master_join_nvhoqs.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_lbkyko on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    shared_timesheet_view_kihmho.timeinterval as timeinterval,
    notes_note_view_zovzjo.annotation as annotation,
    organisation_organisationauthority_pt_hqclzn.specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ysizai.*) AS timeinterval
  from master_join master_join_plhiab
  join shared.timesheet_view shared_timesheet_lat_ysizai on master_join_plhiab.target_id = shared_timesheet_lat_ysizai.id
  where master_join_plhiab.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_kihmho on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rksgfo.*) AS annotation
  from master_join master_join_auyhmo
  join notes.note_view notes_note_lat_rksgfo on master_join_auyhmo.target_id = notes_note_lat_rksgfo.id
  where master_join_auyhmo.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_zovzjo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tqkpml.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tqkpml.title AS varchar), '(' || organisation_organisationauthority_lat_tqkpml.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tqkpml.href
  )) as specialdateauthority  from master_join master_join_gxiaqb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tqkpml on master_join_gxiaqb.target_id = organisation_organisationauthority_lat_tqkpml.id
  where master_join_gxiaqb.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_hqclzn on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view', 'notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    geometry_elevatedpoint_view_wlyeui.geom AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_wlyeui.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_wlyeui.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_wlyeui.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_wlyeui.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_wlyeui.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_wlyeui.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_wlyeui.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_dhttai.geom AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_dhttai.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_dhttai.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_dhttai.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_dhttai.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_dhttai.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_aqwjwn.geom AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_aqwjwn.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_aqwjwn.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_aqwjwn.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_aqwjwn.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_aqwjwn.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_pmrqaq.timeinterval as timeinterval,
    notes_note_view_qgzkxs.annotation as annotation,
    organisation_organisationauthority_pt_zjvmst.specialdateauthority as specialdateauthority,
    shared_lightelement_pt_qhjspn.lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wlyeui on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_wlyeui.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_dhttai on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_dhttai.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_aqwjwn on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_aqwjwn.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qjzllc.*) AS timeinterval
  from master_join master_join_gwgxgi
  join shared.timesheet_view shared_timesheet_lat_qjzllc on master_join_gwgxgi.target_id = shared_timesheet_lat_qjzllc.id
  where master_join_gwgxgi.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_pmrqaq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ymxbwd.*) AS annotation
  from master_join master_join_khbqgo
  join notes.note_view notes_note_lat_ymxbwd on master_join_khbqgo.target_id = notes_note_lat_ymxbwd.id
  where master_join_khbqgo.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_qgzkxs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sljgln.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sljgln.title AS varchar), '(' || organisation_organisationauthority_lat_sljgln.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sljgln.href
  )) as specialdateauthority  from master_join master_join_eqcwty
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sljgln on master_join_eqcwty.target_id = organisation_organisationauthority_lat_sljgln.id
  where master_join_eqcwty.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_zjvmst on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_mcwlom.id) as lighting
  from master_join master_join_vsehkf
  join shared.lightelement_pt shared_lightelement_lat_mcwlom on master_join_vsehkf.target_id = shared_lightelement_lat_mcwlom.id
  where master_join_vsehkf.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_qhjspn on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    shared_timesheet_view_qecprj.timeinterval as timeinterval,
    notes_note_view_fzuavl.annotation as annotation,
    organisation_organisationauthority_pt_ctanrj.specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_milrqz.*) AS timeinterval
  from master_join master_join_txfoio
  join shared.timesheet_view shared_timesheet_lat_milrqz on master_join_txfoio.target_id = shared_timesheet_lat_milrqz.id
  where master_join_txfoio.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_qecprj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_afhxeq.*) AS annotation
  from master_join master_join_piayre
  join notes.note_view notes_note_lat_afhxeq on master_join_piayre.target_id = notes_note_lat_afhxeq.id
  where master_join_piayre.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_fzuavl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fwqexq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fwqexq.title AS varchar), '(' || organisation_organisationauthority_lat_fwqexq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fwqexq.href
  )) as specialdateauthority  from master_join master_join_qdvnvh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fwqexq on master_join_qdvnvh.target_id = organisation_organisationauthority_lat_fwqexq.id
  where master_join_qdvnvh.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_ctanrj on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.postaladdress_view', 'shared.onlinecontact_view', 'shared.telephonecontact_view', 'notes.note_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_moauun.id) AS selection,
    notes_note_view_xpdowa.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_moauun on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_moauun.id
left join lateral(
  select
  from master_join master_join_mnolph
  join shared.contactinformation_view shared_contactinformation_lat_whoafi on master_join_mnolph.target_id = shared_contactinformation_lat_whoafi.id
  where master_join_mnolph.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_mkzxxq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqufgd.*) AS annotation
  from master_join master_join_cuyzqy
  join notes.note_view notes_note_lat_kqufgd on master_join_cuyzqy.target_id = notes_note_lat_kqufgd.id
  where master_join_cuyzqy.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_xpdowa on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_mcymoy.id) AS selection,
    notes_note_view_cuacpw.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_mcymoy on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_mcymoy.id
left join lateral(
  select
  from master_join master_join_eafvga
  join shared.contactinformation_view shared_contactinformation_lat_ddbqfp on master_join_eafvga.target_id = shared_contactinformation_lat_ddbqfp.id
  where master_join_eafvga.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_dfvosk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rlaiwq.*) AS annotation
  from master_join master_join_pvjuvb
  join notes.note_view notes_note_lat_rlaiwq on master_join_pvjuvb.target_id = notes_note_lat_rlaiwq.id
  where master_join_pvjuvb.source_id = airport_heliport.apronareausage.id
) as notes_note_view_cuacpw on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    (row_number() OVER ())::integer AS row,
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    routes_flightroutingelement_pt_yusyps.routeelement as routeelement,
    notes_note_view_fqbxoo.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_yqxcyj.id) as routeelement
  from master_join master_join_nereqq
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_yqxcyj on master_join_nereqq.target_id = routes_flightroutingelement_lat_yqxcyj.id
  where master_join_nereqq.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_yusyps on TRUE
left join lateral(
  select
  from master_join master_join_keeyzh
  join shared.contactinformation_view shared_contactinformation_lat_jkeojd on master_join_keeyzh.target_id = shared_contactinformation_lat_jkeojd.id
  where master_join_keeyzh.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_izuxts on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eucsrh.*) AS annotation
  from master_join master_join_rojbmz
  join notes.note_view notes_note_lat_eucsrh on master_join_rojbmz.target_id = notes_note_lat_eucsrh.id
  where master_join_rojbmz.source_id = routes.flightrestrictionroute.id
) as notes_note_view_fqbxoo on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    (row_number() OVER ())::integer AS row,
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_bsxzlz.id) AS selection,
    notes_note_view_wmvcnx.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_bsxzlz on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_bsxzlz.id
left join lateral(
  select
  from master_join master_join_ijjmts
  join shared.contactinformation_view shared_contactinformation_lat_lpqfol on master_join_ijjmts.target_id = shared_contactinformation_lat_lpqfol.id
  where master_join_ijjmts.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_pjsjhk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oycqyy.*) AS annotation
  from master_join master_join_cgwnna
  join notes.note_view notes_note_lat_oycqyy on master_join_cgwnna.target_id = notes_note_lat_oycqyy.id
  where master_join_cgwnna.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_wmvcnx on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['routes.routeavailability_view', 'notes.note_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.aerialrefuellinganchor_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_yxofqq.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_yxofqq.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_yxofqq.href AS oppositetrack_href,
    routes_routeavailability_view_dxczhv.availability as availability,
    airspace_airspace_pt_nmlluc.protectingairspace as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_scrzlo.track as track,
    aerial_refuelling_aerialrefuellinganchor_view_rsduey.anchor as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_yrejjz.managingorganisation as managingorganisation,
    notes_note_view_auqygj.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_yxofqq on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_yxofqq.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_afxiak.*) as availability
  from master_join master_join_rfkjge
  join routes.routeavailability_view routes_routeavailability_lat_afxiak on master_join_rfkjge.target_id = routes_routeavailability_lat_afxiak.id
  where master_join_rfkjge.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_dxczhv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_gpppqo.id,
      'title', coalesce(cast(airspace_airspace_lat_gpppqo.title AS varchar), '(' || airspace_airspace_lat_gpppqo.nilreason[1] || ')'),
      'href', airspace_airspace_lat_gpppqo.href
  )) as protectingairspace  from master_join master_join_exwfsq
  join airspace.airspace_pt airspace_airspace_lat_gpppqo on master_join_exwfsq.target_id = airspace_airspace_lat_gpppqo.id
  where master_join_exwfsq.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_nmlluc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_lymcod.*) as track
  from master_join master_join_mxrvbv
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_lymcod on master_join_mxrvbv.target_id = aerial_refuelling_aerialrefuellingtrack_lat_lymcod.id
  where master_join_mxrvbv.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_scrzlo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_meyyuj.*) as anchor
  from master_join master_join_oluhzl
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_meyyuj on master_join_oluhzl.target_id = aerial_refuelling_aerialrefuellinganchor_lat_meyyuj.id
  where master_join_oluhzl.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_rsduey on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_chkitm.*) as managingorganisation
  from master_join master_join_iiiqhw
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_chkitm on master_join_iiiqhw.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_chkitm.id
  where master_join_iiiqhw.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_yrejjz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kvkwpe.*) AS annotation
  from master_join master_join_zzhpep
  join notes.note_view notes_note_lat_kvkwpe on master_join_zzhpep.target_id = notes_note_lat_kvkwpe.id
  where master_join_zzhpep.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_auqygj on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_ixrixw.title as varchar), '(' || obstacles_verticalstructure_pt_ixrixw.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_ixrixw.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hbqsej.title as varchar), '(' || airport_heliport_airportheliport_pt_hbqsej.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_hbqsej.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_jixnbo.geom AS location_geom,
    geometry_elevatedpoint_view_jixnbo.longitude AS location_longitude,
    geometry_elevatedpoint_view_jixnbo.latitude AS location_latitude,
    geometry_elevatedpoint_view_jixnbo.elevation AS location_elevation,
    geometry_elevatedpoint_view_jixnbo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jixnbo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jixnbo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jixnbo.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_jucprs.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_ixrixw on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_ixrixw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hbqsej on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_hbqsej.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jixnbo on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_jixnbo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yorgkx.*) AS annotation
  from master_join master_join_dvqefm
  join notes.note_view notes_note_lat_yorgkx on master_join_dvqefm.target_id = notes_note_lat_yorgkx.id
  where master_join_dvqefm.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_jucprs on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_ovrsqx.geom AS location_geom,
    geometry_elevatedpoint_view_ovrsqx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ovrsqx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ovrsqx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ovrsqx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ovrsqx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ovrsqx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ovrsqx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_sxrzbt.title as varchar), '(' || organisation_unit_pt_sxrzbt.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_sxrzbt.href AS serviceprovider_href,
    service_callsigndetail_view_rjkosk.callsign as callsign,
    service_radiocommunicationchannel_pt_xfugeo.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_rzbpuu.availability as availability,
    notes_note_view_ugrgxj.annotation as annotation,
    airport_heliport_airportheliport_pt_ethpau.airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ovrsqx on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_ovrsqx.id
left join organisation.unit_pt organisation_unit_pt_sxrzbt on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_sxrzbt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tbfnps.*) as callsign
  from master_join master_join_yltvco
  join service.callsigndetail_view service_callsigndetail_lat_tbfnps on master_join_yltvco.target_id = service_callsigndetail_lat_tbfnps.id
  where master_join_yltvco.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_rjkosk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_gkgcmn.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_gkgcmn.title AS varchar), '(' || service_radiocommunicationchannel_lat_gkgcmn.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_gkgcmn.href
  )) as radiocommunication  from master_join master_join_qlmnsw
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_gkgcmn on master_join_qlmnsw.target_id = service_radiocommunicationchannel_lat_gkgcmn.id
  where master_join_qlmnsw.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_xfugeo on TRUE
left join lateral(
  select
  from master_join master_join_xqamqr
  join shared.contactinformation_view shared_contactinformation_lat_igqtlo on master_join_xqamqr.target_id = shared_contactinformation_lat_igqtlo.id
  where master_join_xqamqr.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_zpntxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_nyrxhd.*) as availability
  from master_join master_join_fnmeay
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_nyrxhd on master_join_fnmeay.target_id = service_serviceoperationalstatus_lat_nyrxhd.id
  where master_join_fnmeay.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_rzbpuu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_olocjg.*) AS annotation
  from master_join master_join_rangjh
  join notes.note_view notes_note_lat_olocjg on master_join_rangjh.target_id = notes_note_lat_olocjg.id
  where master_join_rangjh.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_ugrgxj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zswyfm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zswyfm.title AS varchar), '(' || airport_heliport_airportheliport_lat_zswyfm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zswyfm.href
  )) as airportheliport  from master_join master_join_neeegl
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zswyfm on master_join_neeegl.target_id = airport_heliport_airportheliport_lat_zswyfm.id
  where master_join_neeegl.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_ethpau on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.aircraftstandcontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_hsudic.*) AS surfaceproperties,
    geometry_elevatedpoint_view_updedg.geom AS location_geom,
    geometry_elevatedpoint_view_updedg.longitude AS location_longitude,
    geometry_elevatedpoint_view_updedg.latitude AS location_latitude,
    geometry_elevatedpoint_view_updedg.elevation AS location_elevation,
    geometry_elevatedpoint_view_updedg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_updedg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_updedg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_updedg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_ahnsfi.title as varchar), '(' || airport_heliport_apronelement_pt_ahnsfi.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_ahnsfi.href AS apronlocation_href,
    geometry_elevatedsurface_view_zvzxqf.geom AS extent_geom,
    geometry_elevatedsurface_view_zvzxqf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_zvzxqf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_zvzxqf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_zvzxqf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_zvzxqf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_lmzjbn.contaminant as contaminant,
    notes_note_view_lenith.annotation as annotation,
    airport_heliport_apronareaavailability_view_hjhvxl.availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hsudic on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hsudic.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_updedg on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_updedg.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_ahnsfi on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_ahnsfi.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_zvzxqf on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_zvzxqf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_oindbq.*) as contaminant
  from master_join master_join_bxjqth
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_oindbq on master_join_bxjqth.target_id = airport_heliport_aircraftstandcontamination_lat_oindbq.id
  where master_join_bxjqth.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_lmzjbn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tvjlff.*) AS annotation
  from master_join master_join_dgzlmk
  join notes.note_view notes_note_lat_tvjlff on master_join_dgzlmk.target_id = notes_note_lat_tvjlff.id
  where master_join_dgzlmk.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_lenith on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_cvnbgn.*) as availability
  from master_join master_join_suzdud
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_cvnbgn on master_join_suzdud.target_id = airport_heliport_apronareaavailability_lat_cvnbgn.id
  where master_join_suzdud.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_hjhvxl on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_xfwtgi.geom AS location_geom,
    geometry_elevatedpoint_view_xfwtgi.longitude AS location_longitude,
    geometry_elevatedpoint_view_xfwtgi.latitude AS location_latitude,
    geometry_elevatedpoint_view_xfwtgi.elevation AS location_elevation,
    geometry_elevatedpoint_view_xfwtgi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xfwtgi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xfwtgi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xfwtgi.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wzerwv.title as varchar), '(' || organisation_unit_pt_wzerwv.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_wzerwv.href AS serviceprovider_href,
    service_callsigndetail_view_ygbnfs.callsign as callsign,
    service_radiocommunicationchannel_pt_ehyqcj.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_tzhmyb.availability as availability,
    notes_note_view_ipvssv.annotation as annotation,
    airport_heliport_airportheliport_pt_hzpmfq.airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xfwtgi on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_xfwtgi.id
left join organisation.unit_pt organisation_unit_pt_wzerwv on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_wzerwv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_vjkxtw.*) as callsign
  from master_join master_join_yxcfjz
  join service.callsigndetail_view service_callsigndetail_lat_vjkxtw on master_join_yxcfjz.target_id = service_callsigndetail_lat_vjkxtw.id
  where master_join_yxcfjz.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_ygbnfs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mdeanq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mdeanq.title AS varchar), '(' || service_radiocommunicationchannel_lat_mdeanq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mdeanq.href
  )) as radiocommunication  from master_join master_join_dtslox
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mdeanq on master_join_dtslox.target_id = service_radiocommunicationchannel_lat_mdeanq.id
  where master_join_dtslox.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_ehyqcj on TRUE
left join lateral(
  select
  from master_join master_join_yekqjt
  join shared.contactinformation_view shared_contactinformation_lat_ybzqzm on master_join_yekqjt.target_id = shared_contactinformation_lat_ybzqzm.id
  where master_join_yekqjt.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_wgbyvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_kmvbfd.*) as availability
  from master_join master_join_hkjbdx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_kmvbfd on master_join_hkjbdx.target_id = service_serviceoperationalstatus_lat_kmvbfd.id
  where master_join_hkjbdx.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_tzhmyb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_itslfw.*) AS annotation
  from master_join master_join_qzphcs
  join notes.note_view notes_note_lat_itslfw on master_join_qzphcs.target_id = notes_note_lat_itslfw.id
  where master_join_qzphcs.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_ipvssv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wxsdgz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wxsdgz.title AS varchar), '(' || airport_heliport_airportheliport_lat_wxsdgz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wxsdgz.href
  )) as airportheliport  from master_join master_join_fhejtu
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wxsdgz on master_join_fhejtu.target_id = airport_heliport_airportheliport_lat_wxsdgz.id
  where master_join_fhejtu.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_hzpmfq on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_iddjmk.title as varchar), '(' || airport_heliport_airportheliport_pt_iddjmk.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_iddjmk.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fmvvqd.title as varchar), '(' || airport_heliport_airportheliport_pt_fmvvqd.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_fmvvqd.href AS dependentairport_href,
    notes_note_view_pgeiwc.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iddjmk on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_iddjmk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fmvvqd on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_fmvvqd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqycll.*) AS annotation
  from master_join master_join_mykese
  join notes.note_view notes_note_lat_sqycll on master_join_mykese.target_id = notes_note_lat_sqycll.id
  where master_join_mykese.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_pgeiwc on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.airportheliportcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'notes.note_view', 'shared.contactinformation_view', 'airport_heliport.airportheliportavailability_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_vsqjmi.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_ypxksp.geom AS arp_geom,
    geometry_elevatedpoint_view_ypxksp.longitude AS arp_longitude,
    geometry_elevatedpoint_view_ypxksp.latitude AS arp_latitude,
    geometry_elevatedpoint_view_ypxksp.elevation AS arp_elevation,
    geometry_elevatedpoint_view_ypxksp.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_ypxksp.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_ypxksp.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_ypxksp.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_txgtav.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_txgtav.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_txgtav.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_txgtav.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_txgtav.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_txgtav.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_eumxcz.contaminant as contaminant,
    airport_heliport_city_view_zqbwgl.servedcity as servedcity,
    airport_heliport_altimetersource_pt_iqbvhf.altimetersource as altimetersource,
    airport_heliport_airportheliportavailability_view_nqdvri.availability as availability,
    notes_note_view_dutizu.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_vsqjmi on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_vsqjmi.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ypxksp on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_ypxksp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_txgtav on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_txgtav.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_ysgtyu.*) as contaminant
  from master_join master_join_hcjxdh
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_ysgtyu on master_join_hcjxdh.target_id = airport_heliport_airportheliportcontamination_lat_ysgtyu.id
  where master_join_hcjxdh.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_eumxcz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_rverph.*) as servedcity
  from master_join master_join_peybaw
  join airport_heliport.city_view airport_heliport_city_lat_rverph on master_join_peybaw.target_id = airport_heliport_city_lat_rverph.id
  where master_join_peybaw.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_zqbwgl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_qrvegp.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_qrvegp.title AS varchar), '(' || airport_heliport_altimetersource_lat_qrvegp.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_qrvegp.href
  )) as altimetersource  from master_join master_join_lqpelu
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_qrvegp on master_join_lqpelu.target_id = airport_heliport_altimetersource_lat_qrvegp.id
  where master_join_lqpelu.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_iqbvhf on TRUE
left join lateral(
  select
  from master_join master_join_txmkdj
  join shared.contactinformation_view shared_contactinformation_lat_lzfvkd on master_join_txmkdj.target_id = shared_contactinformation_lat_lzfvkd.id
  where master_join_txmkdj.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_aundcn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_ckzvzv.*) as availability
  from master_join master_join_xliwys
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_ckzvzv on master_join_xliwys.target_id = airport_heliport_airportheliportavailability_lat_ckzvzv.id
  where master_join_xliwys.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_nqdvri on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zrygty.*) AS annotation
  from master_join master_join_uartun
  join notes.note_view notes_note_lat_zrygty on master_join_uartun.target_id = notes_note_lat_zrygty.id
  where master_join_uartun.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_dutizu on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_mgezwh.geom AS area_geom,
    geometry_elevatedsurface_view_mgezwh.elevation AS area_elevation,
    geometry_elevatedsurface_view_mgezwh.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_mgezwh.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_mgezwh.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_mgezwh.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_aszmlv.title as varchar), '(' || airport_heliport_airportheliport_pt_aszmlv.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_aszmlv.href AS affectedairport_href,
    notes_note_view_pkhhcb.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mgezwh on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_mgezwh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aszmlv on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_aszmlv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wdijnp.*) AS annotation
  from master_join master_join_blovle
  join notes.note_view notes_note_lat_wdijnp on master_join_blovle.target_id = notes_note_lat_wdijnp.id
  where master_join_blovle.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_pkhhcb on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    airport_heliport_markingelement_view_zinjar.element as element,
    notes_note_view_smbwpc.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fsahwy.*) as element
  from master_join master_join_dlqzco
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fsahwy on master_join_dlqzco.target_id = airport_heliport_markingelement_lat_fsahwy.id
  where master_join_dlqzco.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_zinjar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfagzv.*) AS annotation
  from master_join master_join_bdkkrj
  join notes.note_view notes_note_lat_rfagzv on master_join_bdkkrj.target_id = notes_note_lat_rfagzv.id
  where master_join_bdkkrj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_smbwpc on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.fuel_view', 'service.nitrogen_view', 'notes.note_view', 'shared.contactinformation_view', 'service.oxygen_view', 'service.oil_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_gqglyi.geom AS location_geom,
    geometry_elevatedpoint_view_gqglyi.longitude AS location_longitude,
    geometry_elevatedpoint_view_gqglyi.latitude AS location_latitude,
    geometry_elevatedpoint_view_gqglyi.elevation AS location_elevation,
    geometry_elevatedpoint_view_gqglyi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gqglyi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gqglyi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gqglyi.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_rxbeds.title as varchar), '(' || organisation_unit_pt_rxbeds.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_rxbeds.href AS serviceprovider_href,
    service_callsigndetail_view_vjfeve.callsign as callsign,
    service_radiocommunicationchannel_pt_cgsuwa.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_xonheb.availability as availability,
    notes_note_view_dsjldy.annotation as annotation,
    airport_heliport_airportheliport_pt_jqejzo.airportheliport as airportheliport,
    service_fuel_view_pbsxge.fuelsupply as fuelsupply,
    service_oil_view_flfgsb.oilsupply as oilsupply,
    service_nitrogen_view_thuuru.nitrogensupply as nitrogensupply,
    service_oxygen_view_zfugyo.oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gqglyi on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_gqglyi.id
left join organisation.unit_pt organisation_unit_pt_rxbeds on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_rxbeds.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_wmtvpp.*) as callsign
  from master_join master_join_yaxbqn
  join service.callsigndetail_view service_callsigndetail_lat_wmtvpp on master_join_yaxbqn.target_id = service_callsigndetail_lat_wmtvpp.id
  where master_join_yaxbqn.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_vjfeve on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qjybjz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qjybjz.title AS varchar), '(' || service_radiocommunicationchannel_lat_qjybjz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qjybjz.href
  )) as radiocommunication  from master_join master_join_fzqrzk
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qjybjz on master_join_fzqrzk.target_id = service_radiocommunicationchannel_lat_qjybjz.id
  where master_join_fzqrzk.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_cgsuwa on TRUE
left join lateral(
  select
  from master_join master_join_mtdiyy
  join shared.contactinformation_view shared_contactinformation_lat_fmbyld on master_join_mtdiyy.target_id = shared_contactinformation_lat_fmbyld.id
  where master_join_mtdiyy.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_mjboap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ofsjvo.*) as availability
  from master_join master_join_yasbca
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ofsjvo on master_join_yasbca.target_id = service_serviceoperationalstatus_lat_ofsjvo.id
  where master_join_yasbca.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_xonheb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwikat.*) AS annotation
  from master_join master_join_xgwqrr
  join notes.note_view notes_note_lat_qwikat on master_join_xgwqrr.target_id = notes_note_lat_qwikat.id
  where master_join_xgwqrr.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_dsjldy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_sxtnaj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_sxtnaj.title AS varchar), '(' || airport_heliport_airportheliport_lat_sxtnaj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_sxtnaj.href
  )) as airportheliport  from master_join master_join_qpbobq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_sxtnaj on master_join_qpbobq.target_id = airport_heliport_airportheliport_lat_sxtnaj.id
  where master_join_qpbobq.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_jqejzo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_eknaaw.*) as fuelsupply
  from master_join master_join_nvdwzz
  join service.fuel_view service_fuel_lat_eknaaw on master_join_nvdwzz.target_id = service_fuel_lat_eknaaw.id
  where master_join_nvdwzz.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_pbsxge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_ujmpph.*) as oilsupply
  from master_join master_join_nceblq
  join service.oil_view service_oil_lat_ujmpph on master_join_nceblq.target_id = service_oil_lat_ujmpph.id
  where master_join_nceblq.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_flfgsb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_tgmeao.*) as nitrogensupply
  from master_join master_join_ncsfhc
  join service.nitrogen_view service_nitrogen_lat_tgmeao on master_join_ncsfhc.target_id = service_nitrogen_lat_tgmeao.id
  where master_join_ncsfhc.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_thuuru on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_zxdrzb.*) as oxygensupply
  from master_join master_join_lxkpib
  join service.oxygen_view service_oxygen_lat_zxdrzb on master_join_lxkpib.target_id = service_oxygen_lat_zxdrzb.id
  where master_join_lxkpib.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_zfugyo on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_zcnfqb.title as varchar), '(' || airspace_airspace_pt_zcnfqb.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_zcnfqb.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_jiojyu.title as varchar), '(' || airspace_airspace_pt_jiojyu.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_jiojyu.href AS enteredairspace_href,
    notes_note_view_aaziak.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_zcnfqb on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_zcnfqb.id
left join airspace.airspace_pt airspace_airspace_pt_jiojyu on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_jiojyu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vckpta.*) AS annotation
  from master_join master_join_szpejt
  join notes.note_view notes_note_lat_vckpta on master_join_szpejt.target_id = notes_note_lat_vckpta.id
  where master_join_szpejt.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_aaziak on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view', 'notes.note_view', 'airspace.airspacegeometrycomponent_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_vumqdg.title as varchar), '(' || routes_route_pt_vumqdg.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_vumqdg.href AS protectedroute_href,
    airspace_airspacelayerclass_view_uuawyu.clazz as clazz,
    airspace_airspacegeometrycomponent_view_pmysbt.geometrycomponent as geometrycomponent,
    airspace_airspaceactivation_view_shgbgy.activation as activation,
    notes_note_view_sjwnbj.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_vumqdg on airspace.airspace_ts.protectedroute_id = routes_route_pt_vumqdg.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_cbgcto.*) as clazz
  from master_join master_join_jdztad
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_cbgcto on master_join_jdztad.target_id = airspace_airspacelayerclass_lat_cbgcto.id
  where master_join_jdztad.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_uuawyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_pqqlag.*) as geometrycomponent
  from master_join master_join_rwztfl
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_pqqlag on master_join_rwztfl.target_id = airspace_airspacegeometrycomponent_lat_pqqlag.id
  where master_join_rwztfl.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_pmysbt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_sefvkm.*) as activation
  from master_join master_join_nzuxdu
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_sefvkm on master_join_nzuxdu.target_id = airspace_airspaceactivation_lat_sefvkm.id
  where master_join_nzuxdu.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_shgbgy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iwkqex.*) AS annotation
  from master_join master_join_oyvqkc
  join notes.note_view notes_note_lat_iwkqex on master_join_oyvqkc.target_id = notes_note_lat_iwkqex.id
  where master_join_oyvqkc.source_id = airspace.airspace_ts.id
) as notes_note_view_sjwnbj on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['service.callsigndetail_view', 'routes.routeportion_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_bqmgjv.geom AS location_geom,
    geometry_elevatedpoint_view_bqmgjv.longitude AS location_longitude,
    geometry_elevatedpoint_view_bqmgjv.latitude AS location_latitude,
    geometry_elevatedpoint_view_bqmgjv.elevation AS location_elevation,
    geometry_elevatedpoint_view_bqmgjv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bqmgjv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bqmgjv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bqmgjv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jgfnuq.title as varchar), '(' || organisation_unit_pt_jgfnuq.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_jgfnuq.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_htrvof.title as varchar), '(' || navaids_points_directionfinder_pt_htrvof.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_htrvof.href AS aircraftlocator_href,
    service_callsigndetail_view_qazuiy.callsign as callsign,
    service_radiocommunicationchannel_pt_hwezqm.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_xjcjxn.availability as availability,
    notes_note_view_ryyeap.annotation as annotation,
    airport_heliport_airportheliport_pt_ihhegq.clientairport as clientairport,
    airspace_airspace_pt_gotuvi.clientairspace as clientairspace,
    routes_routeportion_view_uyfyut.clientroute as clientroute,
    holding_holdingpattern_pt_vtexbu.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_gckxws.clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bqmgjv on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_bqmgjv.id
left join organisation.unit_pt organisation_unit_pt_jgfnuq on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_jgfnuq.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_htrvof on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_htrvof.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_xrrffd.*) as callsign
  from master_join master_join_qrvlyr
  join service.callsigndetail_view service_callsigndetail_lat_xrrffd on master_join_qrvlyr.target_id = service_callsigndetail_lat_xrrffd.id
  where master_join_qrvlyr.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_qazuiy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xtkdxh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xtkdxh.title AS varchar), '(' || service_radiocommunicationchannel_lat_xtkdxh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xtkdxh.href
  )) as radiocommunication  from master_join master_join_umyfzj
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xtkdxh on master_join_umyfzj.target_id = service_radiocommunicationchannel_lat_xtkdxh.id
  where master_join_umyfzj.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_hwezqm on TRUE
left join lateral(
  select
  from master_join master_join_zlnrpu
  join shared.contactinformation_view shared_contactinformation_lat_wdwoys on master_join_zlnrpu.target_id = shared_contactinformation_lat_wdwoys.id
  where master_join_zlnrpu.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_kgmkts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_cqhavr.*) as availability
  from master_join master_join_rudtte
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_cqhavr on master_join_rudtte.target_id = service_serviceoperationalstatus_lat_cqhavr.id
  where master_join_rudtte.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_xjcjxn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fnvpnh.*) AS annotation
  from master_join master_join_lojivh
  join notes.note_view notes_note_lat_fnvpnh on master_join_lojivh.target_id = notes_note_lat_fnvpnh.id
  where master_join_lojivh.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_ryyeap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_dckwmr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_dckwmr.title AS varchar), '(' || airport_heliport_airportheliport_lat_dckwmr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_dckwmr.href
  )) as clientairport  from master_join master_join_azlwlj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_dckwmr on master_join_azlwlj.target_id = airport_heliport_airportheliport_lat_dckwmr.id
  where master_join_azlwlj.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_ihhegq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_bhydxs.id,
      'title', coalesce(cast(airspace_airspace_lat_bhydxs.title AS varchar), '(' || airspace_airspace_lat_bhydxs.nilreason[1] || ')'),
      'href', airspace_airspace_lat_bhydxs.href
  )) as clientairspace  from master_join master_join_bqtacv
  join airspace.airspace_pt airspace_airspace_lat_bhydxs on master_join_bqtacv.target_id = airspace_airspace_lat_bhydxs.id
  where master_join_bqtacv.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_gotuvi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_gmqfmx.*) as clientroute
  from master_join master_join_dhjkta
  join routes.routeportion_view routes_routeportion_lat_gmqfmx on master_join_dhjkta.target_id = routes_routeportion_lat_gmqfmx.id
  where master_join_dhjkta.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_uyfyut on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_iecnri.id,
      'title', coalesce(cast(holding_holdingpattern_lat_iecnri.title AS varchar), '(' || holding_holdingpattern_lat_iecnri.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_iecnri.href
  )) as clientholding  from master_join master_join_pnlepp
  join holding.holdingpattern_pt holding_holdingpattern_lat_iecnri on master_join_pnlepp.target_id = holding_holdingpattern_lat_iecnri.id
  where master_join_pnlepp.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_vtexbu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_tfloal.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_tfloal.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_tfloal.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_tfloal.href
  )) as clientaerialrefuelling  from master_join master_join_ekxxnd
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_tfloal on master_join_ekxxnd.target_id = aerial_refuelling_aerialrefuelling_lat_tfloal.id
  where master_join_ekxxnd.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_gckxws on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['service.callsigndetail_view', 'routes.routeportion_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_qqllha.geom AS location_geom,
    geometry_elevatedpoint_view_qqllha.longitude AS location_longitude,
    geometry_elevatedpoint_view_qqllha.latitude AS location_latitude,
    geometry_elevatedpoint_view_qqllha.elevation AS location_elevation,
    geometry_elevatedpoint_view_qqllha.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qqllha.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qqllha.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qqllha.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_nsjzgg.title as varchar), '(' || organisation_unit_pt_nsjzgg.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_nsjzgg.href AS serviceprovider_href,
    service_callsigndetail_view_ozavpo.callsign as callsign,
    service_radiocommunicationchannel_pt_oshgay.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_cpbacw.availability as availability,
    notes_note_view_iipvao.annotation as annotation,
    airspace_airspace_pt_hccawr.clientairspace as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_dbhhzm.clientaerialrefuelling as clientaerialrefuelling,
    routes_routeportion_view_tpnjsw.clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qqllha on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_qqllha.id
left join organisation.unit_pt organisation_unit_pt_nsjzgg on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_nsjzgg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_mzsuiv.*) as callsign
  from master_join master_join_utruxn
  join service.callsigndetail_view service_callsigndetail_lat_mzsuiv on master_join_utruxn.target_id = service_callsigndetail_lat_mzsuiv.id
  where master_join_utruxn.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_ozavpo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ehjfgf.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ehjfgf.title AS varchar), '(' || service_radiocommunicationchannel_lat_ehjfgf.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ehjfgf.href
  )) as radiocommunication  from master_join master_join_lprpdr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ehjfgf on master_join_lprpdr.target_id = service_radiocommunicationchannel_lat_ehjfgf.id
  where master_join_lprpdr.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_oshgay on TRUE
left join lateral(
  select
  from master_join master_join_gvsqhq
  join shared.contactinformation_view shared_contactinformation_lat_safcjl on master_join_gvsqhq.target_id = shared_contactinformation_lat_safcjl.id
  where master_join_gvsqhq.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_gcdbgb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_iiacca.*) as availability
  from master_join master_join_vtdkeg
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_iiacca on master_join_vtdkeg.target_id = service_serviceoperationalstatus_lat_iiacca.id
  where master_join_vtdkeg.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_cpbacw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hgjnzn.*) AS annotation
  from master_join master_join_ulsyvm
  join notes.note_view notes_note_lat_hgjnzn on master_join_ulsyvm.target_id = notes_note_lat_hgjnzn.id
  where master_join_ulsyvm.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_iipvao on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_lzlffu.id,
      'title', coalesce(cast(airspace_airspace_lat_lzlffu.title AS varchar), '(' || airspace_airspace_lat_lzlffu.nilreason[1] || ')'),
      'href', airspace_airspace_lat_lzlffu.href
  )) as clientairspace  from master_join master_join_ulzgxi
  join airspace.airspace_pt airspace_airspace_lat_lzlffu on master_join_ulzgxi.target_id = airspace_airspace_lat_lzlffu.id
  where master_join_ulzgxi.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_hccawr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_uiqdeo.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_uiqdeo.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_uiqdeo.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_uiqdeo.href
  )) as clientaerialrefuelling  from master_join master_join_crsxzj
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_uiqdeo on master_join_crsxzj.target_id = aerial_refuelling_aerialrefuelling_lat_uiqdeo.id
  where master_join_crsxzj.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_dbhhzm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_skaaed.*) as clientroute
  from master_join master_join_yjxbwu
  join routes.routeportion_view routes_routeportion_lat_skaaed on master_join_yjxbwu.target_id = routes_routeportion_lat_skaaed.id
  where master_join_yjxbwu.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_tpnjsw on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    airport_heliport_altimetersourcestatus_view_xiryub.availability as availability,
    notes_note_view_azspam.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_gmhqdk.*) as availability
  from master_join master_join_wdvfyt
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_gmhqdk on master_join_wdvfyt.target_id = airport_heliport_altimetersourcestatus_lat_gmhqdk.id
  where master_join_wdvfyt.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_xiryub on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwyxje.*) AS annotation
  from master_join master_join_wjycue
  join notes.note_view notes_note_lat_hwyxje on master_join_wjycue.target_id = notes_note_lat_hwyxje.id
  where master_join_wjycue.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_azspam on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_oijxlh.title as varchar), '(' || navaids_points_designatedpoint_pt_oijxlh.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_oijxlh.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_qxrwcb.title as varchar), '(' || navaids_points_designatedpoint_pt_qxrwcb.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_qxrwcb.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_glgshg.title as varchar), '(' || navaids_points_navaid_pt_glgshg.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_glgshg.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rdktnq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rdktnq.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_rdktnq.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kvkblm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kvkblm.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kvkblm.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ytorql.title as varchar), '(' || airport_heliport_airportheliport_pt_ytorql.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ytorql.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_lypprr.geom AS pointchoiceposition_geom,
    geometry_point_view_lypprr.longitude AS pointchoiceposition_longitude,
    geometry_point_view_lypprr.latitude AS pointchoiceposition_latitude,
    geometry_point_view_lypprr.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_uuavig.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_oijxlh on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_oijxlh.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qxrwcb on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qxrwcb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_glgshg on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_glgshg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rdktnq on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rdktnq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kvkblm on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kvkblm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ytorql on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_ytorql.id
left join geometry.point_view geometry_point_view_lypprr on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_lypprr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qenvlb.*) AS annotation
  from master_join master_join_cohtcj
  join notes.note_view notes_note_lat_qenvlb on master_join_cohtcj.target_id = notes_note_lat_qenvlb.id
  where master_join_cohtcj.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_uuavig on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_wknldt.title as varchar), '(' || airport_heliport_runwaydirection_pt_wknldt.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_wknldt.href AS servedrunwaydirection_href,
    shared_lightelement_view_sejsuy.element as element,
    airport_heliport_groundlightingavailability_view_ijdggk.availability as availability,
    notes_note_view_jxkhrv.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wknldt on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_wknldt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jkrggg.*) as element
  from master_join master_join_yyendu
  join shared.lightelement_view shared_lightelement_lat_jkrggg on master_join_yyendu.target_id = shared_lightelement_lat_jkrggg.id
  where master_join_yyendu.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_sejsuy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_uufhjf.*) as availability
  from master_join master_join_oglzzm
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_uufhjf on master_join_oglzzm.target_id = airport_heliport_groundlightingavailability_lat_uufhjf.id
  where master_join_oglzzm.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ijdggk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tdpyiy.*) AS annotation
  from master_join master_join_wukfue
  join notes.note_view notes_note_lat_tdpyiy on master_join_wukfue.target_id = notes_note_lat_tdpyiy.id
  where master_join_wukfue.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_jxkhrv on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_okyedq.title as varchar), '(' || airport_heliport_apron_pt_okyedq.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_okyedq.href AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qlwhzl.*) AS surfaceproperties,
    geometry_elevatedsurface_view_uaefov.geom AS extent_geom,
    geometry_elevatedsurface_view_uaefov.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uaefov.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uaefov.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uaefov.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uaefov.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_ubkswx.supplyservice as supplyservice,
    notes_note_view_ldcvut.annotation as annotation,
    airport_heliport_apronareaavailability_view_zrythr.availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_okyedq on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_okyedq.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qlwhzl on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qlwhzl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uaefov on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_uaefov.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_hgxebq.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_hgxebq.title AS varchar), '(' || service_airportsuppliesservice_lat_hgxebq.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_hgxebq.href
  )) as supplyservice  from master_join master_join_bnpsyo
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_hgxebq on master_join_bnpsyo.target_id = service_airportsuppliesservice_lat_hgxebq.id
  where master_join_bnpsyo.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_ubkswx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qpxmma.*) AS annotation
  from master_join master_join_deulut
  join notes.note_view notes_note_lat_qpxmma on master_join_deulut.target_id = notes_note_lat_qpxmma.id
  where master_join_deulut.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_ldcvut on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_cyvevi.*) as availability
  from master_join master_join_tpqpzq
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_cyvevi on master_join_tpqpzq.target_id = airport_heliport_apronareaavailability_lat_cyvevi.id
  where master_join_tpqpzq.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_zrythr on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_ysypxy.title as varchar), '(' || airport_heliport_apron_pt_ysypxy.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_ysypxy.href AS lightedapron_href,
    shared_lightelement_view_zkroaw.element as element,
    airport_heliport_groundlightingavailability_view_zntebe.availability as availability,
    notes_note_view_uffcvy.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ysypxy on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_ysypxy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_qgogvj.*) as element
  from master_join master_join_joqfbn
  join shared.lightelement_view shared_lightelement_lat_qgogvj on master_join_joqfbn.target_id = shared_lightelement_lat_qgogvj.id
  where master_join_joqfbn.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_zkroaw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hodqmw.*) as availability
  from master_join master_join_skywuy
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hodqmw on master_join_skywuy.target_id = airport_heliport_groundlightingavailability_lat_hodqmw.id
  where master_join_skywuy.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_zntebe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uwzbva.*) AS annotation
  from master_join master_join_jhqlvu
  join notes.note_view notes_note_lat_uwzbva on master_join_jhqlvu.target_id = notes_note_lat_uwzbva.id
  where master_join_jhqlvu.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_uffcvy on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_sbqvhp.title as varchar), '(' || airport_heliport_apron_pt_sbqvhp.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_sbqvhp.href AS markedapron_href,
    airport_heliport_markingelement_view_bmjzku.element as element,
    notes_note_view_kflmfl.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_sbqvhp on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_sbqvhp.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_biyncm.*) as element
  from master_join master_join_dctfls
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_biyncm on master_join_dctfls.target_id = airport_heliport_markingelement_lat_biyncm.id
  where master_join_dctfls.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_bmjzku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thrymj.*) AS annotation
  from master_join master_join_xbrcrc
  join notes.note_view notes_note_lat_thrymj on master_join_xbrcrc.target_id = notes_note_lat_thrymj.id
  where master_join_xbrcrc.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_kflmfl on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ukmotv.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_zbywdh.title as varchar), '(' || airport_heliport_airportheliport_pt_zbywdh.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zbywdh.href AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_kvtmdk.contaminant as contaminant,
    notes_note_view_eytiuf.annotation as annotation,
    airport_heliport_apronareaavailability_view_ppofiv.availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ukmotv on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ukmotv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zbywdh on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zbywdh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_izmdnu.*) as contaminant
  from master_join master_join_vicpmb
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_izmdnu on master_join_vicpmb.target_id = airport_heliport_aproncontamination_lat_izmdnu.id
  where master_join_vicpmb.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_kvtmdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cmghee.*) AS annotation
  from master_join master_join_cxkwcm
  join notes.note_view notes_note_lat_cmghee on master_join_cxkwcm.target_id = notes_note_lat_cmghee.id
  where master_join_cxkwcm.source_id = airport_heliport.apron_ts.id
) as notes_note_view_eytiuf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_pxvhve.*) as availability
  from master_join master_join_nqmtdo
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_pxvhve on master_join_nqmtdo.target_id = airport_heliport_apronareaavailability_lat_pxvhve.id
  where master_join_nqmtdo.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_ppofiv on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_hkalij.*) AS surfaceproperties,
    geometry_elevatedcurve_view_njpcxg.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_njpcxg.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_njpcxg.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_njpcxg.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_njpcxg.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_njpcxg.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_pcghin.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_pcghin.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_pcghin.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_pcghin.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_pcghin.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_pcghin.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_ogtamr.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_ogtamr.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_ogtamr.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_ogtamr.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_ogtamr.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_ogtamr.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_ogtamr.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_ogtamr.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_zmigjj.runwaydirection as runwaydirection,
    notes_note_view_baxjkn.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hkalij on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hkalij.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_njpcxg on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_njpcxg.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pcghin on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_pcghin.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ogtamr on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_ogtamr.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_oaidqm.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_oaidqm.title AS varchar), '(' || airport_heliport_runwaydirection_lat_oaidqm.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_oaidqm.href
  )) as runwaydirection  from master_join master_join_dpyzzg
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_oaidqm on master_join_dpyzzg.target_id = airport_heliport_runwaydirection_lat_oaidqm.id
  where master_join_dpyzzg.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_zmigjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qnnklt.*) AS annotation
  from master_join master_join_ctqqby
  join notes.note_view notes_note_lat_qnnklt on master_join_ctqqby.target_id = notes_note_lat_qnnklt.id
  where master_join_ctqqby.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_baxjkn on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kxqfof.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_uksmsc.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lxxekq.*) AS arccentre,
    geometry_curve_view_sassyi.geom AS trajectory_geom,
    geometry_curve_view_sassyi.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qweyxt.title as varchar), '(' || navaids_points_angleindication_pt_qweyxt.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_qweyxt.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_kjiwbn.title as varchar), '(' || navaids_points_distanceindication_pt_kjiwbn.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_kjiwbn.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_faauyv.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_gkqkfu.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_gkqkfu.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_gkqkfu.href AS approach_href,
    shared_aircraftcharacteristic_view_kyschp.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_twhhos.designsurface as designsurface,
    notes_note_view_reywfy.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kxqfof on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_kxqfof.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_uksmsc on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_uksmsc.id
left join geometry.curve_view geometry_curve_view_sassyi on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_sassyi.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lxxekq on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_lxxekq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qweyxt on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_qweyxt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_kjiwbn on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_kjiwbn.id
left join procedure.holdinguse_view procedure_holdinguse_view_faauyv on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_faauyv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_gkqkfu on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_gkqkfu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vskegx.*) as aircraftcategory
  from master_join master_join_rgcaan
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_vskegx on master_join_rgcaan.target_id = shared_aircraftcharacteristic_lat_vskegx.id
  where master_join_rgcaan.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_kyschp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fyvhyw.*) as designsurface
  from master_join master_join_kpygow
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fyvhyw on master_join_kpygow.target_id = shared_obstacleassessmentarea_lat_fyvhyw.id
  where master_join_kpygow.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_twhhos on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uoahee.*) AS annotation
  from master_join master_join_vtdnlp
  join notes.note_view notes_note_lat_uoahee on master_join_vtdnlp.target_id = notes_note_lat_uoahee.id
  where master_join_vtdnlp.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_reywfy on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_uahdyw.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_exkngq.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_aqxeaj.*) AS arccentre,
    geometry_curve_view_yyxcjh.geom AS trajectory_geom,
    geometry_curve_view_yyxcjh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_gqpnzh.title as varchar), '(' || navaids_points_angleindication_pt_gqpnzh.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_gqpnzh.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_mdjexo.title as varchar), '(' || navaids_points_distanceindication_pt_mdjexo.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_mdjexo.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_begxsj.*) AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_pfvoyr.title as varchar), '(' || procedure_standardinstrumentarrival_pt_pfvoyr.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_pfvoyr.href AS arrival_href,
    shared_aircraftcharacteristic_view_qysowr.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_gmvxev.designsurface as designsurface,
    notes_note_view_yjuvcw.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_uahdyw on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_uahdyw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_exkngq on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_exkngq.id
left join geometry.curve_view geometry_curve_view_yyxcjh on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_yyxcjh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_aqxeaj on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_aqxeaj.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_gqpnzh on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_gqpnzh.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_mdjexo on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_mdjexo.id
left join procedure.holdinguse_view procedure_holdinguse_view_begxsj on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_begxsj.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_pfvoyr on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_pfvoyr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_nggrdd.*) as aircraftcategory
  from master_join master_join_ospoxu
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_nggrdd on master_join_ospoxu.target_id = shared_aircraftcharacteristic_lat_nggrdd.id
  where master_join_ospoxu.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_qysowr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ywpdps.*) as designsurface
  from master_join master_join_zrvlii
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ywpdps on master_join_zrvlii.target_id = shared_obstacleassessmentarea_lat_ywpdps.id
  where master_join_zrvlii.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_gmvxev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jxhcnk.*) AS annotation
  from master_join master_join_edtrhg
  join notes.note_view notes_note_lat_jxhcnk on master_join_edtrhg.target_id = notes_note_lat_jxhcnk.id
  where master_join_edtrhg.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_yjuvcw on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_bpixys.title as varchar), '(' || organisation_organisationauthority_pt_bpixys.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_bpixys.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_lqxhyn.title as varchar), '(' || airspace_airspace_pt_lqxhyn.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_lqxhyn.href AS assignedairspace_href,
    notes_note_view_gnilyn.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_bpixys on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_bpixys.id
left join airspace.airspace_pt airspace_airspace_pt_lqxhyn on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_lqxhyn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zaiuvk.*) AS annotation
  from master_join master_join_gtebkc
  join notes.note_view notes_note_lat_zaiuvk on master_join_gtebkc.target_id = notes_note_lat_zaiuvk.id
  where master_join_gtebkc.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_gnilyn on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_nbhukd.geom AS location_geom,
    geometry_elevatedpoint_view_nbhukd.longitude AS location_longitude,
    geometry_elevatedpoint_view_nbhukd.latitude AS location_latitude,
    geometry_elevatedpoint_view_nbhukd.elevation AS location_elevation,
    geometry_elevatedpoint_view_nbhukd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nbhukd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nbhukd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nbhukd.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_yaeilr.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_vuslry.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_belrev.availability as availability,
    notes_note_view_soxrvn.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nbhukd on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_nbhukd.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vuidmm.*) as authority
  from master_join master_join_voxqwq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_vuidmm on master_join_voxqwq.target_id = navaids_points_authorityfornavaidequipment_lat_vuidmm.id
  where master_join_voxqwq.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_yaeilr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zldcul.*) as monitoring
  from master_join master_join_amnolj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zldcul on master_join_amnolj.target_id = navaids_points_navaidequipmentmonitoring_lat_zldcul.id
  where master_join_amnolj.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_vuslry on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_tyeyqx.*) as availability
  from master_join master_join_hfkxqk
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_tyeyqx on master_join_hfkxqk.target_id = navaids_points_navaidoperationalstatus_lat_tyeyqx.id
  where master_join_hfkxqk.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_belrev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_melotj.*) AS annotation
  from master_join master_join_qefgme
  join notes.note_view notes_note_lat_melotj on master_join_qefgme.target_id = notes_note_lat_melotj.id
  where master_join_qefgme.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_soxrvn on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_lczfwn.title as varchar), '(' || navaids_points_designatedpoint_pt_lczfwn.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_lczfwn.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dycohu.title as varchar), '(' || navaids_points_navaid_pt_dycohu.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_dycohu.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ybodrg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ybodrg.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_ybodrg.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hcydia.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hcydia.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hcydia.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bhjbxj.title as varchar), '(' || airport_heliport_airportheliport_pt_bhjbxj.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_bhjbxj.href AS locationairportreferencepoint_href,
    geometry_point_view_arwbzt.geom AS locationposition_geom,
    geometry_point_view_arwbzt.longitude AS locationposition_longitude,
    geometry_point_view_arwbzt.latitude AS locationposition_latitude,
    geometry_point_view_arwbzt.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_coxngz.*) AS applicablerouteportion,
    notes_note_view_lftfxt.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lczfwn on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lczfwn.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dycohu on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_dycohu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ybodrg on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ybodrg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hcydia on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hcydia.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bhjbxj on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_bhjbxj.id
left join geometry.point_view geometry_point_view_arwbzt on routes.changeoverpoint_ts.location_position_id = geometry_point_view_arwbzt.id
left join routes.routeportion_view routes_routeportion_view_coxngz on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_coxngz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ypypzo.*) AS annotation
  from master_join master_join_omxuau
  join notes.note_view notes_note_lat_ypypzo on master_join_omxuau.target_id = notes_note_lat_ypypzo.id
  where master_join_omxuau.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_lftfxt on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_gsizfr.geom AS position_geom,
    geometry_elevatedpoint_view_gsizfr.longitude AS position_longitude,
    geometry_elevatedpoint_view_gsizfr.latitude AS position_latitude,
    geometry_elevatedpoint_view_gsizfr.elevation AS position_elevation,
    geometry_elevatedpoint_view_gsizfr.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_gsizfr.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_gsizfr.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_gsizfr.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_sdddzk.title as varchar), '(' || airport_heliport_airportheliport_pt_sdddzk.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_sdddzk.href AS airportheliport_href,
    notes_note_view_tlgbmk.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gsizfr on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_gsizfr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sdddzk on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_sdddzk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sfdruq.*) AS annotation
  from master_join master_join_tuenpy
  join notes.note_view notes_note_lat_sfdruq on master_join_tuenpy.target_id = notes_note_lat_sfdruq.id
  where master_join_tuenpy.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_tlgbmk on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_crubzb.geom AS position_geom,
    geometry_elevatedpoint_view_crubzb.longitude AS position_longitude,
    geometry_elevatedpoint_view_crubzb.latitude AS position_latitude,
    geometry_elevatedpoint_view_crubzb.elevation AS position_elevation,
    geometry_elevatedpoint_view_crubzb.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_crubzb.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_crubzb.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_crubzb.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_acdmcr.title as varchar), '(' || airport_heliport_airportheliport_pt_acdmcr.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_acdmcr.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_xbwbuw.title as varchar), '(' || navaids_points_vor_pt_xbwbuw.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_xbwbuw.href AS checkpointfacility_href,
    notes_note_view_vlguoz.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_crubzb on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_crubzb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_acdmcr on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_acdmcr.id
left join navaids_points.vor_pt navaids_points_vor_pt_xbwbuw on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_xbwbuw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jwoych.*) AS annotation
  from master_join master_join_kzaukg
  join notes.note_view notes_note_lat_jwoych on master_join_kzaukg.target_id = notes_note_lat_jwoych.id
  where master_join_kzaukg.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_vlguoz on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['geometry.surface_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.approachcondition_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_kiltkt.geom AS extent_geom,
    geometry_surface_view_kiltkt.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_safmaq.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_safmaq.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_safmaq.href AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_ebltrg.*) AS aircraftcategory,
    procedure_approachcondition_view_usyqkn.condition as condition,
    shared_obstacleassessmentarea_view_jdakyy.designsurface as designsurface,
    notes_note_view_clljoo.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_kiltkt on public.circlingarea_ts.extent_id = geometry_surface_view_kiltkt.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_safmaq on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_safmaq.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_ebltrg on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_ebltrg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_zttlwj.*) as condition
  from master_join master_join_mfetfs
  join procedure.approachcondition_view procedure_approachcondition_lat_zttlwj on master_join_mfetfs.target_id = procedure_approachcondition_lat_zttlwj.id
  where master_join_mfetfs.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_usyqkn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_gpngsr.*) as designsurface
  from master_join master_join_ywyooi
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_gpngsr on master_join_ywyooi.target_id = shared_obstacleassessmentarea_lat_gpngsr.id
  where master_join_ywyooi.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_jdakyy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_esetak.*) AS annotation
  from master_join master_join_ugybji
  join notes.note_view notes_note_lat_esetak on master_join_ugybji.target_id = notes_note_lat_esetak.id
  where master_join_ugybji.source_id = public.circlingarea_ts.id
) as notes_note_view_clljoo on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_sddjuk.title as varchar), '(' || airport_heliport_deicingarea_pt_sddjuk.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_sddjuk.href AS markeddeicingarea_href,
    airport_heliport_markingelement_view_gxkjod.element as element,
    notes_note_view_rhinjp.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_sddjuk on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_sddjuk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pdvhyw.*) as element
  from master_join master_join_dndlbs
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_pdvhyw on master_join_dndlbs.target_id = airport_heliport_markingelement_lat_pdvhyw.id
  where master_join_dndlbs.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_gxkjod on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_phfoyi.*) AS annotation
  from master_join master_join_oidqlv
  join notes.note_view notes_note_lat_phfoyi on master_join_oidqlv.target_id = notes_note_lat_phfoyi.id
  where master_join_oidqlv.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_rhinjp on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_pfgnri.title as varchar), '(' || airport_heliport_apron_pt_pfgnri.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_pfgnri.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_abgkac.title as varchar), '(' || airport_heliport_taxiway_pt_abgkac.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_abgkac.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_pwmfmk.title as varchar), '(' || airport_heliport_aircraftstand_pt_pwmfmk.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_pwmfmk.href AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qsrwgk.*) AS surfaceproperties,
    geometry_elevatedsurface_view_qlhabh.geom AS extent_geom,
    geometry_elevatedsurface_view_qlhabh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qlhabh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qlhabh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qlhabh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qlhabh.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ffwgqo.annotation as annotation,
    airport_heliport_apronareaavailability_view_fjerpq.availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_pfgnri on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_pfgnri.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_abgkac on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_abgkac.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_pwmfmk on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_pwmfmk.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qsrwgk on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qsrwgk.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qlhabh on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_qlhabh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hjmgpg.*) AS annotation
  from master_join master_join_zdsfgx
  join notes.note_view notes_note_lat_hjmgpg on master_join_zdsfgx.target_id = notes_note_lat_hjmgpg.id
  where master_join_zdsfgx.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_ffwgqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_chmmmm.*) as availability
  from master_join master_join_qqjlmf
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_chmmmm on master_join_qqjlmf.target_id = airport_heliport_apronareaavailability_lat_chmmmm.id
  where master_join_qqjlmf.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_fjerpq on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hbxefw.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tqwidg.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vqvxjv.*) AS arccentre,
    geometry_curve_view_jwmflg.geom AS trajectory_geom,
    geometry_curve_view_jwmflg.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ldyxjn.title as varchar), '(' || navaids_points_angleindication_pt_ldyxjn.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_ldyxjn.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_shcsla.title as varchar), '(' || navaids_points_distanceindication_pt_shcsla.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_shcsla.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_zysvxw.*) AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_mqlugw.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_mqlugw.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_mqlugw.href AS departure_href,
    shared_aircraftcharacteristic_view_kciwmt.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_ishswd.designsurface as designsurface,
    notes_note_view_pldboh.annotation as annotation,
    procedure_departurearrivalcondition_view_vjbcqw.condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hbxefw on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_hbxefw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tqwidg on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_tqwidg.id
left join geometry.curve_view geometry_curve_view_jwmflg on procedure.departureleg_ts.trajectory_id = geometry_curve_view_jwmflg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vqvxjv on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_vqvxjv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ldyxjn on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_ldyxjn.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_shcsla on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_shcsla.id
left join procedure.holdinguse_view procedure_holdinguse_view_zysvxw on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_zysvxw.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_mqlugw on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_mqlugw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_wzdfyn.*) as aircraftcategory
  from master_join master_join_kyvllm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_wzdfyn on master_join_kyvllm.target_id = shared_aircraftcharacteristic_lat_wzdfyn.id
  where master_join_kyvllm.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_kciwmt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_njdjro.*) as designsurface
  from master_join master_join_qyyjzd
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_njdjro on master_join_qyyjzd.target_id = shared_obstacleassessmentarea_lat_njdjro.id
  where master_join_qyyjzd.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_ishswd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_igvlab.*) AS annotation
  from master_join master_join_colvlr
  join notes.note_view notes_note_lat_igvlab on master_join_colvlr.target_id = notes_note_lat_igvlab.id
  where master_join_colvlr.source_id = procedure.departureleg_ts.id
) as notes_note_view_pldboh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_qtsjky.*) as condition
  from master_join master_join_kouwah
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_qtsjky on master_join_kouwah.target_id = procedure_departurearrivalcondition_lat_qtsjky.id
  where master_join_kouwah.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_vjbcqw on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_upnshj.geom AS location_geom,
    geometry_point_view_upnshj.longitude AS location_longitude,
    geometry_point_view_upnshj.latitude AS location_latitude,
    geometry_point_view_upnshj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zltaor.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zltaor.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_zltaor.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jkhptq.title as varchar), '(' || airport_heliport_airportheliport_pt_jkhptq.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_jkhptq.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bykqza.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bykqza.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bykqza.href AS runwaypoint_href,
    notes_note_view_cjmwjf.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_upnshj on navaids_points.designatedpoint_ts.location_id = geometry_point_view_upnshj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zltaor on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_zltaor.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jkhptq on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_jkhptq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bykqza on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bykqza.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkihqb.*) AS annotation
  from master_join master_join_uglarw
  join notes.note_view notes_note_lat_lkihqb on master_join_uglarw.target_id = notes_note_lat_lkihqb.id
  where master_join_uglarw.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_cjmwjf on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_awgyfk.geom AS location_geom,
    geometry_elevatedpoint_view_awgyfk.longitude AS location_longitude,
    geometry_elevatedpoint_view_awgyfk.latitude AS location_latitude,
    geometry_elevatedpoint_view_awgyfk.elevation AS location_elevation,
    geometry_elevatedpoint_view_awgyfk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_awgyfk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_awgyfk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_awgyfk.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_vlxyfx.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_oknifk.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_twbipl.availability as availability,
    notes_note_view_kqcwxh.annotation as annotation,
    service_informationservice_pt_otbkdy.informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_awgyfk on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_awgyfk.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lnxehy.*) as authority
  from master_join master_join_vzoaza
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lnxehy on master_join_vzoaza.target_id = navaids_points_authorityfornavaidequipment_lat_lnxehy.id
  where master_join_vzoaza.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_vlxyfx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vnfdoe.*) as monitoring
  from master_join master_join_prtcpz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vnfdoe on master_join_prtcpz.target_id = navaids_points_navaidequipmentmonitoring_lat_vnfdoe.id
  where master_join_prtcpz.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_oknifk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ksjsbx.*) as availability
  from master_join master_join_ellpwu
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ksjsbx on master_join_ellpwu.target_id = navaids_points_navaidoperationalstatus_lat_ksjsbx.id
  where master_join_ellpwu.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_twbipl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_deinuf.*) AS annotation
  from master_join master_join_zihvvy
  join notes.note_view notes_note_lat_deinuf on master_join_zihvvy.target_id = notes_note_lat_deinuf.id
  where master_join_zihvvy.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_kqcwxh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_osbgah.id,
      'title', coalesce(cast(service_informationservice_lat_osbgah.title AS varchar), '(' || service_informationservice_lat_osbgah.nilreason[1] || ')'),
      'href', service_informationservice_lat_osbgah.href
  )) as informationprovision  from master_join master_join_gcwart
  join service.informationservice_pt service_informationservice_lat_osbgah on master_join_gcwart.target_id = service_informationservice_lat_osbgah.id
  where master_join_gcwart.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_otbkdy on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_dpwzrc.title as varchar), '(' || navaids_points_designatedpoint_pt_dpwzrc.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_dpwzrc.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ikuzps.title as varchar), '(' || navaids_points_designatedpoint_pt_ikuzps.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ikuzps.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xtfnds.title as varchar), '(' || navaids_points_navaid_pt_xtfnds.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_xtfnds.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tyamjq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tyamjq.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_tyamjq.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zzkhti.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zzkhti.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zzkhti.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aaigdc.title as varchar), '(' || airport_heliport_airportheliport_pt_aaigdc.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_aaigdc.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_kxwhmk.geom AS pointchoiceposition_geom,
    geometry_point_view_kxwhmk.longitude AS pointchoiceposition_longitude,
    geometry_point_view_kxwhmk.latitude AS pointchoiceposition_latitude,
    geometry_point_view_kxwhmk.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_hxgdbg.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dpwzrc on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_dpwzrc.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ikuzps on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ikuzps.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xtfnds on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_xtfnds.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tyamjq on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tyamjq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zzkhti on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zzkhti.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aaigdc on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_aaigdc.id
left join geometry.point_view geometry_point_view_kxwhmk on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_kxwhmk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bpekrr.*) AS annotation
  from master_join master_join_xakjwr
  join notes.note_view notes_note_lat_bpekrr on master_join_xakjwr.target_id = notes_note_lat_bpekrr.id
  where master_join_xakjwr.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_hxgdbg on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_mylpwx.geom AS location_geom,
    geometry_elevatedpoint_view_mylpwx.longitude AS location_longitude,
    geometry_elevatedpoint_view_mylpwx.latitude AS location_latitude,
    geometry_elevatedpoint_view_mylpwx.elevation AS location_elevation,
    geometry_elevatedpoint_view_mylpwx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mylpwx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mylpwx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mylpwx.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_crdzge.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_mkdfzx.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_nvzkzq.availability as availability,
    notes_note_view_rhnphk.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mylpwx on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_mylpwx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lzyctu.*) as authority
  from master_join master_join_ayqfzm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lzyctu on master_join_ayqfzm.target_id = navaids_points_authorityfornavaidequipment_lat_lzyctu.id
  where master_join_ayqfzm.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_crdzge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ialitl.*) as monitoring
  from master_join master_join_jcmzuw
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ialitl on master_join_jcmzuw.target_id = navaids_points_navaidequipmentmonitoring_lat_ialitl.id
  where master_join_jcmzuw.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mkdfzx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_eyhpuu.*) as availability
  from master_join master_join_gjinqy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_eyhpuu on master_join_gjinqy.target_id = navaids_points_navaidoperationalstatus_lat_eyhpuu.id
  where master_join_gjinqy.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_nvzkzq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwbxnc.*) AS annotation
  from master_join master_join_bijyso
  join notes.note_view notes_note_lat_pwbxnc on master_join_bijyso.target_id = notes_note_lat_pwbxnc.id
  where master_join_bijyso.source_id = navaids_points.dme_ts.id
) as notes_note_view_rhnphk on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_gwngzu.geom AS location_geom,
    geometry_elevatedpoint_view_gwngzu.longitude AS location_longitude,
    geometry_elevatedpoint_view_gwngzu.latitude AS location_latitude,
    geometry_elevatedpoint_view_gwngzu.elevation AS location_elevation,
    geometry_elevatedpoint_view_gwngzu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gwngzu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gwngzu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gwngzu.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_yvjnhf.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_mewgkk.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_bvocfn.availability as availability,
    notes_note_view_bezqrl.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gwngzu on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_gwngzu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aeuiiw.*) as authority
  from master_join master_join_bfkemo
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_aeuiiw on master_join_bfkemo.target_id = navaids_points_authorityfornavaidequipment_lat_aeuiiw.id
  where master_join_bfkemo.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_yvjnhf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_omvjta.*) as monitoring
  from master_join master_join_dnmkqb
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_omvjta on master_join_dnmkqb.target_id = navaids_points_navaidequipmentmonitoring_lat_omvjta.id
  where master_join_dnmkqb.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mewgkk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_aomjpk.*) as availability
  from master_join master_join_soysab
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_aomjpk on master_join_soysab.target_id = navaids_points_navaidoperationalstatus_lat_aomjpk.id
  where master_join_soysab.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_bvocfn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bmwcqy.*) AS annotation
  from master_join master_join_rwssad
  join notes.note_view notes_note_lat_bmwcqy on master_join_rwssad.target_id = notes_note_lat_bmwcqy.id
  where master_join_rwssad.source_id = navaids_points.elevation_ts.id
) as notes_note_view_bezqrl on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'public.fasdatablock_view', 'procedure.holdinguse_view', 'procedure.approachcondition_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ngfcyv.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_efciqm.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hcgkvv.*) AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sarycn.*) AS visualdescentpoint,
    geometry_curve_view_mtvkom.geom AS trajectory_geom,
    geometry_curve_view_mtvkom.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ddrqed.title as varchar), '(' || navaids_points_angleindication_pt_ddrqed.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_ddrqed.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_inangg.title as varchar), '(' || navaids_points_distanceindication_pt_inangg.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_inangg.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_unugay.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zpjaqj.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zpjaqj.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_zpjaqj.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_wlfrlc.title as varchar), '(' || navaids_points_designatedpoint_pt_wlfrlc.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_wlfrlc.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_oyllsz.title as varchar), '(' || navaids_points_navaid_pt_oyllsz.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_oyllsz.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ovinyy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ovinyy.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_ovinyy.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cqmynb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cqmynb.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cqmynb.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uyniba.title as varchar), '(' || airport_heliport_airportheliport_pt_uyniba.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_uyniba.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_ozztvv.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_ozztvv.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_ozztvv.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_ozztvv.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_kqcxll.*) AS fasdata,
    shared_aircraftcharacteristic_view_upvzbv.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_ciaaje.designsurface as designsurface,
    notes_note_view_vwurtn.annotation as annotation,
    procedure_approachcondition_view_vjzbbt.condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ngfcyv on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ngfcyv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_efciqm on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_efciqm.id
left join geometry.curve_view geometry_curve_view_mtvkom on procedure.finalleg_ts.trajectory_id = geometry_curve_view_mtvkom.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hcgkvv on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_hcgkvv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ddrqed on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_ddrqed.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_inangg on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_inangg.id
left join procedure.holdinguse_view procedure_holdinguse_view_unugay on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_unugay.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zpjaqj on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_zpjaqj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wlfrlc on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wlfrlc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_oyllsz on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_oyllsz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ovinyy on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ovinyy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cqmynb on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cqmynb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uyniba on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_uyniba.id
left join geometry.point_view geometry_point_view_ozztvv on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_ozztvv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sarycn on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_sarycn.id
left join public.fasdatablock_view public_fasdatablock_view_kqcxll on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_kqcxll.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sqqinn.*) as aircraftcategory
  from master_join master_join_mafhlt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_sqqinn on master_join_mafhlt.target_id = shared_aircraftcharacteristic_lat_sqqinn.id
  where master_join_mafhlt.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_upvzbv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hcpqjp.*) as designsurface
  from master_join master_join_pivzrs
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hcpqjp on master_join_pivzrs.target_id = shared_obstacleassessmentarea_lat_hcpqjp.id
  where master_join_pivzrs.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_ciaaje on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iutpok.*) AS annotation
  from master_join master_join_bpnnyx
  join notes.note_view notes_note_lat_iutpok on master_join_bpnnyx.target_id = notes_note_lat_iutpok.id
  where master_join_bpnnyx.source_id = procedure.finalleg_ts.id
) as notes_note_view_vwurtn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_tflkzm.*) as condition
  from master_join master_join_vyoslm
  join procedure.approachcondition_view procedure_approachcondition_lat_tflkzm on master_join_vyoslm.target_id = procedure_approachcondition_lat_tflkzm.id
  where master_join_vyoslm.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_vjzbbt on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_ejpfzj.geom AS location_geom,
    geometry_elevatedpoint_view_ejpfzj.longitude AS location_longitude,
    geometry_elevatedpoint_view_ejpfzj.latitude AS location_latitude,
    geometry_elevatedpoint_view_ejpfzj.elevation AS location_elevation,
    geometry_elevatedpoint_view_ejpfzj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ejpfzj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ejpfzj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ejpfzj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zdugac.title as varchar), '(' || organisation_unit_pt_zdugac.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_zdugac.href AS serviceprovider_href,
    service_callsigndetail_view_zmjtpr.callsign as callsign,
    service_radiocommunicationchannel_pt_czdspb.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ikokam.availability as availability,
    notes_note_view_okpvsl.annotation as annotation,
    airport_heliport_airportheliport_pt_tilgjl.airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ejpfzj on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_ejpfzj.id
left join organisation.unit_pt organisation_unit_pt_zdugac on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_zdugac.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_guosri.*) as callsign
  from master_join master_join_pixgpk
  join service.callsigndetail_view service_callsigndetail_lat_guosri on master_join_pixgpk.target_id = service_callsigndetail_lat_guosri.id
  where master_join_pixgpk.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_zmjtpr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ashisz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ashisz.title AS varchar), '(' || service_radiocommunicationchannel_lat_ashisz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ashisz.href
  )) as radiocommunication  from master_join master_join_plgzuu
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ashisz on master_join_plgzuu.target_id = service_radiocommunicationchannel_lat_ashisz.id
  where master_join_plgzuu.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_czdspb on TRUE
left join lateral(
  select
  from master_join master_join_hrglrk
  join shared.contactinformation_view shared_contactinformation_lat_xuqbek on master_join_hrglrk.target_id = shared_contactinformation_lat_xuqbek.id
  where master_join_hrglrk.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_yvjknh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bkrgvz.*) as availability
  from master_join master_join_damyyr
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bkrgvz on master_join_damyyr.target_id = service_serviceoperationalstatus_lat_bkrgvz.id
  where master_join_damyyr.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_ikokam on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_frbpzr.*) AS annotation
  from master_join master_join_bstuso
  join notes.note_view notes_note_lat_frbpzr on master_join_bstuso.target_id = notes_note_lat_frbpzr.id
  where master_join_bstuso.source_id = service.firefightingservice_ts.id
) as notes_note_view_okpvsl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ctxqzy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ctxqzy.title AS varchar), '(' || airport_heliport_airportheliport_lat_ctxqzy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ctxqzy.href
  )) as airportheliport  from master_join master_join_pqhoza
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ctxqzy on master_join_pqhoza.target_id = airport_heliport_airportheliport_lat_ctxqzy.id
  where master_join_pqhoza.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_tilgjl on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    to_jsonb(routes_flightconditioncombination_view_gireyl.*) AS flight,
    routes_flightrestrictionroute_view_zjelny.regulatedroute as regulatedroute,
    notes_note_view_hhbkkk.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_gireyl on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_gireyl.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_wheulg.*) as regulatedroute
  from master_join master_join_cgxlbg
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_wheulg on master_join_cgxlbg.target_id = routes_flightrestrictionroute_lat_wheulg.id
  where master_join_cgxlbg.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_zjelny on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nobzrf.*) AS annotation
  from master_join master_join_aomsms
  join notes.note_view notes_note_lat_nobzrf on master_join_aomsms.target_id = notes_note_lat_nobzrf.id
  where master_join_aomsms.source_id = routes.flightrestriction_ts.id
) as notes_note_view_hhbkkk on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_veiaeu.geom AS extent_geom,
    geometry_elevatedsurface_view_veiaeu.elevation AS extent_elevation,
    geometry_elevatedsurface_view_veiaeu.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_veiaeu.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_veiaeu.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_veiaeu.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_fgwppb.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_veiaeu on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_veiaeu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fyagvx.*) AS annotation
  from master_join master_join_geosrz
  join notes.note_view notes_note_lat_fyagvx on master_join_geosrz.target_id = notes_note_lat_fyagvx.id
  where master_join_geosrz.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_fgwppb on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_gdbxcu.geom AS border_geom,
    geometry_curve_view_gdbxcu.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_gsyufa.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_gdbxcu on airspace.geoborder_ts.border_id = geometry_curve_view_gdbxcu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dnnnnv.*) AS annotation
  from master_join master_join_odjgby
  join notes.note_view notes_note_lat_dnnnnv on master_join_odjgby.target_id = notes_note_lat_dnnnnv.id
  where master_join_odjgby.source_id = airspace.geoborder_ts.id
) as notes_note_view_gsyufa on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_vgnzda.geom AS location_geom,
    geometry_elevatedpoint_view_vgnzda.longitude AS location_longitude,
    geometry_elevatedpoint_view_vgnzda.latitude AS location_latitude,
    geometry_elevatedpoint_view_vgnzda.elevation AS location_elevation,
    geometry_elevatedpoint_view_vgnzda.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vgnzda.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vgnzda.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vgnzda.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_zzcozc.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_mxqjqw.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_izcyce.availability as availability,
    notes_note_view_eaczag.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vgnzda on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_vgnzda.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_oyrahb.*) as authority
  from master_join master_join_gcctsp
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_oyrahb on master_join_gcctsp.target_id = navaids_points_authorityfornavaidequipment_lat_oyrahb.id
  where master_join_gcctsp.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_zzcozc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_hqyfye.*) as monitoring
  from master_join master_join_vntgzn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_hqyfye on master_join_vntgzn.target_id = navaids_points_navaidequipmentmonitoring_lat_hqyfye.id
  where master_join_vntgzn.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mxqjqw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yvetyh.*) as availability
  from master_join master_join_zzedls
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yvetyh on master_join_zzedls.target_id = navaids_points_navaidoperationalstatus_lat_yvetyh.id
  where master_join_zzedls.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_izcyce on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukfmbg.*) AS annotation
  from master_join master_join_hsyumx
  join notes.note_view notes_note_lat_ukfmbg on master_join_hsyumx.target_id = notes_note_lat_ukfmbg.id
  where master_join_hsyumx.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_eaczag on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_vdcmer.geom AS location_geom,
    geometry_elevatedpoint_view_vdcmer.longitude AS location_longitude,
    geometry_elevatedpoint_view_vdcmer.latitude AS location_latitude,
    geometry_elevatedpoint_view_vdcmer.elevation AS location_elevation,
    geometry_elevatedpoint_view_vdcmer.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vdcmer.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vdcmer.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vdcmer.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_athmgw.title as varchar), '(' || organisation_unit_pt_athmgw.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_athmgw.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qggbxl.title as varchar), '(' || airport_heliport_airportheliport_pt_qggbxl.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_qggbxl.href AS clientairport_href,
    service_callsigndetail_view_cpekqi.callsign as callsign,
    service_radiocommunicationchannel_pt_nsekar.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_wfddks.availability as availability,
    notes_note_view_axvezg.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vdcmer on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_vdcmer.id
left join organisation.unit_pt organisation_unit_pt_athmgw on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_athmgw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qggbxl on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_qggbxl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ekiqov.*) as callsign
  from master_join master_join_oeeajd
  join service.callsigndetail_view service_callsigndetail_lat_ekiqov on master_join_oeeajd.target_id = service_callsigndetail_lat_ekiqov.id
  where master_join_oeeajd.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_cpekqi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_zybxtt.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_zybxtt.title AS varchar), '(' || service_radiocommunicationchannel_lat_zybxtt.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_zybxtt.href
  )) as radiocommunication  from master_join master_join_oyoymh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_zybxtt on master_join_oyoymh.target_id = service_radiocommunicationchannel_lat_zybxtt.id
  where master_join_oyoymh.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_nsekar on TRUE
left join lateral(
  select
  from master_join master_join_ppkfvb
  join shared.contactinformation_view shared_contactinformation_lat_aahczl on master_join_ppkfvb.target_id = shared_contactinformation_lat_aahczl.id
  where master_join_ppkfvb.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_rmswcu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_qlwtth.*) as availability
  from master_join master_join_pnfxdl
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_qlwtth on master_join_pnfxdl.target_id = service_serviceoperationalstatus_lat_qlwtth.id
  where master_join_pnfxdl.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_wfddks on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eiuayy.*) AS annotation
  from master_join master_join_mmsyxh
  join notes.note_view notes_note_lat_eiuayy on master_join_mmsyxh.target_id = notes_note_lat_eiuayy.id
  where master_join_mmsyxh.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_axvezg on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_dejvll.title as varchar), '(' || airport_heliport_guidanceline_pt_dejvll.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_dejvll.href AS lightedguidanceline_href,
    shared_lightelement_view_tegioi.element as element,
    airport_heliport_groundlightingavailability_view_uzmlqy.availability as availability,
    notes_note_view_zuahmu.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_dejvll on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_dejvll.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_qztzsj.*) as element
  from master_join master_join_tkoanx
  join shared.lightelement_view shared_lightelement_lat_qztzsj on master_join_tkoanx.target_id = shared_lightelement_lat_qztzsj.id
  where master_join_tkoanx.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_tegioi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_cljzzh.*) as availability
  from master_join master_join_cgrjky
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_cljzzh on master_join_cgrjky.target_id = airport_heliport_groundlightingavailability_lat_cljzzh.id
  where master_join_cgrjky.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_uzmlqy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_crpwbl.*) AS annotation
  from master_join master_join_ribrop
  join notes.note_view notes_note_lat_crpwbl on master_join_ribrop.target_id = notes_note_lat_crpwbl.id
  where master_join_ribrop.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_zuahmu on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_fgmqlw.title as varchar), '(' || airport_heliport_guidanceline_pt_fgmqlw.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_fgmqlw.href AS markedguidanceline_href,
    airport_heliport_markingelement_view_aqpkvc.element as element,
    notes_note_view_hnsbsp.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_fgmqlw on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_fgmqlw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wmzwkf.*) as element
  from master_join master_join_hkkrrb
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wmzwkf on master_join_hkkrrb.target_id = airport_heliport_markingelement_lat_wmzwkf.id
  where master_join_hkkrrb.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_aqpkvc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_amyspc.*) AS annotation
  from master_join master_join_iniwcz
  join notes.note_view notes_note_lat_amyspc on master_join_iniwcz.target_id = notes_note_lat_amyspc.id
  where master_join_iniwcz.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_hnsbsp on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_iadomt.geom AS extent_geom,
    geometry_elevatedcurve_view_iadomt.elevation AS extent_elevation,
    geometry_elevatedcurve_view_iadomt.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_iadomt.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_iadomt.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_iadomt.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_dhsbdf.connectedtouchdownliftoff as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_cwhuki.connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_phwyiy.connectedapron as connectedapron,
    airport_heliport_aircraftstand_pt_iedhgn.connectedstand as connectedstand,
    airport_heliport_taxiway_pt_facmbx.connectedtaxiway as connectedtaxiway,
    notes_note_view_uuaksj.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_iadomt on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_iadomt.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_gklbsz.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_gklbsz.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_gklbsz.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_gklbsz.href
  )) as connectedtouchdownliftoff  from master_join master_join_nolvuk
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_gklbsz on master_join_nolvuk.target_id = airport_heliport_touchdownliftoff_lat_gklbsz.id
  where master_join_nolvuk.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_dhsbdf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_kjqvfv.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_kjqvfv.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_kjqvfv.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_kjqvfv.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_yjpbbz
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_kjqvfv on master_join_yjpbbz.target_id = airport_heliport_runwaycentrelinepoint_lat_kjqvfv.id
  where master_join_yjpbbz.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_cwhuki on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_jhfahl.id,
      'title', coalesce(cast(airport_heliport_apron_lat_jhfahl.title AS varchar), '(' || airport_heliport_apron_lat_jhfahl.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_jhfahl.href
  )) as connectedapron  from master_join master_join_ldjprq
  join airport_heliport.apron_pt airport_heliport_apron_lat_jhfahl on master_join_ldjprq.target_id = airport_heliport_apron_lat_jhfahl.id
  where master_join_ldjprq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_phwyiy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_erjnjw.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_erjnjw.title AS varchar), '(' || airport_heliport_aircraftstand_lat_erjnjw.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_erjnjw.href
  )) as connectedstand  from master_join master_join_aadlef
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_erjnjw on master_join_aadlef.target_id = airport_heliport_aircraftstand_lat_erjnjw.id
  where master_join_aadlef.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_iedhgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_usxysz.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_usxysz.title AS varchar), '(' || airport_heliport_taxiway_lat_usxysz.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_usxysz.href
  )) as connectedtaxiway  from master_join master_join_umbydr
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_usxysz on master_join_umbydr.target_id = airport_heliport_taxiway_lat_usxysz.id
  where master_join_umbydr.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_facmbx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vtxzik.*) AS annotation
  from master_join master_join_ecpsvl
  join notes.note_view notes_note_lat_vtxzik on master_join_ecpsvl.target_id = notes_note_lat_vtxzik.id
  where master_join_ecpsvl.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_uuaksj on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_gvutnf.title as varchar), '(' || holding_unplannedholding_pt_gvutnf.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_gvutnf.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_dgwjef.title as varchar), '(' || holding_holdingpattern_pt_dgwjef.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_dgwjef.href AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_tystuh.obstacleassessment as obstacleassessment,
    notes_note_view_cpzgsf.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_gvutnf on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_gvutnf.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_dgwjef on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_dgwjef.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_yaqfog.*) as obstacleassessment
  from master_join master_join_bjqzqb
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_yaqfog on master_join_bjqzqb.target_id = shared_obstacleassessmentarea_lat_yaqfog.id
  where master_join_bjqzqb.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_tystuh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xdadsb.*) AS annotation
  from master_join master_join_izexnd
  join notes.note_view notes_note_lat_xdadsb on master_join_izexnd.target_id = notes_note_lat_xdadsb.id
  where master_join_izexnd.source_id = shared.holdingassessment_ts.id
) as notes_note_view_cpzgsf on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatterndistance_view', 'holding.holdingpatternduration_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_fphfyt.*) AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_kwecwc.*) AS outboundlegspanenddistance,
    geometry_curve_view_qhbjyc.geom AS extent_geom,
    geometry_curve_view_qhbjyc.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_eknvzk.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_fphfyt on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_fphfyt.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_kwecwc on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_kwecwc.id
left join geometry.curve_view geometry_curve_view_qhbjyc on holding.holdingpattern_ts.extent_id = geometry_curve_view_qhbjyc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqaxoj.*) AS annotation
  from master_join master_join_txksph
  join notes.note_view notes_note_lat_sqaxoj on master_join_txksph.target_id = notes_note_lat_sqaxoj.id
  where master_join_txksph.source_id = holding.holdingpattern_ts.id
) as notes_note_view_eknvzk on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['service.callsigndetail_view', 'routes.routeportion_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_lsuqpg.geom AS location_geom,
    geometry_elevatedpoint_view_lsuqpg.longitude AS location_longitude,
    geometry_elevatedpoint_view_lsuqpg.latitude AS location_latitude,
    geometry_elevatedpoint_view_lsuqpg.elevation AS location_elevation,
    geometry_elevatedpoint_view_lsuqpg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lsuqpg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lsuqpg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lsuqpg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uszlkt.title as varchar), '(' || organisation_unit_pt_uszlkt.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_uszlkt.href AS serviceprovider_href,
    service_callsigndetail_view_ivkhtq.callsign as callsign,
    service_radiocommunicationchannel_pt_ywmroe.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_jkkscq.availability as availability,
    notes_note_view_yxycwe.annotation as annotation,
    navaids_points_vor_pt_cmwwsk.navaidbroadcast as navaidbroadcast,
    airspace_airspace_pt_bivbsa.clientairspace as clientairspace,
    airport_heliport_airportheliport_pt_wzpksz.clientairport as clientairport,
    routes_routeportion_view_plxphh.clientroute as clientroute,
    holding_holdingpattern_pt_gluszi.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_biewzj.clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lsuqpg on service.informationservice_ts.location_id = geometry_elevatedpoint_view_lsuqpg.id
left join organisation.unit_pt organisation_unit_pt_uszlkt on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_uszlkt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tqgltn.*) as callsign
  from master_join master_join_dsawtt
  join service.callsigndetail_view service_callsigndetail_lat_tqgltn on master_join_dsawtt.target_id = service_callsigndetail_lat_tqgltn.id
  where master_join_dsawtt.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_ivkhtq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_dnumqm.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_dnumqm.title AS varchar), '(' || service_radiocommunicationchannel_lat_dnumqm.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_dnumqm.href
  )) as radiocommunication  from master_join master_join_fuyvlh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_dnumqm on master_join_fuyvlh.target_id = service_radiocommunicationchannel_lat_dnumqm.id
  where master_join_fuyvlh.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_ywmroe on TRUE
left join lateral(
  select
  from master_join master_join_npzrmc
  join shared.contactinformation_view shared_contactinformation_lat_sfynbg on master_join_npzrmc.target_id = shared_contactinformation_lat_sfynbg.id
  where master_join_npzrmc.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_vwfffs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_riemzw.*) as availability
  from master_join master_join_gewzgc
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_riemzw on master_join_gewzgc.target_id = service_serviceoperationalstatus_lat_riemzw.id
  where master_join_gewzgc.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_jkkscq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vdnnyo.*) AS annotation
  from master_join master_join_sqyuwo
  join notes.note_view notes_note_lat_vdnnyo on master_join_sqyuwo.target_id = notes_note_lat_vdnnyo.id
  where master_join_sqyuwo.source_id = service.informationservice_ts.id
) as notes_note_view_yxycwe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_dzoltj.id,
      'title', coalesce(cast(navaids_points_vor_lat_dzoltj.title AS varchar), '(' || navaids_points_vor_lat_dzoltj.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_dzoltj.href
  )) as navaidbroadcast  from master_join master_join_llvuub
  join navaids_points.vor_pt navaids_points_vor_lat_dzoltj on master_join_llvuub.target_id = navaids_points_vor_lat_dzoltj.id
  where master_join_llvuub.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_cmwwsk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_dexzto.id,
      'title', coalesce(cast(airspace_airspace_lat_dexzto.title AS varchar), '(' || airspace_airspace_lat_dexzto.nilreason[1] || ')'),
      'href', airspace_airspace_lat_dexzto.href
  )) as clientairspace  from master_join master_join_zyrdkd
  join airspace.airspace_pt airspace_airspace_lat_dexzto on master_join_zyrdkd.target_id = airspace_airspace_lat_dexzto.id
  where master_join_zyrdkd.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_bivbsa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_eqsizm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_eqsizm.title AS varchar), '(' || airport_heliport_airportheliport_lat_eqsizm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_eqsizm.href
  )) as clientairport  from master_join master_join_accvys
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_eqsizm on master_join_accvys.target_id = airport_heliport_airportheliport_lat_eqsizm.id
  where master_join_accvys.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_wzpksz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_kohhem.*) as clientroute
  from master_join master_join_zjrluz
  join routes.routeportion_view routes_routeportion_lat_kohhem on master_join_zjrluz.target_id = routes_routeportion_lat_kohhem.id
  where master_join_zjrluz.source_id = service.informationservice_ts.id
) as routes_routeportion_view_plxphh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_nrxbol.id,
      'title', coalesce(cast(holding_holdingpattern_lat_nrxbol.title AS varchar), '(' || holding_holdingpattern_lat_nrxbol.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_nrxbol.href
  )) as clientholding  from master_join master_join_lwnmci
  join holding.holdingpattern_pt holding_holdingpattern_lat_nrxbol on master_join_lwnmci.target_id = holding_holdingpattern_lat_nrxbol.id
  where master_join_lwnmci.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_gluszi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_dehfgt.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_dehfgt.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_dehfgt.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_dehfgt.href
  )) as clientaerialrefuelling  from master_join master_join_bbuwrx
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_dehfgt on master_join_bbuwrx.target_id = aerial_refuelling_aerialrefuelling_lat_dehfgt.id
  where master_join_bbuwrx.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_biewzj on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xnvins.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ttkism.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jgcnlq.*) AS arccentre,
    geometry_curve_view_odkemt.geom AS trajectory_geom,
    geometry_curve_view_odkemt.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ugqkrz.title as varchar), '(' || navaids_points_angleindication_pt_ugqkrz.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_ugqkrz.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_vdhklo.title as varchar), '(' || navaids_points_distanceindication_pt_vdhklo.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_vdhklo.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_pehdhy.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_bvugbz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_bvugbz.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_bvugbz.href AS approach_href,
    shared_aircraftcharacteristic_view_dvqldv.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_mubomx.designsurface as designsurface,
    notes_note_view_dgvfgk.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xnvins on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_xnvins.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ttkism on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ttkism.id
left join geometry.curve_view geometry_curve_view_odkemt on procedure.initialleg_ts.trajectory_id = geometry_curve_view_odkemt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jgcnlq on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jgcnlq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ugqkrz on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_ugqkrz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_vdhklo on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_vdhklo.id
left join procedure.holdinguse_view procedure_holdinguse_view_pehdhy on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_pehdhy.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_bvugbz on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_bvugbz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_lwhqer.*) as aircraftcategory
  from master_join master_join_cmntjt
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_lwhqer on master_join_cmntjt.target_id = shared_aircraftcharacteristic_lat_lwhqer.id
  where master_join_cmntjt.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_dvqldv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hxmhny.*) as designsurface
  from master_join master_join_nmknpy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hxmhny on master_join_nmknpy.target_id = shared_obstacleassessmentarea_lat_hxmhny.id
  where master_join_nmknpy.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_mubomx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xylssh.*) AS annotation
  from master_join master_join_opgwgr
  join notes.note_view notes_note_lat_xylssh on master_join_opgwgr.target_id = notes_note_lat_xylssh.id
  where master_join_opgwgr.source_id = procedure.initialleg_ts.id
) as notes_note_view_dgvfgk on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.finalprofile_view', 'shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.procedureavailability_view', 'notes.note_view', 'procedure.missedapproachgroup_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_iqbjfn.title as varchar), '(' || navaids_points_navaid_pt_iqbjfn.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_iqbjfn.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ppydwi.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ppydwi.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ppydwi.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_rzeedt.title as varchar), '(' || surveillance_radarsystem_pt_rzeedt.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_rzeedt.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_vkcwjk.title as varchar), '(' || procedure_safealtitudearea_pt_vkcwjk.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_vkcwjk.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_krklxi.*) AS landing,
    to_jsonb(procedure_finalprofile_view_qdslrs.*) AS finalprofile,
    procedure_procedureavailability_view_ylcpmf.availability as availability,
    airport_heliport_airportheliport_pt_caqabd.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_qgdkhf.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_ipyztl.flighttransition as flighttransition,
    notes_note_view_rxppww.annotation as annotation,
    procedure_missedapproachgroup_view_gzgohi.missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_iqbjfn on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_iqbjfn.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ppydwi on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ppydwi.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_rzeedt on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_rzeedt.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_vkcwjk on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_vkcwjk.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_krklxi on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_krklxi.id
left join procedure.finalprofile_view procedure_finalprofile_view_qdslrs on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_qdslrs.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_cjefeo.*) as availability
  from master_join master_join_mcletk
  join procedure.procedureavailability_view procedure_procedureavailability_lat_cjefeo on master_join_mcletk.target_id = procedure_procedureavailability_lat_cjefeo.id
  where master_join_mcletk.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_ylcpmf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wqhavq.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wqhavq.title AS varchar), '(' || airport_heliport_airportheliport_lat_wqhavq.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wqhavq.href
  )) as airportheliport  from master_join master_join_qadykx
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wqhavq on master_join_qadykx.target_id = airport_heliport_airportheliport_lat_wqhavq.id
  where master_join_qadykx.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_caqabd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bqukkv.*) as aircraftcharacteristic
  from master_join master_join_fceqgj
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_bqukkv on master_join_fceqgj.target_id = shared_aircraftcharacteristic_lat_bqukkv.id
  where master_join_fceqgj.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_qgdkhf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_bqhszb.*) as flighttransition
  from master_join master_join_wrgabs
  join procedure.proceduretransition_view procedure_proceduretransition_lat_bqhszb on master_join_wrgabs.target_id = procedure_proceduretransition_lat_bqhszb.id
  where master_join_wrgabs.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_ipyztl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qplqbz.*) AS annotation
  from master_join master_join_geuxxd
  join notes.note_view notes_note_lat_qplqbz on master_join_geuxxd.target_id = notes_note_lat_qplqbz.id
  where master_join_geuxxd.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_rxppww on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_pvfjib.*) as missedinstruction
  from master_join master_join_zqcdam
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_pvfjib on master_join_zqcdam.target_id = procedure_missedapproachgroup_lat_pvfjib.id
  where master_join_zqcdam.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_gzgohi on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'notes.note_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ozbdrb.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qpyngm.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jdrmwj.*) AS arccentre,
    geometry_curve_view_lvksjh.geom AS trajectory_geom,
    geometry_curve_view_lvksjh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_tbwyqj.title as varchar), '(' || navaids_points_angleindication_pt_tbwyqj.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_tbwyqj.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_imxskt.title as varchar), '(' || navaids_points_distanceindication_pt_imxskt.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_imxskt.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_nrupgv.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kjfoyf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kjfoyf.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_kjfoyf.href AS approach_href,
    shared_aircraftcharacteristic_view_ilescy.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_novipn.designsurface as designsurface,
    notes_note_view_iydort.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ozbdrb on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ozbdrb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qpyngm on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_qpyngm.id
left join geometry.curve_view geometry_curve_view_lvksjh on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_lvksjh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jdrmwj on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jdrmwj.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_tbwyqj on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_tbwyqj.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_imxskt on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_imxskt.id
left join procedure.holdinguse_view procedure_holdinguse_view_nrupgv on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_nrupgv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kjfoyf on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kjfoyf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_oqajgm.*) as aircraftcategory
  from master_join master_join_ypewzq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_oqajgm on master_join_ypewzq.target_id = shared_aircraftcharacteristic_lat_oqajgm.id
  where master_join_ypewzq.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_ilescy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_imtxqj.*) as designsurface
  from master_join master_join_qripmp
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_imtxqj on master_join_qripmp.target_id = shared_obstacleassessmentarea_lat_imtxqj.id
  where master_join_qripmp.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_novipn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ciouxl.*) AS annotation
  from master_join master_join_wfanqt
  join notes.note_view notes_note_lat_ciouxl on master_join_wfanqt.target_id = notes_note_lat_ciouxl.id
  where master_join_wfanqt.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_iydort on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_ybmbay.geom AS location_geom,
    geometry_elevatedpoint_view_ybmbay.longitude AS location_longitude,
    geometry_elevatedpoint_view_ybmbay.latitude AS location_latitude,
    geometry_elevatedpoint_view_ybmbay.elevation AS location_elevation,
    geometry_elevatedpoint_view_ybmbay.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ybmbay.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ybmbay.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ybmbay.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fpbcim.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_wccudn.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_mefuef.availability as availability,
    notes_note_view_jywlik.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ybmbay on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_ybmbay.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_wpasol.*) as authority
  from master_join master_join_rggszb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_wpasol on master_join_rggszb.target_id = navaids_points_authorityfornavaidequipment_lat_wpasol.id
  where master_join_rggszb.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_fpbcim on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_esnilb.*) as monitoring
  from master_join master_join_xgjxzk
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_esnilb on master_join_xgjxzk.target_id = navaids_points_navaidequipmentmonitoring_lat_esnilb.id
  where master_join_xgjxzk.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_wccudn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_omxrvc.*) as availability
  from master_join master_join_fcykqf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_omxrvc on master_join_fcykqf.target_id = navaids_points_navaidoperationalstatus_lat_omxrvc.id
  where master_join_fcykqf.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_mefuef on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rhwfnl.*) AS annotation
  from master_join master_join_dgfnts
  join notes.note_view notes_note_lat_rhwfnl on master_join_dgfnts.target_id = notes_note_lat_rhwfnl.id
  where master_join_dgfnts.source_id = navaids_points.localizer_ts.id
) as notes_note_view_jywlik on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_rrggug.geom AS location_geom,
    geometry_elevatedpoint_view_rrggug.longitude AS location_longitude,
    geometry_elevatedpoint_view_rrggug.latitude AS location_latitude,
    geometry_elevatedpoint_view_rrggug.elevation AS location_elevation,
    geometry_elevatedpoint_view_rrggug.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rrggug.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rrggug.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rrggug.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_oshtpy.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_wlhrwf.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_nbhrpt.availability as availability,
    notes_note_view_eilsfi.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rrggug on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_rrggug.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dyhsvy.*) as authority
  from master_join master_join_qgjgyx
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dyhsvy on master_join_qgjgyx.target_id = navaids_points_authorityfornavaidequipment_lat_dyhsvy.id
  where master_join_qgjgyx.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_oshtpy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_wfriop.*) as monitoring
  from master_join master_join_elqwre
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_wfriop on master_join_elqwre.target_id = navaids_points_navaidequipmentmonitoring_lat_wfriop.id
  where master_join_elqwre.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_wlhrwf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wgwqmy.*) as availability
  from master_join master_join_wlvjzb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wgwqmy on master_join_wlvjzb.target_id = navaids_points_navaidoperationalstatus_lat_wgwqmy.id
  where master_join_wlvjzb.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_nbhrpt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bzsakv.*) AS annotation
  from master_join master_join_nlkthg
  join notes.note_view notes_note_lat_bzsakv on master_join_nlkthg.target_id = notes_note_lat_bzsakv.id
  where master_join_nlkthg.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_eilsfi on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_whatjr.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_whatjr.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_whatjr.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_wxezft.geom AS location_geom,
    geometry_elevatedpoint_view_wxezft.longitude AS location_longitude,
    geometry_elevatedpoint_view_wxezft.latitude AS location_latitude,
    geometry_elevatedpoint_view_wxezft.elevation AS location_elevation,
    geometry_elevatedpoint_view_wxezft.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wxezft.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wxezft.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wxezft.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_drnpwq.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_whatjr on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_whatjr.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wxezft on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_wxezft.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdxxmq.*) AS annotation
  from master_join master_join_pxniee
  join notes.note_view notes_note_lat_hdxxmq on master_join_pxniee.target_id = notes_note_lat_hdxxmq.id
  where master_join_pxniee.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_drnpwq on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view', 'procedure.approachcondition_view', 'notes.note_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_magedn.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wxgdul.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bracsb.*) AS arccentre,
    geometry_curve_view_iuectj.geom AS trajectory_geom,
    geometry_curve_view_iuectj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_trivwu.title as varchar), '(' || navaids_points_angleindication_pt_trivwu.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_trivwu.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_gvuiru.title as varchar), '(' || navaids_points_distanceindication_pt_gvuiru.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_gvuiru.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_trmlwq.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_frpojb.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_frpojb.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_frpojb.href AS approach_href,
    shared_aircraftcharacteristic_view_ithrpz.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_titauc.designsurface as designsurface,
    notes_note_view_iuvbow.annotation as annotation,
    procedure_approachcondition_view_tevnfg.condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_magedn on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_magedn.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wxgdul on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_wxgdul.id
left join geometry.curve_view geometry_curve_view_iuectj on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_iuectj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bracsb on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_bracsb.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_trivwu on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_trivwu.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_gvuiru on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_gvuiru.id
left join procedure.holdinguse_view procedure_holdinguse_view_trmlwq on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_trmlwq.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_frpojb on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_frpojb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ukulwt.*) as aircraftcategory
  from master_join master_join_vexbir
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ukulwt on master_join_vexbir.target_id = shared_aircraftcharacteristic_lat_ukulwt.id
  where master_join_vexbir.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_ithrpz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_emetjl.*) as designsurface
  from master_join master_join_nftkug
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_emetjl on master_join_nftkug.target_id = shared_obstacleassessmentarea_lat_emetjl.id
  where master_join_nftkug.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_titauc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_skrqvx.*) AS annotation
  from master_join master_join_pjvtgr
  join notes.note_view notes_note_lat_skrqvx on master_join_pjvtgr.target_id = notes_note_lat_skrqvx.id
  where master_join_pjvtgr.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_iuvbow on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_xlakmj.*) as condition
  from master_join master_join_rqnvjl
  join procedure.approachcondition_view procedure_approachcondition_lat_xlakmj on master_join_rqnvjl.target_id = procedure_approachcondition_lat_xlakmj.id
  where master_join_rqnvjl.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_tevnfg on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_coskbh.geom AS location_geom,
    geometry_elevatedpoint_view_coskbh.longitude AS location_longitude,
    geometry_elevatedpoint_view_coskbh.latitude AS location_latitude,
    geometry_elevatedpoint_view_coskbh.elevation AS location_elevation,
    geometry_elevatedpoint_view_coskbh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_coskbh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_coskbh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_coskbh.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_qnjryn.touchdownliftoff as touchdownliftoff,
    navaids_points_navaidcomponent_view_atmefz.navaidequipment as navaidequipment,
    airport_heliport_runwaydirection_pt_jyxnij.runwaydirection as runwaydirection,
    airport_heliport_airportheliport_pt_zheyxg.servedairport as servedairport,
    navaids_points_navaidoperationalstatus_view_utgxdo.availability as availability,
    notes_note_view_bunzbe.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_coskbh on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_coskbh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_iwwmrz.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_iwwmrz.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_iwwmrz.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_iwwmrz.href
  )) as touchdownliftoff  from master_join master_join_iwzyid
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_iwwmrz on master_join_iwzyid.target_id = airport_heliport_touchdownliftoff_lat_iwwmrz.id
  where master_join_iwzyid.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_qnjryn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_mlijrx.*) as navaidequipment
  from master_join master_join_qbcdfc
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_mlijrx on master_join_qbcdfc.target_id = navaids_points_navaidcomponent_lat_mlijrx.id
  where master_join_qbcdfc.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_atmefz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_cyqxof.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_cyqxof.title AS varchar), '(' || airport_heliport_runwaydirection_lat_cyqxof.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_cyqxof.href
  )) as runwaydirection  from master_join master_join_vchslo
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_cyqxof on master_join_vchslo.target_id = airport_heliport_runwaydirection_lat_cyqxof.id
  where master_join_vchslo.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_jyxnij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lvohnr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lvohnr.title AS varchar), '(' || airport_heliport_airportheliport_lat_lvohnr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lvohnr.href
  )) as servedairport  from master_join master_join_cpdrnh
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lvohnr on master_join_cpdrnh.target_id = airport_heliport_airportheliport_lat_lvohnr.id
  where master_join_cpdrnh.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_zheyxg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_pwwkrf.*) as availability
  from master_join master_join_iihvps
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_pwwkrf on master_join_iihvps.target_id = navaids_points_navaidoperationalstatus_lat_pwwkrf.id
  where master_join_iihvps.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_utgxdo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ctvbmm.*) AS annotation
  from master_join master_join_bgisdm
  join notes.note_view notes_note_lat_ctvbmm on master_join_bgisdm.target_id = notes_note_lat_ctvbmm.id
  where master_join_bgisdm.source_id = navaids_points.navaid_ts.id
) as notes_note_view_bunzbe on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'shared.circlesector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    to_jsonb(shared_obstacleassessmentarea_view_uwwhbv.*) AS designsurface,
    to_jsonb(shared_circlesector_view_ysfpcd.*) AS sectordefinition,
    notes_note_view_dnhlqm.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_uwwhbv on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_uwwhbv.id
left join shared.circlesector_view shared_circlesector_view_ysfpcd on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_ysfpcd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oxladg.*) AS annotation
  from master_join master_join_icsena
  join notes.note_view notes_note_lat_oxladg on master_join_icsena.target_id = notes_note_lat_oxladg.id
  where master_join_icsena.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_dnhlqm on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['geometry.point_view', 'procedure.navigationareasector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_ccalrj.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_ccalrj.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_ccalrj.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_kyjmsb.title as varchar), '(' || navaids_points_designatedpoint_pt_kyjmsb.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_kyjmsb.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jplcam.title as varchar), '(' || navaids_points_navaid_pt_jplcam.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_jplcam.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kasthp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kasthp.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_kasthp.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_yfwdze.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_yfwdze.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_yfwdze.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rvhrhc.title as varchar), '(' || airport_heliport_airportheliport_pt_rvhrhc.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_rvhrhc.href AS centrepointairportreferencepoint_href,
    geometry_point_view_xdxoqn.geom AS centrepointposition_geom,
    geometry_point_view_xdxoqn.longitude AS centrepointposition_longitude,
    geometry_point_view_xdxoqn.latitude AS centrepointposition_latitude,
    geometry_point_view_xdxoqn.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_ldpgnj.sector as sector,
    notes_note_view_luuzyw.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_ccalrj on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_ccalrj.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_kyjmsb on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_kyjmsb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jplcam on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_jplcam.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kasthp on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kasthp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_yfwdze on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_yfwdze.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rvhrhc on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_rvhrhc.id
left join geometry.point_view geometry_point_view_xdxoqn on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_xdxoqn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_qvqokx.*) as sector
  from master_join master_join_uvzjxj
  join procedure.navigationareasector_view procedure_navigationareasector_lat_qvqokx on master_join_uvzjxj.target_id = procedure_navigationareasector_lat_qvqokx.id
  where master_join_uvzjxj.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_ldpgnj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nuxyss.*) AS annotation
  from master_join master_join_ecdvka
  join notes.note_view notes_note_lat_nuxyss on master_join_ecdvka.target_id = notes_note_lat_nuxyss.id
  where master_join_ecdvka.source_id = procedure.navigationarea_ts.id
) as notes_note_view_luuzyw on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_kahtwm.geom AS location_geom,
    geometry_elevatedpoint_view_kahtwm.longitude AS location_longitude,
    geometry_elevatedpoint_view_kahtwm.latitude AS location_latitude,
    geometry_elevatedpoint_view_kahtwm.elevation AS location_elevation,
    geometry_elevatedpoint_view_kahtwm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kahtwm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kahtwm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kahtwm.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hrkxmm.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_ntnvox.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_cmxubb.availability as availability,
    notes_note_view_icqmzw.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kahtwm on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_kahtwm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ltbggq.*) as authority
  from master_join master_join_bpdini
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ltbggq on master_join_bpdini.target_id = navaids_points_authorityfornavaidequipment_lat_ltbggq.id
  where master_join_bpdini.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_hrkxmm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_jopgup.*) as monitoring
  from master_join master_join_zbiojr
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_jopgup on master_join_zbiojr.target_id = navaids_points_navaidequipmentmonitoring_lat_jopgup.id
  where master_join_zbiojr.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ntnvox on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yzgzat.*) as availability
  from master_join master_join_txoggb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yzgzat on master_join_txoggb.target_id = navaids_points_navaidoperationalstatus_lat_yzgzat.id
  where master_join_txoggb.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_cmxubb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hlvkcg.*) AS annotation
  from master_join master_join_umjqcj
  join notes.note_view notes_note_lat_hlvkcg on master_join_umjqcj.target_id = notes_note_lat_hlvkcg.id
  where master_join_umjqcj.source_id = navaids_points.ndb_ts.id
) as notes_note_view_icqmzw on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_hgtkdn.title as varchar), '(' || airport_heliport_airportheliport_pt_hgtkdn.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hgtkdn.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_cvusko.geom AS extent_geom,
    geometry_elevatedsurface_view_cvusko.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cvusko.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cvusko.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cvusko.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cvusko.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_njojni.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hgtkdn on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hgtkdn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cvusko on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_cvusko.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xwwhsq.*) AS annotation
  from master_join master_join_jufxzu
  join notes.note_view notes_note_lat_xwwhsq on master_join_jufxzu.target_id = notes_note_lat_xwwhsq.id
  where master_join_jufxzu.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_njojni on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_onzwej.title as varchar), '(' || airport_heliport_airportheliport_pt_onzwej.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_onzwej.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_fzhqqi.title as varchar), '(' || airport_heliport_runwaydirection_pt_fzhqqi.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_fzhqqi.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_llcbsr.title as varchar), '(' || organisation_organisationauthority_pt_llcbsr.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_llcbsr.href AS referenceownerorganisation_href,
    geometry_surface_view_pubrxs.geom AS surfaceextent_geom,
    geometry_surface_view_pubrxs.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_cxfbbi.obstacle as obstacle,
    notes_note_view_vzrjzd.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_onzwej on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_onzwej.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_fzhqqi on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_fzhqqi.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_llcbsr on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_llcbsr.id
left join geometry.surface_view geometry_surface_view_pubrxs on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_pubrxs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_ogujeg.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_ogujeg.title AS varchar), '(' || obstacles_verticalstructure_lat_ogujeg.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_ogujeg.href
  )) as obstacle  from master_join master_join_remkyx
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_ogujeg on master_join_remkyx.target_id = obstacles_verticalstructure_lat_ogujeg.id
  where master_join_remkyx.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_cxfbbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zdvfpa.*) AS annotation
  from master_join master_join_rypxgx
  join notes.note_view notes_note_lat_zdvfpa on master_join_rypxgx.target_id = notes_note_lat_zdvfpa.id
  where master_join_rypxgx.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_vzrjzd on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['organisation.organisationauthorityassociation_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    organisation_organisationauthorityassociation_view_twohdf.relatedorganisationauthority as relatedorganisationauthority,
    notes_note_view_ddwmji.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_argrbe
  join shared.contactinformation_view shared_contactinformation_lat_owlfqa on master_join_argrbe.target_id = shared_contactinformation_lat_owlfqa.id
  where master_join_argrbe.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_czvcew on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_vgxzmn.*) as relatedorganisationauthority
  from master_join master_join_rqwmqm
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_vgxzmn on master_join_rqwmqm.target_id = organisation_organisationauthorityassociation_lat_vgxzmn.id
  where master_join_rqwmqm.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_twohdf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjgder.*) AS annotation
  from master_join master_join_uutmqn
  join notes.note_view notes_note_lat_rjgder on master_join_uutmqn.target_id = notes_note_lat_rjgder.id
  where master_join_uutmqn.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_ddwmji on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_wiwhgy.geom AS extent_geom,
    geometry_elevatedsurface_view_wiwhgy.elevation AS extent_elevation,
    geometry_elevatedsurface_view_wiwhgy.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_wiwhgy.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_wiwhgy.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_wiwhgy.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_ojqaux.associatedstand as associatedstand,
    notes_note_view_nyxllk.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wiwhgy on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_wiwhgy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_hcnzrn.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_hcnzrn.title AS varchar), '(' || airport_heliport_aircraftstand_lat_hcnzrn.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_hcnzrn.href
  )) as associatedstand  from master_join master_join_doubts
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_hcnzrn on master_join_doubts.target_id = airport_heliport_aircraftstand_lat_hcnzrn.id
  where master_join_doubts.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_ojqaux on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwbyml.*) AS annotation
  from master_join master_join_lsdkgx
  join notes.note_view notes_note_lat_nwbyml on master_join_lsdkgx.target_id = notes_note_lat_nwbyml.id
  where master_join_lsdkgx.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_nyxllk on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_mepazg.geom AS location_geom,
    geometry_elevatedpoint_view_mepazg.longitude AS location_longitude,
    geometry_elevatedpoint_view_mepazg.latitude AS location_latitude,
    geometry_elevatedpoint_view_mepazg.elevation AS location_elevation,
    geometry_elevatedpoint_view_mepazg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mepazg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mepazg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mepazg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ftuakn.title as varchar), '(' || organisation_unit_pt_ftuakn.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_ftuakn.href AS serviceprovider_href,
    service_callsigndetail_view_spnnrs.callsign as callsign,
    service_radiocommunicationchannel_pt_xbpzpa.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_emjljf.availability as availability,
    notes_note_view_wtexgd.annotation as annotation,
    airport_heliport_airportheliport_pt_goxikx.airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mepazg on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_mepazg.id
left join organisation.unit_pt organisation_unit_pt_ftuakn on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_ftuakn.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_qaofii.*) as callsign
  from master_join master_join_katoip
  join service.callsigndetail_view service_callsigndetail_lat_qaofii on master_join_katoip.target_id = service_callsigndetail_lat_qaofii.id
  where master_join_katoip.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_spnnrs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_hmoodw.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_hmoodw.title AS varchar), '(' || service_radiocommunicationchannel_lat_hmoodw.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_hmoodw.href
  )) as radiocommunication  from master_join master_join_buhrlw
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_hmoodw on master_join_buhrlw.target_id = service_radiocommunicationchannel_lat_hmoodw.id
  where master_join_buhrlw.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_xbpzpa on TRUE
left join lateral(
  select
  from master_join master_join_uekouj
  join shared.contactinformation_view shared_contactinformation_lat_hikftb on master_join_uekouj.target_id = shared_contactinformation_lat_hikftb.id
  where master_join_uekouj.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_qhhxjm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_sxwoge.*) as availability
  from master_join master_join_rpeyrh
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_sxwoge on master_join_rpeyrh.target_id = service_serviceoperationalstatus_lat_sxwoge.id
  where master_join_rpeyrh.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_emjljf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fstnko.*) AS annotation
  from master_join master_join_ciryhd
  join notes.note_view notes_note_lat_fstnko on master_join_ciryhd.target_id = notes_note_lat_fstnko.id
  where master_join_ciryhd.source_id = service.passengerservice_ts.id
) as notes_note_view_wtexgd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lejzqi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lejzqi.title AS varchar), '(' || airport_heliport_airportheliport_lat_lejzqi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lejzqi.href
  )) as airportheliport  from master_join master_join_dsbgmn
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lejzqi on master_join_dsbgmn.target_id = airport_heliport_airportheliport_lat_lejzqi.id
  where master_join_dsbgmn.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_goxikx on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    airport_heliport_lightactivation_view_nmfjje.controlledlightintensity as controlledlightintensity,
    notes_note_view_hiodwi.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_zpfqiu.*) as controlledlightintensity
  from master_join master_join_hlujkb
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_zpfqiu on master_join_hlujkb.target_id = airport_heliport_lightactivation_lat_zpfqiu.id
  where master_join_hlujkb.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_nmfjje on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjbxro.*) AS annotation
  from master_join master_join_mzfqbh
  join notes.note_view notes_note_lat_rjbxro on master_join_mzfqbh.target_id = notes_note_lat_rjbxro.id
  where master_join_mzfqbh.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_hiodwi on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.reflector_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_bnbrem.geom AS location_geom,
    geometry_elevatedpoint_view_bnbrem.longitude AS location_longitude,
    geometry_elevatedpoint_view_bnbrem.latitude AS location_latitude,
    geometry_elevatedpoint_view_bnbrem.elevation AS location_elevation,
    geometry_elevatedpoint_view_bnbrem.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bnbrem.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bnbrem.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bnbrem.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_awzoqj.annotation as annotation,
    surveillance_reflector_view_qmewgw.reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bnbrem on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_bnbrem.id
left join lateral(
  select
  from master_join master_join_isoogz
  join shared.contactinformation_view shared_contactinformation_lat_owfidj on master_join_isoogz.target_id = shared_contactinformation_lat_owfidj.id
  where master_join_isoogz.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_icnaew on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tarpmu.*) AS annotation
  from master_join master_join_fafkus
  join notes.note_view notes_note_lat_tarpmu on master_join_fafkus.target_id = notes_note_lat_tarpmu.id
  where master_join_fafkus.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_awzoqj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_kqaamf.*) as reflector
  from master_join master_join_txxrse
  join surveillance.reflector_view surveillance_reflector_lat_kqaamf on master_join_txxrse.target_id = surveillance_reflector_lat_kqaamf.id
  where master_join_txxrse.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_qmewgw on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_xwzbfe.geom AS location_geom,
    geometry_elevatedpoint_view_xwzbfe.longitude AS location_longitude,
    geometry_elevatedpoint_view_xwzbfe.latitude AS location_latitude,
    geometry_elevatedpoint_view_xwzbfe.elevation AS location_elevation,
    geometry_elevatedpoint_view_xwzbfe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xwzbfe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xwzbfe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xwzbfe.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_exftgf.annotation as annotation,
    surveillance_surveillancegroundstation_view_hlufse.groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xwzbfe on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_xwzbfe.id
left join lateral(
  select
  from master_join master_join_leqszu
  join shared.contactinformation_view shared_contactinformation_lat_aoeozk on master_join_leqszu.target_id = shared_contactinformation_lat_aoeozk.id
  where master_join_leqszu.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_bvgwkp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kvtxhi.*) AS annotation
  from master_join master_join_wczphc
  join notes.note_view notes_note_lat_kvtxhi on master_join_wczphc.target_id = notes_note_lat_kvtxhi.id
  where master_join_wczphc.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_exftgf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_xinwhd.*) as groundstation
  from master_join master_join_gebtza
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_xinwhd on master_join_gebtza.target_id = surveillance_surveillancegroundstation_lat_xinwhd.id
  where master_join_gebtza.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_hlufse on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_gprloz.title as varchar), '(' || navaids_points_dme_pt_gprloz.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_gprloz.href AS dme_href,
    notes_note_view_ghaltz.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_gprloz on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_gprloz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_demmnz.*) AS annotation
  from master_join master_join_bosbsi
  join notes.note_view notes_note_lat_demmnz on master_join_bosbsi.target_id = notes_note_lat_demmnz.id
  where master_join_bosbsi.source_id = procedure.proceduredme_ts.id
) as notes_note_view_ghaltz on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_essvhh.title as varchar), '(' || airport_heliport_airportheliport_pt_essvhh.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_essvhh.href AS airportheliport_href,
    geometry_elevatedpoint_view_pomxoj.geom AS location_geom,
    geometry_elevatedpoint_view_pomxoj.longitude AS location_longitude,
    geometry_elevatedpoint_view_pomxoj.latitude AS location_latitude,
    geometry_elevatedpoint_view_pomxoj.elevation AS location_elevation,
    geometry_elevatedpoint_view_pomxoj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pomxoj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pomxoj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pomxoj.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_vxzmdf.radarequipment as radarequipment,
    organisation_organisationauthority_pt_pfjais.office as office,
    airport_heliport_runway_pt_qoqhly.parrunway as parrunway,
    notes_note_view_hoqjvr.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_essvhh on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_essvhh.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pomxoj on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_pomxoj.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_wpgzbg.*) as radarequipment
  from master_join master_join_xlxtgw
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_wpgzbg on master_join_xlxtgw.target_id = surveillance_radarcomponent_lat_wpgzbg.id
  where master_join_xlxtgw.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_vxzmdf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_helbia.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_helbia.title AS varchar), '(' || organisation_organisationauthority_lat_helbia.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_helbia.href
  )) as office  from master_join master_join_gtqpie
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_helbia on master_join_gtqpie.target_id = organisation_organisationauthority_lat_helbia.id
  where master_join_gtqpie.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_pfjais on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_zrdoxg.id,
      'title', coalesce(cast(airport_heliport_runway_lat_zrdoxg.title AS varchar), '(' || airport_heliport_runway_lat_zrdoxg.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_zrdoxg.href
  )) as parrunway  from master_join master_join_ridbvg
  join airport_heliport.runway_pt airport_heliport_runway_lat_zrdoxg on master_join_ridbvg.target_id = airport_heliport_runway_lat_zrdoxg.id
  where master_join_ridbvg.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_qoqhly on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vwadow.*) AS annotation
  from master_join master_join_vxciou
  join notes.note_view notes_note_lat_vwadow on master_join_vxciou.target_id = notes_note_lat_vwadow.id
  where master_join_vxciou.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_hoqjvr on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    geometry_elevatedpoint_view_zqrcgp.geom as location_geom,
    geometry_elevatedpoint_view_zqrcgp.attr as location,
    service_radiocommunicationoperationalstatus_view_ylnetb.availability as availability,
    notes_note_view_vgvfkj.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_jhylmz.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_jhylmz.id,
      'longitude', geometry_elevatedpoint_lat_jhylmz.longitude,
      'latitude', geometry_elevatedpoint_lat_jhylmz.latitude,
      'elevation', geometry_elevatedpoint_lat_jhylmz.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_jhylmz.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_jhylmz.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_jhylmz.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_jhylmz.horizontalAccuracy
    )) AS attr
  from master_join master_join_rtgeup
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_jhylmz on master_join_rtgeup.target_id = geometry_elevatedpoint_lat_jhylmz.id
  where master_join_rtgeup.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_zqrcgp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_gumkdz.*) as availability
  from master_join master_join_atkswa
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_gumkdz on master_join_atkswa.target_id = service_radiocommunicationoperationalstatus_lat_gumkdz.id
  where master_join_atkswa.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_ylnetb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jjtfrk.*) AS annotation
  from master_join master_join_mwyjge
  join notes.note_view notes_note_lat_jjtfrk on master_join_mwyjge.target_id = notes_note_lat_jjtfrk.id
  where master_join_mwyjge.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_vgvfkj on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['geometry.surface_view', 'shared.circlesector_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_jkjvue.title as varchar), '(' || service_radiocommunicationchannel_pt_jkjvue.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_jkjvue.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_bqpaij.title as varchar), '(' || navaids_points_specialnavigationstation_pt_bqpaij.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_bqpaij.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_utrqoy.title as varchar), '(' || surveillance_precisionapproachradar_pt_utrqoy.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_utrqoy.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_eoqxjb.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_eoqxjb.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_eoqxjb.href AS equipmentradar_href,
    shared_circlesector_view_scuyts.sector as sector,
    geometry_surface_view_ppaeet.geom as extent_geom,
    geometry_surface_view_ppaeet.attr as extent,
    notes_note_view_etcemh.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jkjvue on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_jkjvue.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_bqpaij on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_bqpaij.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_utrqoy on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_utrqoy.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_eoqxjb on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_eoqxjb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_ovhqtm.*) as sector
  from master_join master_join_wvrgrt
  join shared.circlesector_view shared_circlesector_lat_ovhqtm on master_join_wvrgrt.target_id = shared_circlesector_lat_ovhqtm.id
  where master_join_wvrgrt.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_scuyts on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_ejchox.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_ejchox.id,
      'horizontalAccuracy', geometry_surface_lat_ejchox.horizontalAccuracy
    )) AS attr
  from master_join master_join_grlwku
  join geometry.surface_view geometry_surface_lat_ejchox on master_join_grlwku.target_id = geometry_surface_lat_ejchox.id
  where master_join_grlwku.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_ppaeet on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lysxvm.*) AS annotation
  from master_join master_join_aqvjco
  join notes.note_view notes_note_lat_lysxvm on master_join_aqvjco.target_id = notes_note_lat_lysxvm.id
  where master_join_aqvjco.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_etcemh on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_sfeghr.title as varchar), '(' || airport_heliport_airportheliport_pt_sfeghr.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_sfeghr.href AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ogqxxn.*) AS surfaceproperties,
    geometry_elevatedsurface_view_bsdyfi.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_bsdyfi.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_bsdyfi.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_bsdyfi.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_bsdyfi.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_bsdyfi.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_nbllwl.accessiblestand as accessiblestand,
    notes_note_view_knfjfp.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sfeghr on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_sfeghr.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ogqxxn on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ogqxxn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bsdyfi on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_bsdyfi.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_godkeu.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_godkeu.title AS varchar), '(' || airport_heliport_aircraftstand_lat_godkeu.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_godkeu.href
  )) as accessiblestand  from master_join master_join_buabck
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_godkeu on master_join_buabck.target_id = airport_heliport_aircraftstand_lat_godkeu.id
  where master_join_buabck.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_nbllwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_slpukw.*) AS annotation
  from master_join master_join_zejngz
  join notes.note_view notes_note_lat_slpukw on master_join_zejngz.target_id = notes_note_lat_slpukw.id
  where master_join_zejngz.source_id = airport_heliport.road_ts.id
) as notes_note_view_knfjfp on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_bqxjwi.title as varchar), '(' || navaids_points_dme_pt_bqxjwi.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_bqxjwi.href AS referenceddme_href,
    to_jsonb(routes_routeportion_view_dudjim.*) AS applicablerouteportion,
    notes_note_view_workzx.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_bqxjwi on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_bqxjwi.id
left join routes.routeportion_view routes_routeportion_view_dudjim on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_dudjim.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pojwpf.*) AS annotation
  from master_join master_join_ybgozo
  join notes.note_view notes_note_lat_pojwpf on master_join_ybgozo.target_id = notes_note_lat_pojwpf.id
  where master_join_ybgozo.source_id = routes.routedme_ts.id
) as notes_note_view_workzx on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['geometry.curve_view', 'navaids_points.enroutesegmentpoint_view', 'shared.obstacleassessmentarea_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_fchqar.*) AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_anyzlx.*) AS end,
    coalesce(cast(routes_route_pt_xfzbfu.title as varchar), '(' || routes_route_pt_xfzbfu.nilreason[1] || ')') AS routeformed,
    routes_route_pt_xfzbfu.href AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_wrxwgo.*) AS evaluationarea,
    geometry_curve_view_eqmqxz.geom AS curveextent_geom,
    geometry_curve_view_eqmqxz.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_awgnof.availability as availability,
    notes_note_view_bzxorz.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_fchqar on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_fchqar.id
left join routes.route_pt routes_route_pt_xfzbfu on routes.routesegment_ts.routeformed_id = routes_route_pt_xfzbfu.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_wrxwgo on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_wrxwgo.id
left join geometry.curve_view geometry_curve_view_eqmqxz on routes.routesegment_ts.curveextent_id = geometry_curve_view_eqmqxz.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_anyzlx on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_anyzlx.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_tgwiib.*) as availability
  from master_join master_join_fplplt
  join routes.routeavailability_view routes_routeavailability_lat_tgwiib on master_join_fplplt.target_id = routes_routeavailability_lat_tgwiib.id
  where master_join_fplplt.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_awgnof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szpner.*) AS annotation
  from master_join master_join_nashrx
  join notes.note_view notes_note_lat_szpner on master_join_nashrx.target_id = notes_note_lat_szpner.id
  where master_join_nashrx.source_id = routes.routesegment_ts.id
) as notes_note_view_bzxorz on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_ouzqjs.title as varchar), '(' || organisation_organisationauthority_pt_ouzqjs.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_ouzqjs.href AS userorganisation_href,
    notes_note_view_idgylb.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ouzqjs on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_ouzqjs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwipud.*) AS annotation
  from master_join master_join_rhrbcq
  join notes.note_view notes_note_lat_hwipud on master_join_rhrbcq.target_id = notes_note_lat_hwipud.id
  where master_join_rhrbcq.source_id = routes.route_ts.id
) as notes_note_view_idgylb on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    airport_heliport_airportheliport_pt_kylwdn.affectedlocation as affectedlocation,
    airspace_airspace_pt_vzymxy.affectedarea as affectedarea,
    notes_note_view_pfawcg.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bfmhoi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bfmhoi.title AS varchar), '(' || airport_heliport_airportheliport_lat_bfmhoi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bfmhoi.href
  )) as affectedlocation  from master_join master_join_ezakts
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bfmhoi on master_join_ezakts.target_id = airport_heliport_airportheliport_lat_bfmhoi.id
  where master_join_ezakts.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_kylwdn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_kakzii.id,
      'title', coalesce(cast(airspace_airspace_lat_kakzii.title AS varchar), '(' || airspace_airspace_lat_kakzii.nilreason[1] || ')'),
      'href', airspace_airspace_lat_kakzii.href
  )) as affectedarea  from master_join master_join_yaogpj
  join airspace.airspace_pt airspace_airspace_lat_kakzii on master_join_yaogpj.target_id = airspace_airspace_lat_kakzii.id
  where master_join_yaogpj.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_vzymxy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjrcgj.*) AS annotation
  from master_join master_join_dbgpqx
  join notes.note_view notes_note_lat_rjrcgj on master_join_dbgpqx.target_id = notes_note_lat_rjrcgj.id
  where master_join_dbgpqx.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_pfawcg on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_oesoor.title as varchar), '(' || airport_heliport_runwaydirection_pt_oesoor.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_oesoor.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_mcuvcm.geom AS extent_geom,
    geometry_elevatedsurface_view_mcuvcm.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mcuvcm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mcuvcm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mcuvcm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mcuvcm.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nyvlts.*) AS surfaceproperties,
    notes_note_view_xtzmvg.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_oesoor on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_oesoor.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mcuvcm on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_mcuvcm.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nyvlts on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nyvlts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtruxu.*) AS annotation
  from master_join master_join_hsxyic
  join notes.note_view notes_note_lat_rtruxu on master_join_hsxyic.target_id = notes_note_lat_rtruxu.id
  where master_join_hsxyic.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_xtzmvg on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['airport_heliport.navaidequipmentdistance_view', 'airport_heliport.runwaydeclareddistance_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_vvszeu.geom AS location_geom,
    geometry_elevatedpoint_view_vvszeu.longitude AS location_longitude,
    geometry_elevatedpoint_view_vvszeu.latitude AS location_latitude,
    geometry_elevatedpoint_view_vvszeu.elevation AS location_elevation,
    geometry_elevatedpoint_view_vvszeu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vvszeu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vvszeu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vvszeu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_huhtap.title as varchar), '(' || airport_heliport_runwaydirection_pt_huhtap.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_huhtap.href AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_skcsuk.associateddeclareddistance as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_eofrqj.navaidequipment as navaidequipment,
    notes_note_view_qjdxrg.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vvszeu on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_vvszeu.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_huhtap on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_huhtap.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_fzztws.*) as associateddeclareddistance
  from master_join master_join_kddgsm
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_fzztws on master_join_kddgsm.target_id = airport_heliport_runwaydeclareddistance_lat_fzztws.id
  where master_join_kddgsm.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_skcsuk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_isbsjb.*) as navaidequipment
  from master_join master_join_rxliaq
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_isbsjb on master_join_rxliaq.target_id = airport_heliport_navaidequipmentdistance_lat_isbsjb.id
  where master_join_rxliaq.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_eofrqj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_alndta.*) AS annotation
  from master_join master_join_zwsetq
  join notes.note_view notes_note_lat_alndta on master_join_zwsetq.target_id = notes_note_lat_alndta.id
  where master_join_zwsetq.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_qjdxrg on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_vwznsf.title as varchar), '(' || airport_heliport_runwaydirection_pt_vwznsf.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_vwznsf.href AS associatedrunwaydirection_href,
    shared_lightelement_view_bivouv.element as element,
    airport_heliport_groundlightingavailability_view_qgfrml.availability as availability,
    notes_note_view_wmrhud.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vwznsf on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_vwznsf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_buefqq.*) as element
  from master_join master_join_oaxvvw
  join shared.lightelement_view shared_lightelement_lat_buefqq on master_join_oaxvvw.target_id = shared_lightelement_lat_buefqq.id
  where master_join_oaxvvw.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_bivouv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_amawpy.*) as availability
  from master_join master_join_qzincv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_amawpy on master_join_qzincv.target_id = airport_heliport_groundlightingavailability_lat_amawpy.id
  where master_join_qzincv.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qgfrml on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pvgctb.*) AS annotation
  from master_join master_join_bkbyci
  join notes.note_view notes_note_lat_pvgctb on master_join_bkbyci.target_id = notes_note_lat_pvgctb.id
  where master_join_bkbyci.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_wmrhud on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_tdjlgj.title as varchar), '(' || airport_heliport_runway_pt_tdjlgj.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_tdjlgj.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_kployp.title as varchar), '(' || airport_heliport_runwayelement_pt_kployp.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_kployp.href AS startingelement_href,
    notes_note_view_wihlbk.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_dripfx.availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_tdjlgj on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_tdjlgj.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_kployp on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_kployp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yhnwua.*) AS annotation
  from master_join master_join_sncsqq
  join notes.note_view notes_note_lat_yhnwua on master_join_sncsqq.target_id = notes_note_lat_yhnwua.id
  where master_join_sncsqq.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_wihlbk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_pjnjzh.*) as availability
  from master_join master_join_bjtgty
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_pjnjzh on master_join_bjtgty.target_id = airport_heliport_manoeuvringareaavailability_lat_pjnjzh.id
  where master_join_bjtgty.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_dripfx on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zmkpge.*) AS surfaceproperties,
    geometry_elevatedsurface_view_hfljxx.geom AS extent_geom,
    geometry_elevatedsurface_view_hfljxx.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hfljxx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hfljxx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hfljxx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hfljxx.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_onizps.associatedrunway as associatedrunway,
    notes_note_view_feeahs.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_blwsnc.availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zmkpge on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zmkpge.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hfljxx on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_hfljxx.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_dflefv.id,
      'title', coalesce(cast(airport_heliport_runway_lat_dflefv.title AS varchar), '(' || airport_heliport_runway_lat_dflefv.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_dflefv.href
  )) as associatedrunway  from master_join master_join_muskig
  join airport_heliport.runway_pt airport_heliport_runway_lat_dflefv on master_join_muskig.target_id = airport_heliport_runway_lat_dflefv.id
  where master_join_muskig.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_onizps on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oxzcyh.*) AS annotation
  from master_join master_join_mhyyxp
  join notes.note_view notes_note_lat_oxzcyh on master_join_mhyyxp.target_id = notes_note_lat_oxzcyh.id
  where master_join_mhyyxp.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_feeahs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_poqqff.*) as availability
  from master_join master_join_aiaouw
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_poqqff on master_join_aiaouw.target_id = airport_heliport_manoeuvringareaavailability_lat_poqqff.id
  where master_join_aiaouw.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_blwsnc on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_vgbmio.title as varchar), '(' || airport_heliport_runway_pt_vgbmio.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_vgbmio.href AS markedrunway_href,
    airport_heliport_markingelement_view_obsymb.element as element,
    notes_note_view_rngwnq.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_vgbmio on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_vgbmio.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_mytvam.*) as element
  from master_join master_join_upyijf
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_mytvam on master_join_upyijf.target_id = airport_heliport_markingelement_lat_mytvam.id
  where master_join_upyijf.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_obsymb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldkuhh.*) AS annotation
  from master_join master_join_aosijx
  join notes.note_view notes_note_lat_ldkuhh on master_join_aosijx.target_id = notes_note_lat_ldkuhh.id
  where master_join_aosijx.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_rngwnq on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_larktv.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_larktv.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_larktv.href AS lightedarea_href,
    shared_lightelement_view_aqkggg.element as element,
    airport_heliport_groundlightingavailability_view_mmdghx.availability as availability,
    notes_note_view_kofnrv.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_larktv on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_larktv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_nijtwj.*) as element
  from master_join master_join_ovtjea
  join shared.lightelement_view shared_lightelement_lat_nijtwj on master_join_ovtjea.target_id = shared_lightelement_lat_nijtwj.id
  where master_join_ovtjea.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_aqkggg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_lrdswf.*) as availability
  from master_join master_join_mnrflf
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_lrdswf on master_join_mnrflf.target_id = airport_heliport_groundlightingavailability_lat_lrdswf.id
  where master_join_mnrflf.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_mmdghx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ooytbc.*) AS annotation
  from master_join master_join_dtzntr
  join notes.note_view notes_note_lat_ooytbc on master_join_dtzntr.target_id = notes_note_lat_ooytbc.id
  where master_join_dtzntr.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_kofnrv on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gmvzge.*) AS surfaceproperties,
    geometry_elevatedsurface_view_tevqmc.geom AS extent_geom,
    geometry_elevatedsurface_view_tevqmc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tevqmc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tevqmc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tevqmc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tevqmc.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_pkdgzu.title as varchar), '(' || airport_heliport_runwaydirection_pt_pkdgzu.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_pkdgzu.href AS protectedrunwaydirection_href,
    notes_note_view_wisrmh.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gmvzge on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gmvzge.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tevqmc on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_tevqmc.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_pkdgzu on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_pkdgzu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zfwunc.*) AS annotation
  from master_join master_join_dredqe
  join notes.note_view notes_note_lat_zfwunc on master_join_dredqe.target_id = notes_note_lat_zfwunc.id
  where master_join_dredqe.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_wisrmh on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.runwaycontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bquhfd.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_nwbkly.title as varchar), '(' || airport_heliport_airportheliport_pt_nwbkly.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_nwbkly.href AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_kczycj.overallcontaminant as overallcontaminant,
    notes_note_view_tibbex.annotation as annotation,
    airport_heliport_runwaysectioncontamination_view_nzeekc.areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bquhfd on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bquhfd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nwbkly on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_nwbkly.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_kmmmms.*) as overallcontaminant
  from master_join master_join_tpooup
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_kmmmms on master_join_tpooup.target_id = airport_heliport_runwaycontamination_lat_kmmmms.id
  where master_join_tpooup.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_kczycj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_buurmw.*) AS annotation
  from master_join master_join_fhvxbl
  join notes.note_view notes_note_lat_buurmw on master_join_fhvxbl.target_id = notes_note_lat_buurmw.id
  where master_join_fhvxbl.source_id = airport_heliport.runway_ts.id
) as notes_note_view_tibbex on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_gspmdn.*) as areacontaminant
  from master_join master_join_hefuwl
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_gspmdn on master_join_hefuwl.target_id = airport_heliport_runwaysectioncontamination_lat_gspmdn.id
  where master_join_hefuwl.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_nzeekc on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_qenobf.geom AS location_geom,
    geometry_elevatedpoint_view_qenobf.longitude AS location_longitude,
    geometry_elevatedpoint_view_qenobf.latitude AS location_latitude,
    geometry_elevatedpoint_view_qenobf.elevation AS location_elevation,
    geometry_elevatedpoint_view_qenobf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qenobf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qenobf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qenobf.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_dmvwzo.associatedrunwaydirection as associatedrunwaydirection,
    notes_note_view_lhgpmh.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qenobf on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_qenobf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_mcgafg.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_mcgafg.title AS varchar), '(' || airport_heliport_runwaydirection_lat_mcgafg.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_mcgafg.href
  )) as associatedrunwaydirection  from master_join master_join_vddeqo
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_mcgafg on master_join_vddeqo.target_id = airport_heliport_runwaydirection_lat_mcgafg.id
  where master_join_vddeqo.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_dmvwzo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_htuvwq.*) AS annotation
  from master_join master_join_yezqxv
  join notes.note_view notes_note_lat_htuvwq on master_join_yezqxv.target_id = notes_note_lat_htuvwq.id
  where master_join_yezqxv.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_lhgpmh on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['geometry.point_view', 'procedure.safealtitudeareasector_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_uzwdqn.title as varchar), '(' || navaids_points_designatedpoint_pt_uzwdqn.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_uzwdqn.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ekcvva.title as varchar), '(' || navaids_points_navaid_pt_ekcvva.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_ekcvva.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mpqzva.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mpqzva.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_mpqzva.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zotxjb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zotxjb.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zotxjb.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ukvhuk.title as varchar), '(' || airport_heliport_airportheliport_pt_ukvhuk.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_ukvhuk.href AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_mmgqof.location as location,
    geometry_point_view_dyujvk.geom AS centrepointposition_geom,
    geometry_point_view_dyujvk.longitude AS centrepointposition_longitude,
    geometry_point_view_dyujvk.latitude AS centrepointposition_latitude,
    geometry_point_view_dyujvk.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_gllhvh.sector as sector,
    notes_note_view_lempfs.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uzwdqn on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uzwdqn.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ekcvva on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_ekcvva.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mpqzva on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mpqzva.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zotxjb on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zotxjb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ukvhuk on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ukvhuk.id
left join geometry.point_view geometry_point_view_dyujvk on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_dyujvk.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_hrvtpm.*) as sector
  from master_join master_join_dxdimm
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_hrvtpm on master_join_dxdimm.target_id = procedure_safealtitudeareasector_lat_hrvtpm.id
  where master_join_dxdimm.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_gllhvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zdzccn.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zdzccn.title AS varchar), '(' || airport_heliport_airportheliport_lat_zdzccn.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zdzccn.href
  )) as location  from master_join master_join_iydjdf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zdzccn on master_join_iydjdf.target_id = airport_heliport_airportheliport_lat_zdzccn.id
  where master_join_iydjdf.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_mmgqof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sbdaza.*) AS annotation
  from master_join master_join_swzobp
  join notes.note_view notes_note_lat_sbdaza on master_join_swzobp.target_id = notes_note_lat_sbdaza.id
  where master_join_swzobp.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_lempfs on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_lgpsxh.geom AS location_geom,
    geometry_elevatedpoint_view_lgpsxh.longitude AS location_longitude,
    geometry_elevatedpoint_view_lgpsxh.latitude AS location_latitude,
    geometry_elevatedpoint_view_lgpsxh.elevation AS location_elevation,
    geometry_elevatedpoint_view_lgpsxh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lgpsxh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lgpsxh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lgpsxh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_sosnen.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_tkxmvd.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_qfbvtk.availability as availability,
    notes_note_view_fvzemh.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lgpsxh on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_lgpsxh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aecgkk.*) as authority
  from master_join master_join_sxsyab
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_aecgkk on master_join_sxsyab.target_id = navaids_points_authorityfornavaidequipment_lat_aecgkk.id
  where master_join_sxsyab.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_sosnen on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_dgqegm.*) as monitoring
  from master_join master_join_cutgde
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_dgqegm on master_join_cutgde.target_id = navaids_points_navaidequipmentmonitoring_lat_dgqegm.id
  where master_join_cutgde.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tkxmvd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ydurbp.*) as availability
  from master_join master_join_jqfdef
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ydurbp on master_join_jqfdef.target_id = navaids_points_navaidoperationalstatus_lat_ydurbp.id
  where master_join_jqfdef.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_qfbvtk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ssqqbx.*) AS annotation
  from master_join master_join_livkoq
  join notes.note_view notes_note_lat_ssqqbx on master_join_livkoq.target_id = notes_note_lat_ssqqbx.id
  where master_join_livkoq.source_id = navaids_points.sdf_ts.id
) as notes_note_view_fvzemh on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_kebimg.geom AS extent_geom,
    geometry_elevatedsurface_view_kebimg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_kebimg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_kebimg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_kebimg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_kebimg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_fulnyn.rampsite as rampsite,
    airport_heliport_floatingdocksite_pt_ktvuaf.docksite as docksite,
    notes_note_view_zbehth.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_cabiug.availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kebimg on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_kebimg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_knhzwm.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_knhzwm.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_knhzwm.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_knhzwm.href
  )) as rampsite  from master_join master_join_keewdv
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_knhzwm on master_join_keewdv.target_id = airport_heliport_seaplanerampsite_lat_knhzwm.id
  where master_join_keewdv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_fulnyn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_jbrwqt.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_jbrwqt.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_jbrwqt.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_jbrwqt.href
  )) as docksite  from master_join master_join_ezhfvi
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_jbrwqt on master_join_ezhfvi.target_id = airport_heliport_floatingdocksite_lat_jbrwqt.id
  where master_join_ezhfvi.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_ktvuaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbruye.*) AS annotation
  from master_join master_join_adwwqq
  join notes.note_view notes_note_lat_vbruye on master_join_adwwqq.target_id = notes_note_lat_vbruye.id
  where master_join_adwwqq.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_zbehth on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_kbaxzi.*) as availability
  from master_join master_join_ygziun
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_kbaxzi on master_join_ygziun.target_id = airport_heliport_manoeuvringareaavailability_lat_kbaxzi.id
  where master_join_ygziun.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_cabiug on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_jygwrk.geom AS extent_geom,
    geometry_elevatedsurface_view_jygwrk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jygwrk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jygwrk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jygwrk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jygwrk.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_uuyeih.geom AS centreline_geom,
    geometry_elevatedcurve_view_uuyeih.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_uuyeih.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_uuyeih.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_uuyeih.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_uuyeih.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_knoxrw.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jygwrk on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_jygwrk.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_uuyeih on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_uuyeih.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_psxwvm.*) AS annotation
  from master_join master_join_vwomoi
  join notes.note_view notes_note_lat_psxwvm on master_join_vwomoi.target_id = notes_note_lat_psxwvm.id
  where master_join_vwomoi.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_knoxrw on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['service.callsigndetail_view', 'routes.routeportion_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_ajfndn.geom AS location_geom,
    geometry_elevatedpoint_view_ajfndn.longitude AS location_longitude,
    geometry_elevatedpoint_view_ajfndn.latitude AS location_latitude,
    geometry_elevatedpoint_view_ajfndn.elevation AS location_elevation,
    geometry_elevatedpoint_view_ajfndn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ajfndn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ajfndn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ajfndn.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_dmyhpv.title as varchar), '(' || organisation_unit_pt_dmyhpv.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_dmyhpv.href AS serviceprovider_href,
    service_callsigndetail_view_npobwk.callsign as callsign,
    service_radiocommunicationchannel_pt_edsicf.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ystzii.availability as availability,
    notes_note_view_xvangv.annotation as annotation,
    airspace_airspace_pt_rsxgoo.clientairspace as clientairspace,
    routes_routeportion_view_gwzqdv.clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ajfndn on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_ajfndn.id
left join organisation.unit_pt organisation_unit_pt_dmyhpv on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_dmyhpv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_zumcwc.*) as callsign
  from master_join master_join_hwzzyp
  join service.callsigndetail_view service_callsigndetail_lat_zumcwc on master_join_hwzzyp.target_id = service_callsigndetail_lat_zumcwc.id
  where master_join_hwzzyp.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_npobwk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_woibjv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_woibjv.title AS varchar), '(' || service_radiocommunicationchannel_lat_woibjv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_woibjv.href
  )) as radiocommunication  from master_join master_join_fksxan
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_woibjv on master_join_fksxan.target_id = service_radiocommunicationchannel_lat_woibjv.id
  where master_join_fksxan.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_edsicf on TRUE
left join lateral(
  select
  from master_join master_join_aduzyr
  join shared.contactinformation_view shared_contactinformation_lat_yfhrcs on master_join_aduzyr.target_id = shared_contactinformation_lat_yfhrcs.id
  where master_join_aduzyr.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_myjstd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bqpxzx.*) as availability
  from master_join master_join_csfqbn
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bqpxzx on master_join_csfqbn.target_id = service_serviceoperationalstatus_lat_bqpxzx.id
  where master_join_csfqbn.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_ystzii on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hoavzb.*) AS annotation
  from master_join master_join_zqgkoh
  join notes.note_view notes_note_lat_hoavzb on master_join_zqgkoh.target_id = notes_note_lat_hoavzb.id
  where master_join_zqgkoh.source_id = service.searchrescueservice_ts.id
) as notes_note_view_xvangv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_hxqffc.id,
      'title', coalesce(cast(airspace_airspace_lat_hxqffc.title AS varchar), '(' || airspace_airspace_lat_hxqffc.nilreason[1] || ')'),
      'href', airspace_airspace_lat_hxqffc.href
  )) as clientairspace  from master_join master_join_sujnzl
  join airspace.airspace_pt airspace_airspace_lat_hxqffc on master_join_sujnzl.target_id = airspace_airspace_lat_hxqffc.id
  where master_join_sujnzl.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_rsxgoo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_gmdjxu.*) as clientroute
  from master_join master_join_mobprk
  join routes.routeportion_view routes_routeportion_lat_gmdjxu on master_join_mobprk.target_id = routes_routeportion_lat_gmdjxu.id
  where master_join_mobprk.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_gwzqdv on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_pfqlgy.geom AS location_geom,
    geometry_elevatedpoint_view_pfqlgy.longitude AS location_longitude,
    geometry_elevatedpoint_view_pfqlgy.latitude AS location_latitude,
    geometry_elevatedpoint_view_pfqlgy.elevation AS location_elevation,
    geometry_elevatedpoint_view_pfqlgy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pfqlgy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pfqlgy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pfqlgy.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_bgyvci.annotation as annotation,
    surveillance_surveillancegroundstation_view_manaxe.groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pfqlgy on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_pfqlgy.id
left join lateral(
  select
  from master_join master_join_yqyhsk
  join shared.contactinformation_view shared_contactinformation_lat_wqlloi on master_join_yqyhsk.target_id = shared_contactinformation_lat_wqlloi.id
  where master_join_yqyhsk.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_mtbvqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rvtzna.*) AS annotation
  from master_join master_join_cnuupr
  join notes.note_view notes_note_lat_rvtzna on master_join_cnuupr.target_id = notes_note_lat_rvtzna.id
  where master_join_cnuupr.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_bgyvci on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_qewnxv.*) as groundstation
  from master_join master_join_apmtfz
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_qewnxv on master_join_apmtfz.target_id = surveillance_surveillancegroundstation_lat_qewnxv.id
  where master_join_apmtfz.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_manaxe on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_rnckqr.title as varchar), '(' || airspace_airspace_pt_rnckqr.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_rnckqr.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_wmehol.title as varchar), '(' || navaids_points_designatedpoint_pt_wmehol.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_wmehol.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lolfvl.title as varchar), '(' || navaids_points_navaid_pt_lolfvl.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_lolfvl.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_cyvlan.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_cyvlan.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_cyvlan.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_svvwud.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_svvwud.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_svvwud.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hqpstz.title as varchar), '(' || airport_heliport_airportheliport_pt_hqpstz.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_hqpstz.href AS locationairportreferencepoint_href,
    geometry_point_view_frzvlk.geom AS locationposition_geom,
    geometry_point_view_frzvlk.longitude AS locationposition_longitude,
    geometry_point_view_frzvlk.latitude AS locationposition_latitude,
    geometry_point_view_frzvlk.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_omxztd.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_rnckqr on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_rnckqr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wmehol on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wmehol.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lolfvl on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_lolfvl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_cyvlan on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_cyvlan.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_svvwud on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_svvwud.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hqpstz on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_hqpstz.id
left join geometry.point_view geometry_point_view_frzvlk on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_frzvlk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utqoda.*) AS annotation
  from master_join master_join_yedycc
  join notes.note_view notes_note_lat_utqoda on master_join_yedycc.target_id = notes_note_lat_utqoda.id
  where master_join_yedycc.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_omxztd on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_brbvff.title as varchar), '(' || organisation_organisationauthority_pt_brbvff.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_brbvff.href AS authority_href,
    notes_note_view_ydtqld.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_brbvff on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_brbvff.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwxxxm.*) AS annotation
  from master_join master_join_txqqei
  join notes.note_view notes_note_lat_nwxxxm on master_join_txqqei.target_id = notes_note_lat_nwxxxm.id
  where master_join_txqqei.source_id = shared.specialdate_ts.id
) as notes_note_view_ydtqld on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['navaids_points.authorityforspecialnavigationstation_view', 'navaids_points.specialnavigationstationstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_lfrgvv.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_lfrgvv.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_lfrgvv.href AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_sbumlu.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_migghx.geom AS position_geom,
    geometry_elevatedpoint_view_migghx.longitude AS position_longitude,
    geometry_elevatedpoint_view_migghx.latitude AS position_latitude,
    geometry_elevatedpoint_view_migghx.elevation AS position_elevation,
    geometry_elevatedpoint_view_migghx.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_migghx.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_migghx.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_migghx.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_fkzupv.availability as availability,
    notes_note_view_pcmqog.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_lfrgvv on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_lfrgvv.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_sbumlu on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_sbumlu.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_migghx on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_migghx.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_jqvrll.*) as availability
  from master_join master_join_asfdez
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_jqvrll on master_join_asfdez.target_id = navaids_points_specialnavigationstationstatus_lat_jqvrll.id
  where master_join_asfdez.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_fkzupv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ysrbfc.*) AS annotation
  from master_join master_join_iolosu
  join notes.note_view notes_note_lat_ysrbfc on master_join_iolosu.target_id = notes_note_lat_ysrbfc.id
  where master_join_iolosu.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_pcmqog on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_nocfnx.*) AS responsibleorganisation,
    notes_note_view_zzwzbe.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_nocfnx on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_nocfnx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tdcfbl.*) AS annotation
  from master_join master_join_cflkre
  join notes.note_view notes_note_lat_tdcfbl on master_join_cflkre.target_id = notes_note_lat_tdcfbl.id
  where master_join_cflkre.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_zzwzbe on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.procedureavailability_view', 'notes.note_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_tptdjm.title as varchar), '(' || navaids_points_navaid_pt_tptdjm.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_tptdjm.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_bzpaef.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_bzpaef.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_bzpaef.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_qloaja.title as varchar), '(' || surveillance_radarsystem_pt_qloaja.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_qloaja.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_hjrzpa.title as varchar), '(' || procedure_safealtitudearea_pt_hjrzpa.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_hjrzpa.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_nbxius.*) AS arrival,
    procedure_procedureavailability_view_crzudv.availability as availability,
    airport_heliport_airportheliport_pt_mrsgqn.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_vcsuct.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_sebsil.flighttransition as flighttransition,
    notes_note_view_qdtwsc.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tptdjm on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_tptdjm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_bzpaef on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_bzpaef.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_qloaja on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_qloaja.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_hjrzpa on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_hjrzpa.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_nbxius on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_nbxius.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_sjabfy.*) as availability
  from master_join master_join_qqxgbe
  join procedure.procedureavailability_view procedure_procedureavailability_lat_sjabfy on master_join_qqxgbe.target_id = procedure_procedureavailability_lat_sjabfy.id
  where master_join_qqxgbe.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_crzudv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wfemok.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wfemok.title AS varchar), '(' || airport_heliport_airportheliport_lat_wfemok.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wfemok.href
  )) as airportheliport  from master_join master_join_ovfhkg
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wfemok on master_join_ovfhkg.target_id = airport_heliport_airportheliport_lat_wfemok.id
  where master_join_ovfhkg.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_mrsgqn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xtufvn.*) as aircraftcharacteristic
  from master_join master_join_wwizrm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xtufvn on master_join_wwizrm.target_id = shared_aircraftcharacteristic_lat_xtufvn.id
  where master_join_wwizrm.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_vcsuct on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_oqzzpt.*) as flighttransition
  from master_join master_join_krxzch
  join procedure.proceduretransition_view procedure_proceduretransition_lat_oqzzpt on master_join_krxzch.target_id = procedure_proceduretransition_lat_oqzzpt.id
  where master_join_krxzch.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_sebsil on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzbvvu.*) AS annotation
  from master_join master_join_wrgyey
  join notes.note_view notes_note_lat_wzbvvu on master_join_wrgyey.target_id = notes_note_lat_wzbvvu.id
  where master_join_wrgyey.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_qdtwsc on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.procedureavailability_view', 'notes.note_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_bmhags.title as varchar), '(' || navaids_points_navaid_pt_bmhags.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_bmhags.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_scerek.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_scerek.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_scerek.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_zaiopm.title as varchar), '(' || surveillance_radarsystem_pt_zaiopm.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_zaiopm.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_beimqr.title as varchar), '(' || procedure_safealtitudearea_pt_beimqr.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_beimqr.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ftnkbc.*) AS takeoff,
    procedure_procedureavailability_view_fosijn.availability as availability,
    airport_heliport_airportheliport_pt_dixklg.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_qenkpn.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_advkbk.flighttransition as flighttransition,
    notes_note_view_ahycrb.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bmhags on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_bmhags.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_scerek on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_scerek.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_zaiopm on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_zaiopm.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_beimqr on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_beimqr.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ftnkbc on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_ftnkbc.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_pkuips.*) as availability
  from master_join master_join_vxbydf
  join procedure.procedureavailability_view procedure_procedureavailability_lat_pkuips on master_join_vxbydf.target_id = procedure_procedureavailability_lat_pkuips.id
  where master_join_vxbydf.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_fosijn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_umqqsf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_umqqsf.title AS varchar), '(' || airport_heliport_airportheliport_lat_umqqsf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_umqqsf.href
  )) as airportheliport  from master_join master_join_ltljtf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_umqqsf on master_join_ltljtf.target_id = airport_heliport_airportheliport_lat_umqqsf.id
  where master_join_ltljtf.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_dixklg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ltyolh.*) as aircraftcharacteristic
  from master_join master_join_jntbvk
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ltyolh on master_join_jntbvk.target_id = shared_aircraftcharacteristic_lat_ltyolh.id
  where master_join_jntbvk.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_qenkpn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_iqfzdo.*) as flighttransition
  from master_join master_join_zmmqyp
  join procedure.proceduretransition_view procedure_proceduretransition_lat_iqfzdo on master_join_zmmqyp.target_id = procedure_proceduretransition_lat_iqfzdo.id
  where master_join_zmmqyp.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_advkbk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_okwdja.*) AS annotation
  from master_join master_join_wehrut
  join notes.note_view notes_note_lat_okwdja on master_join_wehrut.target_id = notes_note_lat_okwdja.id
  where master_join_wehrut.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_ahycrb on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_ueldml.title as varchar), '(' || shared_standardleveltable_pt_ueldml.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_ueldml.href AS leveltable_href,
    shared_standardlevel_view_aedcai.level as level,
    notes_note_view_kejlmb.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_ueldml on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_ueldml.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_linicu.*) as level
  from master_join master_join_cpfufh
  join shared.standardlevel_view shared_standardlevel_lat_linicu on master_join_cpfufh.target_id = shared_standardlevel_lat_linicu.id
  where master_join_cpfufh.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_aedcai on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_blwnfo.*) AS annotation
  from master_join master_join_vbnvhs
  join notes.note_view notes_note_lat_blwnfo on master_join_vbnvhs.target_id = notes_note_lat_blwnfo.id
  where master_join_vbnvhs.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_kejlmb on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_yojiyd.title as varchar), '(' || shared_standardlevelcolumn_pt_yojiyd.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_yojiyd.href AS applicablelevelcolumn_href,
    airspace_airspace_pt_rjdwml.applicableairspace as applicableairspace,
    notes_note_view_txlmwd.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_yojiyd on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_yojiyd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_pjwmwk.id,
      'title', coalesce(cast(airspace_airspace_lat_pjwmwk.title AS varchar), '(' || airspace_airspace_lat_pjwmwk.nilreason[1] || ')'),
      'href', airspace_airspace_lat_pjwmwk.href
  )) as applicableairspace  from master_join master_join_tyytrn
  join airspace.airspace_pt airspace_airspace_lat_pjwmwk on master_join_tyytrn.target_id = airspace_airspace_lat_pjwmwk.id
  where master_join_tyytrn.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_rjdwml on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kxmkdk.*) AS annotation
  from master_join master_join_gofxum
  join notes.note_view notes_note_lat_kxmkdk on master_join_gofxum.target_id = notes_note_lat_kxmkdk.id
  where master_join_gofxum.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_txlmwd on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    notes_note_view_irfozp.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utybzj.*) AS annotation
  from master_join master_join_ypuiit
  join notes.note_view notes_note_lat_utybzj on master_join_ypuiit.target_id = notes_note_lat_utybzj.id
  where master_join_ypuiit.source_id = shared.standardleveltable_ts.id
) as notes_note_view_irfozp on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_lkpaya.title as varchar), '(' || airport_heliport_aircraftstand_pt_lkpaya.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_lkpaya.href AS markedstand_href,
    airport_heliport_markingelement_view_tfrvpn.element as element,
    notes_note_view_yemfdp.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_lkpaya on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_lkpaya.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ntanhg.*) as element
  from master_join master_join_xwzhww
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ntanhg on master_join_xwzhww.target_id = airport_heliport_markingelement_lat_ntanhg.id
  where master_join_xwzhww.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_tfrvpn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uodtcw.*) AS annotation
  from master_join master_join_rysfim
  join notes.note_view notes_note_lat_uodtcw on master_join_rysfim.target_id = notes_note_lat_uodtcw.id
  where master_join_rysfim.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_yemfdp on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_fsbfag.title as varchar), '(' || airport_heliport_airportheliport_pt_fsbfag.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_fsbfag.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_rbruqk.geom AS location_geom,
    geometry_elevatedpoint_view_rbruqk.longitude AS location_longitude,
    geometry_elevatedpoint_view_rbruqk.latitude AS location_latitude,
    geometry_elevatedpoint_view_rbruqk.elevation AS location_elevation,
    geometry_elevatedpoint_view_rbruqk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rbruqk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rbruqk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rbruqk.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_teofhi.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fsbfag on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_fsbfag.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rbruqk on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_rbruqk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wflerd.*) AS annotation
  from master_join master_join_qippxh
  join notes.note_view notes_note_lat_wflerd on master_join_qippxh.target_id = notes_note_lat_wflerd.id
  where master_join_qippxh.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_teofhi on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_dofvwf.geom AS location_geom,
    geometry_elevatedpoint_view_dofvwf.longitude AS location_longitude,
    geometry_elevatedpoint_view_dofvwf.latitude AS location_latitude,
    geometry_elevatedpoint_view_dofvwf.elevation AS location_elevation,
    geometry_elevatedpoint_view_dofvwf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dofvwf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dofvwf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dofvwf.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hdvxbo.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_cxaqxx.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_sogfyf.availability as availability,
    notes_note_view_gsxqox.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dofvwf on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_dofvwf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ewcutq.*) as authority
  from master_join master_join_efzsvz
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ewcutq on master_join_efzsvz.target_id = navaids_points_authorityfornavaidequipment_lat_ewcutq.id
  where master_join_efzsvz.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_hdvxbo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mwudoa.*) as monitoring
  from master_join master_join_luntuv
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mwudoa on master_join_luntuv.target_id = navaids_points_navaidequipmentmonitoring_lat_mwudoa.id
  where master_join_luntuv.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_cxaqxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_axpdkd.*) as availability
  from master_join master_join_wrzneb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_axpdkd on master_join_wrzneb.target_id = navaids_points_navaidoperationalstatus_lat_axpdkd.id
  where master_join_wrzneb.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_sogfyf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pufhgb.*) AS annotation
  from master_join master_join_wrcded
  join notes.note_view notes_note_lat_pufhgb on master_join_wrcded.target_id = notes_note_lat_pufhgb.id
  where master_join_wrcded.source_id = navaids_points.tacan_ts.id
) as notes_note_view_gsxqox on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_lafaaf.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_lafaaf.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_lafaaf.href AS taxiholding_href,
    shared_lightelement_view_phmbqe.element as element,
    airport_heliport_groundlightingavailability_view_cropdy.availability as availability,
    notes_note_view_ttuxsw.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_lafaaf on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_lafaaf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_zgjklb.*) as element
  from master_join master_join_wkknnt
  join shared.lightelement_view shared_lightelement_lat_zgjklb on master_join_wkknnt.target_id = shared_lightelement_lat_zgjklb.id
  where master_join_wkknnt.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_phmbqe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_nnqewu.*) as availability
  from master_join master_join_xzyduw
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_nnqewu on master_join_xzyduw.target_id = airport_heliport_groundlightingavailability_lat_nnqewu.id
  where master_join_xzyduw.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_cropdy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yqiutm.*) AS annotation
  from master_join master_join_jphfak
  join notes.note_view notes_note_lat_yqiutm on master_join_jphfak.target_id = notes_note_lat_yqiutm.id
  where master_join_jphfak.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_ttuxsw on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_rzohio.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_rzohio.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_rzohio.href AS markedtaxihold_href,
    airport_heliport_markingelement_view_dokdiw.element as element,
    notes_note_view_swhfcm.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_rzohio on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_rzohio.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ypecnv.*) as element
  from master_join master_join_cicqaz
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ypecnv on master_join_cicqaz.target_id = airport_heliport_markingelement_lat_ypecnv.id
  where master_join_cicqaz.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_dokdiw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_voljzt.*) AS annotation
  from master_join master_join_bsprnd
  join notes.note_view notes_note_lat_voljzt on master_join_bsprnd.target_id = notes_note_lat_voljzt.id
  where master_join_bsprnd.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_swhfcm on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_tphsus.title as varchar), '(' || airport_heliport_guidanceline_pt_tphsus.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_tphsus.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_lbxgiy.geom AS location_geom,
    geometry_elevatedpoint_view_lbxgiy.longitude AS location_longitude,
    geometry_elevatedpoint_view_lbxgiy.latitude AS location_latitude,
    geometry_elevatedpoint_view_lbxgiy.elevation AS location_elevation,
    geometry_elevatedpoint_view_lbxgiy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lbxgiy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lbxgiy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lbxgiy.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_xdwenz.protectedrunway as protectedrunway,
    notes_note_view_thjgqo.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_tphsus on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_tphsus.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lbxgiy on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_lbxgiy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_lkvtaa.id,
      'title', coalesce(cast(airport_heliport_runway_lat_lkvtaa.title AS varchar), '(' || airport_heliport_runway_lat_lkvtaa.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_lkvtaa.href
  )) as protectedrunway  from master_join master_join_llpkiu
  join airport_heliport.runway_pt airport_heliport_runway_lat_lkvtaa on master_join_llpkiu.target_id = airport_heliport_runway_lat_lkvtaa.id
  where master_join_llpkiu.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_xdwenz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_amobss.*) AS annotation
  from master_join master_join_kfguti
  join notes.note_view notes_note_lat_amobss on master_join_kfguti.target_id = notes_note_lat_amobss.id
  where master_join_kfguti.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_thjgqo on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nvbdtk.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_xcduhs.title as varchar), '(' || airport_heliport_taxiway_pt_xcduhs.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_xcduhs.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_obqlnr.geom AS extent_geom,
    geometry_elevatedsurface_view_obqlnr.elevation AS extent_elevation,
    geometry_elevatedsurface_view_obqlnr.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_obqlnr.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_obqlnr.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_obqlnr.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ebmfkf.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_enuwmq.availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nvbdtk on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nvbdtk.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_xcduhs on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_xcduhs.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_obqlnr on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_obqlnr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srrmvc.*) AS annotation
  from master_join master_join_cvcwnk
  join notes.note_view notes_note_lat_srrmvc on master_join_cvcwnk.target_id = notes_note_lat_srrmvc.id
  where master_join_cvcwnk.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_ebmfkf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_lrkasw.*) as availability
  from master_join master_join_lngqyp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_lrkasw on master_join_lngqyp.target_id = airport_heliport_manoeuvringareaavailability_lat_lrkasw.id
  where master_join_lngqyp.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_enuwmq on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_xmyvfj.title as varchar), '(' || airport_heliport_taxiway_pt_xmyvfj.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_xmyvfj.href AS lightedtaxiway_href,
    shared_lightelement_view_doufnc.element as element,
    airport_heliport_groundlightingavailability_view_jxrzvl.availability as availability,
    notes_note_view_mqnyog.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_xmyvfj on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_xmyvfj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cddmyv.*) as element
  from master_join master_join_bhyqiv
  join shared.lightelement_view shared_lightelement_lat_cddmyv on master_join_bhyqiv.target_id = shared_lightelement_lat_cddmyv.id
  where master_join_bhyqiv.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_doufnc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_kbzvyd.*) as availability
  from master_join master_join_qevopd
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_kbzvyd on master_join_qevopd.target_id = airport_heliport_groundlightingavailability_lat_kbzvyd.id
  where master_join_qevopd.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_jxrzvl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppnymj.*) AS annotation
  from master_join master_join_extjhb
  join notes.note_view notes_note_lat_ppnymj on master_join_extjhb.target_id = notes_note_lat_ppnymj.id
  where master_join_extjhb.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_mqnyog on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_sructi.title as varchar), '(' || airport_heliport_taxiway_pt_sructi.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_sructi.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_epwtal.title as varchar), '(' || airport_heliport_taxiwayelement_pt_epwtal.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_epwtal.href AS markedelement_href,
    airport_heliport_markingelement_view_dtnlap.element as element,
    notes_note_view_swmdgr.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_sructi on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_sructi.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_epwtal on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_epwtal.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fxcrdh.*) as element
  from master_join master_join_akcdzl
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fxcrdh on master_join_akcdzl.target_id = airport_heliport_markingelement_lat_fxcrdh.id
  where master_join_akcdzl.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_dtnlap on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrxqba.*) AS annotation
  from master_join master_join_eohxqa
  join notes.note_view notes_note_lat_vrxqba on master_join_eohxqa.target_id = notes_note_lat_vrxqba.id
  where master_join_eohxqa.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_swmdgr on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.taxiwaycontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_epjxlx.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_yxsbyj.title as varchar), '(' || airport_heliport_airportheliport_pt_yxsbyj.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_yxsbyj.href AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_ppzvaj.contaminant as contaminant,
    notes_note_view_ajqtdw.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_knpuxd.availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_epjxlx on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_epjxlx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yxsbyj on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_yxsbyj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_iufzcl.*) as contaminant
  from master_join master_join_efmjlr
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_iufzcl on master_join_efmjlr.target_id = airport_heliport_taxiwaycontamination_lat_iufzcl.id
  where master_join_efmjlr.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_ppzvaj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdkklh.*) AS annotation
  from master_join master_join_eaejni
  join notes.note_view notes_note_lat_mdkklh on master_join_eaejni.target_id = notes_note_lat_mdkklh.id
  where master_join_eaejni.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_ajqtdw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_chpqxj.*) as availability
  from master_join master_join_plrehy
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_chpqxj on master_join_plrehy.target_id = airport_heliport_manoeuvringareaavailability_lat_chpqxj.id
  where master_join_plrehy.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_knpuxd on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.surface_view', 'procedure.terminalarrivalareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_noqbir.title as varchar), '(' || navaids_points_designatedpoint_pt_noqbir.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_noqbir.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_edvtnh.title as varchar), '(' || navaids_points_designatedpoint_pt_edvtnh.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_edvtnh.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qwcmbx.title as varchar), '(' || navaids_points_navaid_pt_qwcmbx.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_qwcmbx.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_gpitap.title as varchar), '(' || navaids_points_navaid_pt_gpitap.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_gpitap.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sfvwkn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sfvwkn.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_sfvwkn.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_azegxi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_azegxi.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_azegxi.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cnnviv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cnnviv.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cnnviv.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nrtwjt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nrtwjt.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nrtwjt.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qazwxy.title as varchar), '(' || airport_heliport_airportheliport_pt_qazwxy.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_qazwxy.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zpqylz.title as varchar), '(' || airport_heliport_airportheliport_pt_zpqylz.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_zpqylz.href AS iafairportreferencepoint_href,
    geometry_point_view_vsizkg.geom AS ifposition_geom,
    geometry_point_view_vsizkg.longitude AS ifposition_longitude,
    geometry_point_view_vsizkg.latitude AS ifposition_latitude,
    geometry_point_view_vsizkg.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_jrytlh.geom AS iafposition_geom,
    geometry_point_view_jrytlh.longitude AS iafposition_longitude,
    geometry_point_view_jrytlh.latitude AS iafposition_latitude,
    geometry_point_view_jrytlh.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_hifpbr.geom AS buffer_geom,
    geometry_surface_view_hifpbr.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_itdhio.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_itdhio.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_itdhio.href AS approachrnav_href,
    procedure_terminalarrivalareasector_view_pgjqct.sector as sector,
    notes_note_view_zpdhfs.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_noqbir on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_noqbir.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qwcmbx on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_qwcmbx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sfvwkn on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sfvwkn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cnnviv on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cnnviv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qazwxy on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_qazwxy.id
left join geometry.point_view geometry_point_view_vsizkg on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_vsizkg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_edvtnh on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_edvtnh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gpitap on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_gpitap.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_azegxi on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_azegxi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nrtwjt on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nrtwjt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zpqylz on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_zpqylz.id
left join geometry.point_view geometry_point_view_jrytlh on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_jrytlh.id
left join geometry.surface_view geometry_surface_view_hifpbr on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_hifpbr.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_itdhio on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_itdhio.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_ieeqtb.*) as sector
  from master_join master_join_zinigl
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_ieeqtb on master_join_zinigl.target_id = procedure_terminalarrivalareasector_lat_ieeqtb.id
  where master_join_zinigl.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_pgjqct on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnyahz.*) AS annotation
  from master_join master_join_kwyzkz
  join notes.note_view notes_note_lat_lnyahz on master_join_kwyzkz.target_id = notes_note_lat_lnyahz.id
  where master_join_kwyzkz.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_zpdhfs on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uodwdl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uodwdl.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_uodwdl.href AS lightedtouchdownliftoff_href,
    shared_lightelement_view_wxktjt.element as element,
    airport_heliport_groundlightingavailability_view_opwrlg.availability as availability,
    notes_note_view_lgcifx.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uodwdl on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_uodwdl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_dhegov.*) as element
  from master_join master_join_qlotds
  join shared.lightelement_view shared_lightelement_lat_dhegov on master_join_qlotds.target_id = shared_lightelement_lat_dhegov.id
  where master_join_qlotds.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_wxktjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mwxora.*) as availability
  from master_join master_join_kgeisl
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mwxora on master_join_kgeisl.target_id = airport_heliport_groundlightingavailability_lat_mwxora.id
  where master_join_kgeisl.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_opwrlg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgyaiz.*) AS annotation
  from master_join master_join_jxjolm
  join notes.note_view notes_note_lat_vgyaiz on master_join_jxjolm.target_id = notes_note_lat_vgyaiz.id
  where master_join_jxjolm.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_lgcifx on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yukeum.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yukeum.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_yukeum.href AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_unjqra.element as element,
    notes_note_view_bnjpxh.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yukeum on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_yukeum.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ybpomp.*) as element
  from master_join master_join_zjotlz
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ybpomp on master_join_zjotlz.target_id = airport_heliport_markingelement_lat_ybpomp.id
  where master_join_zjotlz.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_unjqra on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zacxkn.*) AS annotation
  from master_join master_join_okjxon
  join notes.note_view notes_note_lat_zacxkn on master_join_okjxon.target_id = notes_note_lat_zacxkn.id
  where master_join_okjxon.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_bnjpxh on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gthwpw.*) AS surfaceproperties,
    geometry_elevatedsurface_view_grtawc.geom AS extent_geom,
    geometry_elevatedsurface_view_grtawc.elevation AS extent_elevation,
    geometry_elevatedsurface_view_grtawc.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_grtawc.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_grtawc.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_grtawc.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qtliax.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qtliax.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_qtliax.href AS protectedtouchdownliftoff_href,
    notes_note_view_rfuaba.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gthwpw on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gthwpw.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_grtawc on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_grtawc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qtliax on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_qtliax.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uzrfqb.*) AS annotation
  from master_join master_join_eznbie
  join notes.note_view notes_note_lat_uzrfqb on master_join_eznbie.target_id = notes_note_lat_uzrfqb.id
  where master_join_eznbie.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_rfuaba on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'airport_heliport.touchdownliftoffcontamination_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_mbzqjy.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_mbzqjy.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_mbzqjy.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_mbzqjy.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_mbzqjy.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_mbzqjy.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_mbzqjy.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_mbzqjy.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_xndxdq.geom AS extent_geom,
    geometry_elevatedsurface_view_xndxdq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xndxdq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xndxdq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xndxdq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xndxdq.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rvlyxf.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_jlshrm.title as varchar), '(' || airport_heliport_airportheliport_pt_jlshrm.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_jlshrm.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_ahszmd.title as varchar), '(' || airport_heliport_runway_pt_ahszmd.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_ahszmd.href AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_wdzbgx.contaminant as contaminant,
    notes_note_view_ufaheh.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_uovcjs.availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mbzqjy on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_mbzqjy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xndxdq on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_xndxdq.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rvlyxf on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rvlyxf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jlshrm on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_jlshrm.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_ahszmd on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_ahszmd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_bpwuul.*) as contaminant
  from master_join master_join_hbxmnu
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_bpwuul on master_join_hbxmnu.target_id = airport_heliport_touchdownliftoffcontamination_lat_bpwuul.id
  where master_join_hbxmnu.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_wdzbgx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zmfqcy.*) AS annotation
  from master_join master_join_faqkun
  join notes.note_view notes_note_lat_zmfqcy on master_join_faqkun.target_id = notes_note_lat_zmfqcy.id
  where master_join_faqkun.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_ufaheh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_phiocp.*) as availability
  from master_join master_join_poddrh
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_phiocp on master_join_poddrh.target_id = airport_heliport_manoeuvringareaavailability_lat_phiocp.id
  where master_join_poddrh.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_uovcjs on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['geometry.elevatedpoint_view', 'organisation.unitavailability_view', 'notes.note_view', 'shared.contactinformation_view', 'organisation.unitdependency_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_yjmgmg.geom AS position_geom,
    geometry_elevatedpoint_view_yjmgmg.longitude AS position_longitude,
    geometry_elevatedpoint_view_yjmgmg.latitude AS position_latitude,
    geometry_elevatedpoint_view_yjmgmg.elevation AS position_elevation,
    geometry_elevatedpoint_view_yjmgmg.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_yjmgmg.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_yjmgmg.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_yjmgmg.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_rwxaac.title as varchar), '(' || airport_heliport_airportheliport_pt_rwxaac.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_rwxaac.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_mwlbso.title as varchar), '(' || organisation_organisationauthority_pt_mwlbso.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_mwlbso.href AS ownerorganisation_href,
    organisation_unitdependency_view_lxqbpw.relatedunit as relatedunit,
    organisation_unitavailability_view_oycxdp.availability as availability,
    notes_note_view_rftykz.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yjmgmg on organisation.unit_ts.position_id = geometry_elevatedpoint_view_yjmgmg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rwxaac on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_rwxaac.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mwlbso on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_mwlbso.id
left join lateral(
  select
  from master_join master_join_dzchzk
  join shared.contactinformation_view shared_contactinformation_lat_zrupdy on master_join_dzchzk.target_id = shared_contactinformation_lat_zrupdy.id
  where master_join_dzchzk.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_ykixxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_ftmqaa.*) as relatedunit
  from master_join master_join_rafudt
  join organisation.unitdependency_view organisation_unitdependency_lat_ftmqaa on master_join_rafudt.target_id = organisation_unitdependency_lat_ftmqaa.id
  where master_join_rafudt.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_lxqbpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_mddpmp.*) as availability
  from master_join master_join_woztdq
  join organisation.unitavailability_view organisation_unitavailability_lat_mddpmp on master_join_woztdq.target_id = organisation_unitavailability_lat_mddpmp.id
  where master_join_woztdq.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_oycxdp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_avjkgq.*) AS annotation
  from master_join master_join_pkheaz
  join notes.note_view notes_note_lat_avjkgq on master_join_pkheaz.target_id = notes_note_lat_avjkgq.id
  where master_join_pkheaz.source_id = organisation.unit_ts.id
) as notes_note_view_rftykz on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    notes_note_view_junavk.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yscupv.*) AS annotation
  from master_join master_join_jbdowp
  join notes.note_view notes_note_lat_yscupv on master_join_jbdowp.target_id = notes_note_lat_yscupv.id
  where master_join_jbdowp.source_id = holding.unplannedholding_ts.id
) as notes_note_view_junavk on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurepart_view', 'notes.note_view', 'obstacles.verticalstructurelightingstatus_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_sehssb.title as varchar), '(' || navaids_points_markerbeacon_pt_sehssb.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_sehssb.href AS marker_href,
    obstacles_verticalstructurepart_view_zneics.part as part,
    service_passengerservice_pt_mftuco.hostedpassengerservice as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_mbmcsa.hostedspecialnavstation as hostedspecialnavstation,
    organisation_unit_pt_zhfiiq.hostedunit as hostedunit,
    organisation_organisationauthority_pt_vgtkmn.hostedorganisation as hostedorganisation,
    notes_note_view_mvrpwl.annotation as annotation,
    obstacles_verticalstructurelightingstatus_view_xmkiub.lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_sehssb on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_sehssb.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_sjfdvb.*) as part
  from master_join master_join_sbjcbb
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_sjfdvb on master_join_sbjcbb.target_id = obstacles_verticalstructurepart_lat_sjfdvb.id
  where master_join_sbjcbb.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_zneics on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_ugyfmf.id,
      'title', coalesce(cast(service_passengerservice_lat_ugyfmf.title AS varchar), '(' || service_passengerservice_lat_ugyfmf.nilreason[1] || ')'),
      'href', service_passengerservice_lat_ugyfmf.href
  )) as hostedpassengerservice  from master_join master_join_rjkssp
  join service.passengerservice_pt service_passengerservice_lat_ugyfmf on master_join_rjkssp.target_id = service_passengerservice_lat_ugyfmf.id
  where master_join_rjkssp.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_mftuco on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_agzcnv.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_agzcnv.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_agzcnv.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_agzcnv.href
  )) as hostedspecialnavstation  from master_join master_join_bmjkad
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_agzcnv on master_join_bmjkad.target_id = navaids_points_specialnavigationstation_lat_agzcnv.id
  where master_join_bmjkad.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_mbmcsa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_rrmmvh.id,
      'title', coalesce(cast(organisation_unit_lat_rrmmvh.title AS varchar), '(' || organisation_unit_lat_rrmmvh.nilreason[1] || ')'),
      'href', organisation_unit_lat_rrmmvh.href
  )) as hostedunit  from master_join master_join_ruxggo
  join organisation.unit_pt organisation_unit_lat_rrmmvh on master_join_ruxggo.target_id = organisation_unit_lat_rrmmvh.id
  where master_join_ruxggo.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_zhfiiq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fihzbq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fihzbq.title AS varchar), '(' || organisation_organisationauthority_lat_fihzbq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fihzbq.href
  )) as hostedorganisation  from master_join master_join_lvxgrb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fihzbq on master_join_lvxgrb.target_id = organisation_organisationauthority_lat_fihzbq.id
  where master_join_lvxgrb.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_vgtkmn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qfsajg.*) AS annotation
  from master_join master_join_kixbyg
  join notes.note_view notes_note_lat_qfsajg on master_join_kixbyg.target_id = notes_note_lat_qfsajg.id
  where master_join_kixbyg.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_mvrpwl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_zejzdj.*) as lightingavailability
  from master_join master_join_xsepup
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_zejzdj on master_join_xsepup.target_id = obstacles_verticalstructurelightingstatus_lat_zejzdj.id
  where master_join_xsepup.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_xmkiub on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_eihtcc.title as varchar), '(' || airport_heliport_runwaydirection_pt_eihtcc.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_eihtcc.href AS runwaydirection_href,
    shared_lightelement_view_rjntok.element as element,
    airport_heliport_groundlightingavailability_view_mtzmsp.availability as availability,
    notes_note_view_zlqzfm.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_eihtcc on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_eihtcc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ngbrdr.*) as element
  from master_join master_join_ojazya
  join shared.lightelement_view shared_lightelement_lat_ngbrdr on master_join_ojazya.target_id = shared_lightelement_lat_ngbrdr.id
  where master_join_ojazya.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_rjntok on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_xvcwqn.*) as availability
  from master_join master_join_mjgock
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_xvcwqn on master_join_mjgock.target_id = airport_heliport_groundlightingavailability_lat_xvcwqn.id
  where master_join_mjgock.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_mtzmsp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zvctfn.*) AS annotation
  from master_join master_join_avfzts
  join notes.note_view notes_note_lat_zvctfn on master_join_avfzts.target_id = notes_note_lat_zvctfn.id
  where master_join_avfzts.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_zlqzfm on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_vydrvn.geom AS location_geom,
    geometry_elevatedpoint_view_vydrvn.longitude AS location_longitude,
    geometry_elevatedpoint_view_vydrvn.latitude AS location_latitude,
    geometry_elevatedpoint_view_vydrvn.elevation AS location_elevation,
    geometry_elevatedpoint_view_vydrvn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vydrvn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vydrvn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vydrvn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_egfsjd.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_bhhznz.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_nyacfh.availability as availability,
    notes_note_view_qdrhvs.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vydrvn on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_vydrvn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_hwidpw.*) as authority
  from master_join master_join_ixtnpu
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_hwidpw on master_join_ixtnpu.target_id = navaids_points_authorityfornavaidequipment_lat_hwidpw.id
  where master_join_ixtnpu.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_egfsjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vriwjn.*) as monitoring
  from master_join master_join_zfqlsf
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vriwjn on master_join_zfqlsf.target_id = navaids_points_navaidequipmentmonitoring_lat_vriwjn.id
  where master_join_zfqlsf.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bhhznz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_apuqnp.*) as availability
  from master_join master_join_hubwgj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_apuqnp on master_join_hubwgj.target_id = navaids_points_navaidoperationalstatus_lat_apuqnp.id
  where master_join_hubwgj.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_nyacfh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rmeklx.*) AS annotation
  from master_join master_join_exuqqu
  join notes.note_view notes_note_lat_rmeklx on master_join_exuqqu.target_id = notes_note_lat_rmeklx.id
  where master_join_exuqqu.source_id = navaids_points.vor_ts.id
) as notes_note_view_qdrhvs on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_jqlyjq.title as varchar), '(' || airport_heliport_airportheliport_pt_jqlyjq.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_jqlyjq.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_flpxqo.geom AS extent_geom,
    geometry_elevatedsurface_view_flpxqo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_flpxqo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_flpxqo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_flpxqo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_flpxqo.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_fmxgvd.activation as activation,
    notes_note_view_guaqwh.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jqlyjq on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_jqlyjq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_flpxqo on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_flpxqo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_iljbsk.*) as activation
  from master_join master_join_rltsho
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_iljbsk on master_join_rltsho.target_id = airport_heliport_workareaactivity_lat_iljbsk.id
  where master_join_rltsho.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_fmxgvd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbcmin.*) AS annotation
  from master_join master_join_nkmeyk
  join notes.note_view notes_note_lat_wbcmin on master_join_nkmeyk.target_id = notes_note_lat_wbcmin.id
  where master_join_nkmeyk.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_guaqwh on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
